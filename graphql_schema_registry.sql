--
-- PostgreSQL database dump
--

-- Dumped from database version 13.3
-- Dumped by pg_dump version 13.5 (Debian 13.5-0+deb11u1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: deploymentstatusenum; Type: TYPE; Schema: public; Owner: graphql_schema_registry
--

CREATE TYPE public.deploymentstatusenum AS ENUM (
    'Success',
    'ComposeFailed'
);


ALTER TYPE public.deploymentstatusenum OWNER TO graphql_schema_registry;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: deployment_records; Type: TABLE; Schema: public; Owner: graphql_schema_registry
--

CREATE TABLE public.deployment_records (
    id character varying(255) NOT NULL,
    service_id character varying(255) NOT NULL,
    schema_version character varying(100) NOT NULL,
    supergraph_id character varying(255) NOT NULL,
    deployment_status public.deploymentstatusenum,
    type_defs text,
    inserted_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.deployment_records OWNER TO graphql_schema_registry;

--
-- Name: flyway_schema_history; Type: TABLE; Schema: public; Owner: graphql_schema_registry
--

CREATE TABLE public.flyway_schema_history (
    installed_rank integer NOT NULL,
    version character varying(50),
    description character varying(200) NOT NULL,
    type character varying(20) NOT NULL,
    script character varying(1000) NOT NULL,
    checksum integer,
    installed_by character varying(100) NOT NULL,
    installed_on timestamp without time zone DEFAULT now() NOT NULL,
    execution_time integer NOT NULL,
    success boolean NOT NULL
);


ALTER TABLE public.flyway_schema_history OWNER TO graphql_schema_registry;

--
-- Name: schemas; Type: TABLE; Schema: public; Owner: graphql_schema_registry
--

CREATE TABLE public.schemas (
    id character varying(255) NOT NULL,
    service_id character varying(255) NOT NULL,
    type_defs text,
    inserted_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.schemas OWNER TO graphql_schema_registry;

--
-- Name: service_schema_record_activations; Type: TABLE; Schema: public; Owner: graphql_schema_registry
--

CREATE TABLE public.service_schema_record_activations (
    id character varying(255) NOT NULL,
    service_id character varying(255) NOT NULL,
    schema_id character varying(255) NOT NULL,
    inserted_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.service_schema_record_activations OWNER TO graphql_schema_registry;

--
-- Name: service_schema_records; Type: TABLE; Schema: public; Owner: graphql_schema_registry
--

CREATE TABLE public.service_schema_records (
    id character varying(255) NOT NULL,
    service_id character varying(255) NOT NULL,
    schema_id character varying(255) NOT NULL,
    version character varying(100) NOT NULL,
    inserted_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.service_schema_records OWNER TO graphql_schema_registry;

--
-- Name: services; Type: TABLE; Schema: public; Owner: graphql_schema_registry
--

CREATE TABLE public.services (
    id character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    is_active boolean DEFAULT true NOT NULL,
    inserted_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    url character varying(511) NOT NULL
);


ALTER TABLE public.services OWNER TO graphql_schema_registry;

--
-- Name: supergraph_records; Type: TABLE; Schema: public; Owner: graphql_schema_registry
--

CREATE TABLE public.supergraph_records (
    id character varying(255) NOT NULL,
    encoded_supergraph_schema text,
    inserted_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.supergraph_records OWNER TO graphql_schema_registry;

--
-- Data for Name: flyway_schema_history; Type: TABLE DATA; Schema: public; Owner: graphql_schema_registry
--

COPY public.flyway_schema_history (installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) FROM stdin;
1	1	create demo table	SQL	V1__create_demo_table.sql	-1490168436	graphql_schema_registry	2021-12-07 19:21:17.890783	31	t
2	20210727201559	create schema registry table	SQL	V20210727201559__create_schema_registry_table.sql	861697429	graphql_schema_registry	2021-12-07 19:21:18.000666	57	t
3	20210908110746	add schema uploading tables	SQL	V20210908110746__add_schema_uploading_tables.sql	-848472777	graphql_schema_registry	2021-12-07 19:21:18.103343	51	t
4	20210910000835	make deployment records status enum	SQL	V20210910000835__make_deployment_records_status_enum.sql	239016943	graphql_schema_registry	2021-12-07 19:21:18.189896	27	t
5	20210930165648	add url in services	SQL	V20210930165648__add_url_in_services.sql	-968214937	graphql_schema_registry	2021-12-07 19:21:18.256483	58	t
6	20211022024451	loose supergraph id fk constraint in deployment record	SQL	V20211022024451__loose_supergraph_id_fk_constraint_in_deployment_record.sql	-1045083636	graphql_schema_registry	2021-12-07 19:21:18.348778	14	t
7	20220213174011	add schema record activation record table	SQL	V20220213174011__add_schema_record_activation_record_table.sql	-547518447	graphql_schema_registry	2022-02-25 21:51:05.045212	64	t
\.

COPY public.services (id, name, is_active, inserted_at, updated_at, url) FROM stdin;
sv_ckwwkl97x000a0e42crg0mk0h	expenses-dgs	t	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12	http://expenses-dgs:8080/v1/graphql
sv_ckwwklx3a000c0e42a95s2wzb	requests-dgs	t	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12	http://requests-dgs:8080/v1/graphql
sv_ckwwkmg94000e0e427i4onev8	policies-dgs	t	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12	http://policies-dgs:8080/v1/graphql
sv_ckwwkn11z000g0e425ef0dtpo	hierarchies-dgs	t	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12	http://hierarchies-dgs:8080/v1/graphql
sv_ckwwkkp9l00020e420yyi9lxn	budgets-dgs	t	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12	http://budgets-dgs:8080/v1/graphql
sv_ckwwkjzrg00000e42je5usvpp	api-v1	t	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12	http://api-federation:9000/v1/graphql
sv_cl02z9e17001w0e1884qstooi	insights-dgs	t	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12	http://insights-dgs:8080/v1/graphql
\.


COPY public.service_schema_record_activations (id, service_id, schema_id, inserted_at, updated_at) FROM stdin;
ssra_cl10a1q6800220e60lcc2i1a6	sv_cl02z9e17001w0e1884qstooi	sm_cl10a1q68001y0e60kpadt3pj	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssra_cl109y2eh001s0e60jkmlndax	sv_ckwwkn11z000g0e425ef0dtpo	sm_cl109y2eh001o0e608wiur9rq	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssra_cl109xnh000180e60nlux4u55	sv_ckwwklx3a000c0e42a95s2wzb	sm_cl109xnh000140e6099qvyxbj	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssra_cl109xm51000y0e60s0wsk5ps	sv_ckwwkkp9l00020e420yyi9lxn	sm_cl109xm51000u0e60hk04vq90	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssra_cl109x3np000o0e60pwom3gz8	sv_ckwwkl97x000a0e42crg0mk0h	sm_cl109x3np000k0e608ydipjrj	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssra_cl109wxxi000e0e60w9yv89qw	sv_ckwwkmg94000e0e427i4onev8	sm_cl109wxxh000a0e603t4ne8an	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssra_cl109wgzr00040e600ltrfvfu	sv_ckwwkjzrg00000e42je5usvpp	sm_cl109wgz900000e606abkjo0y	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
\.


COPY public.service_schema_records (id, service_id, schema_id, version, inserted_at, updated_at) FROM stdin;
ssr_cl109wgzg00020e60epgffjcf	sv_ckwwkjzrg00000e42je5usvpp	sm_cl109wgz900000e606abkjo0y	ef34d34bb77e1e95f9f3e5a519cb8bb35197801c7f8ed953ef7e0e1e04c09227	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssr_cl109wxxh000c0e60a5mtmwf3	sv_ckwwkmg94000e0e427i4onev8	sm_cl109wxxh000a0e603t4ne8an	66ce38328b2708bff468cecdd7e4d8b0be9bec86fed5c69775ddae4f638d7db8	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssr_cl109x3np000m0e607t70hute	sv_ckwwkl97x000a0e42crg0mk0h	sm_cl109x3np000k0e608ydipjrj	d379b1694bd13154929663ab97083f7530da2944f257d76bbe8f1183e2646faa	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssr_cl109xm51000w0e6091xu2p82	sv_ckwwkkp9l00020e420yyi9lxn	sm_cl109xm51000u0e60hk04vq90	4ce2460b74e1f533abcbed6b2c782ccb27266f67b96b2bee1792f2b85dc6d6fe	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssr_cl109xnh000160e602jfzqvrt	sv_ckwwklx3a000c0e42a95s2wzb	sm_cl109xnh000140e6099qvyxbj	348ce39f2ff0783c1b41a019743e7e7e70552c9756d33063bdaca7c0f1598155	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssr_cl109y2eh001q0e60bjt8sj1p	sv_ckwwkn11z000g0e425ef0dtpo	sm_cl109y2eh001o0e608wiur9rq	3ff43b8c63dc6e622c75fcc35c3ac424d64c075dffe9e51f207fbf6912d66304	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssr_cl10a1q6800200e604i84qk2g	sv_cl02z9e17001w0e1884qstooi	sm_cl10a1q68001y0e60kpadt3pj	9fd75362bcf16a047924e70cac31b0073c4a8b6027813bfb57091241f7358557	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
\.


COPY public.schemas (id, service_id, type_defs, inserted_at, updated_at) FROM stdin;
sm_cl109wgz900000e606abkjo0y	sv_ckwwkjzrg00000e42je5usvpp	schema {\n  query: RootQueryType\n  mutation: RootMutationType\n}\n\ntype RootMutationType {\n  reconnectErpFeed(input: ReconnectErpFeedInput!): ReconnectErpFeedPayload\n  finalizeConnectCredential(input: FinalizeConnectCredentialInput!): FinalizeConnectCredentialPayload\n  updateEarlyAccessFeatureJoinStatus(input: UpdateEarlyAccessFeatureJoinStatusInput!): UpdateEarlyAccessFeatureJoinStatusPayload\n  cancelCashTransaction(input: CancelCashTransactionInput!): CancelCashTransactionPayload\n  processAccountClosure(input: ProcessAccountClosureInput!): ProcessAccountClosurePayload\n  createPayment(input: CreatePaymentInput!): CreatePaymentPayload\n  \"\"\"Create a connection with the vendor\"\"\"\n  createHrisConnection(input: CreateHrisConnectionInput!): CreateHrisConnectionPayload\n  updateExpensesSettingAutoDismissMatcherJson(input: UpdateExpensesSettingAutoDismissMatcherJsonInput!): UpdateExpensesSettingAutoDismissMatcherJsonPayload\n  redeemForBalance(input: RedeemForBalanceInput!): RedeemForBalancePayload\n  \"\"\"Bulk create contacts\"\"\"\n  batchCreateContacts(input: BatchCreateContactsInput!): BatchCreateContactsPayload\n  setReceivablesOffersOptedOutOfInstantPayouts(input: SetReceivablesOffersOptedOutOfInstantPayoutsInput!): SetReceivablesOffersOptedOutOfInstantPayoutsPayload\n  finicityConnectGenerateFixUrl(input: FinicityConnectGenerateFixUrlInput!): FinicityConnectGenerateFixUrlPayload\n  createCounterparty(input: CreateCounterpartyInput!): CreateCounterpartyPayload\n  enableReimbursements(input: EnableReimbursementsInput!): EnableReimbursementsPayload\n  redeemStatementEntryRefund(input: RedeemStatementEntryRefundInput!): RedeemStatementEntryRefundPayload\n  deleteDepartment(input: DeleteDepartmentInput!): DeleteDepartmentPayload\n  referUser(input: ReferUserInput!): ReferUserPayload\n  pullDataAsync(input: PullDataAsyncInput!): PullDataAsyncPayload\n  createNonPrimaryDepositsAccount(input: CreateNonPrimaryDepositsAccountInput!): CreateNonPrimaryDepositsAccountPayload\n  cancelCashRecurringSchedule(input: CancelCashRecurringScheduleInput!): CancelCashRecurringSchedulePayload\n  bulkDisconnectErpFeeds(input: BulkDisconnectErpFeedsInput!): BulkDisconnectErpFeedsPayload\n  createPremiumSettingEvent(input: CreatePremiumSettingEventInput!): CreatePremiumSettingEventPayload\n  sendMobileChequeDepositNotification(input: SendMobileChequeDepositNotificationInput!): SendMobileChequeDepositNotificationPayload\n  \"\"\"Submits a response to an existing RFI.\"\"\"\n  createResponseToRfi(input: CreateResponseToRfiInput!): CreateResponseToRfiPayload\n  \"\"\"Allows a user to opt into an incentive campaign\"\"\"\n  optIntoIncentiveCampaign(input: OptIntoIncentiveCampaignInput!): OptIntoIncentiveCampaignPayload\n  deleteLocation(input: DeleteLocationInput!): DeleteLocationPayload\n  \"\"\"Disconnected FSP and a client\"\"\"\n  disconnectFspAndClient(input: DisconnectFspAndClientInput!): DisconnectFspAndClientPayload\n  createCredential(input: CreateCredentialInput!): CreateCredentialPayload\n  generateDepositsVerificationLetterDownloadUrl(input: GenerateDepositsVerificationLetterDownloadUrlInput!): GenerateDepositsVerificationLetterDownloadUrlPayload\n  toggleRuleForStatementEntry(input: ToggleRuleForStatementEntryInput!): ToggleRuleForStatementEntryPayload\n  completePendingRecordApprovalLoggedOut(input: CompletePendingRecordApprovalLoggedOutInput!): CompletePendingRecordApprovalLoggedOutPayload\n  processDocument(input: ProcessDocumentInput!): ProcessDocumentPayload\n  bulkInviteUsers(input: BulkInviteUsersInput!): BulkInviteUsersPayload\n  activateIntegration(input: ActivateIntegrationInput!): ActivateIntegrationPayload\n  cancelReimbursement(input: CancelReimbursementInput!): CancelReimbursementPayload\n  \"\"\"Removes the policy granting access for a FSP account to a tenant account\"\"\"\n  removeFspBookkeeper(input: RemoveFspBookkeeperInput!): RemoveFspBookkeeperPayload\n  activateCard(input: ActivateCardInput!): ActivateCardPayload\n  disableIntegration(input: DisableIntegrationInput!): DisableIntegrationPayload\n  updateCardDisplayName(input: UpdateCardDisplayNameInput!): UpdateCardDisplayNamePayload\n  resetBackupCodes(input: ResetBackupCodesInput!): ResetBackupCodesPayload\n  updateReimbursementMetadata(input: UpdateReimbursementMetadataInput!): UpdateReimbursementMetadataPayload\n  withdrawFunds(input: WithdrawFundsInput!): WithdrawFundsPayload\n  startDepositsOffboarding(input: StartDepositsOffboardingInput!): StartDepositsOffboardingPayload\n  unsuspendCard(input: UnsuspendCardInput!): UnsuspendCardPayload\n  createFileUploadUrl(input: CreateFileUploadUrlInput!): CreateFileUploadUrlPayload\n  \"\"\"Note: creates and connects NetSuite credential, no need to call connect_credential afterwards\"\"\"\n  createNetsuiteCredential(input: CreateNetsuiteCredentialInput!): CreateNetsuiteCredentialPayload\n  deleteReceipt(input: DeleteReceiptInput!): DeleteReceiptPayload\n  sendBillPayment(input: SendBillPaymentInput!): SendBillPaymentPayload\n  \"\"\"Accepts devportal access agreement\"\"\"\n  acceptDevAccessAgreement(input: AcceptDevAccessAgreementInput!): AcceptDevAccessAgreementPayload\n  setPrimaryFundingSource(input: SetPrimaryFundingSourceInput!): SetPrimaryFundingSourcePayload\n  disableReimbursements(input: DisableReimbursementsInput!): DisableReimbursementsPayload\n  disableBills(input: DisableBillsInput!): DisableBillsPayload\n  createLocation(input: CreateLocationInput!): CreateLocationPayload\n  connectCredential(input: ConnectCredentialInput!): ConnectCredentialPayload\n  processPageView(input: ProcessPageViewInput!): ProcessPageViewPayload\n  \"\"\"Update permission for user in Medusa\"\"\"\n  updateUserPermission(input: UpdateUserPermissionInput!): UpdateUserPermissionPayload\n  updateIntegrationSyncSettings(input: UpdateIntegrationSyncSettingsInput!): UpdateIntegrationSyncSettingsPayload\n  updateExpensesSettingRules(input: UpdateExpensesSettingRulesInput!): UpdateExpensesSettingRulesPayload\n  cancelApprovalsRequest(input: CancelApprovalsRequestInput!): CancelApprovalsRequestPayload\n  editDepositsPaymentMemo(input: EditDepositsPaymentMemoInput!): EditDepositsPaymentMemoPayload\n  \"\"\"Add a user to the bookkeeper group, granting access to tenants available to the group\"\"\"\n  addFspBookkeeperUser(input: AddFspBookkeeperUserInput!): AddFspBookkeeperUserPayload\n  notifyUserOfCardRequest(input: NotifyUserOfCardRequestInput!): NotifyUserOfCardRequestPayload\n  updateIntegrationSettings(input: UpdateIntegrationSettingsInput!): UpdateIntegrationSettingsPayload\n  cancelPayment(input: CancelPaymentInput!): CancelPaymentPayload\n  updatePaymentSource(input: UpdatePaymentSourceInput!): UpdatePaymentSourcePayload\n  deletePaymentInstrument(input: DeletePaymentInstrumentInput!): DeletePaymentInstrumentPayload\n  createInvoiceTemplate(input: CreateInvoiceTemplateInput!): CreateInvoiceTemplatePayload\n  pushMarketoLeads(input: PushMarketoLeadsInput!): PushMarketoLeadsPayload\n  setupMfa(input: SetupMfaInput!): SetupMfaPayload\n  \"\"\"Creates a new developer API token\"\"\"\n  createDeveloperApiToken(input: CreateDeveloperApiTokenInput!): CreateDeveloperApiTokenPayload\n  createCardTransactionInsightEvent(input: CreateCardTransactionInsightEventInput!): CreateCardTransactionInsightEventPayload\n  \"\"\"Updates the calling user's email and sends a new Welcome email. Will fail if either the account or user is already active.\"\"\"\n  updateUserEmail(input: UpdateUserEmailInput!): UpdateUserEmailPayload\n  setReceivablesOffersRevenueAccessEnabled(input: SetReceivablesOffersRevenueAccessEnabledInput!): SetReceivablesOffersRevenueAccessEnabledPayload\n  updateCashTransaction(input: UpdateCashTransactionInput!): UpdateCashTransactionPayload\n  updateLocation(input: UpdateLocationInput!): UpdateLocationPayload\n  \"\"\"Toggles flag boolean value off\"\"\"\n  turnOffSeenFlag(input: TurnOffSeenFlagInput!): TurnOffSeenFlagPayload\n  syncIntegration(input: SyncIntegrationInput!): SyncIntegrationPayload\n  enableUser(input: EnableUserInput!): EnableUserPayload\n  \"\"\"Creates reimbursement csv report\"\"\"\n  createReimbursementReport(input: CreateReimbursementReportInput!): CreateReimbursementReportPayload\n  createReimbursement(input: CreateReimbursementInput!): CreateReimbursementPayload\n  suspendCard(input: SuspendCardInput!): SuspendCardPayload\n  createSubscription(input: CreateSubscriptionInput!): CreateSubscriptionPayload\n  createApprovalsRequest(input: CreateApprovalsRequestInput!): CreateApprovalsRequestPayload\n  removeFinancialSource(input: RemoveFinancialSourceInput!): RemoveFinancialSourcePayload\n  \"\"\"Revokes a developer API token\"\"\"\n  revokeDeveloperApiToken(input: RevokeDeveloperApiTokenInput!): RevokeDeveloperApiTokenPayload\n  updatePaymentInstrument(input: UpdatePaymentInstrumentInput!): UpdatePaymentInstrumentPayload\n  setReceivablesOffersSellerAccountHasSeenFullAccessConfirmationBanner(input: SetReceivablesOffersSellerAccountHasSeenFullAccessConfirmationBannerInput!): SetReceivablesOffersSellerAccountHasSeenFullAccessConfirmationBannerPayload\n  disableNonPrimaryFundingSources(input: DisableNonPrimaryFundingSourcesInput!): DisableNonPrimaryFundingSourcesPayload\n  completeOnboarding(input: CompleteOnboardingInput!): CompleteOnboardingPayload\n  saveOnboardingInformationRequest(input: SaveOnboardingInformationRequestInput!): SaveOnboardingInformationRequestPayload\n  connectTellerInstitution(input: ConnectTellerInstitutionInput!): ConnectTellerInstitutionPayload\n  createPhysicalCard(input: CreatePhysicalCardInput!): CreatePhysicalCardPayload\n  \"\"\"disable provided funding source and create a new one with new payload\"\"\"\n  replaceFundingSource(input: ReplaceFundingSourceInput!): ReplaceFundingSourcePayload\n  \"\"\"Sets the monthly user limit, or removes the limit if nil\"\"\"\n  setMonthlyUserLimit(input: SetMonthlyUserLimitInput!): SetMonthlyUserLimitPayload\n  findOrCreateErpFeed(input: FindOrCreateErpFeedInput!): FindOrCreateErpFeedPayload\n  updateCardFraudAlerts(input: UpdateCardFraudAlertsInput!): UpdateCardFraudAlertsPayload\n  createFinancialBankStatementForNewAccount(input: CreateFinancialBankStatementForNewAccountInput!): CreateFinancialBankStatementForNewAccountPayload\n  updateApprovalsRequest(input: UpdateApprovalsRequestInput!): UpdateApprovalsRequestPayload\n  adminUpdateApprovalsReview(input: AdminUpdateApprovalsReviewInput!): AdminUpdateApprovalsReviewPayload\n  createPushChannel(input: CreatePushChannelInput!): CreatePushChannelPayload\n  resyncReimbursementItems(input: ResyncReimbursementItemsInput!): ResyncReimbursementItemsPayload\n  completeCashTransactionApproval(input: CompleteCashTransactionApprovalInput!): CompleteCashTransactionApprovalPayload\n  setApprovalsUnsafeFlag(input: SetApprovalsUnsafeFlagInput!): SetApprovalsUnsafeFlagPayload\n  replaceCardWithVirtual(input: ReplaceCardWithVirtualInput!): ReplaceCardWithVirtualPayload\n  acceptMultipleReceivablesOffersGroups(input: AcceptMultipleReceivablesOffersGroupsInput!): AcceptMultipleReceivablesOffersGroupsPayload\n  submitFinancialInformationRequest(input: SubmitFinancialInformationRequestInput!): SubmitFinancialInformationRequestPayload\n  \"\"\"Sets the default accounting category for a given contact on a given integration.\"\"\"\n  updateContactDefaultErpCategory(input: UpdateContactDefaultErpCategoryInput!): UpdateContactDefaultErpCategoryPayload\n  disconnectApiClient(input: DisconnectApiClientInput!): DisconnectApiClientPayload\n  setReceivablesOffersSellerAccountConfirmedPayoutsRoutedToBrex(input: SetReceivablesOffersSellerAccountConfirmedPayoutsRoutedToBrexInput!): SetReceivablesOffersSellerAccountConfirmedPayoutsRoutedToBrexPayload\n  \"\"\"Toggles flag boolean value off\"\"\"\n  turnOnSeenFlag(input: TurnOnSeenFlagInput!): TurnOnSeenFlagPayload\n  createAutoAddFunds(input: CreateAutoAddFundsInput!): CreateAutoAddFundsPayload\n  refreshIntegration(input: RefreshIntegrationInput!): RefreshIntegrationPayload\n  setReceivablesOffersPayFeeWithRewards(input: SetReceivablesOffersPayFeeWithRewardsInput!): SetReceivablesOffersPayFeeWithRewardsPayload\n  updateCardPin(input: UpdateCardPinInput!): UpdateCardPinPayload\n  resetUser(input: ResetUserInput!): ResetUserPayload\n  updateAccountAddress(input: UpdateAccountAddressInput!): UpdateAccountAddressPayload\n  \"\"\"Starts an asynchronous integration export\"\"\"\n  startIntegrationExport(input: StartIntegrationExportInput!): StartIntegrationExportPayload\n  convertCardAccountType(input: ConvertCardAccountTypeInput!): ConvertCardAccountTypePayload\n  signup(input: SignupInput!): SignupPayload @deprecated(reason: \"Use 'softSignup' instead\")\n  updateApprovalsReview(input: UpdateApprovalsReviewInput!): UpdateApprovalsReviewPayload\n  createCardTransactionInsightMutingPolicy(input: CreateCardTransactionInsightMutingPolicyInput!): CreateCardTransactionInsightMutingPolicyPayload\n  connectAmazonMwsCredential(input: ConnectAmazonMwsCredentialInput!): ConnectAmazonMwsCredentialPayload\n  \"\"\"Creates report based on search query of statement entries and returns representative asset\"\"\"\n  createStatementEntriesSearchReport(input: CreateStatementEntriesSearchReportInput!): CreateStatementEntriesSearchReportPayload\n  createOpenidSession(input: CreateOpenidSessionInput!): CreateOpenidSessionPayload\n  validateChequeImages(input: ValidateChequeImagesInput!): ValidateChequeImagesPayload\n  createPayer(input: CreatePayerInput!): CreatePayerPayload\n  bulkCreateSpendAlertEvent(input: BulkCreateSpendAlertEventInput!): BulkCreateSpendAlertEventPayload\n  createIntegration(input: CreateIntegrationInput!): CreateIntegrationPayload\n  refundPayment(input: RefundPaymentInput!): RefundPaymentPayload\n  startResetUser(input: StartResetUserInput!): StartResetUserPayload\n  \"\"\"Deletes a connection if the user decides to disconnect their HRIS connection\"\"\"\n  deleteHrisConnection(input: DeleteHrisConnectionInput!): DeleteHrisConnectionPayload\n  sendInvoice(input: SendInvoiceInput!): SendInvoicePayload\n  updateInstitutionLogin(input: UpdateInstitutionLoginInput!): UpdateInstitutionLoginPayload\n  createCashTransaction(input: CreateCashTransactionInput!): CreateCashTransactionPayload\n  \"\"\"Disconnect a connected payroll provider integration\"\"\"\n  disconnectPayrollProviderIntegration(input: DisconnectPayrollProviderIntegrationInput!): DisconnectPayrollProviderIntegrationPayload\n  \"\"\"Resends the user welcome/activation email\"\"\"\n  resendWelcomeEmail(input: ResendWelcomeEmailInput!): ResendWelcomeEmailPayload\n  updateTransactionIntegrationCustomer(input: UpdateTransactionIntegrationCustomerInput!): UpdateTransactionIntegrationCustomerPayload\n  connectShopifyCredential(input: ConnectShopifyCredentialInput!): ConnectShopifyCredentialPayload\n  createIntegrationRule(input: CreateIntegrationRuleInput!): CreateIntegrationRulePayload\n  createFundingSource(input: CreateFundingSourceInput!): CreateFundingSourcePayload\n  updateCardMetadata(input: UpdateCardMetadataInput!): UpdateCardMetadataPayload\n  replaceCardWithPhysical(input: ReplaceCardWithPhysicalInput!): ReplaceCardWithPhysicalPayload\n  advanceToNextStep(input: AdvanceToNextStepInput!): AdvanceToNextStepPayload\n  \"\"\"Enable an integration\"\"\"\n  enableIntegration(input: EnableIntegrationInput!): EnableIntegrationPayload\n  getOrCreatePaymentMethod(input: GetOrCreatePaymentMethodInput!): GetOrCreatePaymentMethodPayload\n  completePromotion(input: CompletePromotionInput!): CompletePromotionPayload\n  enableBills(input: EnableBillsInput!): EnableBillsPayload\n  setAccountRestrictAchDebits(input: SetAccountRestrictAchDebitsInput!): SetAccountRestrictAchDebitsPayload\n  \"\"\"Mark the campaign as watched\"\"\"\n  recordMarketingRewindWatch(input: RecordMarketingRewindWatchInput!): RecordMarketingRewindWatchPayload\n  setReceivablesOffersConfirmedPayoutsRoutedToBrex(input: SetReceivablesOffersConfirmedPayoutsRoutedToBrexInput!): SetReceivablesOffersConfirmedPayoutsRoutedToBrexPayload\n  finishChannelVerification(input: FinishChannelVerificationInput!): FinishChannelVerificationPayload\n  generateCardStatementDocumentDownloadUrl(input: GenerateCardStatementDocumentDownloadUrlInput!): GenerateCardStatementDocumentDownloadUrlPayload\n  updateExpensesSettingStatus(input: UpdateExpensesSettingStatusInput!): UpdateExpensesSettingStatusPayload\n  disconnectErpFeed(input: DisconnectErpFeedInput!): DisconnectErpFeedPayload\n  deleteCardTransactionInsightMutingPolicy(input: DeleteCardTransactionInsightMutingPolicyInput!): DeleteCardTransactionInsightMutingPolicyPayload\n  prepareMultiFeeReceivablesOffersForAcceptance(input: PrepareMultiFeeReceivablesOffersForAcceptanceInput!): PrepareMultiFeeReceivablesOffersForAcceptancePayload\n  connectInstitution(input: ConnectInstitutionInput!): ConnectInstitutionPayload\n  processInvoice(input: ProcessInvoiceInput!): ProcessInvoicePayload\n  updateIntegrationRule(input: UpdateIntegrationRuleInput!): UpdateIntegrationRulePayload\n  createFraudDispute(input: CreateFraudDisputeInput!): CreateFraudDisputePayload\n  softSignup(input: SoftSignupInput!): SoftSignupPayload\n  updateTransactionCategory(input: UpdateTransactionCategoryInput!): UpdateTransactionCategoryPayload\n  \"\"\"Create or update a payment.\"\"\"\n  createOrUpdatePayment(input: CreateOrUpdatePaymentInput!): CreateOrUpdatePaymentPayload\n  createAsset(input: CreateAssetInput!): CreateAssetPayload\n  updateApprovalsReviews(input: UpdateApprovalsReviewsInput!): UpdateApprovalsReviewsPayload\n  finicityConnectGenerateLiteUrl(input: FinicityConnectGenerateLiteUrlInput!): FinicityConnectGenerateLiteUrlPayload\n  createDepositsApplication(input: CreateDepositsApplicationInput!): CreateDepositsApplicationPayload\n  onboardingInformationRequest(id: ID!): OnboardingInformationRequest\n  setReceivablesOffersAutoAdvanceMode(input: SetReceivablesOffersAutoAdvanceModeInput!): SetReceivablesOffersAutoAdvanceModePayload\n  submitOnboardingInformationRequest(input: SubmitOnboardingInformationRequestInput!): SubmitOnboardingInformationRequestPayload\n  beginChannelVerification(input: BeginChannelVerificationInput!): BeginChannelVerificationPayload\n  createMonthlyUserLimitIncrease(input: CreateMonthlyUserLimitIncreaseInput!): CreateMonthlyUserLimitIncreasePayload\n  provisionApplePay(input: ProvisionApplePayInput!): ProvisionApplePayPayload\n  \"\"\"For all integrations that match the filters, tests connectivity with integration vendor and updates credential status.\"\"\"\n  refreshIntegrationCredentials(input: RefreshIntegrationCredentialsInput!): RefreshIntegrationCredentialsPayload\n  generateReceivablesPayoutReport(input: GenerateReceivablesPayoutReportInput!): GenerateReceivablesPayoutReportPayload\n  bulkCreateExpensesItemEvent(input: BulkCreateExpensesItemEventInput!): BulkCreateExpensesItemEventPayload\n  setSoftExpirationDate(input: SetSoftExpirationDateInput!): SetSoftExpirationDatePayload\n  createExpensesFlagEvent(input: CreateExpensesFlagEventInput!): CreateExpensesFlagEventPayload\n  updateTransactionMemo(input: UpdateTransactionMemoInput!): UpdateTransactionMemoPayload\n  setReceivablesOffersSellerAccountHasSeenFailingChecksErrorBanner(input: SetReceivablesOffersSellerAccountHasSeenFailingChecksErrorBannerInput!): SetReceivablesOffersSellerAccountHasSeenFailingChecksErrorBannerPayload\n  submitReimbursement(input: SubmitReimbursementInput!): SubmitReimbursementPayload\n  acceptOffer(input: AcceptOfferInput!): AcceptOfferPayload\n  \"\"\"Mutation for setting specific integration fields. Generates a manual_override rule.\"\"\"\n  setStatementEntryIntegrationField(input: SetStatementEntryIntegrationFieldInput!): SetStatementEntryIntegrationFieldPayload\n  setReceivablesOffersIntegrationFinancialAccountMappings(input: SetReceivablesOffersIntegrationFinancialAccountMappingsInput!): SetReceivablesOffersIntegrationFinancialAccountMappingsPayload\n  createPhysicalCardV2(input: CreatePhysicalCardV2Input!): CreatePhysicalCardV2Payload\n  createFinancialBankStatement(input: CreateFinancialBankStatementInput!): CreateFinancialBankStatementPayload\n  createSmsChannel(input: CreateSmsChannelInput!): CreateSmsChannelPayload\n  connectWeavCredential(input: ConnectWeavCredentialInput!): ConnectWeavCredentialPayload\n  setReceivablesOffersSelectedTrialOnboarding(input: SetReceivablesOffersSelectedTrialOnboardingInput!): SetReceivablesOffersSelectedTrialOnboardingPayload\n  activateUser(input: ActivateUserInput!): ActivateUserPayload\n  changeInvestmentPolicy(input: ChangeInvestmentPolicyInput!): ChangeInvestmentPolicyPayload\n  finicityConnectMigrateAccounts(input: FinicityConnectMigrateAccountsInput!): FinicityConnectMigrateAccountsPayload\n  enableExpenses(input: EnableExpensesInput!): EnableExpensesPayload\n  \"\"\"Use to initiate Plaid Link in update mode\"\"\"\n  updatePlaidLinkToken(input: UpdatePlaidLinkTokenInput!): UpdatePlaidLinkTokenPayload\n  dismissPromotion(input: DismissPromotionInput!): DismissPromotionPayload\n  \"\"\"set spend alerts config for the current account\"\"\"\n  setSpendAlertsConfiguration(input: SetSpendAlertsConfigurationInput!): SetSpendAlertsConfigurationPayload\n  createPayrollProvider(input: CreatePayrollProviderInput!): CreatePayrollProviderPayload\n  createPaymentInstrument(input: CreatePaymentInstrumentInput!): CreatePaymentInstrumentPayload\n  issueCollection(input: IssueCollectionInput!): IssueCollectionPayload\n  createEmailChannel(input: CreateEmailChannelInput!): CreateEmailChannelPayload\n  completePendingRecordApproval(input: CompletePendingRecordApprovalInput!): CompletePendingRecordApprovalPayload\n  setUserRole(input: SetUserRoleInput!): SetUserRolePayload\n  createSubscriptions(input: CreateSubscriptionsInput!): CreateSubscriptionsPayload\n  \"\"\"Allows a user to opt into an incentive campaign\"\"\"\n  optOutOfIncentiveCampaign(input: OptOutOfIncentiveCampaignInput!): OptOutOfIncentiveCampaignPayload\n  disableExpenses(input: DisableExpensesInput!): DisableExpensesPayload\n  createCashWireDetails(input: CreateCashWireDetailsInput!): CreateCashWireDetailsPayload\n  deleteSubscription(input: DeleteSubscriptionInput!): DeleteSubscriptionPayload\n  submitOnboardingApplication(input: SubmitOnboardingApplicationInput!): SubmitOnboardingApplicationPayload\n  completePaymentApprovalWithToken(input: CompletePaymentApprovalWithTokenInput!): CompletePaymentApprovalWithTokenPayload\n  updateTransactionBillableStatus(input: UpdateTransactionBillableStatusInput!): UpdateTransactionBillableStatusPayload\n  cDa(input: CDaInput!): CDaPayload @deprecated(reason: \"Use 'onboardingCreateApplication' instead, passing in the blueprint name:'gemini'\")\n  deleteBill(input: DeleteBillInput!): DeleteBillPayload\n  updateAutoAddFunds(input: UpdateAutoAddFundsInput!): UpdateAutoAddFundsPayload\n  editPayment(input: EditPaymentInput!): EditPaymentPayload\n  terminateCard(input: TerminateCardInput!): TerminateCardPayload\n  deleteContact(input: DeleteContactInput!): DeleteContactPayload\n  createPeriodicReviewApplication(input: CreatePeriodicReviewApplicationInput!): CreatePeriodicReviewApplicationPayload\n  disableUser(input: DisableUserInput!): DisableUserPayload\n  createApprovalsPolicies(input: CreateApprovalsPoliciesInput!): CreateApprovalsPoliciesPayload\n  submitEarlyAccessFeatureSuggestion(input: SubmitEarlyAccessFeatureSuggestionInput!): SubmitEarlyAccessFeatureSuggestionPayload\n  setDepositsTransactionPaymentMemo(input: SetDepositsTransactionPaymentMemoInput!): SetDepositsTransactionPaymentMemoPayload\n  setTransactionIntegrationField(input: SetTransactionIntegrationFieldInput!): SetTransactionIntegrationFieldPayload\n  markOfferSeen(input: MarkOfferSeenInput!): MarkOfferSeenPayload\n  generateDepositsTransactionConfirmationDownloadUrl(input: GenerateDepositsTransactionConfirmationDownloadUrlInput!): GenerateDepositsTransactionConfirmationDownloadUrlPayload\n  cancelCollectionIntention(input: CancelCollectionIntentionInput!): CancelCollectionIntentionPayload\n  inviteUserWithMonthlyLimit(input: InviteUserWithMonthlyLimitInput!): InviteUserWithMonthlyLimitPayload\n  generateReceivablesOffersGroupReport(input: GenerateReceivablesOffersGroupReportInput!): GenerateReceivablesOffersGroupReportPayload\n  \"\"\"Updates a positive pay account setting with the given id, with the provided fields\"\"\"\n  updatePositivePayAccountSetting(input: UpdatePositivePayAccountSettingInput!): UpdatePositivePayAccountSettingPayload\n  depositCheque(input: DepositChequeInput!): DepositChequePayload\n  createApprovalsPolicy(input: CreateApprovalsPolicyInput!): CreateApprovalsPolicyPayload\n  updateBill(input: UpdateBillInput!): UpdateBillPayload\n  connectPlaidInstitution(input: ConnectPlaidInstitutionInput!): ConnectPlaidInstitutionPayload\n  \"\"\"Sends a heartbeat signal to keep the session alive\"\"\"\n  heartbeat(input: HeartbeatInput!): HeartbeatPayload\n  disconnectCredential(input: DisconnectCredentialInput!): DisconnectCredentialPayload\n  dismissCardFraudAlerts(input: DismissCardFraudAlertsInput!): DismissCardFraudAlertsPayload\n  modifyPreapprovedCardSettings(input: ModifyPreapprovedCardSettingsInput!): ModifyPreapprovedCardSettingsPayload\n  createDepartment(input: CreateDepartmentInput!): CreateDepartmentPayload\n  deletePositivePayAccountSetting(input: DeletePositivePayAccountSettingInput!): DeletePositivePayAccountSettingPayload\n  createTransactionApprovedSubscription(input: CreateTransactionApprovedSubscriptionInput!): CreateTransactionApprovedSubscriptionPayload\n  toggleRule(input: ToggleRuleInput!): ToggleRulePayload\n  createBill(input: CreateBillInput!): CreateBillPayload\n  fakeMutationDoNotUse(input: FakeMutationDoNotUseInput!): FakeMutationDoNotUsePayload @deprecated(reason: \"DO NOT USE. This exist just so the enum types can be auto generated in global types file.\")\n  refreshFinancialSource(input: RefreshFinancialSourceInput!): RefreshFinancialSourcePayload\n  setReceivablesOffersAccountOnboardingAction(input: SetReceivablesOffersAccountOnboardingActionInput!): SetReceivablesOffersAccountOnboardingActionPayload\n  createAccount(input: CreateAccountInput!): CreateAccountPayload\n  createMilesTransfer(input: CreateMilesTransferInput!): CreateMilesTransferPayload\n  resyncBills(input: ResyncBillsInput!): ResyncBillsPayload\n  confirmMfa(input: ConfirmMfaInput!): ConfirmMfaPayload\n  processInvoiceAndCreateBill(input: ProcessInvoiceAndCreateBillInput!): ProcessInvoiceAndCreateBillPayload\n  updateUserCategories(input: UpdateUserCategoriesInput!): UpdateUserCategoriesPayload\n  updateContact(input: UpdateContactInput!): UpdateContactPayload\n  createPositivePayAccountSetting(input: CreatePositivePayAccountSettingInput!): CreatePositivePayAccountSettingPayload\n  createExpensesItemEvent(input: CreateExpensesItemEventInput!): CreateExpensesItemEventPayload\n  adminUpdateApprovalsReviews(input: AdminUpdateApprovalsReviewsInput!): AdminUpdateApprovalsReviewsPayload\n  createExpensesSetting(input: CreateExpensesSettingInput!): CreateExpensesSettingPayload\n  createContact(input: CreateContactInput!): CreateContactPayload\n  deleteUserInvite(input: DeleteUserInviteInput!): DeleteUserInvitePayload\n  inviteUser(input: InviteUserInput!): InviteUserPayload\n  triggerErpFeedSync(input: TriggerErpFeedSyncInput!): TriggerErpFeedSyncPayload\n  createVirtualCard(input: CreateVirtualCardInput!): CreateVirtualCardPayload\n  notifyAllUsersApprovalsEnabled(input: NotifyAllUsersApprovalsEnabledInput!): NotifyAllUsersApprovalsEnabledPayload\n  markInvoice(input: MarkInvoiceInput!): MarkInvoicePayload\n  createMerchantDispute(input: CreateMerchantDisputeInput!): CreateMerchantDisputePayload\n  acceptCreditMarketingOffer(input: AcceptCreditMarketingOfferInput!): AcceptCreditMarketingOfferPayload\n  updateDepositsAccount(input: UpdateDepositsAccountInput!): UpdateDepositsAccountPayload\n  editInvoice(input: EditInvoiceInput!): EditInvoicePayload\n  \"\"\"Remove a user from the bookkeeper group, revoking access to the tenants available to the group\"\"\"\n  removeFspBookkeeperUser(input: RemoveFspBookkeeperUserInput!): RemoveFspBookkeeperUserPayload\n  deleteIntegrationRule(input: DeleteIntegrationRuleInput!): DeleteIntegrationRulePayload\n  createInvoice(input: CreateInvoiceInput!): CreateInvoicePayload\n  completePaymentApproval(input: CompletePaymentApprovalInput!): CompletePaymentApprovalPayload\n  createTransactionRefusedSubscription(input: CreateTransactionRefusedSubscriptionInput!): CreateTransactionRefusedSubscriptionPayload\n  updateDepartment(input: UpdateDepartmentInput!): UpdateDepartmentPayload\n  bulkFindOrCreateErpFeeds(input: BulkFindOrCreateErpFeedsInput!): BulkFindOrCreateErpFeedsPayload\n  createPaymentEarlyAuthBalanceDecreaseCommitment(input: CreatePaymentEarlyAuthBalanceDecreaseCommitmentInput!): CreatePaymentEarlyAuthBalanceDecreaseCommitmentPayload\n  confirmPaymentDraft(input: ConfirmPaymentDraftInput!): ConfirmPaymentDraftPayload\n  createReceipt(input: CreateReceiptInput!): CreateReceiptPayload\n  \"\"\"Creates a DocumentOCR entry, and initiates the OCR process on the document.\"\"\"\n  createDocumentOcr(input: CreateDocumentOcrInput!): CreateDocumentOcrPayload\n  deleteSubscriptions(input: DeleteSubscriptionsInput!): DeleteSubscriptionsPayload\n  updateUser(input: UpdateUserInput!): UpdateUserPayload\n  setManager(input: SetManagerInput!): SetManagerPayload\n  updateIntegrationCredential(input: UpdateIntegrationCredentialInput!): UpdateIntegrationCredentialPayload\n  setReceivablesOffersSellerAccountHasSeenTrialAccessConfirmationBanner(input: SetReceivablesOffersSellerAccountHasSeenTrialAccessConfirmationBannerInput!): SetReceivablesOffersSellerAccountHasSeenTrialAccessConfirmationBannerPayload\n  generateDepositsStatementDocumentDownloadUrl(input: GenerateDepositsStatementDocumentDownloadUrlInput!): GenerateDepositsStatementDocumentDownloadUrlPayload\n  calculateCreditMarketingOffer(input: CalculateCreditMarketingOfferInput!): CalculateCreditMarketingOfferPayload\n  updateTransactionDepartment(input: UpdateTransactionDepartmentInput!): UpdateTransactionDepartmentPayload\n  cancelTransaction(input: CancelTransactionInput!): CancelTransactionPayload\n  \"\"\"Creates a product onboarding application following a blueprint of the given name\"\"\"\n  createOnboardingProductApplication(input: CreateOnboardingProductApplicationInput!): CreateOnboardingProductApplicationPayload\n  \"\"\"Use to initiate Plaid Link\"\"\"\n  generatePlaidLinkToken(input: GeneratePlaidLinkTokenInput!): GeneratePlaidLinkTokenPayload\n  \"\"\"Adds a policy granting access for a FSP account to a tenant account\"\"\"\n  addFspBookkeeper(input: AddFspBookkeeperInput!): AddFspBookkeeperPayload\n  updateTransactionLocation(input: UpdateTransactionLocationInput!): UpdateTransactionLocationPayload\n}\n\ninput UpdateIntegrationSettingsInput {\n  accountsPayableCategoryId: ID\n  clientMutationId: String!\n  collectionTargetCategoryId: ID\n  id: ID!\n  \"\"\"The GL account id for syncing reimbursements data\"\"\"\n  reimbursementsUserCategoryId: ID\n  rewardsIncomeUserCategoryId: ID\n}\n\nunion RewardsTriggerPayload = RewardsTriggerCashActivationCardSpendBonus | RewardsTriggerDepositsTransfer | RewardsTriggerLinkedAccountBonus | RewardsTriggerPurchase | RewardsTriggerReferredAmountSpent | RewardsTriggerReferrerAward | RewardsTriggerTopCategoryMultiplier\n\ninput DisconnectErpFeedInput {\n  clientMutationId: String!\n  erpFeedId: ID!\n}\n\ninput WireReceivingMethodInput {\n  accountNumber: String\n  beneficiaryName: String\n  country: String\n  routingNumber: String\n}\n\ntype ChannelEdge {\n  cursor: String\n  node: Channel\n}\n\nenum FundingSourceStatusChangeReason {\n  ACCOUNT_CLOSED\n  ACCOUNT_NOT_FOUND\n  BACKFILL\n  CREATED\n  DEPOSITS_ACCOUNT_NOT_ACTIVE\n  FINANCIAL_SOURCE_DELETED\n  INVALID_ACCOUNT_NUMBER\n  MANUAL\n  MARKED_AS_PRIMARY\n  NON_TRANSACTION_ACCOUNT\n  VERIFICATION_COLLECTION_SUCCEEDED\n}\n\ninput ContactAddressInput {\n  \"\"\"Address 1\"\"\"\n  address1: String\n  \"\"\"Address 2\"\"\"\n  address2: String\n  \"\"\"City\"\"\"\n  city: String\n  \"\"\"Country\"\"\"\n  country: String\n  \"\"\"First name\"\"\"\n  firstName: String\n  \"\"\"Last name\"\"\"\n  lastName: String\n  \"\"\"State\"\"\"\n  state: String\n  \"\"\"Zip code\"\"\"\n  zip: String\n}\n\ntype FinancialInstitutionConnection {\n  edges: [FinancialInstitutionEdge]\n  pageInfo: PageInfo!\n}\n\ntype ReferralReward {\n  amount: Int!\n  type: ReferralRewardType!\n}\n\ninput ReplaceCardWithPhysicalInput {\n  cardId: ID!\n  clientMutationId: String!\n  holderName: String\n  replacementDescription: String\n  replacementReason: CardReplacementReason!\n  shippingAddress: ShippingAddressInput!\n}\n\ninput CashTransactionOrderBy {\n  orderField: CashTransactionOrderField\n  orderType: OrderType\n}\n\ntype LoyaltyProgram implements Node {\n  ascendaDetails: AscendaDetails!\n  ascendaProgramId: String!\n  config: LoyaltyProgramConfig\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  imageUrl: String!\n  quote: MilesTransferQuote\n}\n\n\"\"\"The high level object represents an approval policy\"\"\"\ninput ApprovalsProductPolicy {\n  \"\"\"The approvals policy details\"\"\"\n  details: ApprovalsPolicyDetailsInput!\n  \"\"\"The product type of this approvals policy\"\"\"\n  productType: ProductType\n}\n\nenum CashTransactionType {\n  ACH\n  ACH_RETURN\n  ADMIN_BALANCE_ADJUSTMENT\n  BOOK_TRANSFER\n  BREX_OPERATIONAL_TRANSFER\n  CARD_COLLECTION\n  CHEQUE\n  CHEQUE_RETURN\n  DIVIDEND\n  FBO_TRANSFER\n  INTEREST\n  INTRA_CUSTOMER_ACCOUNT_BOOK_TRANSFER\n  INVALID\n  PAYROLL_ESTIMATE\n  RECEIVABLES_OFFERS_ADVANCE\n  RECEIVABLES_OFFERS_COLLECTION\n  RECEIVABLES_OFFERS_REPAYMENT\n  REWARDS_REDEMPTION\n  WIRE\n  WIRE_RETURN\n}\n\ninput DomesticWirePaymentInstrumentInput {\n  accountNumber: String!\n  address: AddressInput!\n  routingNumber: String!\n}\n\ntype DeletePaymentInstrumentPayload {\n  clientMutationId: String!\n}\n\nunion EventMetadata = CardTransactionsInsightCommentEventMetadata | CardTransactionsInsightDismissEventMetadata\n\ninput CreateHrisConnectionInput {\n  clientMutationId: String!\n  \"\"\"The input contain parameters we need to make the connection\"\"\"\n  createHrisConnectionInput: VendorConnectionCreationInput!\n  \"\"\"The HRIS vendor we want to create a connection w/\"\"\"\n  hrisAggregatorVendor: HrisAggregatorVendor!\n}\n\ntype BatchSettings {\n  cadence: BatchCadence\n  entity: BatchEntity\n}\n\ntype AccountEligibleForCardAccountType {\n  isEligible: Boolean!\n}\n\ninput DisconnectFspAndClientInput {\n  clientCustomerAccountId: String!\n  clientMutationId: String!\n  fspCustomerAccountId: String!\n}\n\nenum CashTransactionApprovalDecision {\n  APPROVED\n  CANCELLED\n  DENIED\n  INVALID\n  PENDING\n}\n\nenum CashTransactionApprovalDecisionReason {\n  FRAUDULENT\n  INCORRECT\n  INVALID\n  OTHER\n  UNAUTHORIZED\n}\n\ntype AcceptOfferPayload {\n  availableProductOffers: [ProductOffer!]!\n  clientMutationId: String!\n}\n\ntype ExpensesCardMetadata implements Node {\n  defaultMemo: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\n\"\"\"Fields for customizing SSU forms\"\"\"\ntype SsuFormCustomization {\n  \"\"\"Call to action\"\"\"\n  cta: String\n  \"\"\"Indicates whether we know if this application has been incorporated\"\"\"\n  isIncorporated: Boolean\n  \"\"\"Sub-heading\"\"\"\n  subheader: String\n  \"\"\"Title\"\"\"\n  title: String\n}\n\nenum SortDirection {\n  ASC\n  DESC\n  INVALID\n}\n\nenum IncentivePlacementType {\n  BANNER\n  CASH_ADD_FUNDS_FLOW_BANNER\n  CASH_BALANCE_TOOLTIP\n  EMAIL\n  HOME_PROMOTION\n  INVALID\n  REWARDS_PAGE_CHECKBOX\n  REWARDS_PAGE_SCALE\n  REWARDS_PAGE_THRESHOLD\n}\n\ntype SetReceivablesOffersAutoAdvanceModePayload {\n  account: ReceivablesOffersAccount\n  clientMutationId: String!\n}\n\ninput SetStatementEntryIntegrationFieldInput {\n  clientMutationId: String!\n  \"\"\"The ID of the target integration field, or keyword for other things like billable status.\"\"\"\n  field: String!\n  statementEntryId: ID!\n  \"\"\"Target value to set the integration field to\"\"\"\n  value: String!\n}\n\ntype CardTransactionInsightEdge {\n  cursor: String\n  node: CardTransactionInsight\n}\n\nenum UnderwritingLimitFactorType {\n  DTI\n  FICO\n}\n\n\"\"\"\nDeclarative flags intended to resolve data in the backend\nthat influences the visibility of nav items (owned by card), and surface\nthe visibility of those nav items as UX oriented booleans.\n\"\"\"\ntype CardNavigation implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Whether card overview nav item is visible\"\"\"\n  showCardOverview: Boolean!\n}\n\ntype SubmitReimbursementPayload {\n  clientMutationId: String!\n  reimbursementItem: ReimbursementItem!\n}\n\ntype BulkDisconnectErpFeedsPayload {\n  clientMutationId: String!\n  \"\"\"list of erp feeds disconnected\"\"\"\n  erpFeeds: [ErpFeed]\n  \"\"\"Error message describing issue\"\"\"\n  errorMessage: String\n}\n\nenum ApprovalsUnsafeFlagKeyType {\n  CUSTOMER_ACCOUNT_ID\n  CUSTOMER_USER_ID\n  INVALID\n}\n\ntype SsuPrefillData {\n  attributionToken: String\n  companyName: String\n  companyType: String\n  companyUrl: String\n  \"\"\"Form customization field\"\"\"\n  customization: SsuFormCustomization\n  disclaimer: String\n  employeeCount: String\n  firstName: String\n  lastName: String\n  partnerLogoUrl: String\n  partnerName: String\n  workEmail: String\n}\n\ninput CreateSubscriptionInput {\n  channelId: ID!\n  clientMutationId: String!\n  notificationType: NotificationType!\n}\n\ntype CompletePendingRecordApprovalLoggedOutPayload {\n  clientMutationId: String!\n  paymentContext: DepositsPayment!\n  pendingRecordApproval: PendingRecordApproval!\n}\n\ninput CreateFraudDisputeInput {\n  cardPossession: DisputeCardPossession!\n  clientMutationId: String!\n  fraudulentDeclinedTransactionIds: [ID!]\n  legitimateTransactionIds: [ID!]\n  reason: String!\n  transactionIds: [ID!]!\n}\n\ninput GenerateReceivablesOffersGroupReportInput {\n  clientMutationId: String!\n  offersGroupId: ID!\n}\n\ninput FindOrCreateErpFeedInput {\n  clientMutationId: String!\n  financialAccountId: ID!\n  syncFrom: Time!\n  type: ErpVendorType!\n  vendorOptions: Json\n}\n\n\"\"\"A cycle reoccurring once a week on a particular day.\"\"\"\ntype WeeklyCardStatementPolicyCycle {\n  \"\"\"The day of the week.\"\"\"\n  dayOfWeek: Int\n}\n\n\"\"\"The high level object represents an approval step\"\"\"\ntype RequiredApprovalStep {\n  \"\"\"A list of review objects can be use to determine whether a step is approved or not, who and when approved it. Do not rely on the approvals_review.assignees field to determine a list of allowed approvers, use approvals_step.approvers instead\"\"\"\n  reviews: [ApprovalsReview]\n  \"\"\"The step details\"\"\"\n  stepDetails: ApprovalsStep\n}\n\ntype CashTransactionTimeline {\n  \"\"\"If not NULL, when the transaction was approved.\"\"\"\n  approvedAt: Time\n  \"\"\"\n  If not NULL, this field holds the maximum estimated number of business days for a transaction to process. This is equivalent to the number of business days between `estimated_settled_at_end` and `scheduled_send_at`.\n  Useful when providing estimate times for transactions that haven't been created and don't have a specified `scheduled_send_at` date\n  \"\"\"\n  estimatedNumberBusinessDaysMax: Int\n  \"\"\"\n  If not NULL, this field holds the minimum estimated number of business days for a transaction to process. This is equivalent to the number of business days between `estimated_settled_at_start` and `scheduled_send_at`.\n  Useful when providing estimate times for transactions that haven't been created and don't have a specified `scheduled_send_at` date\n  \"\"\"\n  estimatedNumberBusinessDaysMin: Int\n  \"\"\"\n  A SCHEDULED or PROCESSING transaction can have an estimated settled at time range of when the\n  transaction will be settled. This field stores the end of the estimated settled time range,\n  which can hold the same value as estimated_settled_at_start when we have an estimated date\n  but not estimated date range.\n  Can be NULL when providing estimates to customers in payment flows.\n  \"\"\"\n  estimatedSettledAtEnd: Time\n  \"\"\"\n  A SCHEDULED or PROCESSING transaction can have an estimated settled at time range of when\n  the transaction will be settled. If not NULL, this field stores the start of the estimated\n  settled time range. This field can be NULL if the transaction is in a terminal state, whether\n  PROCESSED or FAILED.\n  Can be NULL when providing estimates to customers in payment flows\n  \"\"\"\n  estimatedSettledAtStart: Time\n  \"\"\"\n  If not NULL, when the transaction entered the FAILED status,\n  Examples include: cancelled by the user, approval denied by an admin, or failed internally.\n  \"\"\"\n  failedAt: Time\n  \"\"\"The ID of the transaction, if it exists. This is used for apollo caching.\"\"\"\n  id: ID\n  \"\"\"\n  If not NULL, when the transaction entered the PROCESSING status\n  This field can always be NULL if the transaction was cancelled before it was initiated.\n  \"\"\"\n  initiatedAt: Time\n  \"\"\"If not NULL, when the transaction entered the PROCESSED status and impacted the customer's balance.\"\"\"\n  processedAt: Time\n  \"\"\"When the transaction was created.\"\"\"\n  scheduledAt: Time\n  \"\"\"When the transaction is scheduled to enter the PROCESSING status.\"\"\"\n  scheduledSendAt: Time\n}\n\ntype DomesticWirePaymentInstrument {\n  accountNumber: String\n  address: Address\n  \"\"\"A small logo for the beneficiary bank in base64 format. WARNING: may cause significantly slower response times\"\"\"\n  beneficiaryBankLogoBase64: String\n  \"\"\"Not yet implemented, will always be null. Is in the schema so the app can use the URL if available, falling back to base64\"\"\"\n  beneficiaryBankLogoUrl: String\n  beneficiaryBankName: String\n  routingNumber: String\n}\n\ntype ExtractedBillFields {\n  contact: PaymentContact\n  contactCreated: Boolean\n  dueAmountCents: Int\n  dueAt: Time\n  externalInvoiceNumber: String\n  paymentInstrument: PaymentInstrument\n  paymentSendAt: Time\n  transferDescription: String\n}\n\ntype CreateVirtualCardPayload {\n  card: Card\n  clientMutationId: String!\n}\n\ntype GenerateReceivablesPayoutReportPayload {\n  clientMutationId: String!\n  payoutReportUri: String!\n}\n\nenum PaymentRail {\n  ACH\n  CHEQUE\n  WIRE\n}\n\n\"\"\"Information about the user's top category bonus in a given period.\"\"\"\ntype RewardsTopCategoryBonusInfo {\n  \"\"\"Whether the customer is qualified for the bonus in the given period.\"\"\"\n  hasQualified: Boolean!\n  \"\"\"Whether the customer is in a rewards program that has a multiplier for the top category.\"\"\"\n  isEligible: Boolean!\n  \"\"\"If the customer is not qualified for the bonus, why.\"\"\"\n  notQualifiedReason: [RewardsTopCategoryNotEnabledReason]\n  \"\"\"If eligible, the top category in the given period.\"\"\"\n  topCategory: RewardsTopCategory\n  \"\"\"The number of points we have granted the customer due to the top category multiplier in the given periood.\"\"\"\n  totalBonusAwardedCentipoints: Int!\n  \"\"\"Whether the customer has received any bonus in the given period.\"\"\"\n  wasBonusAwarded: Boolean!\n}\n\ntype IntegrationRuleEvaluation implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  key: String\n  rule: IntegrationRule\n  value: String\n}\n\ntype IntegrationSettings {\n  batchSettings: BatchSettings\n  billsEnabled: Boolean\n  expensesEnabled: Boolean\n  netsuiteSubsidiary: NetsuiteSubsidiary\n  \"\"\"Auto sync reimbursement data to netsuite\"\"\"\n  reimbursementsEnabled: Boolean\n  syncDateRangeEnd: Time\n  syncDateRangeStart: Time\n  syncFrom: Time\n  version: Int\n}\n\nenum ReferralStatus {\n  COMPLETED\n  INVITE_SENT\n  PENDING_INVITE\n  SIGNED_UP\n}\n\ntype DepositsPaymentEdge {\n  cursor: String\n  node: DepositsPayment\n}\n\ninput AcceptCreditMarketingOfferInput {\n  clientMutationId: String!\n  offerId: ID!\n}\n\ntype CompletePendingRecordApprovalPayload {\n  clientMutationId: String!\n  paymentContext: DepositsPayment!\n  pendingRecordApproval: PendingRecordApproval!\n}\n\nenum ExpensesItemEventAction {\n  COMMENT\n  DISMISS\n  FLAG\n  OPEN\n  REVIEW\n}\n\n\"\"\"The instant payouts advance (one advance is one `offers_group`)\"\"\"\ntype ReceivablesOffersOffersGroup implements Node {\n  \"\"\"Timestamp when this advance was accepted\"\"\"\n  acceptedAt: Time\n  \"\"\"Whether this offers group was auto advanced\"\"\"\n  autoAdvanced: Boolean\n  \"\"\"The collection information associated with this advance. This field is very expensive to resolve, so it should not used when getting batches of OffersGroups\"\"\"\n  collectionInfo: ReceivablesOffersOffersGroupCollectionInfo\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The list of offers that are part of this offers group\"\"\"\n  offers: [ReceivablesOffersOffer]\n  \"\"\"Whether the customer opted to pay fee with rewards points at the time of acceptance\"\"\"\n  payFeeWithRewards: Boolean\n  \"\"\"Timestamp of when the offer was settled\"\"\"\n  settledAt: Time\n  \"\"\"The current status of the offers group (enum)\"\"\"\n  status: ReceivablesOffersOffersGroupStatus!\n  \"\"\"Total advance amount that the customer accepted\"\"\"\n  totalAdvanceAmount: FinancialAsset\n  \"\"\"Total fee amount that the customer will be charged\"\"\"\n  totalFeeAmount: FinancialAsset\n  \"\"\"Total fee cost in centipoints if the customer opted to pay the fee with rewards points\"\"\"\n  totalFeeCentipointsCost: Int\n}\n\n\"\"\"\nAtomic element of a Request for information,\ndefines a type of document / information that is needed\n\"\"\"\ntype RfiItem {\n  \"\"\"Key-Value Struct of extra metadata describing the item\"\"\"\n  details: String\n  \"\"\"Specifies what document / information is being requeste\"\"\"\n  name: String!\n  \"\"\"Response Item providing information for this specific RFI Item\"\"\"\n  responseItem: RfiResponseItem\n}\n\ntype WithdrawFundsPayload {\n  clientMutationId: String!\n  payment: DepositsPayment!\n}\n\ntype RewardsRedemptionProgram implements Node {\n  description: String!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  name: String!\n  rewardsRedemptionOffers(after: String, before: String, first: Int, last: Int, type: [String]): RewardsRedemptionOfferConnection\n}\n\nenum ReceivablesOffersOfferStatus {\n  CREATED\n  INVALID\n  NON_PERFORMANT\n  PENDING\n  SETTLED\n}\n\ninput EditPaymentInput {\n  amount: Int!\n  clientMutationId: String!\n  consumerSettings: TransactionConsumerSettings\n  contactId: ID\n  contactVersion: Int\n  \"\"\"Use contact id instead\"\"\"\n  counterpartyId: ID\n  depositsAccountId: ID!\n  endsAt: Time\n  endsOn: Date\n  externalMemo: String\n  idempotencyKey: String!\n  monthlySchedule: MonthlySchedule\n  paymentId: ID!\n  paymentInstrumentId: ID\n  paymentInstrumentVersion: Int\n  sendAt: Time\n  sendOn: Date\n  totalNumberOfPayments: Int\n  weeklySchedule: WeeklySchedule\n}\n\ninput SuspendCardInput {\n  clientMutationId: String!\n  id: ID!\n  suspendDescription: String\n  suspendReason: TerminationReason\n}\n\nunion CashRecurringScheduleDuration = CashRecurringScheduleDurationWithEndsAt | CashRecurringScheduleDurationWithTotalCount\n\n\"\"\"Connection Node Type Most Recent Transactions Tile\"\"\"\ntype CardOverviewInsightsTileConnection {\n  edges: [CardOverviewInsightsTileEdge]\n  pageInfo: PageInfo!\n}\n\ntype CreditMarketingOffer implements Node {\n  expiresAt: Time\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  insertedAt: Time!\n  limit: Int\n  status: CreditMarketingOfferStatus!\n  type: CreditMarketingOfferType!\n}\n\ntype Cobranding {\n  enabled: Boolean\n  fullName: String\n  name: String\n}\n\ntype Card implements Node @key(fields: \"id\") {\n  customerUserId: ID\n  replacedBy: ReplacedByRecord\n  expiration: String\n  instrumentType: String\n  softExpiration: SoftExpirationSummary\n  skipUserLimit: Boolean @deprecated(reason: \"Use is_preapproved instead\")\n  \"\"\"The expiration date derived from the card expiration. Cards always expire on the first day of the month following the expiration month\"\"\"\n  expiresAt: Time\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  network: String\n  utilization: Float\n  issuedAt: Time\n  cvv: String\n  \"\"\"Net amount spent by card this month\"\"\"\n  amountSpent(timeWindowDays: Int!): Int @deprecated(reason: \"Use amount_spent_current_month instead\")\n  status: String\n  first6: String\n  isPreapproved: Boolean\n  statusView: StatusView\n  pan: String\n  holderName: String\n  recurringMerchants(after: String, before: String, first: Int, last: Int): PerMerchantStatsConnection\n  fulfillmentStatus: String\n  shippingAddress: ShippingAddress\n  \"\"\"The card pin last updated time\"\"\"\n  pinUpdatedAt: Time\n  billingAddress: Address\n  isRoleLocked: Boolean\n  usage: Int\n  replaces(after: String, before: String, first: Int, last: Int): ReplacesRecordConnection\n  providerCardProductId: String\n  terminationReason: TerminationReason\n  \"\"\"Net amount spent by card all time\"\"\"\n  amountSpentAllTime: Int\n  user: User\n  displayName: String\n  applicableLimit: CardLimitSummary\n  limit: CardLimitSummary\n  \"\"\"Card shipment details\"\"\"\n  shipmentDetails: CardShipmentDetails\n  companyName: String\n  \"\"\"The bank issuer\"\"\"\n  issuer: Issuer\n  type: String\n  \"\"\"Net amount spent by card this month\"\"\"\n  amountSpentCurrentMonth: Int\n  isAdminLocked: Boolean\n  transactions(after: String, before: String, first: Int, last: Int): TransactionConnection\n  expensesCardMetadata: ExpensesCardMetadata\n  last4: String\n}\n\ntype DepositsAccountEdge {\n  cursor: String\n  node: DepositsAccount\n}\n\ninput DeleteUserInviteInput {\n  clientMutationId: String!\n  id: ID!\n}\n\nenum HrisStatus {\n  DISABLED\n  ENABLED\n  UNLINKED\n}\n\ntype Collection {\n  type: String\n}\n\ntype IndustrySearchResultEntryConnection {\n  edges: [IndustrySearchResultEntryEdge]\n  pageInfo: PageInfo!\n}\n\ninput CardPaymentForwarderContactInput {\n  email: String\n  firstName: String\n  lastName: String\n  phoneNumber: String\n}\n\ninput ActivateIntegrationInput {\n  clientMutationId: String!\n  id: ID!\n}\n\ntype InvoicingInvoiceConnection {\n  edges: [InvoicingInvoiceEdge]\n  \"\"\"Next offset. If next_offset < total_count, there are additional results to query.\"\"\"\n  nextOffset: Int!\n  pageInfo: PageInfo!\n  \"\"\"Total count of invoices.\"\"\"\n  totalCount: Int!\n}\n\ntype GetOrCreatePaymentMethodPayload {\n  cardId: ID!\n}\n\ntype ExpensesSettingConnection {\n  edges: [ExpensesSettingEdge]\n  pageInfo: PageInfo!\n}\n\n\"\"\"Default set of integration field types\"\"\"\nenum IntegrationFieldType {\n  CODAT_TRACKING_CATEGORY\n  NETSUITE_CLASS\n  NETSUITE_CUSTOM\n  NETSUITE_DEPARTMENT\n  NETSUITE_LOCATION\n  NETSUITE_VENDOR\n  QUICKBOOKS_CLASS\n  QUICKBOOKS_CUSTOMER\n  QUICKBOOKS_LOCATION\n  XERO_TRACKING_CATEGORY\n}\n\n\"\"\"The metadata for a high spend type\"\"\"\ntype InsightMetadataHighSpend {\n  \"\"\"The average amount\"\"\"\n  average: Float!\n  \"\"\"What does spend compare against - eg. company, department and etc\"\"\"\n  compareAgainst: String!\n  \"\"\"The relevant entries that associated with this spend alert\"\"\"\n  highSpendRelevantEntries: [StatementEntry]\n  \"\"\"The median amount\"\"\"\n  median: Float!\n  \"\"\"The p25 percentile\"\"\"\n  p25: Float!\n  \"\"\"The p75 percentile\"\"\"\n  p75: Float!\n  \"\"\"The percentile rank\"\"\"\n  percentileRank: Float!\n  \"\"\"The threshold that triggers this alert\"\"\"\n  threshold: Float!\n  \"\"\"The total amount on the posted date\"\"\"\n  totalAmountPostedDate: Int!\n}\n\ninput CancelCashTransactionInput {\n  clientMutationId: String!\n  id: ID!\n}\n\ntype RewardsCampaignEdge {\n  cursor: String\n  node: RewardsCampaign\n}\n\nextend type Expense @key(fields: \"id\") {\n  \"\"\"The calculated integration lens field for this expense\"\"\"\n  expenseLens(\n    \"\"\"Facet type filter\"\"\"\n    facetType: FacetType\n    integrationId: ID!\n    \"\"\"Rule ID to be omitted whe computing expense lens.\"\"\"\n    omitRuleId: ID\n    \"\"\"Unsaved rule body\"\"\"\n    ruleBody: Json\n    \"\"\"Rule IDs filter\"\"\"\n    ruleIds: [ID]\n  ): ExpenseLens\n  id: ID! @external\n  \"\"\"The receipts associated with this expense\"\"\"\n  receipts(after: String, before: String, first: Int, last: Int): ReceiptConnection\n}\n\ntype ExpensesFlagEvent implements Node {\n  action: ExpensesFlagEventAction\n  description: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  insertedAt: Time\n}\n\nenum JournalOriginatorType {\n  BILLING_PAYMENT_INTENT_ALLOCATION\n  COLLECT_COLLECTION\n  PRESENT_TRANSACTION_OPERATION\n  PRESENT_TRANSACTION_OPERATION_SPLIT_ITEM\n  RECEIVABLES_OFFER\n  RECEIVABLES_OFFER_FEE\n  REWARDS_REDEMPTION_INSTANCE\n}\n\ninput ReferUserInput {\n  clientMutationId: String!\n  targetEmail: String!\n}\n\ntype UpdateIntegrationSyncSettingsPayload {\n  clientMutationId: String!\n  integration: Integration\n}\n\ntype DepositsTransaction implements Node {\n  \"\"\"The snapshot of the balance across all of the customer's deposits accounts at the time this transaction was applied.\"\"\"\n  aggregateSnapshotBalance: Int\n  amount: Int!\n  bill: Bill\n  cancellationInitiatedByUser: User\n  \"\"\"Encoded CashTransaction ID\"\"\"\n  cashTransactionId: ID!\n  counterpartyName: String\n  \"\"\"Source deposits account\"\"\"\n  depositsAccount: DepositsAccount\n  \"\"\"Encoded source deposits account ID\"\"\"\n  depositsAccountId: ID!\n  depositsPayment: DepositsPayment\n  depositsTraceId: String!\n  details: DepositsTransactionDetails!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  isCancellable: Boolean!\n  memo: String\n  postedAt: Time!\n  recurringPaymentId: ID\n  settledAt: Time\n  snapshotBalance: Int\n  status: Status!\n  type: DepositsTransactionType!\n}\n\ntype CashTransactionApproval {\n  decidedByUser: User\n  decision: CashTransactionApprovalDecision!\n  \"\"\"Any notes the admin wants to fill in a free form field when processing a draft payment.\"\"\"\n  decisionNotes: String\n  decisionReason: CashTransactionApprovalDecisionReason\n  transactionId: String\n}\n\nenum ContactType {\n  INVALID\n  INVOICER\n  PAYER\n}\n\nenum OrderType {\n  ASC\n  DESC\n}\n\ntype CreateLocationPayload {\n  clientMutationId: String!\n  location: Location!\n}\n\nenum DocumentOcrStatus {\n  \"\"\"The document has finished processing, and the results are available.\"\"\"\n  COMPLETED\n  \"\"\"The document is still being processed.\"\"\"\n  PENDING\n}\n\ninput UpdateDepositsAccountInput {\n  clientMutationId: String!\n  depositsAccountId: ID!\n  nickname: String!\n}\n\ntype FedwireParticipant implements Node {\n  changeDate: String\n  customerCity: String!\n  \"\"\"The institution's logo as a base64 PNG, if available\"\"\"\n  customerLogoBase64: String\n  customerName: String!\n  customerState: String!\n  fundsEligibility: String!\n  fundsSettlementOnlyStatus: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  routingNumber: String!\n  securitiesEligibility: String!\n  telegraphicName: String!\n}\n\n\"\"\"Paginated referral records\"\"\"\ntype ReferralRecordsPaginated implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"next page token\"\"\"\n  nextPageToken: String\n  \"\"\"list of referral records\"\"\"\n  referralRecords: [ReferralRecord]\n}\n\ninput CreateFileUploadUrlInput {\n  clientMutationId: String!\n}\n\ntype BillSyncErrorEdge {\n  cursor: String\n  node: BillSyncError\n}\n\ntype CreateMerchantDisputePayload {\n  clientMutationId: String!\n  transactions: [Transaction!]!\n}\n\ntype Export implements Node {\n  errorMessage: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  insertedAt: Time!\n  status: String!\n}\n\ntype CashRecurringScheduleWithTimelines {\n  \"\"\"The recurring schedule definition\"\"\"\n  recurringSchedule: CashRecurringSchedule!\n  \"\"\"Timelines for future scheduled transactions that will be made by this recurring schedule\"\"\"\n  timelines: [CashTransactionTimeline!]!\n}\n\nenum PayrollSource {\n  CASH\n  FINANCIALS\n  USER\n}\n\ntype UserCategoryEdge {\n  cursor: String\n  node: UserCategory\n}\n\n\"\"\"\nSplit items corresponding to a transaction operation.\n\nThere may be multiple split items if, for example, the transaction\nis funded by more than one source (Revenue Access project).\n\"\"\"\ntype TransactionOperationSplitItem implements Node {\n  \"\"\"Amount (in cents) for this split item.\"\"\"\n  amountCents: Int\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Payout used to fund this split item (revenue access)\"\"\"\n  receivablesOffersPayout: ReceivablesOffersPayout\n}\n\ntype CanOffboardResponse {\n  enabled: Boolean!\n  issues: [DepositsCloseAccountIssue!]!\n}\n\n\"\"\"payment source mapping for the account\"\"\"\ntype ReimbursementPaymentSource {\n  fundingSource: FundingSource\n  updatedBy: String\n}\n\ntype Summary {\n  numValidMetal: Int\n  numValidPhysical: Int\n  numValidVirtual: Int\n  numWaitingActivation: Int\n}\n\n\"\"\"Booleans expressing whether nav items show for the current user\"\"\"\ntype Navigation implements Node {\n  \"\"\"The slice of the navigation query owned by card\"\"\"\n  card: CardNavigation\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\nenum DepositsAccountsPriority {\n  INVALID\n  NON_PRIMARY\n  PRIMARY\n}\n\ntype RewardsTopCategoryEdge {\n  cursor: String\n  node: RewardsTopCategory\n}\n\ntype UnderwritingAnalysis implements Node {\n  flags(after: String, before: String, first: Int, last: Int): UnderwritingAnalysisFlagConnection\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\ntype ReplaceCardWithPhysicalPayload {\n  clientMutationId: String!\n  replacedCard: Card\n  replacementCard: Card\n}\n\n\"\"\"Card shipment details\"\"\"\ntype CardShipmentDetails {\n  \"\"\"Estimated delivery date\"\"\"\n  estimatedDeliveryAt: Time!\n}\n\nunion ApprovalsRequestMetadata = ApprovalsRequestMonthlyLimitOverride | ApprovalsRequestPreapprovedCard | ApprovalsRequestReimbursement\n\nunion NotificationTile = InsufficientFundsTile | LimitUtilizationTile | StatementUploadRequestTile\n\ntype ProcessInvoicePayload {\n  clientMutationId: String!\n  extractedBillFields: ExtractedBillFields!\n}\n\ntype RewardsAccrualEntry implements Node {\n  amount: Int!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  rewardsTrigger: RewardsTrigger\n}\n\ntype SyncIntegrationPayload {\n  clientMutationId: String!\n  integration: Integration\n}\n\nenum FinancialProductType {\n  ECOMMERCE\n  LIFESCIENCES\n  STARTUP\n}\n\ninput SubmitEarlyAccessFeatureSuggestionInput {\n  clientMutationId: String!\n  featureSuggestionText: String!\n}\n\nenum SeenFlagKey {\n  BILLS_ONBOARDING_FIRST_BILL_CREATED\n  ONBOARDING_MEDIUM_RISK_TIER_NUDGE_MODAL_SEEN\n  SPEND_REPORTS_INTEGRATION_UPSELL_DISMISSED\n  COLUMN_MIGRATION_WALKTHROUGH_STARTED\n  SPEND_PREMIUM_SETTINGS_SEEN\n  CASH_PAYCHEX_PAYROLL_SETUP_SEEN\n  ENGAGEMENT_HOME_SETUP_QUICKBOOKS_TASK_DISMISSED\n  SPEND_REQUESTS_SETUP_BANNER_REIMBURSEMENTS_SEEN\n  CASH_INTEGRATIONS_ANNOUNCEMENT_INTERACTED\n  ENGAGEMENT_HOME_CREATE_EXPENSE_POLICY_TASK_DISMISSED\n  SPEND_SETUP_MODAL_SEEN\n  SPEND_PREMIUM_FOR_ALL_MODAL_SEEN\n  CARD_PREAPPROVED_CARD_REQUEST_APPROVE_MODAL_SEEN\n  ONBOARDING_MEDIUM_RISK_TIER_OUTCOME_MODAL_SEEN\n  PRIMITIVES_ONBOARDING_INTERACTED\n  REWARDS_OVERVIEW_TAB_INTERACTED\n  APP_SANCTIONS_POSSIBLY_IMPACTED_BANNER_DISMISSED\n  CASH_MULTIPLE_ACCOUNTS_TOOLTIP_SEEN\n  SPEND_REQUESTS_ANNOUNCEMENT_INTERACTED\n  BILLS_USER_ACCESS_TOOLTIP_DISMISSED\n  CASH_FDIC_MMF_ALLOCATION_MODAL_INTERACTED\n  ENGAGEMENT_ROLE_NAME_BANNER_SEEN\n  CASH_ADP_PAYROLL_SETUP_SEEN\n  COLUMN_MIGRATION_WALKTHROUGH_FINISHED\n  CAPITAL_INSTANT_PAYOUTS_TAB_INTERACTED\n  CASH_RIPPLING_PAYROLL_SETUP_SEEN\n  BILLS_PREMIUM_GRANDFATHER_BANNER_CLOSED\n  SPEND_REQUESTS_PREMIUM_GRANDFATHER_BANNER_CLOSED\n  ENGAGEMENT_Q4_21_PLATFORM_AGREEMENT_UPDATED_MODAL_SEEN\n  CARD_EXPIRING_PHYSICAL_CARD_MODAL_DISMISSED\n  ENGAGEMENT_USER_ROLE_NAME_BANNER_SEEN\n  BILLS_INTEGRATIONS_QBO_ACCOUNT_SET_UP_BANNER_DISMISSED\n  CASH_VENDORS_BULK_UPLOAD_TOOLTIP_INTERACTED\n  CASH_INSIGHTS_TOOLTIP_DISMISSED\n  CASH_ACCOUNT_CLOSED_BANNER_DISMISSED\n  SPEND_REVIEW_EXPENSES_TAB_INTERACTED\n  RISK_PERIODIC_REVIEW_BLOCKING_EXPERIENCE_SEEN\n  CASH_WELCOME_MODAL_SEEN\n  ENGAGEMENT_Q4_21_PLATFORM_AGREEMENT_UPDATED_MODAL_INTERACTED\n  PRODUCT_LOG_UPDATE_SEEN\n  CAPITAL_INSTANT_REVENUE_ANNOUNCEMENT_SEEN\n  MOBILE_DOWNLOAD_UPSELL_MODAL_SEEN\n  BILLS_DRAG_AND_DROP_TOOLTIP_DISMISSED\n  CARD_BANK_CONNECTIONS_SETTING_TAB_SEEN\n  CASH_PAYABLES_TAB_INTERACTED\n  BILLS_INTEGRATIONS_BILL_SYNC_SET_UP_BANNER_DISMISSED\n  PRIMITIVES_ONBOARDING_COMPLETED\n  CASH_QUICKBOOKS_PAYROLL_SETUP_SEEN\n  UNDERWRITING_CREDIT_JOURNEY_LINK_CLICKED\n  CASH_GUSTO_PAYROLL_SETUP_SEEN\n  EXPENSES_TOOLKIT_TAB_INTERACTED\n  CAPITAL_INSTANT_REVENUE_SUMMARY_STATS_HOW_IT_WORKS_DISMISSED\n  SPEND_DISMISS_CONFIRMATION_MODAL_HIDE\n  REWARDS_REFERRALS_WELCOME_MODAL_SEEN\n  CASH_TRANSACTIONS_TOUR_PROMPT_INTERACTED\n  SPEND_ADD_TO_SLACK_CLOSED\n  CARD_PREAPPROVED_CARD_REQUEST_DENY_MODAL_SEEN\n  COLUMN_MIGRATION_BANNER_DISMISSED\n  CASH_FBO_MODAL_INTERACTED\n  BILLS_ONBOARDING_MODAL_SEEN\n  SPEND_REQUESTS_SETUP_BANNER_CARD_REQUESTS_SEEN\n  CASH_INTL_WIRE_BANK_INFO_CHANGED_TO_JPM_INTERACTED\n  CASH_VENDORS_TAB_INTERACTED\n  CASH_INTL_WIRE_ASK_UPDATE_JPM_COUNTRY_CONFIG_INTERACTED\n  SPEND_PREMIUM_FOR_ALL_TOOLTIP_DISMISSED\n  CASH_INSIGHTS_SCENARIO_PLANNING_SHOWN\n  UNDERWRITING_CREDIT_UPSELL_ANNOUNCEMENT_INTERACTED\n  CASH_VENDORS_ANNOUNCEMENT_INTERACTED\n  CASH_FTUE_TOUR_COMPLETED\n  CASH_INSIGHTS_CSAT_TAKEN\n  CASH_MULTIPLE_ACCOUNTS_INTRO_SEEN\n  SPEND_REQUESTS_TAB_INTERACTED\n  CASH_INSIGHTS_SCENARIO_PLANNING_EVENTS_CLICKED\n  BILLS_TAB_INTERACTED\n  CASH_TRINET_PAYROLL_SETUP_SEEN\n  BILLS_GLOBAL_ONBOARDING_MODAL_SEEN\n  SPEND_ALERTS_ONBOARDING_SEEN\n  CASH_INSIGHTS_SEEN\n  SPEND_MULTIPLAYER_INTRO_MODAL_COMPLETED\n  ENGAGEMENT_HOME_ENABLE_SPEND_REQUESTS_TASK_DISMISSED\n  BILLS_ONBOARDING_TOOLTIP_DISMISSED\n  SPEND_REVIEW_PREMIUM_GRANDFATHER_BANNER_CLOSED\n}\n\n\"\"\"\nAggregated summary data for a list of receivables_offers_payment_intent allocations.\nWhen paginating, the data should reflect ALL payments, not just the ones being fetched in the current page.\n\"\"\"\ntype ReceivablesOffersPaymentIntentAllocationSummary {\n  \"\"\"Total allocation towards Card clearings\"\"\"\n  totalCardAllocation: FinancialAsset!\n  \"\"\"Total allocation towards Cash Advances (excluding fee)\"\"\"\n  totalCashAdvanceAllocation: FinancialAsset!\n  \"\"\"Total allocation towards Cash Advance Fees (Cash Breakdown + Centipoints Breakdown in $$)\"\"\"\n  totalCashAdvanceFeeAllocation: FinancialAsset!\n  \"\"\"The Cash/ACH amount that pays of the Total Cash Advance Fee Allocation\"\"\"\n  totalCashAdvanceFeeAllocationCashBreakdown: FinancialAsset!\n  \"\"\"The number of Rewards Points that pays off the Total Cash Advance Fee Allocation\"\"\"\n  totalCashAdvanceFeeAllocationPointsBreakdown: Int!\n}\n\ntype CreateCardTransactionInsightEventPayload {\n  cardTransactionInsight: CardTransactionInsight\n  clientMutationId: String!\n}\n\nenum HrisSyncStatus {\n  DONE\n  FAILED\n  PULLED_FROM_HRIS\n  PULLING_FROM_HRIS\n  SYNCING\n  WAITING\n}\n\ntype RewardsTopCategoryConnection {\n  edges: [RewardsTopCategoryEdge]\n  pageInfo: PageInfo!\n}\n\ninput CompletePaymentApprovalInput {\n  clientMutationId: String!\n  decision: PaymentApprovalDecision!\n  decisionNotes: String\n  decisionReason: PaymentApprovalDecisionReason\n  paymentId: ID!\n}\n\n\"\"\"A cycle reoccurring every month on the same day of the month.\"\"\"\ntype MonthlyCardStatementPolicyCycle {\n  \"\"\"The day of the month.\"\"\"\n  dayOfMonth: Int\n}\n\ntype ExternalIntegrationFieldConnection {\n  edges: [ExternalIntegrationFieldEdge]\n  pageInfo: PageInfo!\n}\n\ninput ToggleRuleInput {\n  clientMutationId: String!\n  \"\"\"Integration rule id for the toggled rule\"\"\"\n  integrationRuleId: ID!\n  \"\"\"Source object id for the toggled rule\"\"\"\n  sourceObjectId: ID!\n}\n\ninput CreateMonthlyUserLimitIncreaseInput {\n  amount: Int!\n  clientMutationId: String!\n  customerUserId: ID!\n  endsAt: Time!\n}\n\ntype PositivePayAccountSettingConnection {\n  edges: [PositivePayAccountSettingEdge]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\nunion IncentivePlacementViewData = IncentivePlacementViewDataBanner | IncentivePlacementViewDataCashAddFundsFlowBanner | IncentivePlacementViewDataCashBalanceTooltip | IncentivePlacementViewDataRewardsPageCheckbox | IncentivePlacementViewDataRewardsPageScale | IncentivePlacementViewDataRewardsPageThreshold\n\nenum CardReplacementReason {\n  DAMAGED\n  EXPIRATION\n  FRAUD\n  INTERNAL\n  INVALID\n  LOST\n  OTHER\n}\n\ninput ProcessInvoiceInput {\n  assetId: ID!\n  billId: ID\n  clientMutationId: String!\n}\n\ntype RewardsCampaignConnection {\n  edges: [RewardsCampaignEdge]\n  pageInfo: PageInfo!\n}\n\nenum DepositsAccountStatusReason {\n  AUTOMATED_OFFBOARDING\n  FRAUD\n  MANUAL_OFFBOARDING\n  PENDING_VERIFICATION\n  REOPEN_RETURN_FUNDS\n  TOS_VIOLATION\n  USER_INITIATED\n}\n\ntype UpdateDepositsAccountPayload {\n  clientMutationId: String!\n  depositsAccount: DepositsAccount!\n}\n\nscalar Date\n\ntype MonthlyUserLimitOverride {\n  amount: Int\n  endsAt: Time\n}\n\ntype CashRecurringSchedule implements Node {\n  \"\"\"\n  The duration of the recurring schedule\n  \n  ends_at\n  Keep creating transactions until the `ends_at` date\n  \n  total_count\n  Keep creating transactions until `total_count` transactions have been scheduled.\n  We make this distinction because transactions can be cancelled which still count towards the `total_count` amount\n  \"\"\"\n  duration: CashRecurringScheduleDuration\n  \"\"\"A human readable string describing when the schedule will end.\"\"\"\n  durationDescription: String!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The type of recurring schedule, defining the rules for transaction scheduling\"\"\"\n  type: CashRecurringScheduleType!\n  \"\"\"A human readable string describing the cadence of the schedule.\"\"\"\n  typeDescription: String!\n}\n\ntype DateHistogramAggregationField {\n  count: Int!\n  date: Int!\n  sum: Float\n}\n\ntype ProcessPageViewPayload {\n  clientMutationId: String!\n  success: Boolean\n}\n\ntype CountryAddressMetadata {\n  \"\"\"The regular expression corresponding to all po box formats in the country\"\"\"\n  poBoxRegex: String\n  \"\"\"The regular expression corresponding to all postal codes in the country\"\"\"\n  postalCodeRegex: String\n  \"\"\"The term used to describe the country's subregions (ex. state, province, etc.)\"\"\"\n  subregionLabel: String!\n  \"\"\"The list of provinces/states\"\"\"\n  subregions: [Subregion!]\n}\n\ntype ProgramMembership implements Node {\n  firstName: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  lastName: String\n  loyaltyProgram: LoyaltyProgram\n  membershipId: String\n}\n\ntype NetsuiteDepartment {\n  isInactive: Boolean\n  name: String\n}\n\ntype CardCollectionDetails {\n  collectionAttempt: CollectionAttempt!\n  collectionId: String!\n}\n\ntype SetReceivablesOffersSellerAccountConfirmedPayoutsRoutedToBrexPayload {\n  clientMutationId: String!\n  sellerAccount: ReceivablesOffersSellerAccount\n}\n\ninput CreatePremiumSettingEventInput {\n  action: PremiumSettingEventAction!\n  campaign: String\n  clientMutationId: String!\n  pricingScheme: PremiumSettingPricingScheme!\n}\n\n\"\"\"A integration field is a mapping from an integration field to an integration entity.\"\"\"\ntype IntegrationField implements Node {\n  externalIntegrationEntity: ExternalIntegrationEntity\n  externalIntegrationField: ExternalIntegrationField\n  fieldId: String\n  fieldValue: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\ntype ApprovalsReview implements Node {\n  assignees(after: String, before: String, first: Int, last: Int): ApprovalsReviewAssigneeConnection\n  description: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  insertedAt: Time\n  request: ApprovalsRequest\n  reviewedAt: Time\n  reviewedBy: ApprovalsUser\n  status: ApprovalsReviewStatus\n}\n\ntype Subregion {\n  \"\"\"ISO 3166-1 alpha-2 representation of a province/state (ex. 'AL' for Alabama)\"\"\"\n  alpha2: String!\n  \"\"\"Name of the province/state\"\"\"\n  name: String!\n}\n\nenum CashIntensiveMaxCashHandled {\n  INVALID\n  LESS_THAN_1000K\n  LESS_THAN_2000K\n  LESS_THAN_500K\n  MORE_THAN_2000K\n  NO_CASH\n}\n\nenum StatusReason {\n  ACCOUNT_CLOSED\n  ACCOUNT_NOT_FOUND\n  ACH_DEBIT_CAPABILITY_REVOKED\n  ADMIN_DENIED_APPROVAL\n  BLOCKED_BY_POSITIVE_PAY\n  CUSTOMER_EDITED\n  FAILED_VERIFICATION\n  INSUFFICIENT_FUNDS\n  MISSED_SEND_ON\n  USER_CANCELLED\n}\n\n\"\"\"\nRepresents an updated model for payroll provider supported by the payroll v2 service migration. When the migration is complete, the original\npayroll_provider object will be deprecated and removed\n\"\"\"\ntype PayrollProviderV2 {\n  \"\"\"\n  The account id of the funding source for payroll.\n  There are three options: a Brex deposits account, a confirmed external institution, or a detected financial account\n  \"\"\"\n  fundingSource: PayrollProviderFundingSource!\n  \"\"\"Represents a single integration with the payroll provider\"\"\"\n  integration: PayrollProviderIntegration\n  \"\"\"A type-safe enum to represent a payroll provider\"\"\"\n  type: PayrollProviderType!\n}\n\ntype LimitPreview {\n  amount: Int!\n  cardAccountType: CardAccountType!\n  isMaxLimit: Boolean!\n}\n\ntype AchReceivingMethod {\n  accountNumber: String\n  beneficiaryName: String\n  routingNumber: String\n}\n\ntype IncentivePlacementViewDataEdge {\n  cursor: String\n  node: IncentivePlacementViewData\n}\n\ninput ExpensesRuleInput {\n  id: ID\n  matcherJson: String!\n  name: String!\n  status: ExpensesRuleStatus\n  type: ExpensesRuleType\n}\n\ntype EditInvoicePayload {\n  clientMutationId: String!\n  invoice: InvoicingInvoice\n}\n\ninput AddFspBookkeeperInput {\n  bookkeeperAccountId: String!\n  clientMutationId: String!\n}\n\ntype CardTransactionInsightConnection {\n  edges: [CardTransactionInsightEdge]\n  pageInfo: PageInfo!\n  \"\"\"The total number of spend alerts\"\"\"\n  totalCount(customerUserIds: [ID], departmentIds: [ID], fromDate: Time, insightTypes: [CardTransactionsInsightType], merchantIds: [ID], searchText: String, status: InsightStatus, toDate: Time): Int!\n  \"\"\"The total spend amount for the alert\"\"\"\n  totalSpendAmount(customerUserIds: [ID], departmentIds: [ID], fromDate: Time, insightTypes: [CardTransactionsInsightType], merchantIds: [ID], searchText: String, status: InsightStatus, toDate: Time): Int!\n}\n\nenum PayrollProviderIntegrationStatus {\n  CONNECTED\n  DISCONNECTED\n  INVALID\n  PROCESSING\n}\n\ntype RewardsTriggerConnection {\n  edges: [RewardsTriggerEdge]\n  pageInfo: PageInfo!\n}\n\ninput CreateMilesTransferInput {\n  clientMutationId: String!\n  loyaltyProgramId: String!\n  milesAmount: Int!\n  pointsAmount: Int!\n  programMembership: ProgramMembershipPayload!\n  redemptionOfferId: String!\n  toCustomerUserId: String!\n}\n\ntype CardOverviewInsightsTileEdge {\n  cursor: String\n  \"\"\"Most Recent Transactions Tile Node\"\"\"\n  node: CardOverviewInsightsTile\n}\n\ntype CashTransactionIntraCuaccBookTransferDetails {\n  \"\"\"The sender account\"\"\"\n  sourceDepositsAccount: DepositsAccount\n  \"\"\"The recipient account\"\"\"\n  targetDepositsAccount: DepositsAccount\n}\n\ninput DeleteReceiptInput {\n  clientMutationId: String!\n  id: ID!\n}\n\ntype Channel implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  notificationSubscriptions(after: String, before: String, first: Int, last: Int): NotificationSubscriptionConnection\n  options: ChannelOptions\n  status: ChannelStatus\n}\n\nenum IncentivePlacementViewDataStatus {\n  ACTIVE\n  COMPLETED\n  EXPIRED\n  INVALID\n  PENDING\n}\n\ninput AcceptDevAccessAgreementInput {\n  clientMutationId: String!\n}\n\ntype CreateCardTransactionInsightMutingPolicyPayload {\n  cardTransactionInsightMutingPolicies: [CardTransactionInsightMutingPolicy]\n  clientMutationId: String!\n}\n\ninput UpdateApprovalsReviewsInput {\n  clientMutationId: String!\n  description: String\n  requestSnapshots: [ApprovalsRequestInput]\n  reviewIds: [ID!]!\n  status: ApprovalsReviewStatus!\n}\n\ntype PaymentEarlyAuthBalanceDecreaseCommitment implements Node {\n  expiresAt: Time!\n  fundingSourceCommitments: [PaymentFundingSourceBalanceDecreaseCommitment!]!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\ntype RuleConnection {\n  edges: [RuleEdge]\n  pageInfo: PageInfo!\n}\n\ntype CreateDepartmentPayload {\n  clientMutationId: String!\n  department: Department!\n}\n\ntype InvoicingInvoiceEdge {\n  cursor: String\n  node: InvoicingInvoice\n}\n\ntype NotifyAllUsersApprovalsEnabledPayload {\n  clientMutationId: String!\n}\n\ntype SetReceivablesOffersSellerAccountHasSeenFailingChecksErrorBannerPayload {\n  clientMutationId: String!\n  sellerAccount: ReceivablesOffersSellerAccount\n}\n\n\"\"\"Applications which belong to a specific user, rather than an account\"\"\"\nenum UserOnboardingBlueprintType {\n  \"\"\"Applications to change the user's cash role\"\"\"\n  CHANGE_ROLE\n  \"\"\"Onboarding flows to set up a user's account\"\"\"\n  USER_SETUP\n}\n\ntype AcceptMultipleReceivablesOffersGroupsPayload {\n  clientMutationId: String!\n  offersGroups: [ReceivablesOffersOffersGroup!]!\n}\n\ntype StatementUploadRequestTile implements Node {\n  \"\"\"Statement upload request due date in UTC time.\"\"\"\n  dueDate: Time!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\ninput GetRfiInput {\n  type: GetRfiInputType!\n  value: String!\n}\n\ntype CashTransactionInternationalWireReturnDetails {\n  \"\"\"Details from the transaction this return was for\"\"\"\n  originalDetails: CashTransactionInternationalWireDetails!\n  \"\"\"The reason why the original transaction was returned\"\"\"\n  returnReason: CashTransactionWireReturnReason!\n}\n\ntype DeleteUserInvitePayload {\n  clientMutationId: String!\n}\n\ntype CreateCashWireDetailsPayload {\n  clientMutationId: String!\n  report: Report!\n}\n\ntype CurrentBalancePaymentDetails {\n  \"\"\"Sum of all posted balance affecting entries for the customer minus the amount already requested.\"\"\"\n  balanceUsdCents: Int!\n  \"\"\"Time this payment will be processed\"\"\"\n  processingTime: Time!\n}\n\ntype CDaPayload {\n  clientMutationId: String!\n  onboardingApplication: OnboardingApplication!\n}\n\n\"\"\"Unexported expense count.\"\"\"\ntype UnexportedExpenseCount {\n  \"\"\"The result in integer.\"\"\"\n  count: Int\n}\n\ninput EftReceivingMethodInput {\n  accountNumber: String\n  beneficiaryName: String\n  routingNumber: String\n}\n\ninput RedeemForBalanceInput {\n  clientMutationId: String!\n  expectedBalanceAmountCents: Int!\n  idempotencyKey: String!\n  pointsToRedeem: Int!\n  redemptionOfferId: ID!\n  targetDepositsAccountId: ID!\n}\n\ntype InvoicingInvoice implements Node {\n  \"\"\"Creator of the invoice.\"\"\"\n  createdBy: String!\n  \"\"\"Discount amount of the invoice. If any, this is applied to subtotal to calculate the total_amount.\"\"\"\n  discountAmount: FinancialAsset\n  \"\"\"Discount percent of the invoice. If any, this is applied to subtotal to calculate the total_amount. \"\"\"\n  discountPercent: Float\n  \"\"\"Due date of the invoice\"\"\"\n  dueDate: Date\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Idempotency key.\"\"\"\n  idempotencyKey: String!\n  \"\"\"The invoice number.\"\"\"\n  invoiceNumber: String!\n  \"\"\"The invoicing account ID of the invoice.\"\"\"\n  invoicingAccountId: String!\n  \"\"\"Issued date of the invoice\"\"\"\n  issuedDate: Date\n  \"\"\"Invoice line items.\"\"\"\n  lineItems: [InvoiceLineItem]\n  \"\"\"The memo of the invoice.\"\"\"\n  memo: String\n  \"\"\"Payer contact\"\"\"\n  payer: InvoicingContact\n  \"\"\"The payment terms of the invoice.\"\"\"\n  paymentTerms: String\n  \"\"\"The status of the invoice.\"\"\"\n  status: InvoiceStatus!\n  \"\"\"A list of status change logs.\"\"\"\n  statusLogs: [InvoiceStatusLog]\n  \"\"\"Subtotal of the invoice. This is the amount before any discount is applied.\"\"\"\n  subtotal: FinancialAsset\n  \"\"\"Invoice template.\"\"\"\n  template: InvoiceTemplate\n  \"\"\"The title of the invoice.\"\"\"\n  title: String\n  \"\"\"The total amount of the invoice. This is the final amount after any discount is applied.\"\"\"\n  totalAmount: FinancialAsset\n  \"\"\"Last updator of the invoice.\"\"\"\n  updatedBy: String!\n}\n\ntype OptIntoIncentiveCampaignPayload {\n  clientMutationId: String!\n}\n\ntype FinancialSourceEdge {\n  cursor: String\n  node: FinancialSource\n}\n\ntype PullDataAsyncPayload {\n  clientMutationId: String!\n  updatedSource: FinancialSource\n}\n\nenum ExpensesRuleStatus {\n  ACTIVE\n  DISABLED\n}\n\n\"\"\"Representing the default erp category for a given contact and integration\"\"\"\ntype ContactDefaultErpCategory {\n  \"\"\"Integration that the entry is for\"\"\"\n  integration: Integration!\n  \"\"\"User category the entry is for\"\"\"\n  userCategory: UserCategory!\n}\n\ntype RefundTransactionPayload {\n  redemptionRate: Float!\n}\n\ntype CreateExpensesItemEventPayload {\n  clientMutationId: String!\n  expensesItemEvent: ExpensesItemEvent\n}\n\ntype DepositsAccount implements Node {\n  \"\"\"Whether funds can be withdrawn during the account closure process\"\"\"\n  canWithdrawFunds: CanWithdrawFundsResponse\n  name: String!\n  balance: Int!\n  \"\"\"Deprecated. Use cashTransactions() field instead.\"\"\"\n  payments(after: String, associationCriteria: AssociationCriteria, before: String, endTime: Time, first: Int, last: Int, onlyShowRecurringPayments: Boolean, startTime: Time, status: DepositsPaymentStatus, statuses: [DepositsPaymentStatus!]): DepositsPaymentConnection\n  balanceIn(timeWindowDays: Int!): Int! @deprecated(reason: \"This is still being called but not used functionally\")\n  payrollProvider: PayrollProvider\n  restrictAchDebits: Boolean!\n  \"\"\"Whether this account can enter the user-initiated offboarding process\"\"\"\n  canOffboard: CanOffboardResponse!\n  \"\"\"The account number, this will be null for restricted accounts\"\"\"\n  accountNumber: String\n  \"\"\"Whether the account has a brex originated ach debit\"\"\"\n  hasBrexOriginatedAchDebit: Boolean!\n  \"\"\"The color that will be associated with the account in the UI\"\"\"\n  displayColor: DepositsAccountsDisplayColor!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Whether the account has a settled external payment\"\"\"\n  hasSettledExternalPayment: Boolean!\n  \"\"\"Whether the account uses JPM for international wires\"\"\"\n  usesJpmForInternationalWires: Boolean!\n  achDebitLimits: AchDebitLimits!\n  balanceBreakdown: BalanceBreakdown\n  investmentPolicyBreakdown: InvestmentPolicyBreakdown!\n  \"\"\"List of all transaction types ever recorded in this account\"\"\"\n  visibleTransactionTypes: [DepositsTransactionType!]!\n  statements(after: String, before: String, endTime: Time, first: Int, last: Int, startTime: Time): DepositsStatementConnection\n  status: DepositsAccountStatus!\n  constants: Constants!\n  \"\"\"Whether the account has access to the international wires feature\"\"\"\n  canSendInternationalWires: Boolean!\n  \"\"\"Nickname specified by user for the account\"\"\"\n  nickname: String!\n  \"\"\"This is equivalent to can_add_funds\"\"\"\n  canSeeCashAccountDetails: Boolean!\n  \"\"\"The withdrawal of the account's balance initiated during the account closure process\"\"\"\n  offboardingWithdrawal: DepositsPayment\n  balanceOut(timeWindowDays: Int!): Int! @deprecated(reason: \"This is still being called but not used functionally\")\n  \"\"\"The withdrawal status of a possible offboarding process. Returns null if account is not being offboarded\"\"\"\n  withdrawalStatus: DepositsAccountsWithdrawalStatus\n  \"\"\"Whether the account has access to the add funds feature\"\"\"\n  canAddFunds: Boolean!\n  chequeDepositLimits: ChequeDepositLimits!\n  activatedAt: Time\n  counterparties(after: String, before: String, first: Int, last: Int): CounterpartyConnection\n  \"\"\"Total amount that the account has earned from dividend payouts\"\"\"\n  totalInterestYield: Int!\n  interestEarned(timeWindowDays: Int!): Int! @deprecated(reason: \"This is still being called but not used functionally\")\n  \"\"\"\n  Cash transactions belonging to the deposits account. Statuses is the\n  only required filter. Supports first: and after: cursor based pagination.\n  \"\"\"\n  cashTransactions(after: String, before: String, endInitiatedAt: Time, endProcessedAt: Time, endScheduledSendAt: Time, first: Int, isRecurring: Boolean, last: Int, maxAmountUsdCents: Int, minAmountUsdCents: Int, orderBy: [CashTransactionOrderBy!], origin: CashTransactionOrigin, paymentMethod: CashTransactionPaymentMethod, recurringScheduleId: ID, searchQuery: String, startInitiatedAt: Time, startProcessedAt: Time, startScheduledSendAt: Time, statuses: [CashTransactionStatus!]!, transactionTypes: [CashTransactionType!]): CashTransactionConnection\n  \"\"\"Whether this account is primary or non_primary\"\"\"\n  priority: DepositsAccountsPriority!\n  \"\"\"Whether the account has access to outgoing ach debits\"\"\"\n  canAchDebit: Boolean!\n  \"\"\"LendingClub migration status for account\"\"\"\n  migrationStatus: AccountMigrationStatus\n  \"\"\"Whether the account is allowed to send outgoing ACH/Wire/Cheque\"\"\"\n  canSendPayment: Boolean!\n  \"\"\"Whether the account is subject to ACH payout delay\"\"\"\n  hasAchPayoutDelay: Boolean!\n  \"\"\"Whether the account is allowed to apply for Instant Payouts\"\"\"\n  canApplyForInstantPayouts: Boolean!\n  transactions(after: String, before: String, endTime: Time, first: Int, last: Int, origin: Origin, paymentMethod: Method, recurringPaymentId: ID, startTime: Time, status: Status): DepositsTransactionConnection\n  \"\"\"Account's status reason (optional)\"\"\"\n  statusReason: DepositsAccountStatusReason\n  \"\"\"Deprecated. Use cashTransactions() field instead.\"\"\"\n  searchDepositsTransactions(after: String, before: String, endTime: Time, first: Int, last: Int, query: String, recurringPaymentId: ID, startTime: Time, status: Status): DepositsTransactionConnection\n  \"\"\"Whether points should be automatically withdrawn during the account closure process\"\"\"\n  shouldWithdrawPoints: ShouldWithdrawPointsResponse\n  routingNumber: String!\n  internationalCountriesTransactedWith: [String!]!\n}\n\ninput CancelCollectionIntentionInput {\n  clientMutationId: String!\n  id: ID!\n}\n\ntype InternalEntitySyncErrorEdge {\n  cursor: String\n  node: InternalEntitySyncError\n}\n\nunion RewardsRedemptionOfferPayload = AscendaTransferPayload | CashBalancePayload | InstantPayoutsFeePayload | IssuerTransactionPayload | RefundTransactionPayload\n\ninput UpdateInstitutionLoginInput {\n  clientMutationId: String!\n  financialSourceId: ID!\n}\n\ninput CreateStatementEntriesSearchReportInput {\n  clientMutationId: String!\n  \"\"\"Time in user's timezone that report is generated\"\"\"\n  displayTime: Time!\n  format: ReportFormat!\n  statementEntriesFilters: Json!\n  type: ReportType\n}\n\ntype CreateMonthlyUserLimitIncreasePayload {\n  clientMutationId: String!\n  monthlyUserLimitInfo: MonthlyUserLimitInfo\n}\n\nenum FacetType {\n  CONFLICTING\n  CUSTOM\n  INVALID\n  MERCHANT\n  OVERRIDE\n}\n\nunion AggregationResult = DateHistogramAggregationResult | GroupAggregationResult | SumAggregationResult\n\ninput FinishChannelVerificationInput {\n  clientMutationId: String!\n  id: ID!\n  verificationToken: String!\n}\n\ninput DisableReimbursementsInput {\n  clientMutationId: String!\n  id: ID!\n}\n\n\"\"\"Affiliate bonus\"\"\"\ntype AffiliateBonus implements Node {\n  \"\"\"bonus amount in centi-points if user completes bonus\"\"\"\n  bonusAmountCentipoints: Int!\n  \"\"\"how much the customer has currently spent (cents)\"\"\"\n  currentProgress: Int!\n  \"\"\"when the bonus expires\"\"\"\n  expiresAt: Time\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"when the bonus was payed out\"\"\"\n  payedOutAt: Time\n  \"\"\"how much the customer has to spend to earn the bonus (cents)\"\"\"\n  payoutThreshold: Int!\n  \"\"\"Status of affiliate bonus\"\"\"\n  status: AffiliateBonusStatus!\n  \"\"\"user description\"\"\"\n  userDescription: String!\n}\n\nenum PaymentApprovalDecision {\n  APPROVED\n  CANCELLED\n  DENIED\n  PENDING\n}\n\ninput UpdatePositivePayAccountSettingInput {\n  achCompanyId: String\n  clientMutationId: String!\n  id: ID!\n  name: String\n  status: PositivePayAccountSettingStatus\n}\n\ninput CreateApprovalsPoliciesInput {\n  approvalsProductPolicies: [ApprovalsProductPolicy!]\n  clientMutationId: String!\n}\n\ntype WireBank {\n  beneficiaryAccountNumber: String!\n  beneficiaryAccountType: String!\n  beneficiaryCity: String!\n  beneficiaryName: String!\n  beneficiaryState: String!\n  beneficiaryStreet: String!\n  beneficiarySuite: String!\n  beneficiaryZip: String!\n  city: String!\n  name: String!\n  state: String!\n  street: String!\n  suite: String!\n  swiftCode: String!\n  zip: String!\n}\n\ninput ApprovalsRuleGroupInput {\n  isDefault: Boolean\n  matchers: [ApprovalsRuleGroupMatcherInput!]!\n  routingRules: [ApprovalsRoutingRuleInput!]!\n}\n\ntype UpdateExpensesSettingAutoDismissMatcherJsonPayload {\n  clientMutationId: String!\n  expensesSetting: ExpensesSetting\n}\n\ninput SubsidiaryInput {\n  name: String!\n  vendorInternalId: String!\n}\n\ntype DisableUserPayload {\n  clientMutationId: String!\n  user: User\n}\n\nenum DepositsAccountStatus {\n  ACTIVE\n  CLOSED\n  REJECTED\n  RESTRICTED\n  SUSPENDED\n}\n\ntype DividendDetails {\n  forFinancialInstrument: FinancialInstrument\n  paidOn: Time\n}\n\ntype FinancialSource implements Node {\n  accounts(after: String, before: String, first: Int, last: Int): FinancialAccountConnection\n  fixRequired: Boolean!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  institution: FinancialInstitution\n  lastSyncTime: Time\n  payload: FinancialSourcePayload!\n  status: FinancialSourceStatus!\n  vendor: FinancialsVendor!\n}\n\ntype BillingPaymentConnection {\n  edges: [BillingPaymentEdge]\n  pageInfo: PageInfo!\n}\n\nunion InitiatedBy = AutoInitiated | CustomerInitiated | InternalInitiated\n\ntype NotificationTileEdge {\n  cursor: String\n  \"\"\"Notification Tile Node\"\"\"\n  node: NotificationTile\n}\n\ntype CreatePremiumSettingEventPayload {\n  clientMutationId: String!\n  premiumSetting: PremiumSetting\n}\n\ntype CreditLimitEducationTile implements Node {\n  \"\"\"Customer's global limit and balance consumption\"\"\"\n  balanceSummary: AccountBalanceSummary!\n  \"\"\"Credit Limit Factors Connection\"\"\"\n  creditLimitFactorTiles(after: String, before: String, first: Int, last: Int): CreditLimitFactorTileConnection\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\ninput AdvanceToNextStepInput {\n  clientMutationId: String!\n  completedOfferStep: OfferSetupStepType!\n  offerType: OfferType!\n}\n\ntype FinancialInstitution implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  imageUrls: FinancialInstitutionImageUrls\n  loginFields: [FinancialLoginField]\n  loginInstructions: String\n  name: String\n  order: Int\n  status: FinancialInstitutionStatus\n  vendorsMapping: [VendorInstitution]\n  website: String\n}\n\nunion CardStatementPolicyCycle = BiweeklyCardStatementPolicyCycle | EveryNDaysCardStatementPolicyCycle | MonthlyCardStatementPolicyCycle | SemiMonthlyCardStatementPolicyCycle | SemiWeeklyCardStatementPolicyCycle | WeeklyCardStatementPolicyCycle\n\n\"\"\"Intacct GL account settings\"\"\"\ntype IntacctCategories {\n  \"\"\"Default accounts payable GL account\"\"\"\n  accountsPayableUserCategory: UserCategory\n  \"\"\"Default collections GL account\"\"\"\n  collectionTargetUserCategory: UserCategory\n  \"\"\"Default rewards GL account\"\"\"\n  rewardsIncomeUserCategory: UserCategory\n}\n\ninput RecordMarketingRewindWatchInput {\n  clientMutationId: String!\n  year: MarketingRewindYear!\n}\n\n\"\"\"Configuration for statement informtation requests\"\"\"\ntype FinancialInformationRequestConfigStatement implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The month of the requested statement\"\"\"\n  requestedMonth: Int!\n  \"\"\"The year of the requested statement\"\"\"\n  requestedYear: Int!\n}\n\ntype CreateFinancialBankStatementForNewAccountPayload {\n  clientMutationId: String!\n}\n\ninput UpdateCardDisplayNameInput {\n  clientMutationId: String!\n  displayName: String!\n  id: ID!\n}\n\ntype WireDetails {\n  \"\"\"For a returned wire, this is the difference between the original wire amount vs what was actually returned back due to the beneficiary bank taking a fee.\"\"\"\n  amountDriftUsdCents: Int\n  \"\"\"The sending bank's reference number for this wire (F20 of the MT103)\"\"\"\n  bankReferenceNumber: String\n  counterparty: Counterparty!\n  endToEndId: String\n  estimatedOn: Time!\n  estimatedOnLatest: Time\n  fedReferenceNumber: String\n  imad: String\n  initiatorCustomerUser: User\n  method: Method!\n  mt103: String\n  omad: String\n  origin: Origin!\n  transferDescription: String\n}\n\n\"\"\"A snapshot of an account available balance at a point in time\"\"\"\ntype InsightsAvailableBalanceSnapshot {\n  \"\"\"Available snapshot value\"\"\"\n  amountUsdCents: Long!\n  \"\"\"Timestamp of the snapshot value\"\"\"\n  timestamp: Time!\n}\n\n\"\"\"View data for cash balance tooltip\"\"\"\ntype IncentivePlacementViewDataCashBalanceTooltip {\n  \"\"\"Message to display in hover state of tooltip\"\"\"\n  message: String!\n  \"\"\"Placement\"\"\"\n  placement: IncentivePlacement!\n}\n\nenum PromotionsCategory {\n  PRODUCT_ANNOUNCEMENT\n  PRODUCT_TOUR\n  RECOMMENDED_FEATURE\n}\n\ntype LoyaltyProgramConfig {\n  alliance: LoyaltyProgramAlliance!\n  membershipIdRegex: String!\n  minimumMiles: Int!\n}\n\nenum PaymentStatus {\n  FAILED\n  PROCESSING\n  REVERSED\n  SCHEDULED\n  SUCCESSFUL\n}\n\nunion ClosingStrategy = BiweeklyClosingStrategy | EveryNDaysClosingStrategy | MonthlyClosingStrategy | SemiMonthlyClosingStrategy | SemiWeeklyClosingStrategy | WeeklyClosingStrategy\n\ninput CreatePositivePayAccountSettingInput {\n  achCompanyId: String!\n  clientMutationId: String!\n  name: String!\n  status: PositivePayAccountSettingStatus!\n}\n\nenum OnboardingInformationRequestType {\n  EXTRA\n  INITIAL\n}\n\n\"\"\"The individual user type\"\"\"\ntype UserTypeIndividual implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The approval user\"\"\"\n  user: ApprovalsUser!\n}\n\ninput DeleteHrisConnectionInput {\n  clientMutationId: String!\n  \"\"\"The connection id\"\"\"\n  id: ID!\n}\n\nenum CardPaymentForwarderDocumentStatus {\n  DELETED\n  INVALID\n  REQUESTED\n  SUBMITTED\n}\n\ntype FinancialBankStatementDocumentConnection {\n  edges: [FinancialBankStatementDocumentEdge]\n  pageInfo: PageInfo!\n}\n\ntype AchReturnDetails {\n  counterparty: Counterparty!\n  initiatorCustomerUser: User\n  method: Method!\n  origin: Origin!\n  returnReason: ReturnReason!\n}\n\ntype FinancialBalance implements Node {\n  \"\"\"Time of balance\"\"\"\n  accrualTime: Time!\n  \"\"\"Amount of balance in cents\"\"\"\n  amount: Int!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\n\"\"\"Default generic history entry payload\"\"\"\ntype RewardsHistoryEntryPayloadGeneric {\n  \"\"\"Direct json from rewards service\"\"\"\n  payload: Json\n}\n\ntype ExternalIntegrationFieldEdge {\n  cursor: String\n  node: ExternalIntegrationField\n}\n\ntype CardEdge {\n  cursor: String\n  node: Card\n}\n\ninput CreateExpensesItemEventInput {\n  action: ExpensesItemEventAction!\n  clientMutationId: String!\n  description: String\n  itemId: ID!\n}\n\ntype CreateDepositsApplicationPayload {\n  clientMutationId: String!\n  onboardingApplication: OnboardingApplication!\n}\n\n\"\"\"A request for the user to submit financial documents such as statements\"\"\"\ntype FinancialInformationRequest implements Node {\n  config: FinancialInformationRequestConfig!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  status: FinancialInformationRequestStatus!\n}\n\nenum UnderwritingAccountStatus {\n  APPROVED\n  PENDING\n  PROVISIONALLY_APPROVED\n  REJECTED\n}\n\ntype RewardsPointsHistoryEntryEdge {\n  cursor: String\n  node: RewardsPointsHistoryEntry\n}\n\ntype CreateApprovalsPoliciesPayload {\n  approvalsPolicies: [ApprovalsPolicy!]\n  clientMutationId: String!\n}\n\ntype DisconnectFspAndClientPayload {\n  clientMutationId: String!\n}\n\nenum Origin {\n  BREX\n  EXTERNAL\n}\n\ntype SaveOnboardingInformationRequestPayload {\n  clientMutationId: String!\n  informationRequest: OnboardingInformationRequest!\n}\n\ninput AchPaymentInstrumentFindInput {\n  accountNumber: String!\n  routingNumber: String!\n}\n\ntype CollectionAttemptEdge {\n  cursor: String\n  node: CollectionAttempt\n}\n\ninput CreateVirtualCardInput {\n  budgetId: ID\n  cardLimit: CardLimit\n  clientMutationId: String!\n  customerUserId: ID\n  defaultMemo: String\n  displayName: String\n  holderName: String!\n  isBudgetCard: Boolean\n  isPreapproved: Boolean\n  softExpiresAt: Time\n}\n\ntype NetsuiteSubsidiary {\n  name: String!\n  vendorInternalId: String!\n}\n\ntype Merchant implements Node @key(fields: \"id\") {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  merchantCategory: MerchantCategory\n  merchantIcon: MerchantIcon\n  name: String\n  status: String\n  website: String\n}\n\ninput ApprovalsRequestMonthlyLimitOverrideInput {\n  amount: Int!\n  endsAt: Time!\n}\n\ntype CashTransactionFboTransferDetails {\n  \"\"\"FBO account type\"\"\"\n  fboAccountName: String\n}\n\nenum InvoicingAccountStatus {\n  ACTIVE\n  DEACTIVATED\n  INVALID\n  SUSPENDED\n}\n\ntype ExpensesSetting implements Node {\n  autoDismissMatcherJson: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  insertedAt: Time\n  rules(after: String, before: String, first: Int, last: Int): ExpensesRuleConnection\n  status: ExpensesSettingStatus\n}\n\ninput ConnectCredentialInput {\n  clientMutationId: String!\n  id: ID!\n  redirectUrl: String!\n}\n\ninput DeletePositivePayAccountSettingInput {\n  achCompanyId: ID!\n  clientMutationId: String!\n}\n\ntype CollectionIntentionConnection {\n  edges: [CollectionIntentionEdge]\n  pageInfo: PageInfo!\n}\n\nunion RewardsBonus = AffiliateBonus | CashActivationSpendBonus | CashLinkedAccountBonus | IncentivePlacementViewDataBanner | IncentivePlacementViewDataRewardsPageCheckbox | IncentivePlacementViewDataRewardsPageScale | IncentivePlacementViewDataRewardsPageThreshold\n\ntype MilesTransfer implements Node {\n  failureReasons: [MilesTransferFailureReason]\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  initiatedByUser: User\n  insertedAt: Time\n  loyaltyProgram: LoyaltyProgram\n  milesAmount: Int\n  pointsAmount: Int\n  programMembership: ProgramMembership\n  referenceId: String!\n  status: MilesTransferStatus\n  toUser: User\n}\n\ninput CreateContactInput {\n  clientMutationId: String!\n  email: String\n  idempotencyKey: String!\n  name: String!\n  payeeType: PayeeType = VENDOR\n  phoneNumber: String\n}\n\ntype OnboardingApplication implements Node {\n  \"\"\"The blueprint that this application will follow\"\"\"\n  blueprint: OnboardingBlueprint!\n  \"\"\"The application creator, null when applicant is not an admin\"\"\"\n  createdByUser: User\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Information requests to be completed by the applicant\"\"\"\n  informationRequests(after: String, before: String, first: Int, last: Int): OnboardingInformationRequestConnection\n  \"\"\"The total number of information requests\"\"\"\n  informationRequestsCount: Int!\n  \"\"\"the timestamp of when this application is inserted into DB\"\"\"\n  insertedAt: Time\n  \"\"\"For risk evaluation applications this will be true when ready_for_review_at is not empty\"\"\"\n  isEvidenceResubmission: Boolean\n  \"\"\"Flag that says if the application is submitted or not\"\"\"\n  isSubmitted: Boolean!\n  \"\"\"Extra state values for an application, for product applications this contains cash/card outcomes\"\"\"\n  state: OnboardingApplicationState!\n  \"\"\"The status of the application\"\"\"\n  status: OnboardingApplicationStatus!\n  \"\"\"the submitted timestamp\"\"\"\n  submittedAt: Time\n}\n\n\"\"\"Card Overview Page\"\"\"\ntype CardOverviewPage {\n  \"\"\"Card Overview Insights Tiles Connection\"\"\"\n  cardOverviewInsightsTiles(after: String, before: String, first: Int, last: Int): CardOverviewInsightsTileConnection\n  \"\"\"Card Overview Summary Tiles Connection\"\"\"\n  cardOverviewSummaryTiles(after: String, before: String, first: Int, last: Int): CardOverviewSummaryTileConnection\n  \"\"\"Education Connection\"\"\"\n  educationTiles(after: String, before: String, first: Int, last: Int): EducationTileConnection\n  \"\"\"Notifications Connection\"\"\"\n  notificationTiles(after: String, before: String, first: Int, last: Int): NotificationTileConnection\n}\n\ntype ContactAddress {\n  \"\"\"Address 1\"\"\"\n  address1: String!\n  \"\"\"Address 2\"\"\"\n  address2: String\n  \"\"\"City\"\"\"\n  city: String!\n  \"\"\"Country\"\"\"\n  country: String!\n  \"\"\"First name\"\"\"\n  firstName: String!\n  \"\"\"Last name\"\"\"\n  lastName: String!\n  \"\"\"State\"\"\"\n  state: String!\n  \"\"\"Zip code\"\"\"\n  zip: String!\n}\n\nenum InstrumentCode {\n  NASDAQ_DAGXX\n  NASDAQ_DGCXX\n  NASDAQ_DGVXX\n  NASDAQ_DPGXX\n  NASDAQ_GGBXX\n  NASDAQ_GGDXX\n  NASDAQ_GGSXX\n  NASDAQ_GSBXX\n  USD\n}\n\n\"\"\"Connection Node Type Card Overview Summary Tile\"\"\"\ntype CardOverviewSummaryTileConnection {\n  edges: [CardOverviewSummaryTileEdge]\n  pageInfo: PageInfo!\n}\n\nenum OfferType {\n  CASH_FORWARD\n  SB30\n  SDC\n  UNKNOWN\n}\n\n\"\"\"account-level spend alerts config\"\"\"\ntype SpendAlertsConfigurationDetails {\n  \"\"\"all muting configurations for this account\"\"\"\n  alertTypeMutingConfigurations: [AlertTypeMutingConfigurations!]!\n  \"\"\"alerts enabled for this account\"\"\"\n  enabledAlertTypes: [SpendAlertType!]!\n  \"\"\"users muted from all alerts\"\"\"\n  universallyMutedUserIds: [ID!]!\n}\n\ntype ChangeInvestmentPolicyPayload {\n  clientMutationId: String!\n}\n\ninput DisconnectApiClientInput {\n  clientId: String!\n  clientMutationId: String!\n}\n\ntype RecurringRules {\n  ends: String!\n  howOften: String!\n}\n\n\"\"\"Cash Activation Spend Bonus\"\"\"\ntype CashActivationSpendBonus {\n  amountSpentRequiredUsdCents: Int!\n  amountSpentUsdCents: Int!\n  completedAt: Time\n  expiresAt: Time\n  rewardAmount: Int!\n  status: CashBonusStatus!\n}\n\ntype DismissCardFraudAlertsPayload {\n  clientMutationId: String!\n  fraudAlerts: [FraudAlert!]!\n}\n\ninput CreateOrUpdatePaymentInput {\n  amount: FinancialAssetInput\n  cardId: ID\n  description: String\n  idempotencyKey: String!\n  invoice: CardPaymentForwarderInvoiceInput\n  paymentId: ID\n  recipient: CardPaymentForwarderRecipientInput\n}\n\n\"\"\"64Bit integer\"\"\"\nscalar Long\n\ntype ExpensesItemEdge {\n  cursor: String\n  node: ExpensesItem\n}\n\ntype CardLimitSummary {\n  amount: Int!\n  frequency: CardLimitFrequency!\n}\n\ntype SetUserRolePayload {\n  clientMutationId: String!\n  user: User\n}\n\ntype UpdateLocationPayload {\n  clientMutationId: String!\n  location: Location!\n}\n\ninput ShippingAddressInput {\n  address: AddressInput!\n  firstName: String!\n  lastName: String!\n}\n\ntype CredentialSuccessResult {\n  credential: Credential\n}\n\nenum InsightStatus {\n  ARCHIVED\n  FOR_REVIEW\n  INVALID\n}\n\n\"\"\"The individual routing rule\"\"\"\ntype ApprovalsRoutingRuleIndividuals implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"A list of allowed approver ids\"\"\"\n  staticAllowedApproverUserIds: [ID!]!\n}\n\ninput LegalAgreementReference {\n  name: String!\n  version: String!\n}\n\nunion ReceivingMethod = AchReceivingMethod | CheckReceivingMethod | EftReceivingMethod | WireReceivingMethod\n\ntype CashTransactionOutgoingChequeDetails {\n  \"\"\"The address of the recipient\"\"\"\n  address: Address\n  \"\"\"The memo found on the physical cheque\"\"\"\n  chequeMemo: String\n  \"\"\"The cheque number found on the physical cheque\"\"\"\n  chequeNumber: Int\n  \"\"\"The email of the recipient\"\"\"\n  email: String\n  \"\"\"Expected delivery date provided from our 3rd party vendor that sends the physical cheques\"\"\"\n  expectedDeliveryDate: Date\n  \"\"\"When the physical cheque was mailed at by our 3rd party vendor\"\"\"\n  mailedAt: Time\n  \"\"\"The name of the recipient. This field is used, for example, when sending a cheque\"\"\"\n  recipientName: String\n}\n\nenum BankAccountType {\n  CHECKING\n  SAVINGS\n}\n\ninput UpdateUserInput {\n  clientMutationId: String!\n  departmentId: ID\n  firstName: String\n  id: ID!\n  lastName: String\n  locationId: ID\n}\n\n\"\"\"A cycle reoccurring twice a week on two particular days.\"\"\"\ntype SemiWeeklyCardStatementPolicyCycle {\n  \"\"\"The first day of the week.\"\"\"\n  firstDay: Int\n  \"\"\"The second day of the week.\"\"\"\n  secondDay: Int\n}\n\ninput CreateReimbursementInput {\n  clientMutationId: String!\n  reimbursementMetadata: ReimbursementMetadataInput!\n}\n\nenum EarlyAccessFeatureMediaAssetType {\n  IMAGE\n  VIDEO\n}\n\nenum CashTransactionStatus {\n  APPROVAL_REQUIRED\n  DELETED\n  DRAFT\n  FAILED\n  INVALID\n  PROCESSED\n  PROCESSING\n  SCHEDULED\n}\n\ntype CreatePushChannelPayload {\n  channel: Channel!\n  clientMutationId: String!\n}\n\ntype WireReceivingMethod {\n  accountNumber: String\n  beneficiaryName: String\n  country: String\n  routingNumber: String\n}\n\nenum Type {\n  CHECKING\n  SAVINGS\n}\n\ninput TurnOnSeenFlagInput {\n  clientMutationId: String!\n  \"\"\"Target flag by key\"\"\"\n  key: SeenFlagKey!\n}\n\ntype RecordMarketingRewindWatchPayload {\n  clientMutationId: String!\n  video: MarketingRewindVideo\n}\n\nenum BillingPaymentIntentSourceType {\n  COLLECT_FUNDING_SOURCE\n  DEPOSITS_ACCOUNT\n  OFFLINE\n  PAYEE_DIRECTORY_PAYMENT_INSTRUMENT\n  REWARDS_REDEMPTION\n}\n\nenum OrderBy {\n  ASC\n  DESC\n  INVALID\n}\n\ninput CreateEmailChannelInput {\n  clientMutationId: String!\n  email: Email!\n}\n\ntype CreateAutoAddFundsPayload {\n  clientMutationId: String!\n  payment: DepositsPayment!\n}\n\n\"\"\"The manager user type\"\"\"\ntype UserTypeManager implements Node {\n  \"\"\"The fallback user id when the request initiator does not have a manager\"\"\"\n  fallbackUser: ApprovalsUser!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\ninput CreateFundingSourceInput {\n  bankAccountSource: BankAccountSourceInput!\n  clientMutationId: String!\n  idempotencyKey: String!\n  priority: FundingSourcePriority\n  type: String!\n}\n\ninput ApprovalsPolicyDetailsInput {\n  ruleGroups: [ApprovalsRuleGroupInput!]!\n  version: Int!\n}\n\ninput CreateLocationInput {\n  clientMutationId: String!\n  description: String\n  name: String!\n}\n\ninput UpdatePlaidLinkTokenInput {\n  clientMutationId: String!\n  financialSourceId: ID!\n  redirectUri: String\n}\n\ntype RewardsBonusConnection {\n  edges: [RewardsBonusEdge]\n  pageInfo: PageInfo!\n}\n\ninput AdminUpdateApprovalsReviewsInput {\n  clientMutationId: String!\n  description: String\n  requestSnapshots: [ApprovalsRequestInput]\n  reviewIds: [ID!]!\n  status: ApprovalsReviewStatus!\n}\n\ntype PaymentFundingSourceBalanceDecreaseCommitment {\n  collectFundingSourceId: ID!\n  fundingSource: FundingSource!\n  maxBalanceDecreaseAmount: FinancialAsset!\n}\n\ntype UpdateApprovalsReviewPayload {\n  approvalsReview: ApprovalsReview\n  clientMutationId: String!\n}\n\n\"\"\"The payout associated with the receivables offers service (i.e., `rodetlpo_`).\"\"\"\ntype ReceivablesOffersPayout implements Node {\n  \"\"\"\n  The list of accepted offers that are linked to this payout. This includes both\n  cash advances, as well as offers accepted as part of transaction clearings\n  \"\"\"\n  acceptedOffers: [ReceivablesOffersOffer]\n  \"\"\"Total of cash advances made on offers based on this payout so far\"\"\"\n  acceptedOffersCashAdvancedAmount: FinancialAsset\n  \"\"\"Total fee amount for offers based on this payout so far\"\"\"\n  acceptedOffersCashFeeAmount: FinancialAsset\n  \"\"\"The current active instant payout (generated) offer associated with this payout\"\"\"\n  activeOffer: ReceivablesOffersOffer\n  \"\"\"The current known amount of the payout. This may change for open payouts as sales accumulate.\"\"\"\n  amount: FinancialAsset\n  \"\"\"Sum of balances across all offers associated with this payout that back card transactions\"\"\"\n  cardBalance: FinancialAsset\n  \"\"\"Sum of accepted offer amounts across all offers associated with this payout that back card transactions\"\"\"\n  cardSpend: FinancialAsset\n  \"\"\"JournalEntries to display Revenue Access Card transactions associated with the payout\"\"\"\n  cardTransactionJournalEntries(limit: Int!): [JournalEntry]!\n  \"\"\"The actual or expected arrival date for the payout\"\"\"\n  expectedTransferArrivalAt: Time\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The list of payment intents representing collections on offers linked to this payout\"\"\"\n  paymentIntents(after: String, before: String, first: Int, last: Int): ReceivablesOffersPaymentIntentConnection\n  \"\"\"The vendor or sales platform, i.e., Amazon, Shopify, etc.\"\"\"\n  vendor: ReceivablesOffersVendor!\n  \"\"\"The id of the payout on the vendor (sales platform, i.e., Amazon, Shopify, etc.)\"\"\"\n  vendorPayoutId: String!\n}\n\n\"\"\"The information about an attempt to make a payment\"\"\"\ntype BillingPayment implements Node {\n  \"\"\"The amount of this payment that has been collected\"\"\"\n  collectedAmount: FinancialAsset!\n  \"\"\"The time at which the payment most recently completed\"\"\"\n  collectedAt: Time\n  \"\"\"The customer account id of this payment\"\"\"\n  customerAccountId: String!\n  \"\"\"The cause of failure\"\"\"\n  failureType: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The time at which the payment was initiated\"\"\"\n  initiatedAt: Time\n  \"\"\"The details of who/what initiated the payment\"\"\"\n  initiatedBy: InitiatedBy!\n  \"\"\"The backend data model id of this billing payment\"\"\"\n  rawId: String!\n  \"\"\"The amount for which this payment was requested\"\"\"\n  requestedAmount: FinancialAsset!\n  \"\"\"The amount of this payment that has been reversed\"\"\"\n  reversedAmount: FinancialAsset!\n  \"\"\"The time the payment was scheduled for\"\"\"\n  scheduledFor: Time!\n  \"\"\"The details about the source of this payment\"\"\"\n  source: BillingPaymentSource!\n  \"\"\"The life cycle status of this payment\"\"\"\n  status: PaymentStatus!\n}\n\ninput ConnectWeavCredentialInput {\n  clientMutationId: String!\n  fetchPolicy: String\n  id: ID!\n  platform: WeavSalesPlatform!\n  redirectUrl: String!\n  shopifyStore: String\n}\n\ntype WeeklyClosingStrategy {\n  dayOfWeek: Int\n}\n\ntype UpdateUserEmailPayload {\n  clientMutationId: String!\n  user: User!\n}\n\ntype CredentialWeavPayload {\n  platform: WeavSalesPlatform!\n  shopifyStore: String\n  vendorId: String\n}\n\n\"\"\"View data for rewards page checkbox\"\"\"\ntype IncentivePlacementViewDataRewardsPageCheckbox {\n  \"\"\"Bonus if achieved (cents)\"\"\"\n  bonus: Int!\n  \"\"\"Description of bonus (potentially to put in modal)\"\"\"\n  description: String!\n  \"\"\"Time when the user was paid the points, null if they haven't been paid\"\"\"\n  payedOutAt: Time\n  \"\"\"Placement\"\"\"\n  placement: IncentivePlacement!\n  \"\"\"Short description (quick summary)\"\"\"\n  shortDescription: String!\n  \"\"\"Status\"\"\"\n  status: IncentivePlacementViewDataStatus\n  \"\"\"steps that are supposed to be completed for this reward\"\"\"\n  steps: [RewardsPageCheckboxStep!]!\n  \"\"\"Title\"\"\"\n  title: String!\n}\n\ninput CreateMerchantDisputeInput {\n  clientMutationId: String!\n  evidenceAssetIds: [ID!]\n  expectedAmount: Int\n  reason: String!\n  relatedTransactionIds: [ID!]\n  transactionIds: [ID!]!\n}\n\ntype ExternallyOriginatedChequeDetails {\n  backImageSrc: String\n  chequeMemo: String\n  frontImageSrc: String\n  initiatorCustomerUser: User\n  returnReason: ReturnReason\n  senderName: String\n  type: TxType\n}\n\ninput FinancialAssetInput {\n  \"\"\"The instrument code (usd, etc.). Currently, only usd is supported.\"\"\"\n  instrumentCode: FinancialInstrumentCode = USD\n  \"\"\"The amount in cents\"\"\"\n  quantityCents: Int\n}\n\nunion InsightMetadata = InsightMetadataDuplicateSubscriptions | InsightMetadataHighSpend | InsightMetadataSaasIncrease | InsightMetadataSpendIncrease\n\ninput UpdateTransactionCategoryInput {\n  clientMutationId: String!\n  transactionId: ID!\n  userCategoryId: String!\n}\n\nenum SortColumn {\n  AMOUNT\n  DEPARTMENT\n  INVALID\n  MERCHANT_CATEGORY\n  MERCHANT_NAME\n  POSTED_AT\n  USER_NAME\n}\n\ntype ChannelConnection {\n  edges: [ChannelEdge]\n  pageInfo: PageInfo!\n}\n\ninput CreatePhysicalCardInput {\n  budgetId: ID\n  clientMutationId: String!\n  customerUserId: ID\n  defaultMemo: String\n  displayName: String\n  holderName: String!\n  shippingAddress: AddressInput!\n}\n\ninput ConnectShopifyCredentialInput {\n  clientMutationId: String!\n  id: ID!\n  redirectUrl: String!\n  shopName: String!\n}\n\ntype DepositsMonthlySchedule {\n  dayOccurrence: Int\n  dayOfMonth: Int\n  dayOfWeek: BusinessDays\n  nMonths: Int!\n  weekOfMonth: Int\n}\n\nenum BillableStatus {\n  BILLABLE\n  HAS_BEEN_BILLED\n  NOT_BILLABLE\n}\n\nenum ReceivablesOffersOffersGroupStatus {\n  ACCEPTED\n  ADVANCED\n  INVALID\n  LIABILITIES_TRACKED\n  PREPARED\n  SETTLED\n}\n\ntype IntegrationErrorDetails implements Node {\n  count: Int!\n  errorMessage: String\n  errorSubtype: String\n  errorType: String!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  maxPostedAt: Time\n  minPostedAt: Time\n}\n\nenum Issuer {\n  EMIGRANT\n  FIFTH_THIRD\n  INVALID\n  SUTTON\n}\n\ninput SaveOnboardingInformationRequestInput {\n  clientMutationId: String!\n  data: Json\n  id: ID!\n}\n\ntype Account implements Node @key(fields: \"id\") {\n  estimatedUpcomingDueAmounts(numDays: Int!): [UpcomingDueAmount]\n  \"\"\"This is actually the enabled funding sources, please use enabled_funding_sources field\"\"\"\n  fundingSources(after: String, before: String, first: Int, last: Int): FundingSourceConnection\n  \"\"\"\n  Duplicated from deposits account level. Retrieves matching payments\n  for a given customer account\n  \"\"\"\n  payments(after: String, associationCriteria: AssociationCriteria, before: String, depositsAccountId: ID, endTime: Time, first: Int, last: Int, onlyShowRecurringPayments: Boolean, startTime: Time, status: DepositsPaymentStatus, statuses: [DepositsPaymentStatus!]): DepositsPaymentConnection\n  \"\"\"Amount we're currently trying to collect for this customer\"\"\"\n  scheduledCollectionAmount: Int\n  currentBillingPeriod: BillingPeriod\n  \"\"\"Bill Pay's unique email for invoice processing\"\"\"\n  billForwardingEmailAddress: String\n  \"\"\"The journal account corresponding to the primary card loan for this customer\"\"\"\n  cardCustomerJournalAccount: JournalAccount\n  depositsAccounts(after: String, before: String, first: Int, id: ID, last: Int, status: DepositsAccountStatus): DepositsAccountConnection\n  \"\"\"User's intent for signing up for brex\"\"\"\n  signupIntent: [String]\n  \"\"\"The external accounts the user had when they signed up (e.g. Shopify, Amazon, etc)\"\"\"\n  externalAccounts: [String]\n  users(after: String, before: String, first: Int, last: Int): UserConnection\n  companyType: CompanyType\n  \"\"\"Total amount of transactions by customer that have had auth but no clearing event\"\"\"\n  balancePending: Int\n  legalName: String\n  \"\"\"Number of points available to account\"\"\"\n  pointsBalance: Int\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Is inviting users on the account allowed\"\"\"\n  canInviteUsers: Boolean!\n  \"\"\"Billing payments made by this customer account\"\"\"\n  billingPayments(after: String, before: String, cardPaymentsOnly: Boolean, first: Int, from: String, last: Int, scheduledForOrder: OrderBy, status: PaymentStatus, to: String): BillingPaymentConnection\n  \"\"\"Returns the type of the accepted product offer for this account\"\"\"\n  acceptedProductOfferType: OfferType!\n  allowUserManualPayment: Boolean\n  \"\"\"Total amount of money that customer owes Brex, including entries that aren't due yet\"\"\"\n  balanceDue: Int\n  taxpayerNumber: String\n  status: String\n  contacts(after: String, before: String, first: Int, last: Int, searchQuery: String): PaymentContactConnection\n  \"\"\"Is this account eligible to be converted to the specified card account type\"\"\"\n  eligibleForCardAccountType(toCardAccountType: CardAccountType!): AccountEligibleForCardAccountType\n  \"\"\"The default funding source, this will be used for automatic collections and scheduled collections where no funding source is explicitly requested\"\"\"\n  defaultFundingSource: FundingSource\n  \"\"\"Disable the chat when account is binary fraudulent\"\"\"\n  chatDisabled: Boolean\n  estimatedNextDueAmount: UpcomingDueAmount\n  investmentSource: InvestmentSource\n  employeeCountRange: EmployeeCountRange\n  insertedAt: Time\n  financialSources(after: String, before: String, first: Int, last: Int): FinancialSourceConnection\n  \"\"\"Has the customer selected a funding source for autopay?\"\"\"\n  hasCustomerSelectedAutopayFundingSource: Boolean!\n  \"\"\"Amount we're currently trying to collect for this customer\"\"\"\n  outstandingCollectionAmount: Int\n  \"\"\"The risk tier of the account\"\"\"\n  riskTier: RiskTier\n  \"\"\"Customer's global limit and balance consumption\"\"\"\n  balanceSummary: AccountBalanceSummary\n  maximumUserInitiatedPaymentAmount: Int\n  \"\"\"Was the account previously suspended and is now active\"\"\"\n  statusFromSuspendedToActive: Boolean!\n  underwriting: UnderwritingAccount\n  \"\"\"Company monthly sales volume from soft signup payload\"\"\"\n  salesVolume: String\n  \"\"\"Logic to handle whether we should put the user in a blocking waitlisted screen\"\"\"\n  canSeeApplications: ShouldSeeApplicationResponse!\n  cardAccountType: CardAccountType\n  \"\"\"Amount of all pending collections for this customer\"\"\"\n  pendingCollectionAmount: Int\n  \"\"\"The onboarding product the account was approved for\"\"\"\n  approvedBlueprintAtOnboarding: String\n  currentBillingDelinquency: BillingDelinquency\n  systemSettings: AccountSystemSettings\n  \"\"\"Is the customer's card journal account on Buy Now Pay Later terms\"\"\"\n  isOnBnplTerms: Boolean\n  \"\"\"Amount of money a customer owes, minus the entries that haven't become due yet\"\"\"\n  currentAmountDue: Int\n  \"\"\"\n  Cash transactions belonging to the customer account. Statuses is the\n  only required filter. Supports first: and after: cursor based pagination.\n  \"\"\"\n  cashTransactions(after: String, before: String, depositsAccountId: ID, endInitiatedAt: Time, endProcessedAt: Time, endScheduledSendAt: Time, first: Int, isRecurring: Boolean, last: Int, maxAmountUsdCents: Int, minAmountUsdCents: Int, orderBy: [CashTransactionOrderBy!], origin: CashTransactionOrigin, paymentMethod: CashTransactionPaymentMethod, recurringScheduleId: ID, searchQuery: String, startInitiatedAt: Time, startProcessedAt: Time, startScheduledSendAt: Time, statuses: [CashTransactionStatus!]!, transactionTypes: [CashTransactionType!]): CashTransactionConnection\n  \"\"\"Submission time of the latest product application for this account\"\"\"\n  latestApprovedProductApplicationSubmittedAt: Time\n  \"\"\"Billing payment intents targeting accounts owned by this customer account\"\"\"\n  billingPaymentIntents(after: String, before: String, first: Int, hasCanCashAdvanceTarget: Boolean, hasReceivablesOffersTarget: Boolean, last: Int): BillingPaymentIntentConnection\n  collectionIntentions(after: String, before: String, first: Int, last: Int): CollectionIntentionConnection\n  positivePayAccountSettings(after: String, before: String, first: Int, last: Int, status: PositivePayAccountSettingStatus): PositivePayAccountSettingConnection\n  \"\"\"Find a billing payment made by this customer account\"\"\"\n  billingPayment(id: String!): BillingPayment\n  \"\"\"Whether the account has any cleared transactions\"\"\"\n  hasClearedTransaction: Boolean!\n  \"\"\"Rounded amount of money that customer has available to spend\"\"\"\n  roundedRemainingSpend: Int @deprecated(reason: \"Use balance_summary instead\")\n  lastUserInitiatedCollectionIntention: CollectionIntention\n  dateEstablished: Time\n  hasProductApplication: Boolean!\n  \"\"\"Initial market segment from segmentation service\"\"\"\n  initialMarketSegment: String\n  \"\"\"The enabled funding sources for this account\"\"\"\n  enabledFundingSources(after: String, before: String, first: Int, last: Int): FundingSourceConnection\n  \"\"\"Balance and date to be collected on\"\"\"\n  currentBalancePaymentDetails: CurrentBalancePaymentDetails!\n  \"\"\"Answers to the business maturity question\"\"\"\n  maturity: [String]\n  \"\"\"\n  Duplicated from deposits account level. Retrieves matching transactions\n  for a given customer account\n  \"\"\"\n  searchDepositsTransactions(after: String, before: String, depositsAccountId: ID, endTime: Time, first: Int, last: Int, query: String, recurringPaymentId: ID, startTime: Time, status: Status): DepositsTransactionConnection\n  \"\"\"Rounded estimate of the global limit for the customer\"\"\"\n  roundedGlobalLimit: Int @deprecated(reason: \"Use balance_summary instead\")\n  financialProductType: FinancialProductType\n  dbaName: String\n  \"\"\"Is the account in 'Kill Yellow Tier' experiment's treatment group?\"\"\"\n  isInKillYellowTier: Boolean\n  cobranding: Cobranding!\n  incorporationState: String\n  officeAddress: Address\n}\n\ntype UnderwritingAnalysisFlag implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  name: UnderwritingAnalysisFlagName!\n}\n\ntype CreateOpenidSessionPayload {\n  clientMutationId: String!\n  session: Session\n}\n\nenum IncentivePlacementRewardsPageCheckboxViewDataStepStatus {\n  ACTIVE\n  COMPLETED\n  ERROR\n  INACTIVE\n  INVALID\n}\n\ninput TransactionConsumerSettings {\n  \"\"\"The recipient notification setting to indicate at what stages we want to send out notifications\"\"\"\n  recipientNotificationSetting: NotificationSetting\n}\n\ntype InternationalWireInputField {\n  displayName: String!\n  forRecipientTypes: [RecipientType!]\n  format: String\n  maxLength: Int!\n  minLength: Int!\n  name: String!\n  tooltip: String\n}\n\ninput UpdateApprovalsRequestInput {\n  clientMutationId: String!\n  description: String\n  monthlyLimitOverrideMetadata: ApprovalsRequestMonthlyLimitOverrideInput\n  preapprovedCardMetadata: ApprovalsRequestPreapprovedCardInput\n  requestId: ID!\n}\n\ntype UpdateCardMetadataPayload {\n  card: Card!\n  clientMutationId: String!\n}\n\ntype AcceptCreditMarketingOfferPayload {\n  clientMutationId: String!\n  offer: CreditMarketingOffer\n  result: AcceptCreditMarketingOfferResult!\n}\n\ninput CreateTransactionApprovedSubscriptionInput {\n  channelId: ID!\n  clientMutationId: String!\n  isPhysical: Boolean\n}\n\ninput SendMobileChequeDepositNotificationInput {\n  clientMutationId: String!\n  phoneNumber: String!\n}\n\ntype UpdateEarlyAccessFeatureJoinStatusPayload {\n  clientMutationId: String!\n  earlyAccessFeature: EarlyAccessFeature!\n}\n\ntype ChannelPushOptions {\n  deviceInformation: DeviceInformation\n  deviceToken: String\n  type: PushProviderType\n}\n\ntype OnboardingApplicationConnection {\n  edges: [OnboardingApplicationEdge]\n  pageInfo: PageInfo!\n}\n\ntype OnboardingFormTerms {\n  _: Boolean\n}\n\ntype InterestDetails {\n  paidOn: Time\n}\n\ntype ReimbursementItemConnection {\n  edges: [ReimbursementItemEdge]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\ninput InternationalWirePaymentInstrumentFindInput {\n  iban: String!\n  swiftCode: String!\n}\n\ntype CreateCredentialPayload {\n  clientMutationId: String!\n  credential: Credential\n}\n\ntype ConnectShopifyCredentialPayload {\n  authenticationResult: CredentialAuthenticationResult\n  clientMutationId: String!\n}\n\ntype ReimbursementItemEventEdge {\n  cursor: String\n  node: ReimbursementItemEvent\n}\n\ntype StatementEntry implements Node {\n  accrualTime: Time\n  \"\"\"Enumeration indicating the type of business activity that this entry represents\"\"\"\n  activityType: StatementEntryActivityType!\n  amount: Int\n  expensesItem: ExpensesItem\n  exportItem: ExportItem\n  exportedIntegrationFields: StatementEntryIntegrationFields\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  integrationStatus: StatementEntryIntegrationStatus\n  integrationVendorEntryId: String\n  integrationVendorEntryUrl: String\n  lens: StatementEntryLens\n  operation: TransactionOperation\n  originator: StatementEntryOriginator\n  originatorType: String @deprecated(reason: \"Use activityType instead\")\n  postedAt: Time\n  purchaseTime: Time\n  rewardsRedemptionOffer: RewardsOffer\n  \"\"\"Information about how this statement entry was refunded, only non-null for refunded statement entries\"\"\"\n  rewardsRefund: RewardsRefund\n  transaction: Transaction\n  userCategory: UserCategory\n}\n\ninput CreateTransactionRefusedSubscriptionInput {\n  channelId: ID!\n  clientMutationId: String!\n}\n\nenum OneBrexSegment {\n  ONE_BREX_SEGMENT_CAPITAL_1_POINT_0\n  ONE_BREX_SEGMENT_INVALID\n  ONE_BREX_SEGMENT_MID_MARKET\n  ONE_BREX_SEGMENT_SMALL_BUSINESS\n  ONE_BREX_SEGMENT_VENTURE_BACKED\n}\n\ninput DeleteLocationInput {\n  clientMutationId: String!\n  id: ID!\n}\n\ntype UpdateExpensesSettingRulesPayload {\n  clientMutationId: String!\n  expensesSetting: ExpensesSetting\n}\n\ninput CreateOpenidSessionInput {\n  clientMutationId: String!\n  token: String!\n}\n\ninput SpendAggregateTimeSeriesFilters {\n  cardIds: [String]\n  departmentIds: [String]\n  from: Time!\n  merchantCategoryIds: [String]\n  merchantIds: [String]\n  to: Time!\n  userCategoryIds: [String]\n  userIds: [String]\n}\n\ninput CreateDepartmentInput {\n  clientMutationId: String!\n  description: String\n  name: String!\n}\n\ntype RewardsTriggerInstance implements Node {\n  expiresAt: Time\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  state: RewardsTriggerInstanceState!\n  status: RewardsTriggerInstanceStatus!\n  triggeredAt: Time\n}\n\ntype UpdateDepartmentPayload {\n  clientMutationId: String!\n  department: Department!\n}\n\n\"\"\"The individual routing rule v2\"\"\"\ntype ApprovalsRoutingRuleIndividualsV2 implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"A list of approval user types\"\"\"\n  userTypes: [UserType!]!\n}\n\ntype ChannelSmsOptions {\n  number: PhoneNumber\n}\n\n\"\"\"QBD credential payload\"\"\"\ntype CredentialQbdPayload {\n  \"\"\"Company ID as generated by Codat - needed for QBD connector\"\"\"\n  companyId: String\n}\n\ntype EarlyAccessFeatureMediaAsset implements Node {\n  aspectRatioHeight: Int!\n  aspectRatioWidth: Int!\n  assetType: EarlyAccessFeatureMediaAssetType!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  url: String!\n}\n\ntype OnboardingPageForm {\n  _: Boolean\n  content: OnboardingFormJsonSchema!\n}\n\ninput RemoveFspBookkeeperUserInput {\n  bookkeeperUserId: String!\n  clientMutationId: String!\n}\n\ntype FinicityConnectGenerateLiteUrlPayload {\n  clientMutationId: String!\n  url: String!\n}\n\nunion OnboardingNonSubmittablePage = OnboardingPagePhotoIdIntro\n\ninput CreateNetsuiteCredentialInput {\n  accountId: String!\n  clientMutationId: String!\n  tokenId: String!\n  tokenSecret: String!\n}\n\ninput CancelApprovalsRequestInput {\n  clientMutationId: String!\n  requestIds: [ID!]\n}\n\ntype PaymentContact implements Node {\n  \"\"\"Default erp categories\"\"\"\n  defaultErpCategories(\n    \"\"\"Optional field to filter default erp categories by only active integrations\"\"\"\n    onlyActiveIntegrations: Boolean = false\n  ): [ContactDefaultErpCategory!]\n  email: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  name: String\n  paymentInstruments: [PaymentInstrument!]\n  phoneNumber: String\n  processingAndFuturePayments(after: String, before: String, first: Int, last: Int): DepositsProcessingAndFuturePaymentDateConnection\n  version: Int!\n}\n\ntype ExpensifySetupInstructions {\n  copilotEmail: String\n}\n\nenum ProductType {\n  BILL_PAY_BUSINESS_APPROVAL\n  INVALID\n  MONTHLY_LIMIT_OVERRIDE\n  PREAPPROVED_CARD\n  REIMBURSEMENT\n}\n\ninput StartIntegrationExportInput {\n  clientMutationId: String!\n  \"\"\"Time in user's timezone that report is generated\"\"\"\n  displayTime: Time!\n  \"\"\"Export STEs before this date\"\"\"\n  endDateRange: Time\n  \"\"\"Type of export - 'csv' or 'direct'\"\"\"\n  exportType: ExportType!\n  isPrimitive: Boolean\n  \"\"\"Export STEs after this date\"\"\"\n  startDateRange: Time\n  statementEntryTypes: [String]\n}\n\ninput UpdateAutoAddFundsInput {\n  amount: Int!\n  clientMutationId: String!\n  depositsAccountId: ID\n  endsAt: Time\n  financialAccountId: ID!\n  id: ID!\n  idempotencyKey: String!\n  monthlySchedule: MonthlySchedule\n  sendAt: Time\n  totalNumberOfPayments: Int\n  weeklySchedule: WeeklySchedule\n}\n\nenum AssociationCriteria {\n  EXCLUDE_BILL_PAYMENTS\n  ONLY_BILL_PAYMENTS\n}\n\nenum ReceivablesOffersOfferNonPerformanceReason {\n  DELINQUENT\n  EARLY_INITIATED_PAYOUT_INSUFFICIENT\n  FAILED_PAYMENT\n  FAILED_PAYOUT_STATUS\n  INVALID\n  INVALID_TARGET_ACCOUNT\n  OVER_ALLOCATION\n  PAYOUT_INSUFFICIENT\n  PAYOUT_NOT_MATCHED\n  REVERSED_PAYMENT\n  ROUTED_AWAY_FROM_BREX_CASH\n  SEVERED_INTEGRATION\n  SEVERED_INTEGRATION_AUTO\n  SPECIAL\n}\n\ninput CreateReceiptInput {\n  assetId: ID!\n  clientMutationId: String!\n  transactionId: ID!\n}\n\ntype ApprovalsUnsafeFlag {\n  value: String\n}\n\n\"\"\"\nRequest for information. Is a collection of Rfi Items + broader context for the Request,\nused to keep track of the exchange of information between requester and responder\n\"\"\"\ntype Rfi implements Node {\n  \"\"\"Salesforce ID for the related Case\"\"\"\n  arfiCaseId: String\n  \"\"\"Salesforce Number for the related case\"\"\"\n  arfiCaseNumber: String\n  \"\"\"Internal Id for the customer's account on another service, e.g. undacc_ for underwriting\"\"\"\n  brexObjectId: String\n  \"\"\"cuacc of the account related to this RFI\"\"\"\n  customerAccount: Account\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"List of requested items\"\"\"\n  items: [RfiItem]\n  parentCaseId: String\n  \"\"\"Message for the recepient providing context for this RFI\"\"\"\n  requestMessage: String\n  \"\"\"Internal Id for the requestor who initiated the RFI - either a user (e.g Ops) or a service\"\"\"\n  requestor: String\n  responses: [RfiResponse]\n  status: RfiStatus\n  \"\"\"\n  Cuuser of the primary recipient of the Request,\n  i.e. the user who's expected to provide the information.\n  \"\"\"\n  toCustomerUser: User\n}\n\ntype SetReceivablesOffersSellerAccountHasSeenTrialAccessConfirmationBannerPayload {\n  clientMutationId: String!\n  sellerAccount: ReceivablesOffersSellerAccount\n}\n\ntype PromotionsItem implements Node {\n  \"\"\"The category shown above the item\"\"\"\n  category: PromotionsCategory!\n  \"\"\"CTA object for the button\"\"\"\n  cta: PromotionsCta!\n  \"\"\"The main text for the item\"\"\"\n  description: String!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Making this an object so that we can potentially have multiple types of images for different clients\"\"\"\n  image: PromotionsImage!\n  \"\"\"A name for the item that can be used for analytics calls. Not shown to the user, but is human readable (versus the encoded ID field)\"\"\"\n  name: String!\n  \"\"\"Boolean for whether the user can click 'not now'\"\"\"\n  skippable: Boolean\n  \"\"\"Colour scheme\"\"\"\n  theme: PromotionsTheme!\n}\n\ntype SumAggregationResult {\n  name: String!\n  value: Float!\n}\n\ntype CreatePhysicalCardPayload {\n  card: Card\n  clientMutationId: String!\n}\n\nenum LimitUtilizationStatus {\n  \"\"\"Balance due is exceed of the total limit\"\"\"\n  EXCEED_LIMIT\n  \"\"\"Balance due is at least 80% of the total limit\"\"\"\n  NEAR_LIMIT\n  \"\"\"Balance due is greater than or equal to 95% of total limit or total limit - $5000 (whichever is higher)\"\"\"\n  REACHED_LIMIT\n}\n\n\"\"\"Runway projection information\"\"\"\ntype InsightsRunwayInsight {\n  \"\"\"A rough estimate of when the account will be out of cash\"\"\"\n  estimatedCashOutDate: Date\n  \"\"\"Timeseries of projected data related to runway\"\"\"\n  projectionTimeseries: [InsightsRunwayProjection!]!\n  \"\"\"\n  Using the burn rate projection, estimate when the company\n  might need to raise fundraising money\n  \"\"\"\n  suggestedFundraisingDate: Date\n}\n\ninput EnableBillsInput {\n  clientMutationId: String!\n  id: ID!\n}\n\ntype ReferralConnection {\n  edges: [ReferralEdge]\n  pageInfo: PageInfo!\n}\n\ntype CreatePayerPayload {\n  clientMutationId: String!\n  payer: InvoicingContact\n}\n\nenum OfferState {\n  ACCEPTED\n  DECISION\n  DECLINED\n  IGNORED\n  INELIGIBLE\n  INITIALIZED\n  REJECTED\n}\n\ntype CreateInvoicePayload {\n  clientMutationId: String!\n  invoice: InvoicingInvoice\n}\n\n\"\"\"Information about the developer API token\"\"\"\ntype DeveloperApiToken {\n  \"\"\"Time the token is created\"\"\"\n  createdAt: Time\n  \"\"\"Id of the user who created the token\"\"\"\n  creatorUserId: String!\n  \"\"\"Value of the token, censored for active tokens\"\"\"\n  displayToken: String!\n  \"\"\"Primary key for the token\"\"\"\n  id: String!\n  \"\"\"Human-readable name of the token\"\"\"\n  name: String!\n  \"\"\"Time the token is revoked\"\"\"\n  revokedAt: Time\n  \"\"\"List of scopes the token is valid for\"\"\"\n  scopes: [Scope]\n}\n\ntype UpdateTransactionIntegrationCustomerPayload {\n  clientMutationId: String!\n  transaction: Transaction\n}\n\ninput InternationalWirePaymentInstrumentInput {\n  address: AddressInput!\n  beneficiaryBankAddress: AddressInput\n  beneficiaryBankInfo: Json\n  beneficiaryBankName: String\n  iban: String!\n  swiftCode: String!\n}\n\ntype SetManagerPayload {\n  clientMutationId: String!\n  users: [User]\n}\n\nunion CardOverviewInsightsTile = MostRecentTransactionsTile\n\nenum DataImporterDataProviderStatus {\n  ACTIVE\n  TERMINATED\n}\n\ninput IssueCollectionInput {\n  amount: Int!\n  clientMutationId: String!\n  fundingSourceId: ID\n  paymentEarlyAuthBalanceDecreaseCommitmentId: ID\n}\n\nunion CredentialAuthenticationResult = CredentialRedirectResult | CredentialSuccessResult\n\ntype CreatePositivePayAccountSettingPayload {\n  clientMutationId: String!\n  positivePayAccountSetting: PositivePayAccountSetting!\n}\n\ntype RewardsRedemptionProgramConnection {\n  edges: [RewardsRedemptionProgramEdge]\n  pageInfo: PageInfo!\n}\n\nenum ExportType {\n  CSV\n  DIRECT\n}\n\ntype ApprovalsRuleGroup implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  isDefault: Boolean\n  matchers: [ApprovalsRuleGroupMatcher!]!\n  routingRules: [ApprovalsRoutingRule!]!\n}\n\ntype CashTransactionAchReturnDetails {\n  \"\"\"Details from the transaction this return was for\"\"\"\n  originalDetails: CashTransactionAchDetails!\n  \"\"\"The reason why the original transaction was returned\"\"\"\n  returnReason: CashTransactionAchReturnReason!\n}\n\ninput SubmitOnboardingApplicationInput {\n  clientMutationId: String!\n  id: ID!\n}\n\ninput EnableReimbursementsInput {\n  clientMutationId: String!\n  id: ID!\n}\n\ntype RewardsTriggerPurchase {\n  accrualRate: Float!\n  excludedPresentMerchantCategoryIds: [String]\n  excludedPresentMerchantIds: [String]\n  includedPresentMerchantCategoryIds: [String]\n  includedPresentMerchantIds: [String]\n}\n\ninput ConnectTellerInstitutionInput {\n  \"\"\"Access token representing customer connection (aka enrollment)\"\"\"\n  accessToken: String!\n  clientMutationId: String!\n  \"\"\"Teller enrollment (connection) ID\"\"\"\n  enrollmentId: String!\n  \"\"\"Teller's name of the institution\"\"\"\n  tellerInstitutionName: String!\n}\n\ntype PaymentContactEdge {\n  cursor: String\n  node: PaymentContact\n}\n\ntype OnboardingPageTerms {\n  card: Boolean\n  cash: Boolean\n  content: OnboardingFormTerms!\n}\n\ninput DeleteCardTransactionInsightMutingPolicyInput {\n  clientMutationId: String!\n  id: ID!\n}\n\ninput UpdateUserPermissionInput {\n  \"\"\"setting to access corporate cards\"\"\"\n  canAccessCorporateCards: Boolean\n  clientMutationId: String!\n  \"\"\"the customer_user_id\"\"\"\n  id: ID!\n}\n\ninput UpdateUserEmailInput {\n  clientMutationId: String!\n  email: String!\n}\n\nunion ExternalIntegrationEntityPayload = CodatTrackingCategory | NetsuiteClass | NetsuiteCustom | NetsuiteDepartment | NetsuiteLocation | NetsuiteVendor | QuickbooksClass | QuickbooksCustomer | QuickbooksLocation | XeroTrackingCategory\n\ninput SetReceivablesOffersSellerAccountHasSeenTrialAccessConfirmationBannerInput {\n  clientMutationId: String!\n  sellerAccountId: ID!\n  value: Boolean!\n}\n\ninput AcceptOfferInput {\n  clientMutationId: String!\n  offerType: OfferType!\n}\n\ntype RefreshIntegrationCredentialsPayload {\n  clientMutationId: String!\n  integrations: [Integration]\n}\n\ntype SpendAggregateConnection {\n  edges: [SpendAggregateEdge]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\nenum IntegrationScope {\n  COLLECTIONS\n  EXPENSES\n  REWARDS_REDEMPTIONS\n}\n\ntype CancelPaymentPayload {\n  clientMutationId: String!\n  payment: DepositsPayment!\n}\n\ntype CardAcceptor implements Node {\n  address: String\n  captureMethod: String\n  city: String\n  country: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  mcc: String\n  mid: String\n  name: String\n  state: String\n  zip: String\n}\n\ntype TurnOnSeenFlagPayload {\n  clientMutationId: String!\n  \"\"\"Updated flag\"\"\"\n  seenFlag: SeenFlag\n}\n\ninput ApprovalsRequestPreapprovedCardInput {\n  amount: Int!\n  defaultMemo: String\n  displayName: String!\n  frequency: CardLimitFrequency!\n  integrationRuleBody: String\n  integrationRuleId: ID\n  softExpirationDate: Time\n}\n\ntype ActivateIntegrationPayload {\n  clientMutationId: String!\n  integration: Integration\n}\n\n\"\"\"\nAn input union for filtering find_contact\nOnly one field is meant to be set since GraphQL doesn't support input unions\n\"\"\"\ninput FindContactIdentifierInputUnion {\n  name: String\n  paymentInstrumentId: ID\n  recipientCustomerUserId: ID\n}\n\nenum FinancialSourceStatus {\n  ACTIVE\n  CONNECTING\n  ERROR\n  INVALID\n  PENDING\n  USER_ACTION\n}\n\ntype IntegrationRuleEdge {\n  cursor: String\n  node: IntegrationRule\n}\n\ninput DepositChequeInput {\n  amount: Int!\n  backImageAssetId: ID!\n  clientMutationId: String!\n  depositsAccountId: ID!\n  frontImageAssetId: ID!\n  idempotencyKey: String!\n  memo: String\n  senderName: String!\n}\n\ninput SetSoftExpirationDateInput {\n  cardId: ID!\n  clientMutationId: String!\n  idempotencyKey: String!\n  softExpiresAt: Time\n}\n\ntype DisputeTransaction implements Node {\n  dispute: Dispute\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  status: DisputeTransactionStatus!\n}\n\ntype ApplicationSession implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Id of the retrieved session\"\"\"\n  sessionId: String!\n}\n\ntype PaymentDetails {\n  \"\"\"For a returned wire, this is the difference between the original wire amount vs what was actually returned back due to the beneficiary bank taking a fee.\"\"\"\n  amountDriftUsdCents: Int\n  \"\"\"The sending bank's reference number for this wire (F20 of the MT103)\"\"\"\n  bankReferenceNumber: String\n  counterparty: Counterparty!\n  endToEndId: String\n  estimatedOn: Time\n  estimatedOnLatest: Time\n  fedReferenceNumber: String\n  imad: String\n  initiatorCustomerUser: User\n  method: Method!\n  mt103: String\n  omad: String\n  origin: Origin!\n  paymentRail: TxPaymentRail\n  returnReason: ReturnReason\n  transferDescription: String\n  type: TxType\n}\n\nunion FinancialInformationRequestConfig = FinancialInformationRequestConfigStatement\n\ntype CredentialConnection {\n  edges: [CredentialEdge]\n  pageInfo: PageInfo!\n}\n\ntype EnableBillsPayload {\n  clientMutationId: String!\n  integration: Integration\n}\n\nunion CashRecurringScheduleType = CashRecurringScheduleMonthlyByDay | CashRecurringScheduleMonthlyByWeek | CashRecurringScheduleWeekly\n\ntype CardConnection {\n  edges: [CardEdge]\n  pageInfo: PageInfo!\n  summary: Summary!\n  totalCount: Int!\n}\n\ntype ConnectWeavCredentialPayload {\n  authenticationResult: CredentialAuthenticationResult\n  clientMutationId: String!\n}\n\ntype UserConnection {\n  count: Int!\n  edges: [UserEdge]\n  pageInfo: PageInfo!\n}\n\ninput SetReceivablesOffersOptedOutOfInstantPayoutsInput {\n  clientMutationId: String!\n  value: Boolean!\n}\n\ntype OnboardingPageDSuitability {\n  _: Boolean\n  content: OnboardingFormEmpty!\n}\n\ntype CardPaymentForwarderPaymentObject {\n  amount: FinancialAsset\n  cardId: ID\n  createdAt: Date\n  deliveryDate: Date\n  description: String\n  documents: [CardPaymentForwarderDocument]\n  fees: FinancialAsset\n  idempotencyKey: String\n  invoice: CardPaymentForwarderInvoice\n  paymentId: ID!\n  paymentStatus: CardPaymentForwarderPaymentStatus!\n  recipient: CardPaymentForwarderRecipient\n}\n\n\"\"\"deprecated\"\"\"\ntype NetsuiteCustom {\n  isInactive: Boolean\n  name: String\n}\n\ninput InputCashTransactionBookTransferArguments {\n  \"\"\"The target cash account to move funds to\"\"\"\n  targetDepositsAccountId: ID!\n}\n\ninput UpdatePaymentInstrumentInput {\n  achPaymentInstrument: AchPaymentInstrumentInput\n  \"\"\"Payment instrument's beneficiary name\"\"\"\n  beneficiaryName: String\n  chequePaymentInstrument: ChequePaymentInstrumentInput\n  clientMutationId: String!\n  domesticWirePaymentInstrument: DomesticWirePaymentInstrumentInput\n  id: ID!\n  internationalWirePaymentInstrument: InternationalWirePaymentInstrumentInput\n}\n\ninput UpdateContactDefaultErpCategoryInput {\n  clientMutationId: String!\n  \"\"\"The contact id\"\"\"\n  contactId: ID!\n  \"\"\"The integration id\"\"\"\n  integrationId: ID!\n  \"\"\"The user category id. Set to null to set the contact to have no default category on the given integration.\"\"\"\n  userErpCategoryId: ID\n}\n\ntype LegacyCardStatementPeriodBoundaries {\n  id: ID\n  periodEndDate: Time!\n  periodStartDate: Time\n}\n\nenum DepositsAccountsWithdrawalStatus {\n  APPROVAL_REQUIRED\n  FAILED\n  INVALID\n  NOT_STARTED\n  PROCESSED\n  PROCESSING\n}\n\ntype SetSoftExpirationDatePayload {\n  card: Card!\n  clientMutationId: String!\n}\n\nenum CashTransactionApprovalResult {\n  ALREADY_PROCESSED\n  INVALID\n  SUCCESSFULLY_UPDATED\n}\n\ntype TransactionOperation implements Node {\n  accrualTime: Time\n  amount: Int\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Indicates if a transaction operation is a dispute credit\"\"\"\n  isDisputeCredit: Boolean!\n  rewardsAccrualEntries(after: String, before: String, first: Int, last: Int): RewardsAccrualEntryConnection\n  \"\"\"Split items for this transaction operation.\"\"\"\n  splitItems: [TransactionOperationSplitItem!]\n  status: String\n  statusReason: String\n  subtype: String\n  transaction: Transaction\n  type: String\n}\n\ntype PremiumSettingEvent implements Node {\n  action: PremiumSettingEventAction!\n  campaign: String\n  description: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  premiumSetting: PremiumSetting\n  pricingScheme: PremiumSettingPricingScheme\n  source: PremiumSettingEventSource!\n  user: User\n}\n\n\"\"\"View data for incentive banners\"\"\"\ntype IncentivePlacementViewDataBanner {\n  \"\"\"URL for CTA (only if not opt-in)\"\"\"\n  ctaUrl: String\n  \"\"\"Description of banner\"\"\"\n  description: String!\n  \"\"\"CTA text (opt_in_cta is legacy, since we now support a cta that goes to a url)\"\"\"\n  optInCta: String!\n  \"\"\"Placement\"\"\"\n  placement: IncentivePlacement!\n  \"\"\"Title of banner\"\"\"\n  title: String!\n}\n\nenum PeriodicReviewState {\n  ACTIVE\n  CANCELLED\n  ERROR\n  FAILED\n  INVALID\n  MANUAL_REVIEW\n  SUCCEEDED\n}\n\nenum InvoiceStatus {\n  AUTOMATED_MATCH_PAID\n  AUTOMATED_MATCH_PARTIALLY_PAID\n  AWAITING_PAYMENT\n  DELETED\n  DRAFTING\n  INVALID\n  PAID\n  PARTIALLY_PAID\n  UNCOLLECTIBLE\n  VOIDED\n}\n\nenum OnboardingApplicationStateRiskEvaluationValue {\n  \"\"\"The application section was approved\"\"\"\n  APPROVED\n  \"\"\"The application section is processing, i.e. pending evidence or manual review\"\"\"\n  PROCESSING\n  \"\"\"The application section was rejected\"\"\"\n  REJECTED\n}\n\ninput TriggerErpFeedSyncInput {\n  clientMutationId: String!\n  erpFeedId: ID!\n}\n\ninput InputCashRecurringSchedule {\n  \"\"\"If duration is set to NULL, we will assume the schedule is for an indefinite amount of time\"\"\"\n  duration: InputCashRecurringScheduleDurationUnion\n  type: InputCashRecurringScheduleTypeUnion!\n}\n\nenum PendingRecordApprovalDecisionReason {\n  FRAUDULENT\n  INCORRECT\n  OTHER\n  UNAUTHORIZED\n}\n\ntype EnableExpensesPayload {\n  clientMutationId: String!\n  integration: Integration\n}\n\ninput UpdateBillInput {\n  attachmentAssetId: ID\n  chequeMemo: String\n  clientMutationId: String!\n  contactId: ID\n  counterpartyId: String\n  depositsAccountId: ID\n  description: String\n  dueAmountCents: Int\n  dueAt: Time\n  endsAt: Time\n  externalInvoiceNumber: String\n  id: ID!\n  merchantCategoryId: ID\n  monthlySchedule: MonthlySchedule\n  notifyRecipient: Boolean\n  paymentInstrumentId: ID\n  paymentSendAt: Time\n  totalNumberOfPayments: Int\n  transferDescription: String\n  userErpCategoryId: ID\n  weeklySchedule: WeeklySchedule\n}\n\ntype ReplacesRecordEdge {\n  cursor: String\n  node: ReplacesRecord\n}\n\nenum CardTransactionInsightEventAction {\n  COMMENT\n  DISMISS\n  MUTE\n  OPEN\n}\n\nenum CardPaymentForwarderDocumentType {\n  BENEFICIAL_OWNER\n  CARD_OR_BANK_STATEMENT\n  CERTIFICATE_OF_GOODS\n  EMPLOYEE_PAY_OR_CONTRACT\n  ESCROW_AGREEMENT\n  GOVERNMENT_ISSUED_ID\n  INVALID\n  INVOICE\n  LEASE_AGREEMENT\n  LEGAL_AGREEMENT\n  NON_P2P_DOCUMENT\n  SUPPLIER_INVOICE_OR_PURCHASE_ORDER\n  W9_FORM\n}\n\ntype Asset implements Node {\n  data: AssetData!\n  downloadUrl: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  presignedDownloadUrl: String\n}\n\ntype InternationalBankInformation {\n  address: Address!\n  name: String\n  nameAbbrev: String\n  possibleIssues: [String!]!\n}\n\ntype InternationalWireCountryConfig {\n  addressRequiresZipCode: Boolean!\n  countryCodeAlpha2: String!\n  countryName: String!\n  iban: Boolean!\n  inputFields: [InternationalWireInputField!]!\n  isHighRisk: Boolean!\n  recipientTypes: [RecipientType!]\n}\n\ninput CreateCardTransactionInsightMutingPolicyInput {\n  clientMutationId: String!\n  insightType: CardTransactionsInsightType\n  muteColumn: MuteColumn\n  muteValue: String\n}\n\ntype ExpensesRuleConnection {\n  edges: [ExpensesRuleEdge]\n  pageInfo: PageInfo!\n}\n\ninput NotifyUserOfCardRequestInput {\n  clientMutationId: String!\n  customerUserId: ID!\n}\n\ntype TransactionPresenceNotificationFilter {\n  isPhysical: Boolean\n}\n\ninput CreateNonPrimaryDepositsAccountInput {\n  clientMutationId: String!\n  displayColor: DepositsAccountsDisplayColor!\n  idempotencyKey: String!\n  nickname: String!\n}\n\ntype ExpensesItem implements Node {\n  expensesFlags(after: String, before: String, first: Int, last: Int): ExpensesFlagConnection\n  expensesItemEvents(after: String, before: String, first: Int, last: Int): ExpensesItemEventConnection\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  statementEntry: StatementEntry\n  status: ExpensesItemStatus\n  transaction: Transaction\n}\n\ntype SetAccountRestrictAchDebitsPayload {\n  clientMutationId: String!\n  restrictAchDebits: Boolean!\n}\n\ninput DeleteIntegrationRuleInput {\n  clientMutationId: String!\n  id: ID!\n}\n\n\"\"\"Scope object\"\"\"\ntype ScopeWrapper {\n  \"\"\"API this scope is used for\"\"\"\n  api: Api!\n  \"\"\"Description of the scope\"\"\"\n  description: String\n  \"\"\"Name shown in dashboard\"\"\"\n  displayName: String!\n  \"\"\"Scope enum\"\"\"\n  enum: Scope!\n  \"\"\"Scope string value, used when creating tokens\"\"\"\n  value: String!\n}\n\ntype CreateSubscriptionsPayload {\n  clientMutationId: String!\n  notificationSubscriptions: [NotificationSubscription]!\n}\n\ninput ConfirmMfaInput {\n  clientMutationId: String!\n  deviceId: String!\n  verificationToken: String!\n}\n\ntype FraudAlertEdge {\n  cursor: String\n  node: FraudAlert\n}\n\n\"\"\"A period for which a card statement is issued.\"\"\"\ntype CardStatementPeriod {\n  \"\"\"The period end time.\"\"\"\n  endTime: Time!\n  \"\"\"The period start time.\"\"\"\n  startTime: Time!\n}\n\ninput DocumentOcrVerifyEntitiesInput {\n  \"\"\"The type of document, determined based on the OCR result.\"\"\"\n  ein: String\n  \"\"\"The type of document, determined based on the OCR result.\"\"\"\n  name: String\n}\n\ntype BulkCreateSpendAlertEventPayload {\n  cardTransactionInsights: [CardTransactionInsight!]\n  clientMutationId: String!\n}\n\ninput ProcessAccountClosureInput {\n  clientMutationId: String!\n  counterpartyId: ID!\n}\n\ntype ApprovalsRequestMonthlyLimitOverride {\n  amount: Int!\n  endsAt: Time!\n}\n\ntype InviteUserPayload {\n  clientMutationId: String!\n  user: User\n}\n\ntype ConfirmMfaPayload {\n  clientMutationId: String!\n  user: User!\n}\n\nenum BatchEntity {\n  DEPARTMENT\n  LOCATION\n  USER\n}\n\nunion VendorInstitutionMetadata = FinicityMetadata\n\nenum ChequeImageValidationType {\n  BACK_ONLY\n  FRONT_AND_BACK\n  FRONT_ONLY\n}\n\ntype CashTransactionBrexOperationalTransferDetails {\n  _: Boolean\n}\n\n\"\"\"Describes the type, status and active tasks for a single payroll provider integration\"\"\"\ntype PayrollProviderIntegration implements Node {\n  \"\"\"Info for GUSTO integrations\"\"\"\n  gustoInfo: PayrollIntegrationGustoInfo\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The status of the connection: processing, connected, disconnected, invalid\"\"\"\n  status: PayrollProviderIntegrationStatus!\n  \"\"\"Type (method of connection) of integration: Gusto, or invalid\"\"\"\n  type: PayrollProviderIntegrationType!\n  \"\"\"Timestamp when the integration was last updated\"\"\"\n  updatedAt: Time!\n}\n\ntype DepositsStatementConnection {\n  edges: [DepositsStatementEdge]\n  pageInfo: PageInfo!\n}\n\ntype CreateSmsChannelPayload {\n  channel: Channel\n  clientMutationId: String!\n}\n\ninput InputTransactionApprovalIdentifierUnion {\n  \"\"\"The approval token associated with the approval\"\"\"\n  approvalToken: String\n  \"\"\"The id of the transaction associated with the approval\"\"\"\n  id: ID\n}\n\ninput CardPaymentForwarderRecipientInput {\n  beneficialOwner: CardPaymentForwarderBeneficialOwnerInput\n  businessAddress: AddressInput\n  businessName: String\n  categoryId: String\n  contact: CardPaymentForwarderContactInput\n  receivingMethod: ReceivingMethodInput\n  recipientId: ID\n}\n\ntype CreateFinancialBankStatementPayload {\n  clientMutationId: String!\n}\n\ntype IntegrationConnection {\n  edges: [IntegrationEdge]\n  pageInfo: PageInfo!\n}\n\ntype FakeMutationDoNotUsePayload {\n  clientMutationId: String!\n}\n\ninput ChangeInvestmentPolicyInput {\n  amount: Int!\n  clientMutationId: String!\n  depositsAccountId: ID!\n  investmentType: InvestmentType!\n}\n\ntype RedeemForBalancePayload {\n  account: Account!\n  balanceBreakdown: BalanceBreakdown\n  clientMutationId: String!\n  redeemedBalanceAmountCents: Int!\n}\n\n\"\"\"An intent to pay a balance towards one or more target accounts\"\"\"\ntype BillingPaymentIntent implements Node {\n  \"\"\"The time at which the payment most recently completed\"\"\"\n  collectedAt: Time\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The time at which the payment was initiated\"\"\"\n  initiatedAt: Time\n  \"\"\"An enum representation of the source of funds for this payment\"\"\"\n  sourceType: BillingPaymentIntentSourceType!\n  \"\"\"The life cycle status of this payment\"\"\"\n  status: BillingPaymentIntentStatus!\n  \"\"\"The amount for which this payment was requested\"\"\"\n  totalRequestedAmount: FinancialAsset\n}\n\n\"\"\"The value type when mute_column is set to merchant_id\"\"\"\ntype MuteValueDepartment {\n  \"\"\"The merchant that is being muted for this muting policy\"\"\"\n  department: Department\n}\n\n\"\"\"Collected directly from the customer's Cash Account, most likely due to non-performance\"\"\"\ntype ReceivablesOffersPaymentIntentSourceDepositsAccount {\n  sourceDepositsAccountId: String!\n}\n\ntype FinancialInstitutionEdge {\n  cursor: String\n  node: FinancialInstitution\n}\n\ntype SignupPayload {\n  clientMutationId: String!\n  user: User!\n}\n\ntype CashTransactionDomesticWireReturnDetails {\n  \"\"\"Details from the transaction this return was for\"\"\"\n  originalDetails: CashTransactionDomesticWireDetails!\n  \"\"\"The reason why the original transaction was returned\"\"\"\n  returnReason: CashTransactionWireReturnReason!\n}\n\ninput SetReceivablesOffersSellerAccountConfirmedPayoutsRoutedToBrexInput {\n  clientMutationId: String!\n  sellerAccountId: ID!\n  value: Boolean!\n}\n\ninput PageView {\n  \"\"\"anonymous id generated from client. we use it to associate website page views to a brex user\"\"\"\n  brexLoggedOutId: String\n  \"\"\"referrer from html\"\"\"\n  referrer: String\n  \"\"\"third party attribution data we stored in the cookie\"\"\"\n  thirdPartyAttribution: ThirdPartyAttribution\n  \"\"\"title from html\"\"\"\n  title: String\n  \"\"\"full url\"\"\"\n  url: String!\n  \"\"\"customer user id\"\"\"\n  userId: String\n}\n\nunion RewardsHistoryEntryPayload = RewardsHistoryEntryPayloadGeneric\n\ninput CompletePaymentApprovalWithTokenInput {\n  approvalToken: String!\n  clientMutationId: String!\n  decision: PaymentApprovalDecision!\n  decisionNotes: String\n  decisionReason: PaymentApprovalDecisionReason\n}\n\ntype GenerateCardStatementDocumentDownloadUrlPayload {\n  cardStatementPdfDownloadUrl: String\n  clientMutationId: String!\n}\n\nenum RfiResponseStatus {\n  RFI_RESPONSE_STATUS_APPROVED\n  RFI_RESPONSE_STATUS_DENIED\n  RFI_RESPONSE_STATUS_INVALID\n  RFI_RESPONSE_STATUS_PENDING\n}\n\ntype TriggerErpFeedSyncPayload {\n  clientMutationId: String!\n  exportAttemptId: String\n}\n\ntype CashTransaction implements Node {\n  \"\"\"The balance across all of the customer's deposits accounts when funds were made available to the account.\"\"\"\n  aggregateProcessedBalanceSnapshotUsdCents: Int\n  \"\"\"The money movement amount this transaction is responsible for.\"\"\"\n  amountUsdCents: Int!\n  \"\"\"If not NULL, the bill associated with the transaction.\"\"\"\n  bill: Bill\n  \"\"\"If non-NULL, this field explains why a transaction reached the FAILED status\"\"\"\n  cancellationReason: CashTransactionCancellationReason\n  \"\"\"\n  DO NOT BATCH, WILL RESULT IN AN N+1 QUERY.\n  If not NULL, the customer user that cancelled the transaction.\n  \"\"\"\n  cancelledByUser: User\n  \"\"\"\n  DO NOT BATCH, WILL RESULT IN AN N+1 QUERY.\n  Counterparty information for BREX-originated transactions.\n  \"\"\"\n  counterpartyDetails: CashTransactionCounterpartyDetails\n  \"\"\"A customer editable memo for the transaction which is not meant to be processed in any way outside of a note for the customer to view.\"\"\"\n  customerMemo: String\n  \"\"\"The deposits account of the transaction\"\"\"\n  depositsAccount: DepositsAccount\n  \"\"\"Details related with the underlying transaction type.\"\"\"\n  details: CashTransactionDetails!\n  \"\"\"\n  A human-readable name describing the transaction\n  \n  This field is mainly filled with the counterparty information for payment rail transactions and some standard text for other transaction types\n  \"\"\"\n  displayName: String!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"\n  DO NOT BATCH, WILL RESULT IN AN N+1 QUERY.\n  If not NULL, the customer user that initiated the transaction.\n  \"\"\"\n  initiatedByUser: User\n  \"\"\"\n  DO NOT BATCH, WILL RESULT IN AN N+1 QUERY.\n  Whether the transaction is still cancellable.\n  Note that this does not apply any permissioning logic to declare whether the user can cancel the transaction.\n  \"\"\"\n  isCancellable: Boolean!\n  \"\"\"If true, the transaction originated from a recurring schedule.\"\"\"\n  isRecurring: Boolean\n  \"\"\"\n  If true, notify the contact if and when the transaction moves to the processing state.\n  Ignored unless the transaction is a credit to a contact with a valid email.\n  \"\"\"\n  notifyContactProcessing: Boolean\n  \"\"\"\n  Where the transaction originated from\n  \n  BREX\n  The transaction was initiated at Brex\n  \n  EXTERNAL\n  The transaction was initiated at outside of Brex\n  \"\"\"\n  origin: CashTransactionOrigin!\n  \"\"\"The account balance when funds were made available to the account.\"\"\"\n  processedBalanceSnapshotUsdCents: Int\n  \"\"\"\n  DO NOT BATCH, WILL RESULT IN AN N+1 QUERY.\n  If not NULL, the recurring schedule from which the transaction originated.\n  Optionally fetch the predicted timelines for the next `timelineCount` transactions in the schedule.\n  \"\"\"\n  recurringSchedule(timelineCount: Int): CashRecurringScheduleWithTimelines\n  \"\"\"\n  Where in the transaction lifecycle this transaction is at\n  \n  APPROVAL_REQUIRED\n  The transaction is pending approval from an admin in the account before we're able to begin processing or scheduling the transaction\n  \n  SCHEDULED\n  The transaction is scheduled to be initiated during its scheduled_send_at time\n  \n  PROCESSING\n  This phase begins when Brex starts to process the sending or receiving of this transaction and ends when we either PROCESS or FAIL the verification\n  \n  PROCESSED\n  The money movement has been fully complete, which could mean money sent has arrived at their destination or funds have been added to the account\n  \n  FAILED\n  A grouping of multiple terminal states that prevented the transaction from completing\n  This includes:\n  - A user cancelled the transaction\n  - An admin denied the approval\n  - Failure to send/receive the funds (e.g. insufficient funds, permissions, etc)\n  - Internal cancellation due to fraud\n  \"\"\"\n  status: CashTransactionStatus!\n  \"\"\"Timestamps for the series of events a transaction has gone through\"\"\"\n  timeline: CashTransactionTimeline!\n  \"\"\"\n  DO NOT BATCH, WILL RESULT IN AN N+1 QUERY.\n  If not NULL, the approval associated with the transaction.\n  \"\"\"\n  transactionApproval: CashTransactionApproval\n  \"\"\"A high-level breakdown of the possible transactions which does not exactly map 1:1 with the details.\"\"\"\n  type: CashTransactionType!\n}\n\ntype ReimbursementMetadata {\n  amount: Int\n  department: Department\n  departmentId: ID\n  departmentName: String\n  location: Location\n  locationId: ID\n  locationName: String\n  memo: String\n  merchant: Merchant\n  merchantCategory: MerchantCategory\n  merchantCategoryId: ID\n  merchantId: ID\n  merchantName: String\n  netsuiteClass: ExternalIntegrationEntity\n  netsuiteClassExternalEntityId: ID\n  purchaseDate: Time\n  receiptAssetFileId: ID\n  userCategory: UserCategory\n  userCategoryId: ID\n}\n\ninput CreateCashWireDetailsInput {\n  clientMutationId: String!\n  depositsAccountId: ID\n  displayTime: Time!\n}\n\ntype DocumentOcr implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The processed result. Only available when the document OCR status is COMPLETE\"\"\"\n  result: DocumentOcrResult\n  \"\"\"The OCR status.\"\"\"\n  status: DocumentOcrStatus!\n}\n\nunion NotificationFilter = TransactionPresenceNotificationFilter\n\ntype SetReceivablesOffersOptedOutOfInstantPayoutsPayload {\n  account: ReceivablesOffersAccount\n  clientMutationId: String!\n}\n\ntype SetMonthlyUserLimitPayload {\n  clientMutationId: String!\n  user: User!\n}\n\n\"\"\"A cycle reoccurring every month on the same two days of every month.\"\"\"\ntype SemiMonthlyCardStatementPolicyCycle {\n  \"\"\"The first day of the month.\"\"\"\n  firstDay: Int\n  \"\"\"The second day of the month.\"\"\"\n  secondDay: Int\n}\n\ntype ExpensesFlagEventEdge {\n  cursor: String\n  node: ExpensesFlagEvent\n}\n\nenum DepositsCloseAccountIssue {\n  INVALID\n  NEGATIVE_BALANCE\n  PRIMARY_CARD_FUNDING_SOURCE\n  WRONG_DEPOSITS_ACCOUNT_STATUS\n}\n\nenum AccountLocation {\n  DOMESTIC\n  INTERNATIONAL\n}\n\ntype ValidatedVendorContactInputConnection {\n  edges: [ValidatedVendorContactInputEdge]\n  pageInfo: PageInfo!\n}\n\ninput SetManagerInput {\n  clientMutationId: String!\n  managerId: ID\n  reportIds: [ID]!\n}\n\ntype PlaidPayload {\n  plaidInstitutionId: String!\n}\n\ninput FinicityConnectMigrateAccountsInput {\n  clientMutationId: String!\n  financialSourceId: ID!\n}\n\ntype FboTransferDetails {\n  fboAccountName: String\n}\n\ntype IndustrySearchResultEntryEdge {\n  cursor: String\n  node: IndustrySearchResultEntry\n}\n\n\"\"\"An account which we require statement update from the customer\"\"\"\ntype FinancialStatementAccount implements Node {\n  \"\"\"The last digits of the bank account number for display\"\"\"\n  accountNumberLastFour: String\n  \"\"\"account number associated with the statement account\"\"\"\n  bankAccountNumber: String\n  \"\"\"Bank/Financial institution\"\"\"\n  bankName: String\n  \"\"\"Financial Account ID\"\"\"\n  financialAccountId: String!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\ntype CashTransactionApprovalContext {\n  \"\"\"Amount in USD cents\"\"\"\n  amountUsdCents: Int!\n  \"\"\"Encoded Bill ID\"\"\"\n  billId: ID\n  cancellationReason: CashTransactionCancellationReason\n  counterpartyName: String!\n  externalMemo: String\n  initiatedByUserFirstName: String\n  initiatedByUserLastName: String\n  routingNumber: String\n  transactionId: ID!\n  transactionStatus: CashTransactionStatus!\n  type: CashTransactionType!\n}\n\ntype PaymentInstrument implements Node {\n  \"\"\"Payment instrument's beneficiary name\"\"\"\n  beneficiaryName: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  paymentInstrumentType: PaymentInstrumentType!\n  version: Int!\n}\n\ntype Referral implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  insertedAt: Time!\n  referredEmail: String!\n  status: ReferralStatus!\n}\n\ntype PremiumSetting implements Node {\n  events: [PremiumSettingEvent]\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  insertedAt: Time\n  pricingScheme: PremiumSettingPricingScheme\n  status: PremiumSettingStatus!\n  statusUpdatedAt: Time!\n}\n\nenum CalculateCreditMarketingOfferResultStatus {\n  FAILED_CREDIT_SOFT_PULL\n  FAILED_SSN_VERIFICATION\n  FAILED_UNKNOWN\n  FAILED_USER_IDENTITY_VERIFICATION\n  FROZEN_CREDIT_PROFILE\n  REJECTED_CREDIT_QUALIFICATION\n  SUCCESS\n}\n\ntype ApprovalsReviewEdge {\n  cursor: String\n  node: ApprovalsReview\n}\n\ninput UpdateContactInput {\n  clientMutationId: String!\n  email: String\n  id: ID!\n  name: String\n  phoneNumber: String\n}\n\nenum CashTransactionOrigin {\n  BREX\n  EXTERNAL\n  INVALID\n}\n\ntype SuspendCardPayload {\n  card: Card!\n  clientMutationId: String!\n}\n\ntype CreateCounterpartyPayload {\n  clientMutationId: String!\n  counterparty: Counterparty!\n}\n\n\"\"\"The source of funds was an unknown offline source\"\"\"\ntype OfflineSource {\n  \"\"\"A placeholder always true field to make the object queryable\"\"\"\n  offline: Boolean\n}\n\ntype CashTransactionInterestDetails {\n  \"\"\"When the interest payout was initiated, which could differ from the settled_at time\"\"\"\n  paidOnDate: Date\n}\n\ntype ResetBackupCodesPayload {\n  clientMutationId: String!\n  codes: [String]!\n}\n\ninput UpdateEarlyAccessFeatureJoinStatusInput {\n  clientMutationId: String!\n  earlyAccessFeatureId: ID!\n  joinStatus: EarlyAccessFeatureJoinStatus!\n}\n\nenum RewardsTriggerType {\n  CASH_ACTIVATION_CARD_SPEND_BONUS\n  DEPOSITS_TRANSFER\n  LINKED_ACCOUNT_BONUS\n  PURCHASE\n  REFERRED_AMOUNT_SPENT\n  REFERRER_AWARD\n  TOP_CATEGORY_MULTIPLIER\n}\n\nenum CardAccountType {\n  DEPOSITS_BACKED\n  TRADITIONAL_CHARGE\n  TRANSACTIONAL_FLOAT\n}\n\ninput ResetBackupCodesInput {\n  clientMutationId: String!\n}\n\nenum CardSortColumn {\n  DISPLAY_NAME\n  HOLDER_NAME\n  LAST_USED\n  LIMIT\n  LOCK_DATE\n  STATUS_VIEW\n  USAGE\n  UTILIZATION\n}\n\ntype RewardsTriggerDepositsTransfer {\n  _: Boolean\n}\n\nenum BillSortOrder {\n  ASC\n  DESC\n}\n\ntype AdvanceToNextStepPayload {\n  availableProductOffers: [ProductOffer!]!\n  clientMutationId: String!\n}\n\ntype SetReceivablesOffersConfirmedPayoutsRoutedToBrexPayload {\n  account: ReceivablesOffersAccount\n  clientMutationId: String!\n}\n\ntype FinicityPayload {\n  needsMigration: Boolean!\n}\n\ntype PromotionsImage {\n  \"\"\"Landscape aspect for desktop viewports\"\"\"\n  landscape: String\n  \"\"\"Portrait aspect for mobile viewports\"\"\"\n  portrait: String\n  \"\"\"Weird casing because Absinthe doesn't like words that start with numbers. Full image URLs, since we don't have a great image management system for the dashboard that would allow for dynamic sizing\"\"\"\n  url1x: String\n  \"\"\"2X size for retina displays\"\"\"\n  url2x: String\n}\n\n\"\"\"Miles transfer status\"\"\"\nenum MilesTransferStatus {\n  FAILED\n  PROCESSING\n  SUCCEEDED\n  UNKNOWN\n}\n\ninput ModifyPreapprovedCardSettingsInput {\n  cardId: ID!\n  cardLimit: CardLimit\n  clientMutationId: String!\n  defaultMemo: String\n  idempotencyKey: String!\n  softExpiresAt: Time\n}\n\ntype ReimbursementItemEventConnection {\n  edges: [ReimbursementItemEventEdge]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\ntype ResetUserPayload {\n  clientMutationId: String!\n  user: User\n}\n\ntype InternalEntitySyncError implements Node {\n  bill: Bill\n  errorMessage: String\n  errorType: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  idempotencyKey: String\n  insertedAt: Time\n  operation: String\n  rawResponse: Json\n  reimbursementItem: ReimbursementItem\n  requestPayload: Json\n  status: InternalEntitySyncStatus!\n  updatedAt: Time\n}\n\ntype ApprovalsRequestPreapprovedCard {\n  amount: Int!\n  card: Card\n  defaultMemo: String\n  displayName: String!\n  frequency: CardLimitFrequency!\n  integrationRuleBody: String\n  integrationRuleId: ID\n  softExpirationDate: Time\n}\n\ntype UpdateTransactionBillableStatusPayload {\n  clientMutationId: String!\n  transaction: Transaction\n}\n\nunion RecurringSchedule = DepositsMonthlySchedule | DepositsWeeklySchedule\n\n\"\"\"The spend alert event\"\"\"\ntype CardTransactionInsightEvent {\n  \"\"\"The spend alert event action\"\"\"\n  action: CardTransactionInsightEventAction\n  \"\"\"The time when the event is created\"\"\"\n  createdAt: Time\n  \"\"\"The customer user who creates this event\"\"\"\n  customerUser: User\n  \"\"\"The event metadata\"\"\"\n  eventMetadata: EventMetadata\n  \"\"\"The time when the event is updated\"\"\"\n  updatedAt: Time\n}\n\ninput SignupInput {\n  clientMutationId: String!\n  email: Email!\n  info: SignupInfoInput!\n  password: String!\n  redirectUrl: String!\n}\n\ninput CreateDepositsApplicationInput {\n  \"\"\"Cancel any existing applications of the same blueprint\"\"\"\n  cancelPreviousApplication: Boolean\n  clientMutationId: String!\n  \"\"\"The specific implementation of the blueprint type. Defaults to `gemini`\"\"\"\n  name: String\n}\n\ntype IssuerTransactionPayload {\n  exchangeRate: Float!\n}\n\ntype UpdateReimbursementMetadataPayload {\n  clientMutationId: String!\n  reimbursementItem: ReimbursementItem!\n}\n\n\"\"\"Brex supported industries\"\"\"\ntype Industry implements Node {\n  \"\"\"Name displayed in UI\"\"\"\n  displayName: String!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Name used internally and shouldn't change\"\"\"\n  internalName: String!\n}\n\ntype UserEdge {\n  cursor: String\n  node: User\n}\n\ntype RewardsTriggerInstanceStateReferredAmountSpent {\n  amountSpent: Int!\n  referralId: String!\n}\n\ntype FinishChannelVerificationPayload {\n  channel: Channel\n  clientMutationId: String!\n}\n\ninput DeletePaymentInstrumentInput {\n  clientMutationId: String!\n  id: ID!\n}\n\ninput InviteUserWithMonthlyLimitInput {\n  clientMutationId: String!\n  inviteIdempotencyKey: String\n  monthlyLimitAmount: Int\n  user: UserInvite!\n}\n\nenum SpendAggregateSortKey {\n  AMOUNT\n  CARD_NAME\n  CARD_TYPE\n  DEPARTMENT_NAME\n  INVALID\n  MERCHANT_CATEGORY_NAME\n  MERCHANT_NAME\n  PERIOD_PERCENT_CHANGE\n  PREVIOUS_PERIOD_AMOUNT\n  TIME\n  USER_CATEGORY_NAME\n  USER_NAME\n}\n\n\"\"\"Metadata for GUSTO integrations\"\"\"\ntype PayrollIntegrationGustoInfo {\n  \"\"\"Gusto redirect URL for signup and reconnect\"\"\"\n  accountClaimUrl: String\n}\n\ntype QuickbooksLocation {\n  name: String\n}\n\ntype AchDetails {\n  counterparty: Counterparty!\n  estimatedOn: Time!\n  initiatorCustomerUser: User\n  method: Method!\n  origin: Origin!\n  transferDescription: String\n}\n\nenum DepositsRole {\n  ADMIN\n  BOOKKEEPER\n  USER\n}\n\ninput BulkDisconnectErpFeedsInput {\n  clientMutationId: String!\n  \"\"\"list of erp feed ids to disconnect\"\"\"\n  erpFeedIds: [ID]\n}\n\ninput AccountPrincipalUserInput {\n  email: String!\n  firstName: String!\n  lastName: String!\n  password: String!\n}\n\ntype IntraCustomerAccountBookTransferDetails {\n  initiatedByCustomerUser: User\n  sourceDepositsAccount: DepositsAccount\n  targetDepositsAccount: DepositsAccount\n}\n\ninput SubmitOnboardingInformationRequestInput {\n  clientMutationId: String!\n  data: Json\n  id: ID!\n}\n\n\"\"\"The value type when mute_column is set to user_id\"\"\"\ntype MuteValueUser {\n  \"\"\"The user that is being muted for this muting policy\"\"\"\n  user: User\n}\n\nenum PremiumSettingStatus {\n  ACTIVE\n  CANCELLED\n  INVALID\n}\n\ninput DisableNonPrimaryFundingSourcesInput {\n  clientMutationId: String!\n  fundingSourceIds: [String!]!\n  notes: String!\n  reason: FundingSourceStatusChangeReason!\n}\n\ntype BeginChannelVerificationPayload {\n  channel: Channel\n  clientMutationId: String!\n}\n\ntype ApprovalsUser {\n  department: Department\n  firstName: String\n  id: ID!\n  lastName: String\n  location: Location\n  monthlyUserLimitInfo: MonthlyUserLimitInfo\n}\n\n\"\"\"Collected from a Collect Funding Source (external ACH)\"\"\"\ntype ReceivablesOffersPaymentIntentSourceCollectFundingSource {\n  id: String!\n}\n\ntype TransactionAmount {\n  \"\"\"Sum of amounts of all pending transaction operation amounts for this transaction\"\"\"\n  pending: Int\n}\n\ninput MarkOfferSeenInput {\n  clientMutationId: String!\n  offerType: OfferType!\n}\n\ninput GetOrCreatePaymentMethodInput {\n  cardId: ID!\n}\n\ntype UpdateTransactionLocationPayload {\n  clientMutationId: String!\n  transaction: Transaction\n}\n\n\"\"\"The metadata for a saas increase type\"\"\"\ntype InsightMetadataSaasIncrease {\n  \"\"\"The previous amount before the spend increase\"\"\"\n  previousAmount: Float!\n  \"\"\"The relevant entries that associated with this spend alert\"\"\"\n  saasIncreaseRelevantEntries: [StatementEntry]\n}\n\ntype PerMerchantStatsConnection {\n  edges: [PerMerchantStatsEdge]\n  pageInfo: PageInfo!\n}\n\ntype CreateEmailChannelPayload {\n  channel: Channel\n  clientMutationId: String!\n}\n\ninput ApprovalsRuleGroupMatcherInput {\n  comparison: String!\n  key: String!\n  value: String\n}\n\ntype EmailAssetBody {\n  content: String\n  contentType: String\n}\n\ntype UpdatePositivePayAccountSettingPayload {\n  clientMutationId: String!\n  positivePayAccountSetting: PositivePayAccountSetting!\n}\n\ntype CancelCollectionIntentionPayload {\n  clientMutationId: String!\n  collectionIntention: CollectionIntention!\n}\n\ntype XeroCategories {\n  accountsPayableUserCategory: UserCategory\n  collectionTargetUserCategory: UserCategory\n  organizationName: String\n  rewardsIncomeUserCategory: UserCategory\n  vendorName: String\n}\n\ntype RewardsTriggerLinkedAccountBonus {\n  expirationAfterCashActivationDays: Int!\n  reward: RewardsPointReward!\n}\n\ntype Session {\n  token: String\n  tokenBase64: String\n  userId: String\n}\n\nenum DisputeType {\n  DISPUTE_TYPE_FRAUD\n  DISPUTE_TYPE_MERCH_DISPUTE\n  DISPUTE_TYPE_OTHER\n  DISPUTE_TYPE_UNKNOWN\n}\n\nenum IncentiveOptOutType {\n  GLOBAL_PER_ACCOUNT\n  GLOBAL_PER_USER\n  INVALID\n  PLACEMENT_PER_ACCOUNT\n  PLACEMENT_PER_USER\n}\n\ninput DeleteContactInput {\n  clientMutationId: String!\n  id: ID!\n}\n\nenum ApprovalsRequestType {\n  MONTHLY_LIMIT_OVERRIDE\n  PREAPPROVED_CARD\n  REIMBURSEMENT\n}\n\ntype AddFspBookkeeperPayload {\n  clientMutationId: String!\n  policyUrn: String\n}\n\ntype CreditMarketingOfferEdge {\n  cursor: String\n  node: CreditMarketingOffer\n}\n\ninput CreatePeriodicReviewApplicationInput {\n  clientMutationId: String!\n  \"\"\"The specific implementation of the blueprint type. Defaults to `periodic_review_v1`\"\"\"\n  name: String\n}\n\ninput CreateApprovalsPolicyInput {\n  approvalsPolicyDetails: ApprovalsPolicyDetailsInput\n  clientMutationId: String!\n  productType: ProductType\n}\n\nunion ChannelOptions = ChannelEmailOptions | ChannelPushOptions | ChannelSmsOptions\n\ntype VerifyAddressResponse implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"True if this address is deliverable\"\"\"\n  isDeliverable: Boolean!\n  \"\"\"True if this address is deliverable based on Lob results\"\"\"\n  isDeliverableV2: Boolean!\n  \"\"\"True if this address is a PO box or a General Delivery address\"\"\"\n  isPoBox: Boolean!\n  \"\"\"The standardized address\"\"\"\n  suggestion: Address!\n}\n\ntype ReceivablesOffersPayoutEdge {\n  cursor: String\n  node: ReceivablesOffersPayout\n}\n\ntype FinancialStatementRequestedAccountConnection {\n  edges: [FinancialStatementRequestedAccountEdge]\n  pageInfo: PageInfo!\n}\n\ntype ReferralEdge {\n  cursor: String\n  node: Referral\n}\n\ntype BillEdge {\n  cursor: String\n  node: Bill\n}\n\ntype FindOrCreateErpFeedPayload {\n  clientMutationId: String!\n  erpFeed: ErpFeed\n  errorMessage: String\n}\n\n\"\"\"\nA policy for issuing card statements. Card statement policies are immutable\nand the latest policy is always the one in effect for a given customer.\n\"\"\"\ntype CardStatementPolicy implements Node {\n  \"\"\"A cycle for issuing card statement policies.\"\"\"\n  cycle: CardStatementPolicyCycle\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\ntype SetReceivablesOffersSelectedTrialOnboardingPayload {\n  account: ReceivablesOffersAccount\n  clientMutationId: String!\n}\n\nenum RecipientType {\n  BUSINESS\n  INDIVIDUAL\n}\n\ntype ValidatedVendorContactInputEdge {\n  cursor: String\n  node: ValidatedVendorContactInput\n}\n\ninput AchPaymentInstrumentInput {\n  accountClass: BankAccountClass\n  accountNumber: String!\n  accountType: BankAccountType\n  routingNumber: String!\n}\n\ntype ExpensesItemEventConnection {\n  edges: [ExpensesItemEventEdge]\n  pageInfo: PageInfo!\n}\n\ntype BiweeklyClosingStrategy {\n  dayOfWeek: Int\n}\n\ntype SubmitOnboardingApplicationPayload {\n  clientMutationId: String!\n  onboardingApplication: OnboardingApplication!\n}\n\ntype UserCategory implements Node {\n  category: String\n  description: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  integration: Integration\n  isDeleted: Boolean\n  isDisabled: Boolean\n  isInactive: Boolean\n  merchantCategories(after: String, before: String, first: Int, last: Int): MerchantCategoryConnection\n  name: String\n  parentUserCategory: UserCategory\n  \"\"\"ID reference to parent UserCategory\"\"\"\n  parentUserCategoryId: ID\n  vendorInternalId: String\n}\n\ntype ApprovalsPolicyDetails implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  ruleGroups: [ApprovalsRuleGroup!]!\n  version: Int!\n}\n\ninput LeadAttributionMetadata {\n  fbc: String\n  fbp: String\n  fullUrl: String\n  gclid: String\n  referralCode: String\n  segmentAnonymousId: String\n}\n\ninput UpdateTransactionDepartmentInput {\n  clientMutationId: String!\n  departmentId: String!\n  transactionId: ID!\n}\n\ntype ProvisionApplePayPayload {\n  clientMutationId: String!\n  encryptedPassData: String!\n  ephemeralPublicKey: String!\n  otp: String!\n}\n\ntype ErpFeed implements Node {\n  customerAccountId: String\n  exportPipeId: String\n  financialAccountId: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  lastExportedAt: Time\n  status: String\n  syncFrom: Time\n  type: ErpVendorType\n}\n\n\"\"\"The receivables offers vendor (sales platform, i.e., Amazon, Shopify, etc.)\"\"\"\ntype ReceivablesOffersVendor {\n  \"\"\"Enum of vendor type (i.e., AMAZON_MWS, SHOPIFY, etc.)\"\"\"\n  type: ReceivablesOffersVendorType!\n}\n\nenum OnboardingApplicationStateProductV1Value {\n  \"\"\"The application was approved for this product\"\"\"\n  APPROVED\n  \"\"\"The user did not apply for this product as part of their application\"\"\"\n  NOT_REQUESTED\n  \"\"\"Either the application is incomplete or it's being reviewed\"\"\"\n  PROCESSING\n}\n\ntype BillSyncErrorConnection {\n  edges: [BillSyncErrorEdge]\n  pageInfo: PageInfo!\n}\n\ntype RuleEdge {\n  cursor: String\n  node: Rule\n}\n\ntype FinancialAccountConnection {\n  edges: [FinancialAccountEdge]\n  pageInfo: PageInfo!\n}\n\ntype UpdateApprovalsReviewsPayload {\n  approvalsReviews: [ApprovalsReview!]\n  clientMutationId: String!\n}\n\ntype ProgramMembershipEdge {\n  cursor: String\n  node: ProgramMembership\n}\n\ntype OnboardingApplicationStateRiskEvaluation {\n  \"\"\"The state of the compliance portion of the risk evaluation application\"\"\"\n  compliance: OnboardingApplicationStateRiskEvaluationValue\n  \"\"\"The state of the fraud portion of the risk evaluation application\"\"\"\n  fraud: OnboardingApplicationStateRiskEvaluationValue\n  \"\"\"Date by which all requests must be completed, else the account is offboarded\"\"\"\n  offboardDueDate: Time\n  \"\"\"Date by which all requests must be completed, else the account is suspended\"\"\"\n  suspendDueDate: Time\n}\n\ninput DisableBillsInput {\n  clientMutationId: String!\n  id: ID!\n}\n\ntype DeleteCardTransactionInsightMutingPolicyPayload {\n  cardTransactionInsightMutingPolicy: CardTransactionInsightMutingPolicy\n  clientMutationId: String!\n}\n\nenum CardPaymentFailureType {\n  ACCOUNT_CLOSED\n  ACCOUNT_NOT_FOUND\n  GENERIC_FAILURE\n  INSUFFICIENT_FUNDS\n  NOT_AUTHORIZED\n  NOT_SENT\n}\n\ninput CreateFinancialBankStatementForNewAccountInput {\n  assetId: ID!\n  clientMutationId: String!\n}\n\nenum ExpensesItemStatus {\n  DISMISS\n  FLAGGED\n  RESOLVED\n}\n\nenum PlaidProduct {\n  AUTH\n  BALANCE\n  INCOME\n  INVESTMENTS\n  TRANSACTIONS\n}\n\ntype CreateFileUploadUrlPayload {\n  clientMutationId: String!\n  uploadRequestId: String\n  uploadUrl: String\n}\n\ninput ConfirmPaymentDraftInput {\n  paymentId: ID\n}\n\n\"\"\"View data for cash add funds flow banner\"\"\"\ntype IncentivePlacementViewDataCashAddFundsFlowBanner {\n  \"\"\"CTA text \"\"\"\n  cta: String!\n  \"\"\"Icon type optional - potentially useful in the future\"\"\"\n  iconType: String\n  \"\"\"Placement\"\"\"\n  placement: IncentivePlacement!\n  \"\"\"Title of banner\"\"\"\n  title: String!\n}\n\ntype FundingSourceData {\n  accountName: String\n  accountNumberLastFour: String\n  accountType: String\n  routingNumber: String\n}\n\ntype UpdateUserPayload {\n  clientMutationId: String!\n  user: User\n}\n\ntype CashTransactionDomesticWireDetails {\n  \"\"\"Counterparty's account number\"\"\"\n  accountNumber: String\n  \"\"\"The address of the recipient\"\"\"\n  address: Address\n  \"\"\"The counterparty's beneficiary bank information\"\"\"\n  beneficiaryBank: CashTransactionBeneficiaryBank\n  \"\"\"The institution's logo as a base64 PNG, if available\"\"\"\n  beneficiaryBankLogoBase64: String\n  \"\"\"The email of the recipient\"\"\"\n  email: String\n  \"\"\"The fed reference number that we get on BAI2 incoming wire entries\"\"\"\n  fedReferenceNumber: String\n  \"\"\"The IMAD indicates a unique number that is assigned to a transfer upon receiving at the sending financial institution\"\"\"\n  imad: String\n  \"\"\"The OMAD indicates a unique number assigned to each transfer providing delivery-related information\"\"\"\n  omad: String\n  \"\"\"Whether the transaction was a debit or credit\"\"\"\n  paymentMethod: CashTransactionPaymentMethod!\n  \"\"\"Counterparty's routing number\"\"\"\n  routingNumber: String\n  \"\"\"Payment instructions\"\"\"\n  transferDescription: String\n}\n\ninput ActivateCardInput {\n  clientMutationId: String!\n  last4: String!\n  pin: String\n}\n\ntype EmailMetadata {\n  fromEmailAddress: String!\n}\n\nenum EarlyAccessFeatureAvailablePlatform {\n  ANDROID\n  IOS\n  WEB\n}\n\ninput ConnectInstitutionInput {\n  clientMutationId: String!\n  institutionId: ID!\n  requestType: FinancialsConnectRequestType\n}\n\nunion SuggestionType = Card | Department | Location | Merchant | MerchantCategory | User | UserCategory\n\ntype DocumentOcrParsedDetailsDetail implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The value passed into the 'verify_entities' payload at the time of creation (if any).\"\"\"\n  input: String\n  \"\"\"The extracted value from the document (if any).\"\"\"\n  value: String\n  \"\"\"Indicates if the input and extracted value (if one was provided) match.\"\"\"\n  verified: Boolean\n}\n\n\"\"\"Describes an HRIS connection with the hris vendor\"\"\"\ntype HrisConnection implements Node {\n  \"\"\"The HRIS vendor this connection is established w/\"\"\"\n  hrisAggregatorVendor: HrisAggregatorVendor\n  \"\"\"The status of the user's connection with the hris vendor\"\"\"\n  hrisStatus: HrisStatus\n  \"\"\"The HRIS system the user is connecting to via this connection\"\"\"\n  hrisSystem: HrisSystem\n  \"\"\"The display name of the HRIS system the user is connecting to\"\"\"\n  hrisSystemName: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The last time that the hris sync with the vendor and into Brex completed/failed\"\"\"\n  lastSyncAt: Time\n  \"\"\"The (most recent) syncing status of the connection with the hris vendor\"\"\"\n  syncStatus: HrisSyncStatus\n}\n\ntype PeriodicReview implements Node {\n  \"\"\"Due date by which review should be completed, else dashboard forces a blocking experience\"\"\"\n  dueAt: Time\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"State of the periodic review ie. active/succeeded etc.\"\"\"\n  state: PeriodicReviewState\n}\n\n\"\"\"Validation result for a contact input\"\"\"\ntype VendorContactInputValidation {\n  \"\"\"Fields that are valid or not (string -> boolean)\"\"\"\n  fields: Json!\n  \"\"\"Boolean whether the contact input is a duplicate\"\"\"\n  isDuplicate: Boolean!\n  \"\"\"Boolean whether the contact input is valid\"\"\"\n  isValid: Boolean!\n  \"\"\"Validated ACH Payment Instrument\"\"\"\n  validatedAchPaymentInstrument: ValidatedPaymentInstrument\n  \"\"\"Validated Cheque Payment Instrument\"\"\"\n  validatedChequePaymentInstrument: ValidatedPaymentInstrument\n  \"\"\"Validated Domestic Wire Payment Instrument\"\"\"\n  validatedDomesticWirePaymentInstrument: ValidatedPaymentInstrument\n  \"\"\"Validated International Wire Payment Instrument\"\"\"\n  validatedInternationalWirePaymentInstrument: ValidatedPaymentInstrument\n}\n\n\"\"\"The spend alert\"\"\"\ntype CardTransactionInsight implements Node {\n  \"\"\"The spend alert type\"\"\"\n  alertType: SpendAlertType!\n  \"\"\"The amount of the transaction\"\"\"\n  amount: Int!\n  \"\"\"The card is used for this transaction/alert\"\"\"\n  card: Card\n  \"\"\"The customer account for this alert\"\"\"\n  customerAccount: Account\n  \"\"\"The customer user for this alert\"\"\"\n  customerUser: User\n  \"\"\"The department\"\"\"\n  department: Department\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"A list of event associated with this alert.\"\"\"\n  insightEvents: [CardTransactionInsightEvent]\n  \"\"\"The spend alert metadata\"\"\"\n  insightMetadata: InsightMetadata\n  \"\"\"The spend alert type - This field will be deprecated and replaced by alert_type.\"\"\"\n  insightType: CardTransactionsInsightType!\n  \"\"\"The merchant\"\"\"\n  merchant: Merchant\n  \"\"\"The merchant category\"\"\"\n  merchantCategory: String\n  \"\"\"The merchant name\"\"\"\n  merchantName: String!\n  \"\"\"The originator type\"\"\"\n  originatorType: String\n  \"\"\"The time when this transaction is posted at\"\"\"\n  postedAt: Time!\n  \"\"\"The statement entry belongs to this alert\"\"\"\n  statementEntry: StatementEntry\n  \"\"\"The user name\"\"\"\n  userName: String!\n}\n\ninput FinicityConnectGenerateFixUrlInput {\n  clientMutationId: String!\n  financialSourceId: ID!\n}\n\ntype NotificationSubscription implements Node {\n  channel: Channel\n  filters: [NotificationFilter]\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  notificationType: NotificationType\n}\n\ntype ReceivablesOffersAccount implements Node {\n  acceptedOffersGroups(after: String, before: String, first: Int, ignoreCardOffersGroup: Boolean = false, last: Int): ReceivablesOffersOffersGroupConnection\n  \"\"\"Has the customer finished their instant payouts onboarding flow\"\"\"\n  appliedForInstantPayouts: Boolean\n  \"\"\"The summation of all active offers that the customer has available as of now\"\"\"\n  cumulativeOffer: ReceivablesOffersCumulativeOffer\n  \"\"\"The customer_account_id for the receivables offers account\"\"\"\n  customerAccountId: String!\n  \"\"\"The timestamp of the earliest future payout that the customer is expected to receive\"\"\"\n  estimatedNextPayoutAt: Time\n  \"\"\"List of failing checks for trial/full access, as well as failing ongoing monitoring checks\"\"\"\n  failingChecks: ReceivablesOffersAccountFailingChecks\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The timestamp when the customer first accepted the instant payouts legal agreement (terms and conditions)\"\"\"\n  legalAgreementAcceptedAt: Time\n  \"\"\"The metadata for the receivables offers account (not user-modifiable)\"\"\"\n  metadata: ReceivablesOffersAccountMetadata!\n  \"\"\"\n  The list of payment intents that target Receivable Offers related Journal Accounts, including both Card and Cash.\n  \n  Note that even though this is a connection field, it DOES NOT SUPPORT PAGINATION YET, meaning it can be really slow and can load a lot of data. Do\n  not use pageInfo yet.\n  \"\"\"\n  paymentIntents(after: String, before: String, first: Int, last: Int): ReceivablesOffersPaymentIntentConnection\n  \"\"\"The total pending amount from card transactions fundable by Receivables Offers\"\"\"\n  pendingCardTransactionsAmount: FinancialAsset\n  \"\"\"List of seller accounts associated with the receivables offers account\"\"\"\n  sellerAccounts: [ReceivablesOffersSellerAccount!]!\n  \"\"\"The settings for the receivables offers account (user-modifiable)\"\"\"\n  settings: ReceivablesOffersAccountSettings!\n  \"\"\"The status of the receivables offers account (e.g., `ACTIVE`, `ACTIVE_TRIAL`, etc.)\"\"\"\n  status: ReceivablesOffersAccountStatus!\n  \"\"\"The timestamp of when the customer's `active_trial` access ended\"\"\"\n  trialEndedAt: Time\n  \"\"\"The timestamp of when the customer's `active_trial` access started\"\"\"\n  trialStartedAt: Time\n  upcomingPayouts(after: String, before: String, first: Int, last: Int): ReceivablesOffersPayoutConnection\n}\n\ntype ApprovalPaymentContext {\n  amount: Int\n  counterpartyLocation: AccountLocation\n  counterpartyName: String\n  logicalId: ID!\n  paymentDescription: String\n  paymentInitiatorFirstName: String\n  paymentInitiatorLastName: String\n  paymentStatus: DepositsPaymentStatus\n  paymentStatusReason: StatusReason\n  paymentType: PaymentRail\n}\n\ntype CredentialShopifyPayload {\n  shopName: String\n}\n\ntype User implements Node @key(fields: \"id\") {\n  seenFlags(keys: [SeenFlagKey]!): [SeenFlag]\n  department: Department\n  lastName: String\n  fraudAlerts(after: String, before: String, first: Int, last: Int): FraudAlertConnection\n  \"\"\"Whether the user is a manager or has any direct reports\"\"\"\n  isManager: Boolean!\n  email: String\n  \"\"\"Monthly breakdown for amount spent by user\"\"\"\n  monthlySpendBreakdown: [MonthlyUserBalance]\n  firstName: String\n  programMemberships(after: String, before: String, first: Int, last: Int): ProgramMembershipConnection\n  hasOnboarded: Boolean!\n  \"\"\"The user's current monthly user limit, or null if there is no limit\"\"\"\n  monthlyUserLimit: Int @deprecated(reason: \"Use monthly_user_limit_info instead\")\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  isMfaEnabled: Boolean\n  monthlyUserLimitInfo: MonthlyUserLimitInfo\n  role: String\n  helpshiftAuthToken: String!\n  displayRole: UserRoleTypeInput!\n  ssn: String\n  \"\"\"Net amount spent by user this month\"\"\"\n  amountSpent(timeWindowDays: Int!): Int @deprecated(reason: \"Use amount_spent_current_month instead\")\n  status: String\n  tenantAccounts: [TenantAccountResult]\n  channels(after: String, before: String, first: Int, last: Int): ChannelConnection\n  rules(after: String, before: String, first: Int, last: Int): RuleConnection @deprecated(reason: \"Do not access a user's rules directly. Instead use domain-specific fields like monthly_user_limit\")\n  insertedAt: Time\n  mfaPrimaryMethod: MfaPrimaryMethod\n  \"\"\"Net amount spent by user this month including cards that do not apply to the user limit\"\"\"\n  amountSpentCurrentMonthAllCards: Int\n  address: Address\n  location: Location\n  \"\"\"Whether the user has any transactions\"\"\"\n  hasTransaction: Boolean!\n  cards(after: String, before: String, first: Int, id: [ID!], instrumentType: InstrumentType, isPreapproved: Boolean, last: Int, searchQuery: String, sortBy: CardSortColumn, status: [String!], statusViews: [StatusView!]): CardConnection\n  isInitialApplicant: Boolean!\n  depositsRole: DepositsRole\n  notificationSubscriptions(after: String, before: String, first: Int, last: Int): NotificationSubscriptionConnection\n  isInvitedDepositsAdmin: Boolean!\n  \"\"\"Whether user has access to the primitives experience\"\"\"\n  isPrimitives: Boolean\n  \"\"\"All active (non-terminal) onboarding applications belonging to the applicant.\"\"\"\n  latestOnboardingApplication(\n    \"\"\"Return only applications of the given blueprint type\"\"\"\n    type: UserOnboardingBlueprintType\n  ): OnboardingApplication\n  \"\"\"Whether the user should be in the product onboarding flow\"\"\"\n  mustSeeProductOnboarding: Boolean!\n  \"\"\"The user's manager\"\"\"\n  manager: User\n  isInvitedDepositsCashAndCardUser: Boolean!\n  \"\"\"Suggested shipping address used for card shipping\"\"\"\n  suggestedShippingAddress: Address\n  \"\"\"Whether or not the user has any corporate cards that are not terminated\"\"\"\n  hasValidCorporateCards: Boolean!\n  account: Account\n  \"\"\"Net amount spent by user this month on cards for user limit\"\"\"\n  amountSpentCurrentMonth: Int\n  referralCode: String\n  birthDate: Time\n  \"\"\"Whether or not user has access to corporate cards\"\"\"\n  canAccessCorporateCards: Boolean!\n}\n\ninput AddFspBookkeeperUserInput {\n  bookkeeperUserId: String!\n  clientMutationId: String!\n}\n\nenum BillingPaymentIntentStatus {\n  CANCELED\n  COMPLETED\n  FAILED\n  IN_PROGRESS\n  INVALID\n  PENDING\n}\n\ninput CreateDocumentOcrInput {\n  clientMutationId: String!\n  \"\"\"the ID of the filestore asset to be processed\"\"\"\n  filestoreId: ID!\n  \"\"\"Entities to be matched in the document\"\"\"\n  verifyEntities: DocumentOcrVerifyEntitiesInput\n}\n\ntype OnboardingInformationRequest implements Node {\n  application: OnboardingApplication!\n  beforePages: [OnboardingNonSubmittablePage!]!\n  canResubmit: Boolean!\n  content: OnboardingInformationRequestContent! @deprecated(reason: \"Use contentPage.content instead\")\n  contentPage: OnboardingSubmittablePage!\n  data: Json\n  \"\"\"\n  This field is a machine-readble identifier of the information request.\n  It's used by the frontend to match the footer to show to the customer.\n  It was added quickly as a stop-gap solution, so please use it carefully.\n  \"\"\"\n  description: OnboardingInformationRequestDescription!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  status: OnboardingInformationRequestStatus!\n  type: OnboardingInformationRequestType!\n}\n\ninput SetReceivablesOffersRevenueAccessEnabledInput {\n  clientMutationId: String!\n  value: Boolean!\n}\n\nenum TerminationReason {\n  CARD_DAMAGED\n  CARD_LOST\n  CARD_NOT_RECEIVED\n  DO_NOT_NEED_PHYSICAL_CARD\n  DO_NOT_NEED_VIRTUAL_CARD\n  FRAUD\n  OTHER\n}\n\ntype PaymentApprover {\n  customerUser: User\n  decision: PaymentApprovalDecision!\n  decisionNotes: String\n  decisionReason: PaymentApprovalDecisionReason\n  updatedAt: Time\n}\n\ninput CreateSmsChannelInput {\n  clientMutationId: String!\n  number: PhoneNumber!\n}\n\n\"\"\"Extra state values for an application, for product applications this contains cash/card outcomes\"\"\"\nunion OnboardingApplicationState = OnboardingApplicationStateEmpty | OnboardingApplicationStateProductV1 | OnboardingApplicationStateRiskEvaluation\n\ntype BillingDelinquency implements Node {\n  asOf: Time\n  customerAccountId: String\n  daysPastDue: Int\n  dueAmountUsdCents: Int\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\n\"\"\"Data provider account connected to a specific customer account\"\"\"\ntype DataImporterDataProvider {\n  \"\"\"The customer account this data provider is connected to\"\"\"\n  customerAccountId: ID!\n  \"\"\"The data provider id\"\"\"\n  id: ID!\n  \"\"\"The data provider status\"\"\"\n  status: DataImporterDataProviderStatus!\n}\n\nenum Method {\n  CREDIT\n  DEBIT\n}\n\ntype TotalCashBalanceTile implements Node {\n  financialSourcesToFix(after: String, before: String, first: Int, last: Int): FinancialSourceConnection\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  statementRequestedAccountsEarliestDueAt: Time\n}\n\ntype UnsuspendCardPayload {\n  card: Card!\n  clientMutationId: String!\n}\n\ntype ExpensesFlag implements Node {\n  expensesFlagEvents(after: String, before: String, first: Int, last: Int): ExpensesFlagEventConnection\n  expensesItem: ExpensesItem\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  rule: ExpensesRule\n  status: ExpensesFlagEventAction\n}\n\ntype UpdateAutoAddFundsPayload {\n  clientMutationId: String!\n  payment: DepositsPayment!\n}\n\ntype TenantAccountResult {\n  accountId: String!\n  name: String!\n}\n\nenum OnboardingBlueprintType {\n  \"\"\"Applications to change the user's cash role\"\"\"\n  CHANGE_ROLE\n  \"\"\"Cash upsell applications\"\"\"\n  DEPOSITS\n  \"\"\"Application to collect/review account details for periodic review\"\"\"\n  PERIODIC_REVIEW\n  \"\"\"Net-new product applications\"\"\"\n  PRODUCT_V1\n  \"\"\"Onboarding flows to determine a customer's risk tier\"\"\"\n  RISK_EVALUATION\n  \"\"\"Onboarding flows to set up a user's account\"\"\"\n  USER_SETUP\n}\n\n\"\"\"Object defining the total and remaining cheque deposit\"\"\"\ntype ChequeDepositLimits {\n  \"\"\"The remaining limit available for making cheque deposits\"\"\"\n  chequeDepositRemainingLimitUsdCents: Int!\n  \"\"\"The total limit definited for cheque deposits\"\"\"\n  chequeDepositTotalLimitUsdCents: Int!\n}\n\ntype RewardsOffer {\n  pointsCost: Int!\n  redemptionOfferId: String!\n}\n\ninput GeneratePlaidLinkTokenInput {\n  clientMutationId: String!\n  migrateFinancialSourceId: ID\n  products: [PlaidProduct]\n  redirectUri: String\n}\n\nenum RewardsHistoryEntryOrderType {\n  ASC\n  DESC\n  INVALID\n}\n\ninput DeviceInformationInput {\n  additionalInformation: Json\n  appVersion: String!\n  model: String!\n  os: String!\n}\n\ntype HeartbeatPayload {\n  \"\"\"Acknowledgement that the server processed the request correctly\"\"\"\n  ack: Boolean\n}\n\ntype UpdateTransactionMemoPayload {\n  clientMutationId: String!\n  transaction: Transaction\n}\n\ntype FinalizeConnectCredentialPayload {\n  clientMutationId: String!\n  dataProvider: DataImporterDataProvider\n}\n\n\"\"\"Default non-integration specific credential payload\"\"\"\ntype CredentialVendorPayload {\n  \"\"\"ID\"\"\"\n  id: String\n}\n\ntype CardPaymentForwarderRecipient {\n  beneficialOwner: CardPaymentForwarderBeneficialOwner\n  businessAddress: Address\n  businessName: String\n  category: CardPaymentForwarderCategory\n  contact: CardPaymentForwarderContact\n  receivingMethod: ReceivingMethod\n  recipientId: ID\n}\n\ntype SpendAggregateTimeSeriesEdge {\n  cursor: String\n  node: SpendAggregateTimeSeries\n}\n\n\"\"\"Customer referral object\"\"\"\ntype ReferralRecord implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"referral creation time\"\"\"\n  insertedAt: Time!\n  \"\"\"id of the referral record\"\"\"\n  referralRecordId: String\n  \"\"\"referral status\"\"\"\n  referralStatus: ReferralRecordStatus!\n  \"\"\"the email of the referred user\"\"\"\n  targetEmail: String!\n}\n\n\"\"\"Referrals summary object\"\"\"\ntype ReferralsSummary implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Mobile summary values\"\"\"\n  mobile: MobileReferralsSummary\n}\n\nenum CardLimitFrequency {\n  MONTHLY\n  ONE_TIME\n  QUARTERLY\n  YEARLY\n}\n\ntype BulkFindOrCreateErpFeedsPayload {\n  clientMutationId: String!\n  erpFeeds: [ErpFeed]\n  errorMessage: String\n}\n\nenum PaymentClass {\n  INSTANT\n  RECURRING\n  SCHEDULED\n}\n\ntype RewardsTriggerInstanceConnection {\n  edges: [RewardsTriggerInstanceEdge]\n  pageInfo: PageInfo!\n}\n\ntype ExpensesFlagConnection {\n  edges: [ExpensesFlagEdge]\n  pageInfo: PageInfo!\n}\n\ntype AccountSystemSettings {\n  bypassFinancialsSetup: Boolean\n  monthlyUserLimitRolloutEnabled: Boolean\n  showCashUpsell: Boolean\n}\n\ntype CreateFundingSourcePayload {\n  clientMutationId: String!\n  fundingSource: FundingSource!\n}\n\ninput CancelTransactionInput {\n  clientMutationId: String!\n  transactionId: ID!\n}\n\ntype ApprovalsRuleGroupMatcher implements Node {\n  comparison: String!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  key: String!\n  value: String\n}\n\ntype FinancialAccount implements Node {\n  \"\"\"Whether the account can make Cash outgoing ach debits or not\"\"\"\n  achDebitCapability: AchDebitCapability!\n  description: String\n  details: FinancialAccountDetails\n  \"\"\"\n  Soft-deletion of funding resources is represented using a disabled status.\n  We don't want to expose this implementation details to clients. There is currently\n  no known use case in the UI for showing additional status information, but they\n  could be included here as needed.\n  \"\"\"\n  fundingSource: FundingSource\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  latestBalance: FinancialBalance\n  name: String\n  priority: FundingSourcePriority\n  source: FinancialSource\n}\n\ninput CreateRfiResponseItemInput {\n  documentToken: String!\n}\n\ntype StatementEntryLens implements Node {\n  billableStatus: BillableStatus\n  disabledRules: [IntegrationRule]\n  displayFieldEntities: [ExternalIntegrationEntity]\n  displayFields: Json\n  externalClass: ExternalIntegrationEntity\n  externalDepartment: ExternalIntegrationEntity\n  externalLocation: ExternalIntegrationEntity\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"\n  Returns the computed integration field entities from integration rule engine for a ste.\n  We return a list of PEIEs as the PEIF data exists on the object itself to match in the frontend.\n  \"\"\"\n  integrationFieldEntities: [ExternalIntegrationEntity]\n  ruleEvaluations: [IntegrationRuleEvaluation]\n  ste: StatementEntry\n  userCategory: UserCategory\n}\n\ninput GenerateReceivablesPayoutReportInput {\n  clientMutationId: String!\n  payoutId: ID!\n}\n\nenum DisputeStatus {\n  DISPUTE_STATUS_CLOSED\n  DISPUTE_STATUS_COMPLETE\n  DISPUTE_STATUS_DRAFT\n  DISPUTE_STATUS_IN_PROGRESS\n  DISPUTE_STATUS_MORE_INFORMATION_NEEDED\n  DISPUTE_STATUS_UNKNOWN\n}\n\nenum FundingSourcePriority {\n  ALTERNATIVE\n  PRIMARY\n}\n\ninput PrepareMultiFeeReceivablesOffersForAcceptanceInput {\n  clientMutationId: String!\n  depositsAccountId: ID!\n  offerIds: [ID!]!\n  requestId: String\n  requestedAdvanceAmount: FinancialAssetInput\n}\n\ntype UpdatePlaidLinkTokenPayload {\n  clientMutationId: String!\n  linkToken: String!\n}\n\ntype UnderwritingAnalysisFlagEdge {\n  cursor: String\n  node: UnderwritingAnalysisFlag\n}\n\ntype Credential implements Node {\n  expirationDate: Time\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  payload: CredentialPayload\n  publicData: Json\n  renewalDate: Time\n  status: String\n  vendor: String\n}\n\ntype SetReceivablesOffersIntegrationFinancialAccountMappingsPayload {\n  account: ReceivablesOffersAccount\n  clientMutationId: String!\n}\n\ntype Location implements Node @key(fields: \"id\") {\n  deletedAt: Time\n  description: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  membersCount: Int\n  name: String\n  users(after: String, before: String, first: Int, last: Int): UserConnection\n}\n\ntype SetApprovalsUnsafeFlagPayload {\n  clientMutationId: String!\n  value: String\n}\n\ninput ReceivingMethodInput {\n  achReceivingMethod: AchReceivingMethodInput\n  checkReceivingMethod: CheckReceivingMethodInput\n  eftReceivingMethod: EftReceivingMethodInput\n  wireReceivingMethod: WireReceivingMethodInput\n}\n\ninput InputCashTransactionCreationArgumentUnion {\n  \"\"\"Pull funds via ACH from an external account to a cash account\"\"\"\n  achDebit: InputCashTransactionAchDebitArguments\n  \"\"\"\n  Move funds from a cash account to another cash account\n  Note: book_tranfers can not be scheduled or repeated currently\n  \"\"\"\n  bookTransfer: InputCashTransactionBookTransferArguments\n  \"\"\"Push funds from a cash account to an external account\"\"\"\n  credit: InputCashTransactionCreditArguments\n}\n\n\"\"\"A rule evaluation is a evaluation result for an integration field.\"\"\"\ntype RuleEvaluation implements Node {\n  billableStatus: Boolean\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  integrationField: IntegrationField\n  integrationRule: IntegrationRule\n  ruleId: String\n  userCategoryId: String\n}\n\ninput CreateIntegrationRuleInput {\n  body: Json!\n  clientMutationId: String!\n  integrationId: ID!\n  name: String\n  priority: Int!\n  type: String!\n}\n\ntype UpdateTransactionDepartmentPayload {\n  clientMutationId: String!\n  transaction: Transaction\n}\n\ninput DisconnectCredentialInput {\n  clientMutationId: String!\n  id: ID!\n}\n\nenum EarlyAccessFeatureJoinStatus {\n  JOINED\n  NOT_JOINED\n}\n\ntype BillingPaymentEdge {\n  cursor: String\n  node: BillingPayment\n}\n\ninput CompleteOnboardingInput {\n  clientMutationId: String!\n}\n\ntype ReplacesRecord {\n  card: Card!\n  insertedAt: Time!\n  reason: CardReplacementReason!\n}\n\nenum PositivePayAccountSettingStatus {\n  BLOCKED\n  FAVORITE\n}\n\n\"\"\"The spend alert muting policy\"\"\"\ntype CardTransactionInsightMutingPolicy implements Node {\n  \"\"\"The alert type\"\"\"\n  alertType: SpendAlertType!\n  \"\"\"The customer user who creates this muting policy\"\"\"\n  createdByUser: User\n  \"\"\"The customer account\"\"\"\n  customerAccount: Account\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The alert type. This field will be deprecated and replaced by alert_type\"\"\"\n  insightType: CardTransactionsInsightType\n  \"\"\"The mute column\"\"\"\n  muteColumn: MuteColumn\n  \"\"\"The mute value\"\"\"\n  muteValue: MuteValueType\n}\n\ntype RewardsCampaign implements Node {\n  description: String!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  name: String!\n  rewardsTriggers(after: String, before: String, first: Int, last: Int): RewardsTriggerConnection\n}\n\ntype RewardsRedemptionOfferEdge {\n  cursor: String\n  node: RewardsRedemptionOffer\n}\n\ntype OnboardingFormEmpty {\n  _: Boolean\n}\n\nenum HrisSystem {\n  ADP_WORKFORCE_NOW\n  BAMBOOHR\n  CERIDIAN_DAYFORCE\n  CHARTHOP\n  FRESHTEAM\n  GUSTO\n  HIBOB\n  HR_CLOUD\n  HR_PARTNER\n  HUMAANSIO\n  INVALID\n  JUSTWORKS\n  LANO\n  NAMELY\n  NMBRS\n  PAYCHEX\n  PAYLOCITY\n  PERSONIO\n  RIPPLING\n  SAGE_HR\n  SAP_SUCCESSFACTORS\n  SAPLING\n  SQUARE_PAYROLL\n  TRINET\n  UKG_PRO\n  UKG_READY\n  WORKDAY\n  ZENEFITS\n}\n\ntype CashBank {\n  accountType: String!\n  city: String!\n  name: String!\n  state: String!\n  street: String!\n  suite: String!\n  zip: String!\n}\n\ntype LimitRuleMetadata {\n  amount: Int\n  timeWindowDays: Int\n}\n\n\"\"\"muting config for an individual column\"\"\"\ninput MutingConfigurationInput {\n  muteColumn: MuteColumn!\n  muteValues: [String!]!\n}\n\ninput SetReceivablesOffersIntegrationFinancialAccountMappingsInput {\n  clientMutationId: String!\n  value: [ReceivablesOffersIntegrationFinancialAccountMappingInput]!\n}\n\nenum PositivePayStatus {\n  BLOCKED\n  FAVORITE\n  REGULAR\n}\n\ntype FinancialStatementRequestedAccountEdge {\n  cursor: String\n  node: FinancialStatementRequestedAccount\n}\n\ntype UnderwritingAccount implements Node {\n  appliedAnalysis: UnderwritingAnalysis\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  isSuspended: Boolean!\n  status: UnderwritingAccountStatus!\n  statusV2: UnderwritingAccountStatusV2!\n}\n\ninput ResetUserUserInput {\n  password: String!\n}\n\ntype CreateAssetPayload {\n  asset: Asset\n  clientMutationId: String!\n}\n\nunion CreditLimitFactorTile = PaymentHistoryTile | TotalCashBalanceTile\n\nenum CardPaymentFailureTypeV3 {\n  ACCOUNT_CLOSED\n  ACCOUNT_NOT_FOUND\n  GENERIC_FAILURE\n  INSUFFICIENT_FUNDS\n  NON_TRANSACTION_ACCOUNT\n  NOT_AUTHORIZED\n}\n\ntype OnboardingBlueprint implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The specific implementation of the blueprint type\"\"\"\n  name: String!\n  \"\"\"Determines which application handler will be used to process the application\"\"\"\n  type: OnboardingBlueprintType!\n}\n\ntype ExpensifyCategories {\n  vendorName: String\n}\n\ntype ErpFeedConnection {\n  edges: [ErpFeedEdge]\n  pageInfo: PageInfo!\n}\n\ntype Address {\n  address1: String\n  address2: String\n  city: String\n  country: String\n  \"\"\"\n  Object containing the standardize alpha2, alpha3, numeric and name values for the address\n  country. This will be nil if the country is not a valid alpha2 or alpha3 country code.\n  \"\"\"\n  countryMetadata: Country\n  state: String\n  zip: String\n}\n\n\"\"\"A merge-specific input type to create a connection\"\"\"\ninput MergeHrisConnectionInput {\n  \"\"\"The public token merge requires us to secure a connection w/ them\"\"\"\n  publicToken: String!\n}\n\nenum NotificationSetting {\n  INVALID\n  PROCESSING\n  PROCESSING_PROCESSED\n}\n\ninput ApprovalsUserTypeIndividualInput {\n  \"\"\"The user id. The caller should pass in the direct id instead of the encoded id\"\"\"\n  userId: ID!\n}\n\ntype CashTransactionPayrollEstimateDetails {\n  \"\"\"When the payroll associated with this estimate will end\"\"\"\n  payrollEndDate: Date!\n  \"\"\"Name of the payroll provider (e.g. \"gusto\") associated with this estimate\"\"\"\n  payrollProviderName: String!\n  \"\"\"When the payroll associated with this estimate started\"\"\"\n  payrollStartDate: Date!\n}\n\n\"\"\"Xero credential payload\"\"\"\ntype CredentialXeroPayload {\n  \"\"\"Boolean describing whether the credential has the required scopes for enabling bill sync\"\"\"\n  hasBillSyncScopes: Boolean\n}\n\nenum ReceivablesOffersFeeProgram {\n  DEFAULT\n  FREE\n  INVALID\n}\n\ntype CompletePaymentApprovalPayload {\n  clientMutationId: String!\n  paymentApproval: PaymentApproval!\n  paymentApprovalResult: PaymentApprovalResult!\n  paymentContext: DepositsPayment!\n}\n\ntype FinancialInformationRequestEdge {\n  cursor: String\n  node: FinancialInformationRequest\n}\n\ntype BulkUserInviteError {\n  email: String\n  error: String\n}\n\ntype RewardsTriggerReferredAmountSpent {\n  referredReward: RewardsPointReward!\n  triggerSpendAmount: Int!\n}\n\ntype RoleRule {\n  actions: [String]\n  predicates: [RoleRulePredicate]\n  resources: [String]\n}\n\nenum MuteColumn {\n  ALL\n  DEPARTMENT\n  DEPARTMENT_ID\n  INVALID\n  MERCHANT_ID\n  USER_ID\n}\n\ntype RefreshFinancialSourcePayload {\n  clientMutationId: String!\n  result: FinancialsSourceResult\n}\n\ntype EnableReimbursementsPayload {\n  clientMutationId: String!\n  integration: Integration\n}\n\n\"\"\"Filter facet for integration rules (only used for statement entries)\"\"\"\ntype IntegrationRulesFilterFacet implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"A list of rules matches this filter facet type (only returned by unexported_statement_entry_filter_facets)\"\"\"\n  rules: [IntegrationRule]\n  \"\"\"Filter facet type\"\"\"\n  type: IntegrationRulesFilterFacetType\n}\n\n\"\"\"The event metadata for a dismiss event\"\"\"\ntype CardTransactionsInsightDismissEventMetadata {\n  \"\"\"Additional description the user provided when dismissing a spend alert\"\"\"\n  description: String\n  \"\"\"The reason provided by the user why the spend alert is dismissed\"\"\"\n  reason: String!\n}\n\nenum UnderwritingAccountStatusV2 {\n  APPROVED\n  LOW_FIDELITY_APPROVED\n  MISSING_DATA_APPROVED\n  PENDING\n  REJECTED\n}\n\nenum Scope {\n  ACCOUNTS_CARD_READONLY\n  ACCOUNTS_CASH_READONLY\n  CARD_NUMBERS_READONLY\n  CARDS\n  CARDS_READONLY\n  CASH_ACCOUNTS_READONLY\n  COMPANIES_READONLY\n  DEPARTMENTS\n  DEPARTMENTS_READONLY\n  INVALID\n  LOCATIONS\n  LOCATIONS_READONLY\n  REFERRALS\n  STATEMENTS_CARD_READONLY\n  STATEMENTS_CASH_READONLY\n  TRANSACTIONS_CARD_READONLY\n  TRANSACTIONS_CASH_READONLY\n  TRANSFERS\n  TRANSFERS_READONLY\n  USERS\n  USERS_READONLY\n  VENDORS\n  VENDORS_READONLY\n}\n\ninput UpdateTransactionLocationInput {\n  clientMutationId: String!\n  locationId: String!\n  transactionId: ID!\n}\n\ntype RewardsRedemptionOffer implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  name: String!\n  payload: RewardsRedemptionOfferPayload!\n  type: RewardsRedemptionClassType!\n}\n\nenum FinancialAccountType {\n  CHECKING\n  CREDIT_CARD\n  INVESTMENT\n  LINE_OF_CREDIT\n  LOAN\n  MORTGAGE\n  SAVINGS\n}\n\ntype ReplaceFundingSourcePayload {\n  clientMutationId: String!\n  fundingSource: FundingSource!\n}\n\n\"\"\"\nRepresents an named boolean used to track dashboard flag state, as an alternative\nto using localstorage.\n\"\"\"\ntype SeenFlag implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Should keys be ignored\"\"\"\n  isDeprecated: Boolean\n  \"\"\"Named with the convention [Team]_[Location]_[Action]\"\"\"\n  key: SeenFlagKey!\n  \"\"\"Last seen\"\"\"\n  lastSeenAt: Time\n  \"\"\"Only boolean values supported\"\"\"\n  value: Boolean\n}\n\ninput CreateExpensesFlagEventInput {\n  action: String!\n  clientMutationId: String!\n  description: String\n  itemId: ID!\n  ruleId: ID!\n}\n\ntype ExpensesItemEventEdge {\n  cursor: String\n  node: ExpensesItemEvent\n}\n\ntype UpdateCardFraudAlertsPayload {\n  clientMutationId: String!\n  fraudAlerts: [FraudAlert!]!\n}\n\ntype CounterpartyConnection {\n  edges: [CounterpartyEdge]\n  pageInfo: PageInfo!\n}\n\ntype GroupAggregationField {\n  count: Int!\n  key: String!\n  sum: Float!\n}\n\nenum ChannelStatus {\n  DISABLED\n  PENDING_VERIFICATION\n  READY\n}\n\n\"\"\"The original contact input\"\"\"\ntype VendorContactInputData {\n  \"\"\"Vendor's ACH Payment Instrument\"\"\"\n  achPaymentInstrument: AchPaymentInstrument\n  \"\"\"Vendor's Cheque Payment Instrument\"\"\"\n  chequePaymentInstrument: ChequePaymentInstrument\n  \"\"\"Vendor's Domestic Wire Payment Instrument\"\"\"\n  domesticWirePaymentInstrument: DomesticWirePaymentInstrument\n  \"\"\"Vendor's email\"\"\"\n  email: String\n  \"\"\"Client generated idempotency key\"\"\"\n  idempotencyKey: String!\n  \"\"\"Vendor's International Wire Payment Instrument\"\"\"\n  internationalWirePaymentInstrument: InternationalWirePaymentInstrument\n  \"\"\"Name of the vendor (needs to be unique)\"\"\"\n  name: String!\n  \"\"\"Vendor's phone number\"\"\"\n  phoneNumber: String\n}\n\ninput CreateIntegrationInput {\n  billsEnabled: Boolean\n  clientMutationId: String!\n  credentialId: ID!\n  netsuiteSubsidiary: SubsidiaryInput\n  scopes: [IntegrationScope]!\n  version: Int\n}\n\nenum SyncStatus {\n  ERROR\n  PENDING\n}\n\ntype Counterparty implements Node {\n  accountNumber: String\n  achCompanyId: String\n  address: Address\n  approverUser: User\n  beneficiaryBankAddress: Address\n  beneficiaryBankInfo: Json\n  beneficiaryBankName: String\n  chequeRecipientName: String\n  class: Class\n  email: String\n  financialAccount: FinancialAccount\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  location: AccountLocation!\n  name: String!\n  paymentRail: PaymentRail!\n  positivePayStatus: PositivePayStatus\n  \"\"\"\n  Some banks return fake/virtual account numbers; we can't tell if account numbers are real or not\n  This field provides the last characters (usually four, but can vary) of the real account number\n  \"\"\"\n  realAccountNumberEndingChars: String\n  routingNumber: String\n  type: Type\n}\n\ntype BulkInviteUsersPayload {\n  clientMutationId: String!\n  results: [BulkUserInviteResult]!\n}\n\ntype CardPaymentForwarderCategory {\n  categoryId: ID\n  name: String\n}\n\ntype ReimbursementItemEvent implements Node {\n  action: ReimbursementAction!\n  approvalRequestId: ID\n  cashTransactionIds: ID\n  customerAccountId: ID!\n  customerUserId: ID!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  insertedAt: Time!\n  modifiedBy: String!\n  reimbursementItemId: ID!\n  reimbursementMetadata: ReimbursementMetadata\n  state: ReimbursementItemState\n  updatedAt: Time!\n}\n\ninput AttributionMetadata {\n  fbc: String\n  fbp: String\n  gclid: String\n}\n\nenum OfferSetupStepType {\n  ADD_FUNDS\n  AUTOPAY\n  REVENUE_ACCESS\n}\n\ninput FinicityConnectGenerateLiteUrlInput {\n  clientMutationId: String!\n  institutionId: ID!\n}\n\nunion DepositsPaymentDetails = AchDetails | BrexOriginatedChequeDetails | DepositsPayrollEstimateDetails | WireDetails\n\ntype RewardsTriggerInstanceEdge {\n  cursor: String\n  node: RewardsTriggerInstance\n}\n\ntype UpdateTransactionCategoryPayload {\n  clientMutationId: String!\n  transaction: Transaction\n}\n\nenum PromotionsType {\n  TIPS_AND_RECS\n}\n\n\"\"\"FSP account object\"\"\"\ntype FspAccount {\n  \"\"\"customer account id\"\"\"\n  customerAccountId: String!\n  \"\"\"a short description of the company\"\"\"\n  description: String\n  \"\"\"a link to view more details of the company\"\"\"\n  detailsLink: String\n  \"\"\"the group urn created by Medusa\"\"\"\n  groupUrn: String\n  \"\"\"a link to the company logo\"\"\"\n  logoLink: String\n  \"\"\"company name\"\"\"\n  name: String!\n}\n\ntype CashTransactionOutgoingChequeReturnDetails {\n  \"\"\"Details from the transaction this return was for\"\"\"\n  originalDetails: CashTransactionOutgoingChequeDetails!\n  \"\"\"The reason why the original transaction was returned\"\"\"\n  returnReason: CashTransactionChequeReturnReason!\n}\n\n\"\"\"Subscription details for an ERP integration\"\"\"\ntype ErpSubscriptionDetail {\n  \"\"\"The name of the subscription plan\"\"\"\n  subscriptionPlanName: String\n  \"\"\"The status of the subscription\"\"\"\n  subscriptionStatus: String\n  \"\"\"Whether the subscription plan supports bill sync\"\"\"\n  supportsBillSync: Boolean\n}\n\ntype IncentivePlacementViewDataConnection {\n  edges: [IncentivePlacementViewDataEdge]\n  pageInfo: PageInfo!\n}\n\ntype ValidateChequeImagesPayload {\n  clientMutationId: String!\n  errorReason: String\n  errorSeverity: ChequeImageValidationErrorSeverity\n  passedValidation: Boolean!\n}\n\n\"\"\"MFA device type selected by user for setting up the MFA device\"\"\"\nenum MfaPrimaryMethod {\n  MFA_SMS\n  MFA_TOTP\n}\n\nenum PayrollProviderIntegrationType {\n  GUSTO\n  INVALID\n}\n\ninput DisableUserInput {\n  clientMutationId: String!\n  userId: ID!\n}\n\ninput WeeklySchedule {\n  dayOfWeek: BusinessDays!\n  nWeeks: Int!\n}\n\ntype GustoPayrollInfo {\n  accountClaimUrl: String\n}\n\ntype ProcessInvoiceAndCreateBillPayload {\n  bill: Bill!\n  clientMutationId: String!\n}\n\n\"\"\"Details associated with the offer\"\"\"\ntype ReceivablesOffersOfferDetails {\n  \"\"\"The advance rate used for calculating the offer\"\"\"\n  advanceRate: Float\n  \"\"\"The previously advanced amount on the payout associated with this offer\"\"\"\n  advancedAmount: FinancialAsset\n  \"\"\"The estimated loan repayments on the payout associated with the offer\"\"\"\n  estimatedLoanRepayments: FinancialAsset\n  \"\"\"The estimated total of the payout associated with the offer\"\"\"\n  estimatedPayout: FinancialAsset\n  \"\"\"The estimated reserve amount on the payout associated with the offer\"\"\"\n  estimatedReserveAmount: FinancialAsset\n  \"\"\"The estimated reserve percentage on the payout associated with the offer\"\"\"\n  estimatedReservePercentage: Float\n  \"\"\"The net sales on the payout associated with the offer\"\"\"\n  payoutNetSales: FinancialAsset\n  \"\"\"The reserve credit on the payout associated with the offer\"\"\"\n  payoutReserveCredit: FinancialAsset\n  \"\"\"The reserve debit on the payout associated with the offer\"\"\"\n  payoutReserveDebit: FinancialAsset\n}\n\ntype ConnectCredentialPayload {\n  authenticationResult: CredentialAuthenticationResult\n  clientMutationId: String!\n}\n\ninput ApprovalsRequestInput {\n  customerAccountId: ID\n  customerUserId: ID\n  description: String\n  id: ID!\n  insertedAt: Time\n  monthlyLimitOverrideMetadata: ApprovalsRequestMonthlyLimitOverrideInput\n  preapprovedCardMetadata: ApprovalsRequestPreapprovedCardInput\n  reimbursementMetadata: ApprovalsRequestReimbursementInput\n  status: ApprovalsRequestStatus\n  type: ApprovalsRequestType!\n}\n\ninput UpdateTransactionIntegrationCustomerInput {\n  clientMutationId: String!\n  integrationCustomerId: String!\n  transactionId: ID!\n}\n\nenum DisputeCardPossession {\n  DISPUTE_CARD_POSSESSION_NO_LOST\n  DISPUTE_CARD_POSSESSION_NO_STOLEN\n  DISPUTE_CARD_POSSESSION_NO_UNKNOWN\n  DISPUTE_CARD_POSSESSION_UNKNOWN\n  DISPUTE_CARD_POSSESSION_VIRTUAL_CARD\n  DISPUTE_CARD_POSSESSION_YES\n}\n\nenum InternalEntitySyncStatus {\n  ERROR\n  PENDING\n}\n\ntype NotificationSubscriptionConnection {\n  edges: [NotificationSubscriptionEdge]\n  pageInfo: PageInfo!\n}\n\ninput CancelPaymentInput {\n  clientMutationId: String!\n  depositsAccountId: ID!\n  paymentId: ID!\n  recurringPaymentCancellationType: DepositsRecurringPaymentCancellationType\n}\n\ntype DepositsStatement implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  name: String!\n  periodEndTime: Time!\n  periodStartTime: Time!\n}\n\ntype ToggleRulePayload {\n  clientMutationId: String!\n}\n\ninput ApprovalsUserTypeManagerInput {\n  \"\"\"The fallback user id when the request initiator does not have a manager\"\"\"\n  fallbackUserId: ID!\n}\n\ntype StartDepositsOffboardingPayload {\n  clientMutationId: String!\n  depositsAccount: DepositsAccount!\n}\n\n\"\"\"A cycle reoccurring every N days.\"\"\"\ntype EveryNDaysCardStatementPolicyCycle {\n  \"\"\"The number of days a cycle lasts.\"\"\"\n  numDays: Int\n}\n\ninput CardPaymentForwarderInvoiceInput {\n  invoiceAssetId: String\n  invoiceNumber: String\n}\n\ntype RevokeDeveloperApiTokenPayload {\n  clientMutationId: String!\n  success: Boolean\n}\n\ntype PromotionsCta {\n  \"\"\"An enum of all possible actions\"\"\"\n  action: PromotionsCtaAction\n  \"\"\"CTA button text. Usually will be Learn More\"\"\"\n  text: String\n}\n\nenum RewardsPointsHistoryEntryType {\n  ACCRUAL\n  INVALID\n  REDEMPTION\n}\n\n\"\"\"Filter facet for integration rules (only used for expenses)\"\"\"\ntype MatchingRulesFilterFacet implements Node {\n  \"\"\"Filter facet type\"\"\"\n  facetType: FacetType\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"A list of rule IDs matches this filter facet type\"\"\"\n  ruleIds: [String]\n  \"\"\"A list of rules matches this filter facet type\"\"\"\n  rules: [IntegrationRule]\n}\n\n\"\"\"Payload for Persona information request\"\"\"\ntype OnboardingFormPersona {\n  \"\"\"Name of individual for whom ID is requested\"\"\"\n  individual: String\n  \"\"\"Indicates if individual is the applicant\"\"\"\n  isApplicant: Boolean\n  \"\"\"List of user roles to identify BO/CO etc.\"\"\"\n  roles: [String]\n  \"\"\"Template ID\"\"\"\n  templateId: String\n}\n\nenum RiskTier {\n  \"\"\"High risk: limited feature access, potentially offboard\"\"\"\n  HIGH\n  \"\"\"Low risk: full feature access\"\"\"\n  LOW\n  \"\"\"Med risk: limited feature access\"\"\"\n  MEDIUM\n  \"\"\"Risk evaluation has not yet been performed on this account\"\"\"\n  PENDING\n}\n\ntype OnboardingPageDTerms {\n  _: Boolean\n  content: OnboardingFormEmpty!\n}\n\nenum ReceivablesOffersVendorType {\n  AMAZON_MWS\n  AMAZON_SP\n  INVALID\n  PAYPAL\n  SHOPIFY\n  SQUARE\n  STRIPE\n  WALMART\n}\n\ninput UserCategoryInput {\n  id: ID!\n  isDisabled: Boolean\n}\n\n\"\"\"A contact input to be validated or created (needs at least one payment instrument to be valid)\"\"\"\ninput VendorContactInput {\n  \"\"\"Vendor's ACH Payment Instrument\"\"\"\n  achPaymentInstrument: AchPaymentInstrumentInput\n  \"\"\"Vendor's Cheque Payment Instrument\"\"\"\n  chequePaymentInstrument: ChequePaymentInstrumentInput\n  \"\"\"Vendor's Domestic Wire Payment Instrument\"\"\"\n  domesticWirePaymentInstrument: DomesticWirePaymentInstrumentInput\n  \"\"\"Vendor's email\"\"\"\n  email: String\n  \"\"\"Client generated idempotency key\"\"\"\n  idempotencyKey: String!\n  \"\"\"Vendor's International Wire Payment Instrument\"\"\"\n  internationalWirePaymentInstrument: InternationalWirePaymentInstrumentInput\n  \"\"\"Name of the vendor (needs to be unique)\"\"\"\n  name: String!\n  \"\"\"Vendor's phone number\"\"\"\n  phoneNumber: String\n}\n\ntype DateHistogramAggregationResult {\n  name: String!\n  series: [DateHistogramAggregationField]!\n}\n\ntype OnboardingFormUwBankConnection {\n  _: Boolean\n}\n\ntype ReceivablesOffersAdvanceDetails {\n  resourceId: String\n}\n\nunion MuteValueType = MuteValueDepartment | MuteValueMerchant | MuteValueRaw | MuteValueUser\n\ninput MarkInvoiceInput {\n  clientMutationId: String!\n  idempotencyKey: String!\n  invoiceId: ID!\n  newStatus: InvoiceStatus!\n}\n\ntype ExportEdge {\n  cursor: String\n  node: Export\n}\n\ninput UpdateIntegrationCredentialInput {\n  clientMutationId: String!\n  \"\"\"ID of new credential\"\"\"\n  credentialId: ID!\n  \"\"\"ID of integration whose credential is getting changed\"\"\"\n  integrationId: ID!\n}\n\ntype MerchantIcon implements Node {\n  asset: Asset\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\ntype UnexportedStatementEntryCount {\n  count: Int\n}\n\nenum AcceptCreditMarketingOfferResult {\n  FAILED_CREDIT_HARD_PULL\n  FAILED_UNKNOWN\n  FAILED_USER_IDENTITY_VERIFICATION\n  FROZEN_CREDIT_PROFILE\n  OFFER_EXPIRED\n  SUCCESS\n}\n\ninput SetReceivablesOffersConfirmedPayoutsRoutedToBrexInput {\n  clientMutationId: String!\n  value: Boolean!\n}\n\ntype CreatePaymentEarlyAuthBalanceDecreaseCommitmentPayload {\n  clientMutationId: String!\n  paymentEarlyAuthBalanceDecreaseCommitment: PaymentEarlyAuthBalanceDecreaseCommitment!\n}\n\n\"\"\"The individual result for an industry search\"\"\"\ntype IndustrySearchResultEntry implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The industry for each result\"\"\"\n  industry: Industry!\n}\n\nenum Class {\n  BUSINESS\n  PERSONAL\n}\n\nenum FiNbfiRegistrationStatus {\n  APPLIED_AND_REJECTED\n  APPLIED_AND_WAITING_ON_A_DECISION\n  CURRENTLY_REGISTERED\n  DO_NOT_PLAN_TO_REGISTER\n  INVALID\n  PLAN_TO_REGISTER\n}\n\n\"\"\"The high level object represents an approval request\"\"\"\ntype ApprovalsRequest implements Node {\n  \"\"\"The description entered by the user\"\"\"\n  description: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The time when this request is created\"\"\"\n  insertedAt: Time\n  \"\"\"The request metadata\"\"\"\n  requestMetadata: ApprovalsRequestMetadata!\n  \"\"\"A list of approval steps\"\"\"\n  requiredApprovalSteps: [RequiredApprovalStep]\n  \"\"\"A list of review objects associate with this request. The results are sorted by inserted_at in ascending order\"\"\"\n  reviews(after: String, before: String, first: Int, last: Int): ApprovalsReviewConnection\n  \"\"\"The request status\"\"\"\n  status: ApprovalsRequestStatus!\n  \"\"\"The request type\"\"\"\n  type: ApprovalsRequestType!\n  \"\"\"The user who creates this request\"\"\"\n  user: ApprovalsUser!\n}\n\ntype UpdatePaymentSourcePayload {\n  clientMutationId: String!\n}\n\nenum LoyaltyProgramAlliance {\n  EMIRATES_SKYWARDS\n  ONE_WORLD\n  SKY_TEAM\n  STAR_ALLIANCE\n  TRUEBLUE\n}\n\ntype DepositsAccountConnection {\n  edges: [DepositsAccountEdge]\n  pageInfo: PageInfo!\n}\n\ntype DepositsProcessingAndFuturePaymentDate implements Node {\n  amount: Int\n  estimatedArrivalTime: Time!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  sendAt: Time!\n  sendOn: Date!\n  status: DepositsPaymentStatus!\n}\n\ntype CardOverviewSummaryTileEdge {\n  cursor: String\n  \"\"\"Card Overview Summary Tile Node\"\"\"\n  node: CardOverviewSummaryTile\n}\n\nenum ReportType {\n  D_T\n  R_R\n  SEARCH\n  W_D\n}\n\n\"\"\"A factor that impacts a credit limit\"\"\"\ntype UnderwritingLimitFactor implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"When the value was last updated\"\"\"\n  lastUpdated: Time\n  \"\"\"The type of factor\"\"\"\n  limitFactor: UnderwritingLimitFactorType!\n  \"\"\"The score or value of the factor\"\"\"\n  score: Int!\n}\n\ntype CashTransactionReceivablesOffersCollectionDetails {\n  _: Boolean\n}\n\nenum CardPaymentForwarderPaymentStatus {\n  COMPLETED\n  DRAFT\n  FAILED\n  IN_TRANSIT\n  INVALID\n  PENDING\n  PREFLIGHT_REVIEW\n  REFUNDED\n  REJECTED\n  UNDER_REVIEW\n}\n\ntype UpdateContactPayload {\n  clientMutationId: String!\n  contact: PaymentContact!\n}\n\nenum PremiumSettingEventAction {\n  ACTIVATE\n  CANCEL\n  INVALID\n  UPDATE_PRICING_SCHEME\n}\n\ntype ExpensesRuleEdge {\n  cursor: String\n  node: ExpensesRule\n}\n\nunion PayrollInfo = GustoPayrollInfo\n\ntype CredentialAmazonMwsPayload {\n  sellerId: String\n}\n\ntype LoyaltyProgramEdge {\n  cursor: String\n  node: LoyaltyProgram\n}\n\ntype RefundPaymentPayload {\n  payment: CardPaymentForwarderPaymentObject!\n}\n\ninput CalculateCreditMarketingOfferInput {\n  clientMutationId: String!\n  creditMarketingOfferId: ID!\n  ssnLastFour: String!\n}\n\ntype PushMarketoLeadsPayload {\n  clientMutationId: String!\n  success: Boolean\n}\n\ninput GenerateDepositsStatementDocumentDownloadUrlInput {\n  clientMutationId: String!\n  depositsStatementId: ID!\n}\n\ntype ShippingAddress {\n  \"\"\"Address info, required field\"\"\"\n  address: Address!\n  \"\"\"First name, required field\"\"\"\n  firstName: String!\n  \"\"\"Last name, required field\"\"\"\n  lastName: String!\n}\n\ntype SendMobileChequeDepositNotificationPayload {\n  clientMutationId: String!\n}\n\nenum RewardsMarketplaceUpsell {\n  UPSELL_SHOW_APPLE_REWARDS\n  UPSELL_TO_BREX1\n  UPSELL_TO_CASH\n}\n\ntype CreateAccountPayload {\n  account: Account\n  clientMutationId: String!\n}\n\nunion OnboardingSubmittablePage = OnboardingPageDSuitability | OnboardingPageDTerms | OnboardingPageEmailVerification | OnboardingPageForm | OnboardingPageFundingSource | OnboardingPageMfa | OnboardingPagePeriodicReview | OnboardingPagePersona | OnboardingPageTerms | OnboardingPageUwBankConnection | OnboardingPageUwEcommerceConnection\n\ntype CancelReimbursementPayload {\n  clientMutationId: String!\n  reimbursementItem: ReimbursementItem!\n}\n\n\"\"\"Connection Node Type Notification Tile\"\"\"\ntype NotificationTileConnection {\n  edges: [NotificationTileEdge]\n  pageInfo: PageInfo!\n}\n\ntype CreateHrisConnectionPayload {\n  clientMutationId: String!\n  \"\"\"The hris connection resource we established with the hris vendor\"\"\"\n  hrisConnection: HrisConnection!\n}\n\ntype GroupAggregationResult {\n  name: String!\n  values: [GroupAggregationField]\n}\n\ninput SubmitReimbursementInput {\n  clientMutationId: String!\n  reimbursementItemId: ID\n  updatedReimbursementMetadata: ReimbursementMetadataInput\n}\n\n\"\"\"Insights query namespace\"\"\"\ntype Insights {\n  \"\"\"Query for available balance snapshots\"\"\"\n  availableBalanceSnapshots(depositsAccountId: String, timestamps: [Time!]): [InsightsAvailableBalanceSnapshot!]!\n  \"\"\"Query for cash insight transaction aggregates time series data\"\"\"\n  cashFlowAggregateTimeSeries(depositsAccountId: String, endAt: Time, startAt: Time!, timeBucket: InsightsTimeUnit!, timeBucketStrategy: TimeBucketStrategy): [InsightsAggregateTransaction!]!\n  \"\"\"Fetch runway insight\"\"\"\n  runwayInsight(projectionEndsAt: Date!, projectionStartsAt: Date, timeBucket: InsightsTimeUnit!, timeBucketStrategy: TimeBucketStrategy!): InsightsRunwayInsight!\n}\n\nenum SyncReadyStatus {\n  HAS_CONFLICT\n  INVALID_FIELDS\n  INVALID_REIMBURSEMENT_ACCOUNT\n  PAYLOAD_INVALID\n  READY_TO_SYNC\n}\n\nunion SetupInstructions = ExpensifySetupInstructions\n\ntype BrexOriginatedChequeDetails {\n  chequeMemo: String\n  chequeNumber: Int!\n  counterparty: Counterparty!\n  expectedDeliveryDate: Date\n  initiatorCustomerUser: User\n  recipientName: String\n  returnReason: ReturnReason\n  sentAt: Time\n  type: TxType\n}\n\ntype UpdateBillPayload {\n  bill: Bill\n  clientMutationId: String!\n}\n\ntype InvoiceStatusLog {\n  \"\"\"inserted_at timestamp\"\"\"\n  insertedAt: Time!\n  \"\"\"Note about this change log.\"\"\"\n  note: String\n  \"\"\"Invoice status.\"\"\"\n  status: InvoiceStatus!\n  \"\"\"Updated by\"\"\"\n  updatedBy: String!\n}\n\nenum BatchCadence {\n  DAILY\n  MONTHLY\n  SINGLE_ENTRY\n  WEEKLY\n}\n\ntype DisableNonPrimaryFundingSourcesPayload {\n  clientMutationId: String!\n}\n\nenum OnboardingUnderwritingBankConnectionRequestReason {\n  BANK_CONNECTION_ISSUE\n  BANK_STATEMENT_ISSUE\n  INSUFFICIENT_FUNDS\n}\n\ninput InputCashTransactionUpdateArgumentUnion {\n  achDebit: InputCashTransactionAchDebitArguments\n  credit: InputCashTransactionCreditArguments\n}\n\ntype RewardsBonusEdge {\n  cursor: String\n  node: RewardsBonus\n}\n\ntype InsufficientFundsTile implements Node {\n  \"\"\"Statement due date in UTC time.\"\"\"\n  dueDate: Time!\n  \"\"\"default funding source data\"\"\"\n  fundingSourceData: FundingSourceData\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"if default funding source is using brex cash\"\"\"\n  isBrexCash: Boolean!\n}\n\ntype UserCategoryConnection {\n  edges: [UserCategoryEdge]\n  pageInfo: PageInfo!\n}\n\nenum SpendAggregateTimeSeriesSortOrder {\n  ASC\n  DESC\n  INVALID\n}\n\ninput WithdrawFundsInput {\n  clientMutationId: String!\n  depositsAccountId: ID!\n  financialsAccountId: ID!\n  idempotencyKey: String!\n}\n\n\"\"\"Initiated by a Brex customer\"\"\"\ntype CustomerInitiated {\n  \"\"\"The customer user\"\"\"\n  user: User\n}\n\nenum UnderwritingAnalysisFlagName {\n  LOW_FIDELITY\n}\n\ninput SetReceivablesOffersSelectedTrialOnboardingInput {\n  clientMutationId: String!\n  value: Boolean!\n}\n\ntype PaymentApprovalResponse {\n  paymentApproval: PaymentApproval!\n  paymentApprovalPaymentContext: PaymentApprovalPaymentContext\n}\n\ninput EnableUserInput {\n  clientMutationId: String!\n  userId: ID!\n}\n\ntype CreatePhysicalCardV2Payload {\n  card: Card\n  clientMutationId: String!\n}\n\ninput ProvisionApplePayInput {\n  cardId: ID!\n  certificates: [String]\n  clientMutationId: String!\n  nonce: String!\n  nonceSignature: String!\n}\n\ntype PositivePayAccountSettingEdge {\n  cursor: String\n  node: PositivePayAccountSetting\n}\n\ntype ToggleRuleForStatementEntryPayload {\n  clientMutationId: String!\n  statementEntry: StatementEntry\n}\n\n\"\"\"\nCollected from a Deposits Locked Transaction.\n  If linked to a Payout, we include additional metadata (id, vendor)\n  If the collection was due to non-peformance, we most likely collected for Offers not linked to the matched Payout.\n\"\"\"\ntype ReceivablesOffersPaymentIntentSourceDepositsLockedTransaction {\n  depositsTransactionId: String!\n  isNonPerformanceCollection: Boolean!\n  matchedPayoutId: ID\n  matchedPayoutVendor: ReceivablesOffersVendorType\n}\n\ninput CreateBillInput {\n  attachmentAssetId: ID\n  chequeMemo: String\n  clientMutationId: String!\n  contactId: ID\n  counterpartyId: String\n  depositsAccountId: ID\n  description: String\n  dueAmountCents: Int\n  dueAt: Time\n  endsAt: Time\n  externalInvoiceNumber: String\n  idempotencyKey: String!\n  merchantCategoryId: ID\n  monthlySchedule: MonthlySchedule\n  notifyRecipient: Boolean\n  paymentInstrumentId: ID\n  paymentSendAt: Time\n  totalNumberOfPayments: Int\n  transferDescription: String\n  userErpCategoryId: ID\n  weeklySchedule: WeeklySchedule\n}\n\ntype CreateTransactionRefusedSubscriptionPayload {\n  clientMutationId: String!\n  notificationSubscription: NotificationSubscription\n}\n\nenum BillInvoiceProcessingStatus {\n  AWAITING\n  DONE\n  INELIGIBLE\n}\n\ntype ResyncReimbursementItemsPayload {\n  clientMutationId: String!\n}\n\n\"\"\"Information about dev access agreement\"\"\"\ntype DevAccessAgreement {\n  \"\"\"Time agreement was signed at\"\"\"\n  signedAt: Time\n}\n\ntype RewardsRedemptionProgramEdge {\n  cursor: String\n  node: RewardsRedemptionProgram\n}\n\nenum EmployeeCountRange {\n  RANGE_101_TO_500\n  RANGE_1_TO_4\n  RANGE_21_TO_100\n  RANGE_21_TO_50\n  RANGE_501_TO_2500\n  RANGE_51_TO_100\n  RANGE_5_TO_20\n  RANGE_LESS_THAN_20\n  RANGE_MORE_THAN_2501\n}\n\nenum AccountIncorporationTypeInput {\n  CORPORATION\n  LLC\n  OTHER\n  PARTNERSHIP\n  SOLE_PROPRIETORSHIP\n}\n\nenum ActivateUserAuthType {\n  DB_SESSION\n  JWT\n}\n\ntype FinancialAccountEdge {\n  cursor: String\n  node: FinancialAccount\n}\n\n\"\"\"An augmented billing payment intent with the amount of the intent allocated to the parent model and additional metadata\"\"\"\ntype ReceivablesOffersPaymentIntent {\n  \"\"\"Of the collected amount, how much is allocated to the parent model\"\"\"\n  allocatedCollectedAmount: FinancialAsset!\n  \"\"\"Time the payment settled\"\"\"\n  collectedAt: Time!\n  \"\"\"Unique ID\"\"\"\n  id: String!\n  \"\"\"True if the Payment is paying off a Card liability, otherwise its paying a Cash Advance one.\"\"\"\n  isForCard: Boolean!\n  source: ReceivablesOffersPaymentIntentSource!\n  \"\"\"Total amount collected as part of the payment\"\"\"\n  totalCollectedAmount: FinancialAsset!\n}\n\n\"\"\"\nReturns timeline estimates, keyed by the different payment_rails.\nSupported payment rails include: `ach`, `internationalWire`, `domesticWire`, `cheque`\nIf an estimate for a given payment rail is not supported, the value is null.\n\"\"\"\ntype PaymentRailTimeline {\n  \"\"\"\n  The transaction timeline for ACH\n  null if origin = `EXTERNAL`\n  \"\"\"\n  ach: CashTransactionTimeline\n  \"\"\"\n  The transaction timeline for cheque\n  null if payment_method = `DEBIT`\n  \"\"\"\n  cheque: CashTransactionTimeline\n  \"\"\"\n  The transaction timeline for domestic wire\n  non-null only for origin = `BREX` and payment_method = `CREDIT`\n  \"\"\"\n  domesticWire: CashTransactionTimeline\n  \"\"\"\n  The transaction timeline for international wire\n  non-null only for origin = `BREX` and payment_method = `CREDIT`\n  \"\"\"\n  internationalWire: CashTransactionTimeline\n}\n\ntype NetsuiteClass {\n  isInactive: Boolean\n  name: String\n}\n\ntype RewardsPointReward {\n  amount: Int!\n}\n\ntype FspClientAccount {\n  contact: String\n  customerAccountId: String!\n  name: String\n}\n\ntype ReceiptConnection {\n  edges: [ReceiptEdge]\n  pageInfo: PageInfo!\n}\n\n\"\"\"The high level object represents a manager routing rule\"\"\"\ntype ApprovalsRoutingRuleManager implements Node {\n  \"\"\"A list of fallback user ids when the request initiator does not have a manager\"\"\"\n  fallbackApproverUserIds: [String!]!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\ntype InternalEntitySyncErrorConnection {\n  edges: [InternalEntitySyncErrorEdge]\n  pageInfo: PageInfo!\n}\n\nenum BankAggregatorDecision {\n  FINICITY_ONLY\n  LAUNCH_DARKLY\n  PLAID_FIRST\n}\n\ninput DeleteSubscriptionInput {\n  clientMutationId: String!\n  id: ID!\n}\n\n\"\"\"The transaction consumer related settings\"\"\"\ntype DepositsTransactionConsumerSettings {\n  \"\"\"The recipient notification setting to indicate at what stages we want to send out notifications\"\"\"\n  recipientNotificationSetting: NotificationSetting\n}\n\ntype ApprovalsReviewAssigneeConnection {\n  edges: [ApprovalsReviewAssigneeEdge]\n  pageInfo: PageInfo!\n}\n\ntype IntegrationRuleConnection {\n  edges: [IntegrationRuleEdge]\n  pageInfo: PageInfo!\n}\n\nenum UnderwritingModelName {\n  CASH_BASED\n  INDIVIDUAL_CREDIT_BASED\n  INVALID\n  MANUAL\n  NONE\n  ONBOARDING\n  REGULAR_FINANCIALS_BASED_MID_MARKET\n  REVENUE_BASED\n}\n\nunion ApprovalsRoutingRule = ApprovalsRoutingRuleIndividuals | ApprovalsRoutingRuleIndividualsV2 | ApprovalsRoutingRuleManager\n\n\"\"\"List of failing checks associated with a seller account\"\"\"\ntype ReceivablesOffersAccountFailingChecks {\n  \"\"\"List of checks that are failing and are required for full access (`active` status)\"\"\"\n  fullAccess: [ReceivablesOffersCustomerCheckName!]\n  \"\"\"List of ongoing monitoring checks that are failing and might be the reason behind a zero offer\"\"\"\n  ongoing: [ReceivablesOffersCustomerCheckName!]\n  \"\"\"List of checks that are failing and are required for trial access (`active_trial` status)\"\"\"\n  trialAccess: [ReceivablesOffersCustomerCheckName!]\n}\n\nunion CashTransactionCounterpartyDetails = CashTransactionFinancialAccount | CashTransactionPayee\n\nenum SoftSignupAuthType {\n  DB_SESSION\n  JWT\n}\n\ntype TransactionEdge {\n  cursor: String\n  node: Transaction\n}\n\ninput RevokeDeveloperApiTokenInput {\n  clientMutationId: String!\n  id: String!\n}\n\n\"\"\"\nOnly one of these fields will be set, either iban or accountNumber\n\nFor international wires, some countries use an IBAN so we'll set the iban field.\nFor countries that explicitly don't, we'll set the accountNumber as a fallback.\n\"\"\"\ntype CashTransactionInternationalWireAccountIdentifier {\n  type: CashTransactionInternationalWireAccountIdentifierType\n  value: String\n}\n\ntype TransactionOperationConnection {\n  edges: [TransactionOperationEdge]\n  pageInfo: PageInfo!\n}\n\ninput SetReceivablesOffersAccountOnboardingActionInput {\n  action: ReceivablesOffersAccountOnboardingAction!\n  clientMutationId: String!\n}\n\nenum OnboardingInformationRequestDescription {\n  UNDERWRITING_CARD_ECOMMERCE_CONNECTION\n  PHOTO_ID_VERIFICATION_CONFIRMATION\n  PROOF_OF_EIN_DOCUMENT_UPLOAD\n  PROOF_OF_SSN_UPLOAD\n  EIN_OCR\n  BUSINESS_ADDRESS\n  EIN_OCR_VERIFICATION\n  MFA\n  TERMS\n  MFA_NEW\n  FUNDING_SOURCE_SELECTION\n  PHOTO_ID_UPLOAD\n  INDIVIDUAL_CONTACT_DETAILS\n  ISSUE_CARD\n  PERSONA_ID_VERIFICATION\n  UNDERWRITING_CARD_LINK_ACCOUNTS\n  OTHER\n  BUSINESS_DETAILS_V2\n  INDIVIDUAL_ADDRESS\n  FORM_990_DOCUMENT_UPLOAD\n  PERIODIC_REVIEW\n  BUSINESS_LEADERSHIP_V2\n  PRODUCT_SUITABILITY\n  CORPORATE_AUTHORIZATION_DOCUMENT_UPLOAD\n  CERTIFICATE_OF_GOOD_STANDING_UPLOAD\n  EDD_ATTESTATION_FI_NBFI\n  W9_ATTESTATION\n  UNDERWRITING_CARD_BANK_CONNECTION\n  BUSINESS_OWNERSHIP\n  BUSINESS_LEADERSHIP_V3\n  EMAIL_VERIFICATION\n  BUSINESS_LEADERSHIP\n  BUSINESS_ATTRIBUTES_CONFIRMATION\n  EDD_ATTESTATION_CASH_INTENSIVE\n  BUSINESS_DETAILS\n  UNDERWRITING_CASH_BANK_CONNECTION\n  INDIVIDUAL_ADDITIONAL_DETAILS\n}\n\nenum ReferralRecordStatus {\n  APPLICATION_APPROVED\n  COMPLETED\n  INVALID\n  INVITE_SENT\n  PENDING_INVITE\n  SIGNED_UP\n}\n\nenum DepositsWithdrawFundsIssue {\n  CANNOT_VERIFY_BALANCES\n  INVALID\n  MULTIPLE_DEPOSITS_ACCOUNTS\n  NEGATIVE_BALANCE\n  NO_AVAILABLE_BALANCE\n  NONZERO_CARD_BALANCE\n  NONZERO_MMF_BALANCE\n  PROCESSING_TRANSACTIONS\n  RECENT_ACH_DEBITS\n  RECENT_CHEQUE_DEPOSITS\n  WAITING_FOR_HOLD_TO_CLEAR\n  WRONG_DEPOSITS_ACCOUNT_STATUS\n}\n\ntype CardStatementEdge {\n  cursor: String\n  node: CardStatement\n}\n\ninput UpdatePaymentSourceInput {\n  clientMutationId: String!\n  fundingSourceId: ID!\n}\n\nunion FinancialsSourceResult = FinancialSource\n\n\"\"\"Represents the payload of a Selected Trigger of type Top Category Multiplier.\"\"\"\ntype RewardsTriggerTopCategoryMultiplier {\n  \"\"\"The multiplier to be applied to the top category\"\"\"\n  accrualRate: Float!\n}\n\ntype SpendAggregateEdge {\n  cursor: String\n  node: SpendAggregate\n}\n\ntype ExpensesItemEvent implements Node {\n  action: ExpensesItemEventAction\n  customerUserRole: String\n  description: String\n  expensesItem: ExpensesItem\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  insertedAt: Time\n  user: User\n}\n\n\"\"\"The high level object represents an approval policy\"\"\"\ntype ApprovalsPolicy implements Node {\n  \"\"\"The approvals policy details\"\"\"\n  details: ApprovalsPolicyDetails!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The product type of this approvals policy\"\"\"\n  productType: ProductType\n}\n\n\"\"\"Calculated integration fields via integration rules engine\"\"\"\ntype StatementEntryIntegrationFields {\n  \"\"\"External billable status\"\"\"\n  billableStatus: BillableStatus\n  \"\"\"QBO class\"\"\"\n  class: ExternalIntegrationEntity\n  \"\"\"QBO customer\"\"\"\n  customer: ExternalIntegrationEntity\n  \"\"\"Netsuite department\"\"\"\n  department: ExternalIntegrationEntity\n  \"\"\"Netsuite / QBO location\"\"\"\n  location: ExternalIntegrationEntity\n  \"\"\"Xero tracking category\"\"\"\n  trackingCategory1: ExternalIntegrationEntity\n  \"\"\"Xero tracking category\"\"\"\n  trackingCategory2: ExternalIntegrationEntity\n  \"\"\"External GL account\"\"\"\n  userCategory: UserCategory\n  \"\"\"Netsuite vendor\"\"\"\n  vendor: ExternalIntegrationEntity\n}\n\nenum InvestmentSource {\n  CROWDSOURCED\n  FAMILY\n  GRANTS\n  INITIAL_COIN_OFFERING\n  PROFESSIONAL_INVESTOR\n  SELF_FUNDED\n  VC\n}\n\ntype CreateDocumentOcrPayload {\n  clientMutationId: String!\n  \"\"\"the ID of document OCR process. This can be used to query for the OCR result.\"\"\"\n  documentOcrId: ID!\n}\n\ntype StatementEntryLensConnection {\n  edges: [StatementEntryLensEdge]\n  pageInfo: PageInfo!\n}\n\ntype ValidateActivation {\n  active: Boolean!\n}\n\ntype PerMerchantStatsEdge {\n  cursor: String\n  node: PerMerchantStats\n}\n\ninput GenerateCardStatementDocumentDownloadUrlInput {\n  cardStatementId: ID\n  clientMutationId: String!\n}\n\ntype CashTransactionCardCollectionDetails {\n  collectionAttempt: CollectionAttempt!\n  collectionId: String!\n}\n\ntype FinancialInformationRequestConnection {\n  edges: [FinancialInformationRequestEdge]\n  pageInfo: PageInfo!\n}\n\nenum DepositsAccountClosureReason {\n  BUSINESS_IS_CLOSING\n  DEPOSITS_TOO_SLOW\n  FOUND_ANOTHER_BANK\n  INVALID\n  LIMITED_SAME_DAY_BALANCE\n  MISSING_FUNCTIONALITY\n  NOT_ENOUGH_PRODUCTS\n  OTHER\n  WANTED_30_DAY_CARD\n  WITHDRAWALS_TOO_SLOW\n}\n\ntype CreateCashTransactionPayload {\n  clientMutationId: String!\n  transaction: CashTransaction!\n}\n\ntype BrexOperationalTransferDetails {\n  _: Boolean\n}\n\ntype CashTransactionBookTransferDetails {\n  \"\"\"The sender account\"\"\"\n  sourceDepositsAccount: DepositsAccount\n  \"\"\"The recipient account\"\"\"\n  targetDepositsAccount: DepositsAccount\n}\n\ntype EnableUserPayload {\n  clientMutationId: String!\n  user: User\n}\n\ninput BulkFindOrCreateErpFeedsInput {\n  clientMutationId: String!\n  erpFeedRequests: [ErpFeedInput]\n}\n\ntype RfiResponseItem {\n  \"\"\"Token for filestore, referencing the uploaded file\"\"\"\n  documentToken: String\n  status: RfiResponseStatus!\n  \"\"\"Details on the current status, e.g. reasons for rejecting a response, filled by ops\"\"\"\n  statusMessage: String\n}\n\ntype JournalEntry implements Node {\n  \"\"\"The balance-affecting amount, in USD cents\"\"\"\n  amountUsdCents: Int\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  originator: JournalEntryOriginator\n  originatorType: JournalOriginatorType\n}\n\ntype CashTransactionInternationalWireDetails {\n  \"\"\"The associated account number, which could be in the form of an IBAN or other (defaulting to account_number)\"\"\"\n  accountIdentifier: CashTransactionInternationalWireAccountIdentifier\n  \"\"\"The address of the recipient\"\"\"\n  address: Address\n  \"\"\"The counterparty's beneficiary bank information\"\"\"\n  beneficiaryBank: CashTransactionBeneficiaryBank\n  \"\"\"The 2-character country code the wire was sent to or came from (e.g. \"MX\" for Mexico)\"\"\"\n  countryCodeAlpha2: String\n  \"\"\"\n  Country name this wire was sent to or came from (e.g. \"Mexico\")\n  If we don't have the full country name, we'll fall back to the country_code_alpha2\n  \"\"\"\n  countryName: String\n  \"\"\"The email of the recipient\"\"\"\n  email: String\n  \"\"\"The MT103 is a standardised SWIFT payment message used as proof of payment for cross border/international wire transfers\"\"\"\n  mt103: String\n  \"\"\"Whether the transaction was a debit or credit\"\"\"\n  paymentMethod: CashTransactionPaymentMethod!\n  \"\"\"Counterparty's SWIFT code\"\"\"\n  swiftCode: String\n  \"\"\"A bank-specific tracking number\"\"\"\n  trackingNumber: String\n  \"\"\"Payment instructions\"\"\"\n  transferDescription: String\n}\n\ntype GlobalLimitRuleMetadata {\n  amount: Int\n}\n\ntype CreateApprovalsPolicyPayload {\n  approvalsPolicy: ApprovalsPolicy\n  clientMutationId: String!\n}\n\n\"\"\"An account which we require statement update from the customer\"\"\"\ntype FinancialStatementRequestedAccount implements Node {\n  \"\"\"The last digits of the bank account number for display\"\"\"\n  accountNumberLastFour: String\n  bankAccountNumber: String\n  \"\"\"Bank/Financial institution & account number associated with the statement account\"\"\"\n  bankName: String\n  \"\"\"Due date for a statement update, typically end of month\"\"\"\n  dueDate: Time!\n  financialAccountId: String!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The month of the requested statement\"\"\"\n  requestedMonth: Int!\n}\n\ntype UpdateCardPinPayload {\n  card: Card!\n  clientMutationId: String!\n}\n\ntype SetDepositsTransactionPaymentMemoPayload {\n  clientMutationId: String!\n  transaction: DepositsTransaction!\n}\n\ninput StartResetUserUserInput {\n  email: String!\n}\n\ntype DismissPromotionPayload {\n  clientMutationId: String!\n}\n\ntype SendBillPaymentPayload {\n  bill: Bill\n  clientMutationId: String!\n}\n\ninput CreateCounterpartyInput {\n  accountNumber: String\n  \"\"\"address is required for wire counterparties, enforced by backend service\"\"\"\n  address: FlexibleAddressInput\n  approverId: ID!\n  beneficiaryBankAddress: FlexibleAddressInput\n  beneficiaryBankInfo: Json\n  \"\"\"International wire counterparty information\"\"\"\n  beneficiaryBankName: String\n  chequeRecipientName: String\n  class: Class\n  clientMutationId: String!\n  depositsAccountId: ID!\n  email: String\n  location: AccountLocation!\n  name: String!\n  paymentRail: PaymentRail!\n  previousCounterpartyId: ID\n  routingNumber: String\n  \"\"\"type and class are required for ach counterparties, enforce by backend service\"\"\"\n  type: Type\n}\n\ntype CancelCashRecurringSchedulePayload {\n  \"\"\"List of cancelled transactions\"\"\"\n  cancelledTransactions: [CashTransaction!]!\n  clientMutationId: String!\n}\n\ninput ResyncBillsInput {\n  billIds: [ID]!\n  clientMutationId: String!\n  integrationId: ID!\n  \"\"\"Will fetch a new sync token from QBO before attempting bills data sync. This overwrites any data on the QBO side with Brex data\"\"\"\n  overwrite: Boolean\n}\n\ntype CardTransactionInsightMutingPolicyConnection {\n  edges: [CardTransactionInsightMutingPolicyEdge]\n  pageInfo: PageInfo!\n}\n\ntype CardTransactionInsightMutingPolicyEdge {\n  cursor: String\n  node: CardTransactionInsightMutingPolicy\n}\n\ntype CreateDeveloperApiTokenPayload {\n  clientMutationId: String!\n  token: DeveloperApiToken\n}\n\ntype MilesTransferEdge {\n  cursor: String\n  node: MilesTransfer\n}\n\ninput CreateFinancialBankStatementInput {\n  assetId: ID!\n  clientMutationId: String!\n  financialAccountId: ID!\n}\n\ntype SubmitFinancialInformationRequestPayload {\n  clientMutationId: String!\n  informationRequest: FinancialInformationRequest\n}\n\ntype CashTransactionApprovalResponse {\n  cashTransactionApproval: CashTransactionApproval\n  \"\"\"Contextual information about transaction associated with the approval\"\"\"\n  cashTransactionApprovalContext: CashTransactionApprovalContext\n}\n\ntype DepositsWeeklySchedule {\n  dayOfWeek: BusinessDays!\n  nWeeks: Int!\n}\n\nscalar PhoneNumber\n\nscalar Json\n\ninput BeginChannelVerificationInput {\n  clientMutationId: String!\n  id: ID!\n}\n\nenum CashTransactionAchReturnReason {\n  MANDATORY_FIELD_ERROR\n  RETURN_OF_IMPROPER_CREDIT_ENTRY\n  FILE_RECORD_EDIT_CRITERIA\n  CUSTOMER_ADVISES_UNAUTHORIZED\n  CHECK_TRUNCATION_ENTRY_RETURN\n  INCORRECTLY_CODED_OUTBOUND_INTERNATIONAL_PAYMENT\n  IMPROPER_SOURCE_DOCUMENT\n  RETURN_OF_XCK_ENTRY\n  ENTRY_NOT_PROCESSED_BY_GATEWAY\n  RETURN_PER_ODFI_REQUEST\n  FOREIGN_RECEIVING_DFI_UNABLE_TO_SETTLE\n  NON_PARTICIPANT_IN_IAT_PROGRAM\n  DUPLICATE_ENROLLMENT\n  ADDENDA_ERROR\n  INVALID_REPRESENTATIVE_PAYEE_INDICATOR\n  NO_ERRORS_FOUND\n  LIMITED_PARTICIPATION_DFI\n  RETURN_NOT_REQUESTED_BY_ODFI\n  ITEM_AND_RCK_ENTRY_PRESENTED_FOR_PAYMENT\n  RETURN_NOT_A_DUPLICATE\n  MISROUTED_DISHONORED_RETURN\n  INVALID_ACCOUNT_NUMBER_STRUCTURE\n  AUTHORIZATION_REVOKED_BY_CUSTOMER\n  ACCOUNT_FROZEN\n  IMPROPER_EFFECTIVE_ENTRY_DATE\n  FIELD_ERRORS\n  UNTIMELY_DISHONORED_RETURN\n  TIMELY_ORIGINAL_RETURN\n  RETURN_OF_ENR_ENTRY_BY_FEDERAL_GOVERNMENT_AGENCY\n  INVALID_COMPANY_IDENTIFICATION\n  INVALID_DFI_ACCOUNT_NUMBER\n  BENEFICIARY_DECEASED\n  PAYMENT_STOPPED\n  ACCOUNT_SOLD_TO_ANOTHER_DFI\n  IAT_ENTRY_CODING_ERROR\n  UNAUTHORIZED_DEBIT_TO_CONSUMER_ACCOUNT_USING_CORPORATE_SEC_CODE\n  MISROUTED_RETURN\n  INSUFFICIENT_FUNDS\n  CORPORATE_CUSTOMER_ADVISES_NOT_AUTHORIZED\n  PERMISSIBLE_RETURN_ENTRY_NOT_ACCEPTED\n  INVALID_COMPANY_NAME\n  ROUTING_NUMBER_ERROR\n  RETURN_OF_IMPROPER_DEBIT_ENTRY\n  CORRECTED_RETURN\n  INVALID_INDIVIDUAL_ID_NUMBER_2\n  UNTIMELY_RETURN\n  INVALID_INDIVIDUAL_ID_NUMBER\n  TRACE_NUMBER_ERROR\n  ACCOUNT_NOT_FOUND\n  STOP_PAYMENT_ON_ITEM_RELATED_TO_RCK_ENTRY\n  NON_TRANSACTION_ACCOUNT\n  CREDIT_ENTRY_REFUSED_BY_RECEIVER\n  MANUALLY_CANCELLED\n  ROUTING_NUMBER_CHECK_DIGIT_ERROR\n  CUSTOMER_ADVISES_IMPROPER\n  UNKNOWN\n  INVALID_TRANSACTION_CODE\n  REPRESENTATIVE_PAYEE_DECEASED\n  STATE_LAW_AFFECTING_RCK_ACCEPTANCE\n  PERMISSIBLE_RETURN_ENTRY\n  ITEM_RELATED_TO_RCK_ENTRY_IS_IMPROPER\n  STOP_PAYMENT_ON_SOURCE_DOCUMENT\n  DUPLICATE_RETURN\n  SOURCE_DOCUMENT_PRESENTED_FOR_PAYMENT\n  INVALID_ACH_ROUTING_NUMBER\n  UNCOLLECTED_FUNDS\n  RDFI_NON_SETTLEMENT\n  INVALID\n  ACCOUNT_CLOSED\n  DUPLICATE_ENTRY\n  RDFI_NOT_PARTICIPANT_IN_CHECK_TRUNCATION_PROGRAM\n  INVALID_INDIVIDUAL_NAME\n  INVALID_FOREIGN_RECEIVING_DFI_IDENTIFICATION\n  AMOUNT_FIELD_ERROR\n}\n\ntype DisputeTransactionConnection {\n  edges: [DisputeTransactionEdge]\n  pageInfo: PageInfo!\n}\n\ntype SpendAggregate {\n  amount: Int!\n  card: Card\n  department: Department\n  merchant: Merchant\n  merchantCategory: MerchantCategory\n  previousPeriodAmount: Int!\n  time: Time\n  user: User\n  userCategory: UserCategory\n}\n\nenum CardTransactionsInsightType {\n  CARD_TRANSACTION_INSIGHT_ALL\n  CARD_TRANSACTION_INSIGHT_EMPTY\n  CARD_TRANSACTION_INSIGHT_EXPENSIVE_TRANSACTION\n  CARD_TRANSACTION_INSIGHT_HIGH_SPEND_PER_DIEM_RESTAURANTS\n  CARD_TRANSACTION_INSIGHT_HIGH_SPEND_PER_DIEM_RIDESHARE\n  CARD_TRANSACTION_INSIGHT_NEW_VENDOR_SAAS\n  CARD_TRANSACTION_INSIGHT_RECURRING\n  CARD_TRANSACTION_INSIGHT_RECURRING_DUPLICATE\n  CARD_TRANSACTION_INSIGHT_SPEND_INCREASE_DEPARTMENT\n  CARD_TRANSACTION_INSIGHT_SPEND_INCREASE_MERCHANT\n  CARD_TRANSACTION_INSIGHT_SPEND_INCREASE_MERCHANT_CATEGORY\n  CARD_TRANSACTION_INSIGHT_SPEND_INCREASE_RECURRING\n  CARD_TRANSACTION_INSIGHT_SPEND_INCREASE_USER\n}\n\ntype CardPaymentForwarderDocument {\n  assetId: String\n  documentExternalId: String\n  requestId: String\n  status: CardPaymentForwarderDocumentStatus\n  type: CardPaymentForwarderDocumentType\n}\n\ninput InvoiceLineItemInput {\n  \"\"\"Description item. e.g. product / service.\"\"\"\n  description: String!\n  \"\"\"Quantity of the description item.\"\"\"\n  quantity: Int!\n  \"\"\"Subtotal of the line item.\"\"\"\n  subtotal: FinancialAssetInput\n  \"\"\"Total Amount of the line item\"\"\"\n  totalAmount: FinancialAssetInput\n  \"\"\"Unit price of the description item.\"\"\"\n  unitPrice: FinancialAssetInput!\n}\n\ntype QuickbooksCategories {\n  accountsPayableUserCategory: UserCategory\n  collectionTargetUserCategory: UserCategory\n  rewardsIncomeUserCategory: UserCategory\n  vendorName: String\n}\n\ntype NetsuiteLocation {\n  isInactive: Boolean\n  name: String\n}\n\ntype UpdateAccountAddressPayload {\n  account: Account!\n  clientMutationId: String!\n}\n\ninput CreateAutoAddFundsInput {\n  amount: Int!\n  clientMutationId: String!\n  depositsAccountId: ID\n  endsAt: Time\n  financialAccountId: ID!\n  idempotencyKey: String!\n  monthlySchedule: MonthlySchedule\n  paymentClass: PaymentClass!\n  sendAt: Time\n  totalNumberOfPayments: Int\n  weeklySchedule: WeeklySchedule\n}\n\ntype ServicingPolicy implements Node {\n  closingStrategy: ClosingStrategy\n  collectedNumDaysAfterClose: Int\n  delinquentNumDaysAfterClose: Int\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\n\"\"\"Connection Node Type Education Tile\"\"\"\ntype EducationTileConnection {\n  edges: [EducationTileEdge]\n  pageInfo: PageInfo!\n}\n\ninput TurnOffSeenFlagInput {\n  clientMutationId: String!\n  \"\"\"Target flag by key\"\"\"\n  key: SeenFlagKey!\n}\n\ntype RewardsTriggerInstanceStateEmpty {\n  _: Boolean\n}\n\n\"\"\"The instant payout offer object. This can be either a generated or accepted offer\"\"\"\ntype ReceivablesOffersOffer implements Node {\n  \"\"\"The advance amount that the customer accepted\"\"\"\n  advanceAmount: FinancialAsset\n  \"\"\"The customer's account id\"\"\"\n  customerAccountId: String!\n  \"\"\"The details associated with this offer\"\"\"\n  details: ReceivablesOffersOfferDetails\n  \"\"\"Timestamp of when the offer expires\"\"\"\n  expiresAt: Time\n  \"\"\"The fee amount that the customer was charged on this offer\"\"\"\n  feeAmount: FinancialAsset\n  \"\"\"The fee percentage applied on the offer\"\"\"\n  feePercentage: Float\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The non-performance reason (enum) if the offer is non-performant\"\"\"\n  nonPerformanceReason: ReceivablesOffersOfferNonPerformanceReason\n  \"\"\"The offer amount that the customer can accept\"\"\"\n  offerAmount: FinancialAsset\n  \"\"\"Timestamp of the original date we expected to collect the offer\"\"\"\n  originalDueDate: Time\n  \"\"\"The payout object associated with this offer\"\"\"\n  payout: ReceivablesOffersPayout\n  \"\"\"Timestamp when the offer was fully repaid\"\"\"\n  repaidAt: Time\n  \"\"\"The current status of the offer (enum)\"\"\"\n  status: ReceivablesOffersOfferStatus!\n  \"\"\"The total exposure cap that was used during offer generation\"\"\"\n  totalExposureCap: FinancialAsset\n  \"\"\"The vendor (sales platform, i.e., Amazon, Shopify, etc.) object\"\"\"\n  vendor: ReceivablesOffersVendor\n}\n\ntype FundingSourceConnection {\n  edges: [FundingSourceEdge]\n  pageInfo: PageInfo!\n}\n\n\"\"\"The account funding source for the payroll provider\"\"\"\ntype PayrollProviderFundingSource {\n  \"\"\"\n  The account id of the funding source\n  Note: If account_id is missing, we haven't keept track of which account is funding payroll\n  \"\"\"\n  accountId: String\n  \"\"\"The type of funding source\"\"\"\n  accountType: PayrollProviderFundingSourceAccountType!\n}\n\ntype RewardsAccrualEntryConnection {\n  edges: [RewardsAccrualEntryEdge]\n  pageInfo: PageInfo!\n}\n\nenum RewardsHistoryEntryOrderField {\n  AMOUNT\n  INSERTED_AT\n  INVALID\n}\n\ninput PullDataAsyncInput {\n  clientMutationId: String!\n  financialSourceId: ID!\n}\n\ninput ResyncReimbursementItemsInput {\n  clientMutationId: String!\n  idempotencyKey: String!\n  integrationId: ID!\n  reimbursementItemIds: [ID]!\n}\n\ntype InternationalWireConfig {\n  countryConfigs: [InternationalWireCountryConfig!]!\n  deprecatedInputFields: [InternationalWireInputField!]!\n  highRiskInputFields: [InternationalWireInputField!]!\n}\n\nenum CashTransactionInternationalWireAccountIdentifierType {\n  ACCOUNT_NUMBER\n  IBAN\n}\n\ntype CashTransactionFinancialAccount {\n  \"\"\"External financial account associated with this Transaction\"\"\"\n  financialAccount: FinancialAccount\n}\n\ntype CounterpartyEdge {\n  cursor: String\n  node: Counterparty\n}\n\ninput HeartbeatInput {\n  \"\"\"Id of the session that is being reported\"\"\"\n  sessionId: String\n}\n\ninput SetReceivablesOffersPayFeeWithRewardsInput {\n  clientMutationId: String!\n  value: Boolean!\n}\n\ntype DepartmentConnection {\n  edges: [DepartmentEdge]\n  pageInfo: PageInfo!\n}\n\ninput UpdateIntegrationSyncSettingsInput {\n  batchCadence: BatchCadence\n  batchEntity: BatchEntity\n  clientMutationId: String!\n  id: ID!\n  syncFrom: Time\n  version: Int\n}\n\ntype ErpFeedEdge {\n  cursor: String\n  node: ErpFeed\n}\n\ninput RefreshIntegrationCredentialsInput {\n  clientMutationId: String!\n  \"\"\"Filter by integration id\"\"\"\n  integrationId: ID\n  \"\"\"Filter by integration status\"\"\"\n  status: String\n}\n\ntype Integration implements Node {\n  accountCategories: AccountCategories\n  credential: Credential\n  \"\"\"Version of ERP subscription the integration corresponds to.\"\"\"\n  erpSubscriptionDetail: ErpSubscriptionDetail\n  errorDetails: [IntegrationErrorDetails]\n  exports(after: String, before: String, first: Int, last: Int): ExportConnection\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"List of available integration entities. Searchable by prefix and integration field\"\"\"\n  integrationEntities(after: String, before: String, entityType: String, fieldId: String, filterDeleted: Boolean, first: Int, last: Int, query: String): ExternalIntegrationEntityConnection\n  \"\"\"List of available mappable integration fields for an integration\"\"\"\n  integrationFields(after: String, before: String, first: Int, last: Int): ExternalIntegrationFieldConnection\n  integrationRules(after: String, before: String, first: Int, last: Int): IntegrationRuleConnection\n  \"\"\"Version of QuickBooks Online that the integration corresponds to.\"\"\"\n  qboOfferingSku: String\n  scopes: [IntegrationScope]\n  settings: IntegrationSettings\n  setupInstructions: SetupInstructions\n  status: String\n  \"\"\"Current state of the user's ERP subscription status.\"\"\"\n  subscriptionStatus: String\n  userCategories(after: String, before: String, first: Int, last: Int, query: String): UserCategoryConnection\n  vendor: String\n}\n\ninput AdminUpdateApprovalsReviewInput {\n  clientMutationId: String!\n  description: String\n  requestSnapshot: ApprovalsRequestInput\n  reviewId: ID!\n  status: ApprovalsReviewStatus!\n}\n\nenum CashBonusStatus {\n  ACTIVE\n  EXPIRED\n  TRIGGERED\n}\n\ntype RewardsTriggerCashActivationCardSpendBonus {\n  amountSpentRequiredUsdCents: Int!\n  expirationAfterCashActivationDays: Int!\n  reward: RewardsPointReward!\n}\n\nenum DisputeTransactionStatus {\n  TRANSACTION_STATUS_CLOSED\n  TRANSACTION_STATUS_DRAFT\n  TRANSACTION_STATUS_IN_PROGRESS\n  TRANSACTION_STATUS_PENDING_REVIEW\n  TRANSACTION_STATUS_PENDING_WITHDRAWAL\n  TRANSACTION_STATUS_UNKNOWN\n}\n\ntype FinancialBankStatementDocumentEdge {\n  cursor: String\n  node: FinancialBankStatementDocument\n}\n\ninput UpdateExpensesSettingRulesInput {\n  clientMutationId: String!\n  rules: [ExpensesRuleInput]!\n  sendEmailToEmployees: Boolean\n  settingId: ID!\n}\n\nenum RfiStatus {\n  RFI_STATUS_CANCELLED\n  RFI_STATUS_INVALID\n  RFI_STATUS_NEW\n  RFI_STATUS_PENDING_CUSTOMER\n  RFI_STATUS_PENDING_REVIEW\n  RFI_STATUS_RESPONSE_ACCEPTED\n  RFI_STATUS_RESPONSE_PARTIALLY_ACCEPTED\n  RFI_STATUS_RESPONSE_RECEIVED\n  RFI_STATUS_RESPONSE_REJECTED\n}\n\ntype PrepareMultiFeeReceivablesOffersForAcceptancePayload {\n  clientMutationId: String!\n  offersGroups: [ReceivablesOffersOffersGroup!]!\n}\n\ntype DepositsStatementEdge {\n  cursor: String\n  node: DepositsStatement\n}\n\nenum StatusView {\n  ACTIVE\n  EXPIRED\n  LOCKED\n  TERMINATED\n  WAITING_ACTIVATION\n}\n\ninput UnsuspendCardInput {\n  clientMutationId: String!\n  id: ID!\n}\n\nenum FinancialsConnectRequestType {\n  FINICITY_CONNECT\n}\n\nenum TxPaymentRail {\n  ACH\n  CHEQUE\n  WIRE\n}\n\nenum AchDebitCapability {\n  ENABLED\n  RESTRICTED\n  REVOKED\n}\n\ninput DismissPromotionInput {\n  clientMutationId: String!\n  promotionName: String!\n}\n\n\"\"\"The source of funds was a rewards redemption\"\"\"\ntype RewardsRedemptionSource {\n  \"\"\"The maximum amount of rewards redeemed\"\"\"\n  maximumAmount: FinancialAsset\n  \"\"\"The id of the rewards redemption\"\"\"\n  rewardsRedemptionInstanceId: String!\n}\n\nenum CashTransactionCancellationReason {\n  ACCOUNT_CLOSED\n  ACCOUNT_NOT_FOUND\n  ACH_DEBIT_CAPABILITY_REVOKED\n  APPROVAL_DENIED\n  BLOCKED_BY_POSITIVE_PAY\n  CUSTOMER_EDITED\n  FAILED_VERIFICATION\n  INSUFFICIENT_FUNDS\n  INVALID\n  MISSED_SEND_ON\n  USER_CANCELLED\n}\n\ntype AcceptDevAccessAgreementPayload {\n  clientMutationId: String!\n  success: Boolean\n}\n\ninput UpdateCardMetadataInput {\n  cardId: ID!\n  clientMutationId: String!\n  defaultMemo: String\n}\n\ninput OptOutOfIncentiveCampaignInput {\n  clientMutationId: String!\n  \"\"\"Opt out type\"\"\"\n  optOutType: IncentiveOptOutType!\n  \"\"\"The placement id\"\"\"\n  placementId: ID!\n}\n\ntype PaymentContactConnection {\n  edges: [PaymentContactEdge]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\n\"\"\"Marketo lead form object\"\"\"\ntype MarketoLeadForm implements Node {\n  \"\"\"the Marketo form id\"\"\"\n  formId: String!\n  \"\"\"the Marketo form content\"\"\"\n  formJson: String!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\nenum UserRoleTypeInput {\n  \"\"\"an admin is a card-only admin\"\"\"\n  ADMIN\n  \"\"\"this is card and cash bookkeeper\"\"\"\n  BOOKKEEPER\n  \"\"\"this is a card regular user and cash user role\"\"\"\n  CASH_AND_CARD_USER\n  \"\"\"this is a card-only regular user\"\"\"\n  REGULAR\n  \"\"\"a superadmin is a cash admin and card admin\"\"\"\n  SUPERADMIN\n}\n\nenum PremiumSettingEventSource {\n  BREX_INTERNAL\n  INVALID\n  USER\n}\n\ntype CreateResponseToRfiPayload {\n  clientMutationId: String!\n  rfi: Rfi\n}\n\ntype CustomerAttributes implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  numberOfEmployees: Int\n  oneBrexSegment: OneBrexSegment!\n}\n\ntype BookTransferDetails {\n  sourceDepositsAccount: DepositsAccount\n  targetDepositsAccount: DepositsAccount\n}\n\ntype CashTransactionReceivablesOffersAdvanceDetails {\n  _: Boolean\n}\n\ntype ExternalIntegrationEntityConnection {\n  edges: [ExternalIntegrationEntityEdge]\n  pageInfo: PageInfo!\n}\n\ntype NotifyUserOfCardRequestPayload {\n  clientMutationId: String!\n}\n\ninput UpdateLocationInput {\n  clientMutationId: String!\n  description: String\n  id: ID!\n  name: String!\n}\n\n\"\"\"Point history for rewards transactions\"\"\"\ntype RewardsPointsHistoryEntry implements Node {\n  \"\"\"Amount of points (1/100 of a point)\"\"\"\n  amountCentipoints: Int!\n  \"\"\"More specific description of the type of point transaction\"\"\"\n  descriptionType: RewardsPointsHistoryEntryDescriptionType!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"When the points were earned or granted\"\"\"\n  insertedAt: Time!\n  \"\"\"Payload with more details about the transaction\"\"\"\n  payload: RewardsHistoryEntryPayload\n  \"\"\"Type: Accrual/Redemption\"\"\"\n  type: RewardsPointsHistoryEntryType!\n  \"\"\"User who redeemed the points\"\"\"\n  user: User\n}\n\ntype AchPaymentInstrument {\n  accountClass: BankAccountClass\n  accountNumber: String\n  accountType: BankAccountType\n  \"\"\"A small logo for the beneficiary bank in base64 format. WARNING: may cause significantly slower response times\"\"\"\n  beneficiaryBankLogoBase64: String\n  \"\"\"Not yet implemented, will always be null. Is in the schema so the app can use the URL if available, falling back to base64\"\"\"\n  beneficiaryBankLogoUrl: String\n  beneficiaryBankName: String\n  routingNumber: String\n}\n\ntype CardStatement implements Node {\n  endBalanceCents: Int\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  paymentsTotalCents: Int\n  periodEndTime: Time!\n  periodStartTime: Time!\n  rewardsTotalCents: Int\n  \"\"\"total spend on the statement in cents\"\"\"\n  spendTotalCents: Int\n  startBalanceCents: Int\n}\n\ntype UpdateUserCategoriesPayload {\n  clientMutationId: String!\n  userCategories: [UserCategory!]\n}\n\ninput UpdateExpensesSettingAutoDismissMatcherJsonInput {\n  autoDismissMatcherJson: String!\n  clientMutationId: String!\n  id: ID!\n}\n\ninput SetMonthlyUserLimitInput {\n  amount: Int\n  clientMutationId: String!\n  userId: ID!\n}\n\ntype CashTransactionDepositedChequeReturnDetails {\n  \"\"\"Details from the transaction this return was for\"\"\"\n  originalDetails: CashTransactionDepositedChequeDetails!\n  \"\"\"The reason why the original transaction was returned\"\"\"\n  returnReason: CashTransactionChequeReturnReason!\n}\n\ntype ApiClient {\n  clientId: String\n  clientName: String\n  clientUrl: String\n}\n\ninput DeleteBillInput {\n  clientMutationId: String!\n  id: ID!\n}\n\ntype IssueCollectionPayload {\n  clientMutationId: String!\n  collectionIntention: CollectionIntention!\n}\n\ninput InputCashRecurringScheduleWeekly {\n  cadence: Int!\n  dayOfWeek: CashTransactionBusinessDay!\n}\n\nunion FinancialSourcePayload = FinicityPayload | PlaidPayload | TellerPayload\n\ninput ActivateUserInfo {\n  legalAgreements: [LegalAgreementReference]\n  password: String!\n}\n\nenum DocumentOcrClassificationType {\n  \"\"\"The document classification is unknown\"\"\"\n  INVALID\n  IRS_147_C @deprecated(reason: \"Use irs_147c\")\n  \"\"\"A proof of EIN letter. This may be requested on demand by businesses.\"\"\"\n  IRS_147C\n  \"\"\"An EIN confirmation letter. Users receive this one time after applying for an EIN.\"\"\"\n  IRS_CP_575\n}\n\nenum ReferralRewardType {\n  GIFT_CARD\n  POINTS\n  WAIVED_CARD_FEES\n}\n\n\"\"\"Metadata associated with receivables_offers account\"\"\"\ntype ReceivablesOffersAccountMetadata {\n  \"\"\"The effective fee program (free/default) for an account\"\"\"\n  currentFeeProgram: ReceivablesOffersFeeProgram!\n  \"\"\"The fee program (free/default) an account is under when they onboard\"\"\"\n  funnelFeeProgram: ReceivablesOffersFeeProgram!\n}\n\ninput ValidateChequeImagesInput {\n  amountUsdCents: Int!\n  attemptNumber: Int!\n  backImageAssetId: ID\n  clientMutationId: String!\n  depositsAccountId: ID!\n  frontImageAssetId: ID\n  validationType: ChequeImageValidationType\n}\n\nenum ReceivablesOffersAccountStatus {\n  ACTIVE\n  ACTIVE_TRIAL\n  DEACTIVATED\n  INVALID\n  INVITED\n  REJECTED\n  SUSPENDED\n}\n\ntype CreateStatementEntriesSearchReportPayload {\n  clientMutationId: String!\n  report: Report\n}\n\nenum OrderDirection {\n  ASC\n  DESC\n}\n\ninput ConnectPlaidInstitutionInput {\n  clientMutationId: String!\n  \"\"\"Plaid's id of the institution\"\"\"\n  plaidInstitutionId: String!\n  \"\"\"Public token from Plaid Link\"\"\"\n  publicToken: String!\n  \"\"\"Whether account details should be pulled synchronously with this request\"\"\"\n  shouldPullDetails: Boolean = false\n}\n\ntype OnboardingInformationRequestEdge {\n  cursor: String\n  node: OnboardingInformationRequest\n}\n\ntype XeroTrackingCategory {\n  categoryName: String\n  categoryNameId: String\n  categoryOption: String\n  categoryOptionId: String\n  isInactive: Boolean\n}\n\ntype InvoiceTemplate implements Node {\n  \"\"\"Company contact info of the invoice template.\"\"\"\n  contact: InvoicingContact\n  \"\"\"footer\"\"\"\n  footer: String\n  \"\"\"Header\"\"\"\n  header: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Idempotency key.\"\"\"\n  idempotencyKey: String\n  \"\"\"Logo uri.\"\"\"\n  logoUri: String\n  \"\"\"Logo url.\"\"\"\n  logoUrl: String\n  \"\"\"note\"\"\"\n  note: String\n}\n\ntype PendingRecordApprovalResponse {\n  approvalPaymentContext: ApprovalPaymentContext\n  pendingRecordApproval: PendingRecordApproval!\n}\n\ntype DeleteSubscriptionPayload {\n  clientMutationId: String!\n}\n\ntype ExpensesFlagEventConnection {\n  edges: [ExpensesFlagEventEdge]\n  pageInfo: PageInfo!\n}\n\nenum ExpensesSettingStatus {\n  ACTIVE\n  DISABLED\n  PAUSED\n}\n\ntype RewardsTriggerReferrerAward {\n  referrerReward: RewardsPointReward!\n  referrerRewardType: String!\n}\n\ntype ApprovalsReviewAssignee implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  user: User\n}\n\ntype PerMerchantStats implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  lastPurchaseTime: Time\n  merchant: Merchant\n}\n\ntype UpdateIntegrationCredentialPayload {\n  clientMutationId: String!\n  integration: Integration\n}\n\ntype OnboardingApplicationEdge {\n  cursor: String\n  node: OnboardingApplication\n}\n\nenum NotificationType {\n  COLLECTION_FAILED\n  DELINQUENT\n  DEPOSITS_BOOK_TRANSFER\n  DEPOSITS_PAYMENT_APPROVAL_REQUEST\n  DEPOSITS_PAYMENT_APPROVAL_RESPONSE\n  DEPOSITS_PAYMENT_STATUS\n  DEPOSITS_TRANSACTION_APPROVAL_REQUEST\n  DEPOSITS_TRANSACTION_APPROVAL_RESPONSE\n  DEPOSITS_TRANSACTION_BLOCKED_BY_POSITIVE_PAY\n  DEPOSITS_TRANSACTION_STATUS\n  DISCONNECTED_BANK_ACCOUNTS\n  EXPENSES_REVIEWER\n  FUNDING_SOURCE_VERIFICATION_FAILED\n  GLOBAL_LIMIT_REACHED\n  GLOBAL_LIMIT_WARNING\n  LIMIT_DROP\n  LIMIT_WARNING\n  LIMIT_WARNING_LOW_CASH_BALANCE\n  PRIMITIVES_CARD_TRANSACTION_APPROVED\n  PRIMITIVES_EXPENSES_NEW_POLICY\n  PRIMITIVES_EXPENSES_REVIEWER\n  PRIMITIVES_EXPENSES_SPENDER\n  PRIMITIVES_EXPENSES_UPDATE_POLICY\n  RECEIPT_AUTOGENERATED\n  STATEMENT_REQUEST\n  TRANSACTION_APPROVED\n  TRANSACTION_APPROVED_V2\n  TRANSACTION_REFUSED\n}\n\ninput Payee {\n  contactId: ID!\n  contactVersion: Int!\n  paymentInstrumentId: ID!\n  paymentInstrumentVersion: Int!\n}\n\ntype MilesTransferConnection {\n  edges: [MilesTransferEdge]\n  pageInfo: PageInfo!\n}\n\ntype DeleteBillPayload {\n  clientMutationId: String!\n}\n\ntype Constants {\n  cashBank: CashBank!\n  wireBank: WireBank!\n}\n\n\"\"\"\nThe funding source type for a payroll provider.\n- deposits_account: Funded by a deposits account (Brex Cash)\n- financial_account: Funded by an external financial account\n- unknown: An unknown external source\n\"\"\"\nenum PayrollProviderFundingSourceAccountType {\n  DEPOSITS_ACCOUNT\n  FINANCIAL_ACCOUNT\n  UNKNOWN\n}\n\ninput CreatePayrollProviderInput {\n  clientMutationId: String!\n  depositsAccountId: ID!\n  idempotencyKey: String!\n  name: String\n}\n\ntype RewardsTriggerEdge {\n  cursor: String\n  node: RewardsTrigger\n}\n\ninput CreateSubscriptionsInput {\n  channelId: ID!\n  clientMutationId: String!\n  notificationTypes: [NotificationType!]!\n}\n\ntype ExpensesRule implements Node {\n  description: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  matcherJson: String\n  name: String\n  status: ExpensesRuleStatus\n  type: ExpensesRuleType\n}\n\ntype ReferUserPayload {\n  clientMutationId: String!\n  referral: ReferralRecord!\n}\n\ninput SetAccountRestrictAchDebitsInput {\n  clientMutationId: String!\n  depositsAccountId: ID!\n  restrictAchDebits: Boolean!\n}\n\ninput CompletePendingRecordApprovalLoggedOutInput {\n  approvalToken: String!\n  approverUserId: String!\n  clientMutationId: String!\n  decision: PendingRecordApprovalDecision!\n  decisionNotes: String\n  decisionReason: PendingRecordApprovalDecisionReason\n}\n\ninput AcceptMultipleReceivablesOffersGroupsInput {\n  clientMutationId: String!\n  offersGroupIds: [ID!]!\n}\n\nenum StatementEntryIntegrationStatus {\n  EXPORTED\n  FAILED\n}\n\ntype IntegrationRule implements Node {\n  body: Json\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  name: String\n  priority: Int\n  type: String\n}\n\ntype FileAsset {\n  contentType: String\n  name: String\n}\n\nenum ReceivablesOffersCustomerCheckName {\n  ACTIVE_CURRENT_TARGET_ACCOUNT_CONNECTION\n  AMAZON_SELLER_HEALTH\n  EXPERIAN_STANDING\n  FIRST_TRANSACTION_DATE\n  FRAUD_FLAGS\n  GENERAL_PURCHASER_CONCENTRATION\n  HEALTHY_AND_HAS_SETTLED_COLLECTIONS_FUNDING_SOURCE\n  HEALTHY_FUNDING_SOURCE\n  HISTORICAL_DELINQUENCIES\n  INVALID\n  LAST_30D_SALES\n  LOSS_OF_PRIVILEGES\n  LOW_ESTIMATED_PAYOUT\n  NON_PERFORMANT_PAYOUT\n  NON_ZERO_PAYOUT\n  ONBOARDING_PAYOUT_TO_BE_DEPOSITED_BREX_CASH\n  ONBOARDING_PLATFORM_DEROGATORY_EVENTS\n  PAYOUT_DEPOSITED_BREX_CASH\n  PAYOUT_TO_BE_DEPOSITED_BREX_CASH\n  PLATFORM_CONNECTION\n  PLATFORM_DEROGATORY_EVENTS\n  PLATFORM_DEROGATORY_EVENTS_CAP\n  PRODUCT_AUTHENTICITY_DEFECTS\n  PRODUCT_AUTHENTICITY_DEFECTS_CAP\n  PROHIBITED_ITEMS\n  SALES_VELOCITY\n  STANDARD_PAYOUT_NET_SALES\n  VERIFIED_FUNDING_SOURCE\n  VERIFIED_OR_PENDING_FUNDING_SOURCE\n}\n\ntype InvoicingAccount implements Node {\n  \"\"\"The customer_account_id of the invoicing account.\"\"\"\n  customerAccountId: String!\n  \"\"\"The default invoice template used to generate a formatted invoice document.\"\"\"\n  defaultInvoiceTemplate: InvoiceTemplate\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The prefix for the invoice number.\"\"\"\n  invoiceNumberPrefix: String\n  \"\"\"Invoices for this account\"\"\"\n  invoices(after: String, before: String, first: Int, last: Int, status: [InvoiceStatus]): InvoicingInvoiceConnection\n  \"\"\"The next invoice number for creating a new invoice.\"\"\"\n  nextInvoiceNumber: Int!\n  \"\"\"The status of the invoicing account (e.g., `ACTIVE`, `SUSPENDED`, `DEACTIVATED`).\"\"\"\n  status: InvoicingAccountStatus!\n}\n\ntype BillingPaymentIntentConnection {\n  edges: [BillingPaymentIntentEdge]\n  pageInfo: PageInfo!\n}\n\ntype ExpensesFlagEdge {\n  cursor: String\n  node: ExpensesFlag\n}\n\ntype ProductOffer {\n  \"\"\"Any offer-specific context\"\"\"\n  context: Json\n  \"\"\"The sequence in which to present this offer\"\"\"\n  order: Int!\n  \"\"\"The state of the offer\"\"\"\n  state: OfferState!\n  \"\"\"List of steps to take associated with this offer\"\"\"\n  steps: [OfferSetupStep]\n  \"\"\"The type of offer\"\"\"\n  type: OfferType!\n}\n\n\"\"\"The metadata for a duplicate subscriptions type\"\"\"\ntype InsightMetadataDuplicateSubscriptions {\n  \"\"\"The relevant entries that associated with this spend alert\"\"\"\n  duplicateSubscriptionsRelevantEntries: [StatementEntry]\n}\n\ntype SetTransactionIntegrationFieldPayload {\n  clientMutationId: String!\n  lens: TransactionLens\n}\n\nenum ApprovalsRequestStatus {\n  APPROVED\n  CANCELLED\n  DENIED\n  PENDING\n}\n\ntype EducationTileEdge {\n  cursor: String\n  \"\"\"Education Tile Node\"\"\"\n  node: EducationTile\n}\n\ninput PushMarketoLeadsInput {\n  clientMutationId: String!\n  formId: String!\n  leadAttributionMetadata: LeadAttributionMetadata\n  leads: [String!]\n  lookupField: String\n  programName: String!\n  reason: String\n  source: String\n}\n\ntype SetReceivablesOffersAccountOnboardingActionPayload {\n  account: ReceivablesOffersAccount\n  clientMutationId: String!\n}\n\ntype CreateBillPayload {\n  bill: Bill\n  clientMutationId: String!\n}\n\ntype ResyncBillsPayload {\n  clientMutationId: String!\n}\n\ntype DeleteSubscriptionsPayload {\n  clientMutationId: String!\n}\n\n\"\"\"The account settings for a receivables_offers account. These settings are nil if the customer hasn't set them yet\"\"\"\ntype ReceivablesOffersAccountSettings {\n  \"\"\"Has the customer opted into auto advance mode (null if not set)\"\"\"\n  autoAdvanceMode: Boolean\n  \"\"\"Whether the customer indicated that they routed their Amazon payouts to Brex (null if not set)\"\"\"\n  confirmedPayoutsRoutedToBrex: Boolean\n  \"\"\"The customer-indicated mappings of integration to financial account where that integration's payouts are being deposited\"\"\"\n  integrationFinancialAccountMappings: [ReceivablesOffersIntegrationFinancialAccountMapping]!\n  \"\"\"Has the customer opted out of instant payouts product (null if not set)\"\"\"\n  optedOutOfInstantPayouts: Boolean\n  \"\"\"Whether the customer has opted to pay fee with rewards points (null if not set)\"\"\"\n  payFeeWithRewards: Boolean\n  \"\"\"Whether the customer has revenue access enabled\"\"\"\n  revenueAccessEnabled: Boolean\n  \"\"\"Whether the customer selected trial onboarding flow (null if not set)\"\"\"\n  selectedTrialOnboarding: Boolean @deprecated(reason: \"This field was used for initial feature rollout and is no longer used\")\n}\n\nenum InvestmentType {\n  PERCENTAGE_MMF\n  TARGET_CASH_IN_CENTS\n  TARGET_MMF_IN_CENTS\n}\n\ntype SetupMfaPayload {\n  clientMutationId: String!\n  deviceId: String!\n  deviceSecret: String\n}\n\ntype EarlyAccessFeature implements Node {\n  availablePlatforms: [EarlyAccessFeatureAvailablePlatform!]!\n  availableUserRoles: [String!]!\n  description: String!\n  displayMediaAssets: [EarlyAccessFeatureMediaAsset!]!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  joinStatus: EarlyAccessFeatureJoinStatus!\n  productTags: [String!]!\n  thumbnailMediaAsset: EarlyAccessFeatureMediaAsset!\n  title: String!\n}\n\ninput InviteUserInput {\n  clientMutationId: String!\n  departmentId: ID\n  email: Email!\n  firstName: String!\n  groups: [String]\n  inviteIdempotencyKey: String\n  isCorporateCardUser: Boolean\n  lastName: String!\n  locationId: ID\n  managerId: ID\n  requirePhysicalCard: Boolean\n  role: UserRoleTypeInput!\n  useOnboarding: Boolean\n}\n\ntype ProcessAccountClosurePayload {\n  clientMutationId: String!\n}\n\ninput DeleteSubscriptionsInput {\n  clientMutationId: String!\n  ids: [ID!]!\n}\n\ninput EditDepositsPaymentMemoInput {\n  clientMutationId: String!\n  memo: String\n  paymentId: ID!\n}\n\n\"\"\"Response that determines whether account should see application.\"\"\"\ntype ShouldSeeApplicationResponse {\n  \"\"\"Whether intial_market_segment was populated at time of request.\"\"\"\n  segmentAvailable: Boolean!\n  \"\"\"Whether account should see application.\"\"\"\n  shouldSeeApplication: Boolean\n}\n\nenum Status {\n  FAILED\n  PROCESSED\n  PROCESSING\n}\n\ntype DepositChequePayload {\n  amount: Int!\n  backImageAssetId: ID!\n  chequeNumber: Int\n  clientMutationId: String!\n  expectedDeliveryDate: String\n  frontImageAssetId: ID!\n  recipientName: String\n  senderName: String\n  status: String!\n}\n\ninput CreateResponseToRfiInput {\n  arfiId: String!\n  clientMutationId: String!\n  responderCustomerUserId: String!\n  responseItemsInput: [CreateRfiResponseItemInput]\n  responseMessage: String\n}\n\ntype CashTransactionAchDetails {\n  \"\"\"The financial account class\"\"\"\n  accountClass: CashTransactionAccountClass\n  \"\"\"The counterparty's account number\"\"\"\n  accountNumber: String\n  \"\"\"The financial account type\"\"\"\n  accountType: CashTransactionAccountType\n  \"\"\"The address of the recipient\"\"\"\n  address: Address\n  \"\"\"The counterparty's beneficiary bank information\"\"\"\n  beneficiaryBank: CashTransactionBeneficiaryBank\n  \"\"\"The institution's logo as a base64 PNG, if available\"\"\"\n  beneficiaryBankLogoBase64: String\n  \"\"\"\n  Output only. A 10-digit unique identifier used for identifying ACH entities\n  Only exists for externally originated counterparties\n  \"\"\"\n  companyId: String\n  \"\"\"The email of the recipient\"\"\"\n  email: String\n  \"\"\"Whether the transaction was a debit or credit\"\"\"\n  paymentMethod: CashTransactionPaymentMethod!\n  \"\"\"The counterparty's routing number\"\"\"\n  routingNumber: String\n  \"\"\"Entry description used to describe the transaction in NACHA\"\"\"\n  transferDescription: String\n}\n\n\"\"\"Validation results of a payment instrument\"\"\"\ntype ValidatedPaymentInstrument {\n  \"\"\"Fields of a payment instrument that are valid or not (boolean)\"\"\"\n  fields: Json\n  \"\"\"Enum whether the overall payment instrument is valid\"\"\"\n  isValid: Boolean\n}\n\ntype DepartmentEdge {\n  cursor: String\n  node: Department\n}\n\nenum ChequeImageValidationErrorSeverity {\n  ERROR\n  IGNORE\n  WARNING\n}\n\nenum FinancialLoginFieldContentType {\n  IMAGE\n  PASSWORD\n  TEXT\n  UNKNOWN\n  USERNAME\n}\n\ntype Country {\n  \"\"\"ISO 3166-1 alpha-2 representation of a country (ex. 'US' for United States)\"\"\"\n  alpha2: CountryAlpha2!\n  \"\"\"ISO 3166-1 alpha-3 representation of a country (ex. 'USA' for United States)\"\"\"\n  alpha3: CountryAlpha3!\n  \"\"\"Human-readable name of the country\"\"\"\n  displayName: String!\n  \"\"\"Official name of the country\"\"\"\n  name: String!\n  \"\"\"ISO 3166-1 numeric representation of a country (ex. '840' for United States)\"\"\"\n  numeric: String!\n  \"\"\"Additional data associated with the country\"\"\"\n  restrictions: Restrictions!\n}\n\ntype LoyaltyProgramConnection {\n  edges: [LoyaltyProgramEdge]\n  pageInfo: PageInfo!\n}\n\ntype UpdateUserPermissionPayload {\n  clientMutationId: String!\n  \"\"\"the updated user\"\"\"\n  user: User!\n}\n\ntype ReceiptEdge {\n  cursor: String\n  node: Receipt\n}\n\ninput EditInvoiceInput {\n  clientMutationId: String!\n  depositsAccountId: ID\n  discountAmount: FinancialAssetInput\n  discountPercent: Float\n  dueDate: Date\n  idempotencyKey: String!\n  invoiceId: ID!\n  invoiceNumber: String!\n  invoiceTemplateId: ID!\n  lineItems: [InvoiceLineItemInput]\n  memo: String\n  payerContactId: ID\n  subtotal: FinancialAssetInput\n  totalAmount: FinancialAssetInput\n}\n\ntype FinancialInstrument {\n  code: InstrumentCode\n  name: String\n  tickerSymbol: String\n}\n\ninput SendBillPaymentInput {\n  clientMutationId: String!\n  contactVersion: Int\n  id: ID!\n  idempotencyKey: String!\n  paymentInstrumentVersion: Int\n}\n\nenum AccountMigrationStatus {\n  ACKNOWLEDGED\n  COMPLETE\n  IN_PROGRESS\n  INVALID\n  NOT_STARTED\n}\n\nenum ReimbursementItemState {\n  APPROVED\n  CANCELED\n  COMPLETED\n  CREATED\n  FAILED\n  INVALID\n  PAYMENT_PROCESSING\n  PAYMENT_WITHDRAWING\n  REJECTED\n  REVOKED\n  SUBMITTED\n}\n\n\"\"\"Response that encapsulates the original contact input and its validation result\"\"\"\ntype ValidatedVendorContactInput implements Node {\n  \"\"\"Original contact input\"\"\"\n  data: VendorContactInputData!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Validation for the contact input\"\"\"\n  validation: VendorContactInputValidation!\n}\n\nunion CredentialPayload = CredentialAmazonMwsPayload | CredentialQbdPayload | CredentialQuickbooksPayload | CredentialShopifyPayload | CredentialVendorPayload | CredentialWeavPayload | CredentialXeroPayload\n\ntype ModifyPreapprovedCardSettingsPayload {\n  card: Card!\n  clientMutationId: String!\n}\n\nenum ExpensesFlagEventAction {\n  COMMENT\n  CREATE\n  DISMISS\n  RESOLVED\n}\n\ntype CashRecurringScheduleDurationWithEndsAt {\n  \"\"\"Keep creating transactions until the `ends_at` date\"\"\"\n  endsAt: Time!\n}\n\n\"\"\"Runway projections for a given time range\"\"\"\ntype InsightsRunwayProjection {\n  \"\"\"End of the projection time range (exclusive)\"\"\"\n  endAt: Time!\n  \"\"\"\n  Projected balance (USD) in the account at the end of the\n  projection time range (end_at)\n  \"\"\"\n  projectedBalanceUsdCents: Long!\n  \"\"\"The cash the business is burning within the time period\"\"\"\n  projectedBurnRate: Long!\n  \"\"\"\n  Projected amount (USD) that will be brought into the account during the\n  projection time range\n  \"\"\"\n  projectedMoneyInUsdCents: Long!\n  \"\"\"\n  Projected amount (USD) that will leave the account during the\n  projection time range\n  \"\"\"\n  projectedMoneyOutUsdCents: Long!\n  \"\"\"Start of the projection time range (inclusive)\"\"\"\n  startAt: Time!\n}\n\ntype FinicityConnectGenerateFixUrlPayload {\n  clientMutationId: String!\n  url: String!\n}\n\ntype IntegrationEdge {\n  cursor: String\n  node: Integration\n}\n\ntype DepositsPaymentConnection {\n  edges: [DepositsPaymentEdge]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\ninterface Node {\n  \"\"\"The id of the object.\"\"\"\n  id: ID!\n}\n\n\"\"\"Parameters that were part of this account's last analysis\"\"\"\ntype UnderwritingParameters {\n  \"\"\"If this account uses connected bank underwriting\"\"\"\n  useConnectedBank: Boolean!\n  \"\"\"If this account uses statement-based underwriting\"\"\"\n  useStatements: Boolean!\n}\n\ntype StartResetUserPayload {\n  clientMutationId: String!\n}\n\ntype UpdateExpensesSettingStatusPayload {\n  clientMutationId: String!\n  expensesSetting: ExpensesSetting\n}\n\ntype ApprovalsRequestReimbursement {\n  customerAccountId: ID!\n  customerUserId: ID!\n  reimbursementItem: ReimbursementItem\n  updatedAt: Time!\n}\n\ntype FinancialStatementAccountEdge {\n  cursor: String\n  node: FinancialStatementAccount\n}\n\ninput SetReceivablesOffersSellerAccountHasSeenFailingChecksErrorBannerInput {\n  clientMutationId: String!\n  sellerAccountId: ID!\n  value: Boolean!\n}\n\nunion CardOverviewSummaryTile = CurrentBalanceTile | PaymentDetailsTile\n\ninput CountriesListFilters {\n  \"\"\"Filter to exclude sanctioned for card shipping from the list of countries returned\"\"\"\n  excludeSanctionedForCardShipping: Boolean\n}\n\ntype PageInfo {\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: String\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: String\n}\n\ninput RemoveFinancialSourceInput {\n  clientMutationId: String!\n  financialSourceId: ID!\n}\n\ninput TerminateCardInput {\n  clientMutationId: String!\n  id: ID!\n  terminationDescription: String\n  terminationReason: TerminationReason\n}\n\ninput UpdateApprovalsReviewInput {\n  clientMutationId: String!\n  description: String\n  requestSnapshot: ApprovalsRequestInput\n  reviewId: ID!\n  status: ApprovalsReviewStatus!\n}\n\nenum HrisAggregatorVendor {\n  MERGE\n}\n\ntype CollectionAttempt implements Node {\n  amount: Int\n  collectionDate: Time\n  collectionIntention: CollectionIntention\n  errorCode: String\n  failureType: CardPaymentFailureType @deprecated(reason: \"Switch to v2 version of field including new `non_transaction_account` member\")\n  failureTypeV2: CardPaymentFailureTypeV2\n  failureTypeV3: CardPaymentFailureTypeV3\n  fundingSource: FundingSource\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  originatorId: String\n  originatorType: String\n  peekDetails: CollectionAttemptPeekDetails\n  presentCollectionIntentionId: String\n  providerCollectionId: String\n  providerName: String\n  scheduledDate: Time\n  statement: LegacyCardStatementPeriodBoundaries\n  status: String\n}\n\ntype ConnectAmazonMwsCredentialPayload {\n  authenticationResult: CredentialAuthenticationResult\n  clientMutationId: String!\n}\n\n\"\"\"\nThe counterpart to a Rfi, providing the Information requested by a specific\nRfiItem (a document, or a text response). Whether or not the response is\nvalid is something determined by the reviewer (usually the requestor).\n\"\"\"\ntype RfiResponse {\n  message: String\n  responderCustomerUser: User!\n  responseItems: [RfiResponseItem]\n}\n\nenum CreditMarketingOfferStatus {\n  ACCEPTED\n  CANCELLED\n  OFFERED\n  PENDING\n  REJECTED\n}\n\ntype SetPrimaryFundingSourcePayload {\n  clientMutationId: String!\n  fundingSource: FundingSource!\n}\n\nenum CashTransactionAccountClass {\n  BUSINESS\n  INVALID\n  PERSONAL\n}\n\ntype CompleteCashTransactionApprovalPayload {\n  clientMutationId: String!\n  transaction: CashTransaction!\n  transactionApprovalResult: CashTransactionApprovalResult!\n}\n\ninput ChequePaymentInstrumentFindInput {\n  address: AddressInput!\n  recipientName: String!\n}\n\ntype ActivateUserPayload {\n  authType: ActivateUserAuthType!\n  clientMutationId: String!\n  session: Session\n  token: String!\n  user: User\n}\n\ntype RemoveFspBookkeeperUserPayload {\n  clientMutationId: String!\n  groupUrn: String\n}\n\ntype LimitUtilizationTile implements Node {\n  \"\"\"Customer's limit\"\"\"\n  globalLimit: Int!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Limit utilization status, check enum limit_utilization_status for more details\"\"\"\n  limitUtilizationStatus: LimitUtilizationStatus!\n}\n\ntype CredentialEdge {\n  cursor: String\n  node: Credential\n}\n\ntype RewardsRefund implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  pointsCost: Int!\n  redeemer: User!\n  refundedStatementEntry: StatementEntry! @deprecated(reason: \"This feature is slated for removal\")\n}\n\ntype FedachParticipant implements Node {\n  changeDate: String!\n  customerAddress: String!\n  customerAreaCode: String!\n  customerCity: String!\n  \"\"\"The institution's logo as a base64 PNG, if available\"\"\"\n  customerLogoBase64: String\n  customerName: String!\n  customerPhonePrefix: String!\n  customerPhoneSuffix: String!\n  customerState: String!\n  customerZip: String!\n  customerZipExt: String!\n  dataViewCode: String!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  institutionStatusCode: String!\n  newRoutingNumber: String!\n  officeCode: String!\n  recordTypeCode: String!\n  routingNumber: String!\n  servicingFrbNumber: String!\n}\n\ninput UpdateIntegrationRuleInput {\n  body: Json\n  clientMutationId: String!\n  id: ID!\n  name: String\n  priority: Int\n}\n\nenum IntegrationRulesFilterFacetType {\n  CONFLICTING\n  CUSTOM\n  MERCHANT\n  OVERRIDE\n}\n\nenum PromotionsCtaAction {\n  ADD_TEAMMATES\n  CASH_TOUR\n  CONNECT_PAYROLL\n  CREATE_API_TOKEN\n  HRIS\n  INSTANT_PAYOUTS\n  ONE_PASSWORD\n  PREMIUM_UPSELL\n  REFERRALS\n  ZAPIER\n}\n\ntype RewardsRedemptionDetails {\n  initiatedByCustomerUser: User\n  pointsRedeemed: Int!\n}\n\ntype SubmitOnboardingInformationRequestPayload {\n  clientMutationId: String!\n  informationRequest: OnboardingInformationRequest!\n}\n\n\"\"\"Year for Rewind video\"\"\"\nenum MarketingRewindYear {\n  \"\"\"2020\"\"\"\n  YEAR_2020\n}\n\n\"\"\"The metadata for a spend increase type\"\"\"\ntype InsightMetadataSpendIncrease {\n  \"\"\"The current amount\"\"\"\n  currentAmount: Float\n  \"\"\"The past month amounts\"\"\"\n  pastMoAmounts: Json\n  \"\"\"The percent increase threshold\"\"\"\n  pctIncreaseThreshold: Float\n  \"\"\"The previous amount before the spend increase\"\"\"\n  previousAmount: Float!\n  \"\"\"The relevant entries that associated with this spend alert\"\"\"\n  spendIncreaseRelevantEntries: [StatementEntry]\n  \"\"\"The amount that triggers this alert\"\"\"\n  triggerAmount: Float\n}\n\ntype AdminUpdateApprovalsReviewsPayload {\n  approvalsReviews: [ApprovalsReview!]\n  clientMutationId: String!\n}\n\ntype GenerateReceivablesOffersGroupReportPayload {\n  clientMutationId: String!\n  offersGroupReportUri: String!\n}\n\ntype InvestmentPolicyBreakdown {\n  amount: Int!\n  investmentType: InvestmentType!\n  isOperative: Boolean!\n}\n\n\"\"\"A generic value type the column is an arbitrary string\"\"\"\ntype MuteValueRaw {\n  \"\"\"The raw string value for this generic value type\"\"\"\n  rawValue: String\n}\n\ntype FinicityConnectMigrateAccountsPayload {\n  clientMutationId: String!\n  updatedSource: FinancialSource\n}\n\nenum TimeBucketStrategy {\n  CALENDAR\n  END\n  INVALID\n  START\n}\n\ninput OptIntoIncentiveCampaignInput {\n  clientMutationId: String!\n  customerAccountId: ID\n  \"\"\"The placement id\"\"\"\n  placementId: ID!\n}\n\ntype OnboardingFormUwEcommerceConnection {\n  _: Boolean\n}\n\ntype DisconnectPayrollProviderIntegrationPayload {\n  clientMutationId: String!\n}\n\ninput BulkCreateSpendAlertEventInput {\n  action: CardTransactionInsightEventAction!\n  alertIds: [ID]!\n  clientMutationId: String!\n  eventMetadata: Json\n}\n\ninput SetupMfaInput {\n  clientMutationId: String!\n  mfaDeviceType: MfaPrimaryMethod!\n  phoneNumber: String!\n}\n\n\"\"\"Connection Node Type Credit Limit Factor Tile\"\"\"\ntype CreditLimitFactorTileConnection {\n  edges: [CreditLimitFactorTileEdge]\n  pageInfo: PageInfo!\n}\n\nenum BillStatus {\n  ADMIN_APPROVAL_REQUIRED\n  APPROVAL_REQUIRED\n  DELETED\n  DRAFT\n  PAYMENT_PROCESSED\n  PAYMENT_PROCESSING\n  PAYMENT_SCHEDULED\n}\n\ntype InvoiceLineItem {\n  \"\"\"Description item. e.g. product / service.\"\"\"\n  description: String!\n  \"\"\"Quantity of the description item.\"\"\"\n  quantity: Int!\n  \"\"\"Total amount of the line item\"\"\"\n  totalAmount: FinancialAsset!\n  \"\"\"Unit price of the description item.\"\"\"\n  unitPrice: FinancialAsset!\n}\n\ntype NetsuiteCategories {\n  accountsPayableUserCategory: UserCategory\n  collectionTargetUserCategory: UserCategory\n  \"\"\"reimbursements user category\"\"\"\n  reimbursementsUserCategory: UserCategory\n  rewardsIncomeUserCategory: UserCategory\n  vendorName: String\n}\n\ntype MarkOfferSeenPayload {\n  clientMutationId: String!\n}\n\nenum RewardsPointsHistoryEntryDescriptionType {\n  ASCENDA\n  CASH\n  CRYPTO\n  GIFT_CARD\n  INCENTIVE_BONUS\n  INSTANT_PAYOUTS_FEE\n  OPERATIONAL\n  OTHER\n  PAYROLL_LINK_BONUS\n  SPEND_ACCRUAL\n  SPEND_BONUS\n  STATEMENT_CREDIT\n  TRAVEL\n}\n\ninput CreatePushChannelInput {\n  clientMutationId: String!\n  deviceInformation: DeviceInformationInput!\n  deviceToken: String!\n  type: PushProviderType!\n}\n\ntype CashTransactionPayee {\n  \"\"\"Contact object associated with this Transaction\"\"\"\n  contact: PaymentContact\n  \"\"\"Payment Instrument object associated with this Transaction\"\"\"\n  paymentInstrument: PaymentInstrument\n}\n\ntype FinancialAccountDetails {\n  \"\"\"Last 4 digits of account number if it exists.\"\"\"\n  accountNumberLast4: String\n  \"\"\"Last 4 digits of routing number if it exists.\"\"\"\n  routingNumberLast4: String\n  type: FinancialAccountType\n}\n\n\"\"\"Business activities that can lead to Statement Entries\"\"\"\nenum StatementEntryActivityType {\n  CARD_TRANSACTION\n  COLLECTION\n  REWARD\n}\n\ntype RewardsTrigger implements Node {\n  description: String!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  name: String!\n  payload: RewardsTriggerPayload!\n  rewardsTriggerInstances(after: String, before: String, first: Int, last: Int): RewardsTriggerInstanceConnection\n  type: RewardsTriggerType!\n}\n\nenum FinancialsVendor {\n  DEPOSITS\n  FINICITY\n  MANUAL\n  OCROLUS\n  PLAID\n  TELLER\n}\n\ntype CreateExpensesSettingPayload {\n  clientMutationId: String!\n  expensesSetting: ExpensesSetting\n}\n\nenum PayrollStatus {\n  AUTHENTICATED\n  DATA\n  INITIATED\n}\n\nenum OnboardingInformationRequestStatus {\n  COMPLETE\n  IN_PROGRESS\n  NEW\n}\n\nenum CreditMarketingOfferType {\n  FICO_TRADITIONAL_CHARGE\n}\n\ninput RefreshFinancialSourceInput {\n  clientMutationId: String!\n  financialSourceId: ID!\n}\n\ntype OfferSetupStep {\n  \"\"\"Whether or not this step has been completed\"\"\"\n  completed: Boolean!\n  \"\"\"A step in the offer flow\"\"\"\n  step: OfferSetupStepType!\n}\n\ntype DepositsProcessingAndFuturePaymentDateEdge {\n  cursor: String\n  node: DepositsProcessingAndFuturePaymentDate\n}\n\ninput BulkInviteUsersInput {\n  clientMutationId: String!\n  users: [UserInvite!]!\n}\n\n\"\"\"Internally initiated by a Brex employee\"\"\"\ntype InternalInitiated {\n  \"\"\"A placeholder always true field to make the object queryable\"\"\"\n  internal: Boolean\n}\n\nenum PremiumSettingPricingScheme {\n  BETA_GRANDFATHER\n  BETA_UPGRADED\n  CUSTOM\n  INVALID\n  LEGACY_EXPENSE_BETA\n  ONE_POINT_PER_DOLLAR\n  PROMOTIONAL_CAMPAIGN\n  STANDARD\n}\n\ntype DeletePositivePayAccountSettingPayload {\n  clientMutationId: String!\n  positivePayAccountSetting: PositivePayAccountSetting!\n}\n\ninput CompletePromotionInput {\n  clientMutationId: String!\n  promotionName: String!\n}\n\n\"\"\"Cash linked account bonus\"\"\"\ntype CashLinkedAccountBonus {\n  completedAt: Time\n  expiresAt: Time\n  rewardAmount: Int!\n  status: CashBonusStatus!\n}\n\ntype RewardsAccrualEntryEdge {\n  cursor: String\n  node: RewardsAccrualEntry\n}\n\ntype ExpensesItemConnection {\n  edges: [ExpensesItemEdge]\n  pageInfo: PageInfo!\n}\n\ntype CollectionAttemptConnection {\n  edges: [CollectionAttemptEdge]\n  pageInfo: PageInfo!\n}\n\ntype CardPaymentForwarderInvoice {\n  invoiceAssetId: String\n  invoiceNumber: String\n}\n\ntype StartIntegrationExportPayload {\n  clientMutationId: String!\n  \"\"\"Export_attempt_id to use for tracking export status and getting results\"\"\"\n  exportAttemptId: ID\n}\n\ntype UpdateIntegrationRulePayload {\n  clientMutationId: String!\n  integrationRule: IntegrationRule\n}\n\ntype UpdatePaymentInstrumentPayload {\n  clientMutationId: String!\n  paymentInstrument: PaymentInstrument!\n}\n\ninput UpdateExpensesSettingStatusInput {\n  clientMutationId: String!\n  id: ID!\n  status: ExpensesSettingStatus!\n}\n\ninput SetDepositsTransactionPaymentMemoInput {\n  clientMutationId: String!\n  memo: String\n  transactionId: ID!\n}\n\ntype ApprovalsRequestConnection {\n  edges: [ApprovalsRequestEdge]\n  pageInfo: PageInfo!\n  \"\"\"The total number of requests\"\"\"\n  totalCount: Int!\n}\n\ntype OnboardingApplicationStateEmpty {\n  _: Boolean\n}\n\ntype OnboardingPageUwBankConnection {\n  amountNeededConnectedBank: Int\n  amountNeededStatements: Int\n  canSkipStatements: Boolean!\n  content: OnboardingFormUwBankConnection!\n  financialProductType: FinancialProductType\n  requestReason: OnboardingUnderwritingBankConnectionRequestReason\n  shouldPromptStatements: Boolean!\n}\n\ninput CreateReimbursementReportInput {\n  clientMutationId: String!\n  displayTime: Time!\n  filters: Json!\n}\n\ninput ApprovalsRequestReimbursementInput {\n  customerAccountId: ID!\n  customerUserId: ID!\n  reimbursementItemId: ID!\n  updatedAt: Time!\n}\n\nenum ApprovalsSettingStatus {\n  DISABLED\n  ENABLED\n}\n\ntype CardTransactionFraudAlert implements Node {\n  creationDate: Time\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  status: ConfirmationStatus!\n  transaction: Transaction!\n}\n\ninput UpdateAccountAddressInput {\n  address: AddressInput!\n  clientMutationId: String!\n  updateExistingCardAddresses: Boolean\n}\n\ntype GetExportAttemptStatePayload {\n  clientMutationId: String!\n  \"\"\"Report download URL (for CSV exports)\"\"\"\n  downloadUrl: String\n  \"\"\"Status of export attempt\"\"\"\n  status: String\n}\n\nenum ClosureStatus {\n  COMPLETE\n  NOT_STARTED\n  REFUND_PROCESSING\n}\n\ntype InstantPayoutsFeePayload {\n  usdCentsPerPoint: Float!\n}\n\ninput GetExportAttemptStateInput {\n  clientMutationId: String!\n  \"\"\"export_attempt_id is returned by start_integration_export response\"\"\"\n  exportAttemptId: String\n}\n\ntype ApprovalsSetting implements Node {\n  defaultPolicy: ApprovalsPolicy!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  status: ApprovalsSettingStatus!\n}\n\ntype CreateNonPrimaryDepositsAccountPayload {\n  clientMutationId: String!\n  depositsAccount: DepositsAccount!\n}\n\ntype SemiMonthlyClosingStrategy {\n  firstDay: Int\n  secondDay: Int\n}\n\ntype CalculateCreditMarketingOfferPayload {\n  clientMutationId: String!\n  offer: CreditMarketingOffer\n  result: CalculateCreditMarketingOfferResultStatus!\n}\n\nenum AffiliateBonusStatus {\n  ACTIVE\n  COMPLETED\n  EXPIRED\n  INVALID\n}\n\ntype TransactionLens implements Node {\n  billableStatus: BillableStatus\n  displayFieldEntities: [ExternalIntegrationEntity]\n  displayFields: Json\n  externalClass: ExternalIntegrationEntity\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"\n  Returns the computed integration field entities from integration rule engine for a txn.\n  We return a list of PEIEs as the PEIF data exists on the object itself to match in the frontend.\n  \"\"\"\n  integrationFieldEntities: [ExternalIntegrationEntity]\n  ruleEvaluations: [IntegrationRuleEvaluation]\n  transaction: Transaction\n  userCategory: UserCategory\n}\n\ntype InvoicingContact implements Node {\n  \"\"\"Address\"\"\"\n  address: ContactAddress\n  \"\"\"Type of contact. e.g. Invoicer, Payer\"\"\"\n  contactType: ContactType!\n  \"\"\"Doing Business As\"\"\"\n  dbaName: String\n  \"\"\"Email\"\"\"\n  email: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Phone number\"\"\"\n  phone: String\n}\n\ntype RoleRulePredicate {\n  customerAccountId: String\n  customerUserId: String\n}\n\ninput UpdateReimbursementMetadataInput {\n  clientMutationId: String!\n  reimbursementItemId: ID!\n  updatedReimbursementMetadata: ReimbursementMetadataInput!\n}\n\ntype EnableIntegrationPayload {\n  clientMutationId: String!\n  \"\"\"The enabled integration\"\"\"\n  integration: Integration\n}\n\ntype BalanceBreakdown {\n  \"\"\"The unsigned sum of all transactions. Transactions that add money to the Cash account are included only if they have been fully processed (transaction has hit the bank). Transactions that remove money from the Cash account are removed once the transaction is started.\"\"\"\n  availableBalance: Int!\n  \"\"\"Unsigned sum of transactions that haven't finished processing (both for incoming and outgoing transactions).\"\"\"\n  processingBalance: Int!\n  \"\"\"Card transactions for the day that accumulate until it's processed from the Cash account at the end of the day.\"\"\"\n  sameDayCardBalance: Int!\n  \"\"\"Unsigned sum of transactions that are scheduled for the future (both for incoming and outgoing transactions).\"\"\"\n  scheduledFundsAmount: Int!\n}\n\n\"\"\"The collection information for the offers group (advance)\"\"\"\ntype ReceivablesOffersOffersGroupCollectionInfo {\n  \"\"\"The total amount that has been collected so far\"\"\"\n  totalCollectedAmount: FinancialAsset!\n  \"\"\"The total points that have been redeemed to pay for fees\"\"\"\n  totalPointsRedeemed: Int!\n  \"\"\"The value of these points (in cents)\"\"\"\n  totalPointsValue: FinancialAsset!\n}\n\ntype OnboardingPageFundingSource {\n  _: Boolean\n  content: OnboardingFormEmpty!\n}\n\ntype SetStatementEntryIntegrationFieldPayload {\n  clientMutationId: String!\n  lens: StatementEntryLens\n}\n\n\"\"\"View data for rewards page threshold bonuses\"\"\"\ntype IncentivePlacementViewDataRewardsPageThreshold {\n  \"\"\"Bonus if achieved (cents)\"\"\"\n  bonus: Int!\n  \"\"\"Description of bonus (potentially to put in modal)\"\"\"\n  description: String!\n  \"\"\"Time when the user was paid the points, null if they haven't been paid\"\"\"\n  payedOutAt: Time\n  \"\"\"Placement\"\"\"\n  placement: IncentivePlacement!\n  \"\"\"Progress (cents) i.e $500 in $500/$1000\"\"\"\n  progress: Int!\n  \"\"\"Short description (quick summary)\"\"\"\n  shortDescription: String!\n  \"\"\"Status of the bonus\"\"\"\n  status: IncentivePlacementViewDataStatus\n  \"\"\"Threshold (cents) i.e $1000 in $500/$1000\"\"\"\n  threshold: Int!\n  \"\"\"Title\"\"\"\n  title: String!\n}\n\ntype Role implements Node {\n  description: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  name: String!\n  rules: [RoleRule]\n}\n\n\"\"\"Object defining brex-originated ach debit limits\"\"\"\ntype AchDebitLimits {\n  \"\"\"The length of the payout delay in business days for ach debits\"\"\"\n  achDebitPayoutDelay: Int!\n  \"\"\"The remaining limit available for making ach debits today\"\"\"\n  achRemainingLimitToday: Int!\n  \"\"\"The remaining limit available for making ach debits tomorrow\"\"\"\n  achRemainingLimitTomorrow: Int!\n  \"\"\"The total limit definition for brex-originated ach debits\"\"\"\n  achTotalLimitUsdCents: Int!\n  \"\"\"The next business day, inclusive of today. ex if today=Friday, return Friday's date. if today=Saturday, return Monday's date\"\"\"\n  firstAvailableBusinessDay: Time!\n  \"\"\"The second next business day, inclusive of today. ex if today=Monday, return Tuesdays's date. if today=Friday, return Monday's date\"\"\"\n  secondAvailableBusinessDay: Time!\n}\n\n\"\"\"Represents a single aggregation in a time range for transactions\"\"\"\ntype InsightsAggregateTransaction {\n  \"\"\"Cash balance at the end_at date\"\"\"\n  balanceUsdCents: Long!\n  \"\"\"The cash the business is burning within the time period\"\"\"\n  burnRate: Long!\n  \"\"\"End timestamp for aggregation value\"\"\"\n  endAt: Time!\n  \"\"\"Aggregate money in value in usd cents\"\"\"\n  moneyInUsdCents: Long!\n  \"\"\"Aggregate money out value in usd cents\"\"\"\n  moneyOutUsdCents: Long!\n  \"\"\"Start timestamp for aggregation value\"\"\"\n  startAt: Time!\n}\n\ntype NotificationSubscriptionEdge {\n  cursor: String\n  node: NotificationSubscription\n}\n\nunion RewardsTriggerInstanceState = RewardsTriggerInstanceStateCashActivationCardSpendBonus | RewardsTriggerInstanceStateEmpty | RewardsTriggerInstanceStateReferredAmountSpent\n\nenum DepositsAccountsDisplayColor {\n  GREEN_BASELINE\n  INVALID\n  JAM\n  NAVY_MID\n  OCEAN\n  ORANGE_BASELINE\n  PURPLE_BASELINE\n  ROYAL\n  YELLOW_BASELINE\n}\n\ntype CheckReceivingMethod {\n  address: Address\n}\n\n\"\"\"An account representing activity corresponding to a set of loan terms\"\"\"\ntype JournalAccount implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\ninput CompletePendingRecordApprovalInput {\n  clientMutationId: String!\n  decision: PendingRecordApprovalDecision!\n  decisionNotes: String\n  decisionReason: PendingRecordApprovalDecisionReason\n  paymentId: ID!\n}\n\ntype MarketingRewindVideo {\n  asset: Asset\n  user: User\n  watched: Boolean!\n  year: MarketingRewindYear!\n}\n\n\"\"\"Customer imported from Quickbooks\"\"\"\ntype QuickbooksCustomer {\n  \"\"\"Customer name from QuickBooks\"\"\"\n  name: String\n}\n\nenum PromotionsTheme {\n  DARK\n  LIGHT\n}\n\nenum ReturnReason {\n  ACCOUNT_NOT_FOUND\n  CORPORATE_CUSTOMER_ADVISES_NOT_AUTHORIZED\n  CREDIT_ENTRY_REFUSED_BY_RECEIVER\n  INCORRECTLY_CODED_OUTBOUND_INTERNATIONAL_PAYMENT\n  INSUFFICIENT_FUNDS\n  UNKNOWN\n}\n\n\"\"\"Schema for external integration fields\"\"\"\ntype ExternalIntegrationField implements Node {\n  deletedAt: Time\n  \"\"\"Key used in the ERP for custom fields\"\"\"\n  externalKey: String\n  \"\"\"Extra metadata specified for custom fields, i.e. { field_type: 'string' }\"\"\"\n  externalMetadata: Json\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  integrationId: ID!\n  isInactive: Boolean\n  \"\"\"Human-readable name used for custom fields, i.e. Colour, City\"\"\"\n  name: String\n  type: IntegrationFieldType!\n}\n\nenum PaymentApprovalResult {\n  ALREADY_PROCESSED\n  INVALID\n  SUCCESSFULLY_UPDATED\n}\n\ntype TerminateCardPayload {\n  clientMutationId: String!\n}\n\nunion DepositsTransactionDetails = AchDetails | AchReturnDetails | BookTransferDetails | BrexOperationalTransferDetails | BrexOriginatedChequeDetails | CardCollectionDetails | DepositsAdminBalanceAdjustmentDetails | DividendDetails | ExternallyOriginatedChequeDetails | FboTransferDetails | InterestDetails | IntraCustomerAccountBookTransferDetails | PaymentDetails | ReceivablesOffersAdvanceDetails | ReceivablesOffersRepaymentDetails | RewardsRedemptionDetails | WireDetails\n\ninput CreatePaymentEarlyAuthBalanceDecreaseCommitmentInput {\n  clientMutationId: String!\n}\n\ntype CashRecurringScheduleMonthlyByWeek {\n  \"\"\"Number of months between successive transactions\"\"\"\n  cadence: Int!\n  \"\"\"Day of the week to schedule transactions\"\"\"\n  dayOfWeek: CashTransactionBusinessDay!\n  \"\"\"Week of the month to schedule transactions\"\"\"\n  weekOfMonth: Int!\n}\n\ntype DisputeTransactionEdge {\n  cursor: String\n  node: DisputeTransaction\n}\n\ntype RemoveFinancialSourcePayload {\n  clientMutationId: String!\n  financialSources(after: String, before: String, first: Int, last: Int): FinancialSourceConnection\n}\n\ntype RedeemStatementEntryRefundPayload {\n  account: Account!\n  clientMutationId: String!\n  refundedStatementEntry: StatementEntry!\n}\n\ntype MostRecentTransactionsTile implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Statement Entries\"\"\"\n  statementEntries: [StatementEntry!]!\n}\n\ntype BillingPaymentIntentEdge {\n  cursor: String\n  node: BillingPaymentIntent\n}\n\ntype PaymentApproval implements Node {\n  decision: PaymentApprovalDecision!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  paymentApprovers: [PaymentApprover]\n  pendingRecordId: ID!\n  updatedAt: Time\n}\n\ntype MonthlyUserLimitInfo {\n  activeAmount: Int\n  normalAmount: Int\n  override: MonthlyUserLimitOverride\n}\n\ntype DocumentOcrParsedDetails implements Node {\n  \"\"\"The EIN extracted from the document. Not present for all documents.\"\"\"\n  ein: DocumentOcrParsedDetailsDetail\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The Name extracted from the document. Not present for all documents.\"\"\"\n  name: DocumentOcrParsedDetailsDetail\n}\n\ninput EnableIntegrationInput {\n  clientMutationId: String!\n  \"\"\"id is integration id\"\"\"\n  id: ID!\n}\n\n\"\"\"Auto initiated by a Brex system\"\"\"\ntype AutoInitiated {\n  \"\"\"The originator id of the auto initiated payment\"\"\"\n  originatorId: String\n  \"\"\"The originator type of the auto initiated payment\"\"\"\n  originatorType: String!\n}\n\ninput StartResetUserInput {\n  clientMutationId: String!\n  user: StartResetUserUserInput!\n}\n\ntype FundingSource implements Node {\n  data: FundingSourceData\n  disabledOnTimestamp: Time\n  \"\"\"Load financial account when provenance of funding source. Null for other provenance types.\"\"\"\n  financialAccount: FinancialAccount\n  \"\"\"Contains relevant information determining the health of a funding source (errors, warnings, etc.)\"\"\"\n  health: FundingSourceHealth!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  isBrexCash: Boolean\n  \"\"\"Whether this funding source is disabled by servicing team, meaning we can no longer collect from here\"\"\"\n  isManuallyDisabledByServicing: Boolean!\n  priority: FundingSourcePriority\n  provenance: FundingSourceProvenance\n  provenanceId: String\n  type: String\n}\n\n\"\"\"The customer-indicated mapping of integration to financial account where that integration's payouts are being deposited\"\"\"\ntype ReceivablesOffersIntegrationFinancialAccountMapping {\n  \"\"\"The id of the financial_account\"\"\"\n  financialAccountId: String!\n  \"\"\"The id of the integration\"\"\"\n  integrationCredentialId: String!\n}\n\n\"\"\"Financial Asset wrapper\"\"\"\ntype FinancialAsset {\n  \"\"\"The instrument code (usd, etc.). Currently, only usd is supported.\"\"\"\n  instrumentCode: FinancialInstrumentCode!\n  \"\"\"The amount in cents\"\"\"\n  quantityCents: Int!\n}\n\nscalar SafeString\n\ninput DismissCardFraudAlertsInput {\n  clientMutationId: String!\n  transactionIds: [ID!]!\n}\n\n\"\"\"\nA generic input type to create a connection\nAdd fields to represent specific vendors and the connection parameters they require\nWe only represent merge's connection input type for now\n\"\"\"\ninput VendorConnectionCreationInput {\n  \"\"\"A merge connection is a type of vendor connection we can make. This field represents the input we need for it.\"\"\"\n  mergeHrisConnectionInput: MergeHrisConnectionInput\n}\n\n\"\"\"muting config for an alert type\"\"\"\ninput AlertTypeMutingConfigurationsInput {\n  alertType: SpendAlertType!\n  mutingConfigurations: [MutingConfigurationInput!]!\n}\n\ntype CreatePaymentInstrumentPayload {\n  clientMutationId: String!\n  paymentInstrument: PaymentInstrument!\n}\n\ntype ReimbursementItemEdge {\n  cursor: String\n  node: ReimbursementItem\n}\n\ninput DomesticWirePaymentInstrumentFindInput {\n  accountNumber: String!\n  routingNumber: String!\n}\n\ntype PaymentHistoryTile implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Whether or not spend has been suspended due to servicing, likely from a failed payment\"\"\"\n  isSpendSuspended: Boolean!\n}\n\ntype CashTransactionDividendDetails {\n  \"\"\"Financial instrument the dividend was for (e.g. MMF ticker)\"\"\"\n  financialInstrument: FinancialInstrument\n  \"\"\"When the dividend payout was initiated, which could differ from the settled_at time\"\"\"\n  paidOnDate: Date\n}\n\nenum SpendAggregateGroupKey {\n  CARD_ID\n  DAY\n  DEPARTMENT_ID\n  INVALID\n  MERCHANT_CATEGORY_ID\n  MERCHANT_ID\n  USER_CATEGORY_ID\n  USER_ID\n}\n\ntype CashTransactionDepositedChequeDetails {\n  \"\"\"A temporary URL pointing to an image of the back of the cheque\"\"\"\n  backImageUrl: String\n  \"\"\"Memo found in the physical cheque\"\"\"\n  chequeMemo: String\n  \"\"\"A temporary URL pointing to an image of the front of the cheque\"\"\"\n  frontImageUrl: String\n  \"\"\"Sender name found in the physical cheque\"\"\"\n  senderName: String\n}\n\ntype GeneratePlaidLinkTokenPayload {\n  clientMutationId: String!\n  linkToken: String!\n}\n\ntype CreateExpensesFlagEventPayload {\n  clientMutationId: String!\n  expensesFlag: ExpensesFlag\n}\n\ntype EditDepositsPaymentMemoPayload {\n  clientMutationId: String!\n  payment: DepositsPayment!\n}\n\n\"\"\"Contains information for the each step to be completed for the checkbox reward\"\"\"\ntype RewardsPageCheckboxStep {\n  \"\"\"short description for the step\"\"\"\n  description: String!\n  \"\"\"whether the customer has completed this step or not\"\"\"\n  status: IncentivePlacementRewardsPageCheckboxViewDataStepStatus!\n}\n\ntype BatchCreateContactsPayload {\n  clientMutationId: String!\n  createdContacts: [PaymentContact!]\n}\n\ninput GenerateDepositsTransactionConfirmationDownloadUrlInput {\n  clientMutationId: String!\n  \"\"\"transaction id\"\"\"\n  depositsTransactionId: ID!\n  \"\"\"Json formatted string with transaction detail \"\"\"\n  transactionDetailString: String!\n}\n\ntype ConnectTellerInstitutionPayload {\n  clientMutationId: String!\n  result: FinancialSource!\n}\n\ntype CashRecurringScheduleWeekly {\n  \"\"\"Number of weeks between successive transactions\"\"\"\n  cadence: Int!\n  \"\"\"Day of the week to schedule transactions\"\"\"\n  dayOfWeek: CashTransactionBusinessDay!\n}\n\ninput MonthlySchedule {\n  dayOfMonth: Int\n  dayOfWeek: BusinessDays\n  nMonths: Int!\n  weekOfMonth: Int\n}\n\ntype CashTransactionRewardsRedemptionDetails {\n  \"\"\"Reward points redeemed for this transaction\"\"\"\n  pointsRedeemed: Int!\n}\n\ninput ProcessDocumentInput {\n  assetId: String\n  requestId: String\n}\n\nenum CashTransactionBusinessDay {\n  FRIDAY\n  INVALID\n  MONDAY\n  THURSDAY\n  TUESDAY\n  WEDNESDAY\n}\n\ninput UpdateCardPinInput {\n  clientMutationId: String!\n  id: ID!\n  pin: String!\n}\n\ninput RedeemStatementEntryRefundInput {\n  clientMutationId: String!\n  redemptionOfferId: String!\n  statementEntryId: ID!\n}\n\ntype MonthlyClosingStrategy {\n  dayOfMonth: Int\n}\n\ninput StartDepositsOffboardingInput {\n  clientMutationId: String!\n  closureReason: DepositsAccountClosureReason!\n  depositsAccountId: ID!\n}\n\ntype GenerateDepositsStatementDocumentDownloadUrlPayload {\n  clientMutationId: String!\n  depositsStatementPdfDownloadUrl: String\n}\n\ninput ApprovalsRoutingRuleManagerInput {\n  \"\"\"A list of fallback approvers when the request initiator does not have a manager\"\"\"\n  fallbackApproverUserIds: [String!]!\n}\n\ninput CancelReimbursementInput {\n  clientMutationId: String!\n  reimbursementItemId: ID!\n}\n\ntype CreatePaymentPayload {\n  clientMutationId: String!\n  payment: DepositsPayment!\n}\n\ntype DeleteHrisConnectionPayload {\n  clientMutationId: String!\n}\n\ninput CreateAccountInput {\n  clientMutationId: String!\n  dateEstablished: Time!\n  dbaName: String!\n  incorporationState: String!\n  incorporationType: AccountIncorporationTypeInput!\n  legalName: String!\n  officeAddress: AddressInput!\n  principalUser: AccountPrincipalUserInput\n  taxpayerNumber: String!\n}\n\ntype SpendAggregateTimeSeriesConnection {\n  edges: [SpendAggregateTimeSeriesEdge]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\n\"\"\"The approval step details\"\"\"\ntype ApprovalsStep {\n  \"\"\"A list of allowed approvers for this step\"\"\"\n  approvers: [ApprovalsUser]\n}\n\ntype RootQueryType {\n  \"\"\"Internal query supporting federation. Do not use in client calls.\"\"\"\n  cardEntity(id: ID): Card!\n  department(id: ID!): Department\n  financialDocuments(after: String, before: String, first: Int, last: Int): FinancialBankStatementDocumentConnection\n  recurringRulesAndFutureDates(endsOn: Date, monthlySchedule: MonthlySchedule, paymentRail: PaymentRail!, sendOn: Date!, totalNumberOfPayments: Int, weeklySchedule: WeeklySchedule): RecurringRulesAndFutureDates\n  searchUsers(after: String, before: String, canAccessCorporateCards: Boolean, departmentId: ID, displayRole: UserRoleTypeInput, first: Int, last: Int, locationId: ID, managerId: ID, preapprovedCards: Boolean, searchText: String, status: String): UserConnection\n  positivePayAccountSetting(id: ID!): PositivePayAccountSetting\n  validateLoyaltyProgramMembershipId(loyaltyProgramId: ID!, membershipId: String!): Boolean\n  \"\"\"Underwriting model for this account\"\"\"\n  underwritingModelClassName: UnderwritingModelName!\n  \"\"\"internal entity sync errors\"\"\"\n  internalEntitySyncErrors(after: String, entityType: String!, first: Int, integrationId: ID!): InternalEntitySyncErrorConnection\n  fraudAlerts(after: String, before: String, customerUserId: ID!, first: Int, last: Int): FraudAlertConnection\n  verifyAddress(address1: String!, address2: String!, city: String!, country: String, state: String!, zip: String!): VerifyAddressResponse\n  \"\"\"details about manager setup\"\"\"\n  managerSetupSummary: ManagerSetupSummary\n  currentCardStatementPolicy: CardStatementPolicy\n  transaction(id: ID!): Transaction\n  pendingRecordApproval(approvalToken: String!, approverUserId: String!): PendingRecordApprovalResponse\n  merchantCategory(id: ID!): MerchantCategory\n  billSyncErrors(after: String, first: Int, integrationId: ID!): BillSyncErrorConnection\n  \"\"\"Fetch all category information.\"\"\"\n  cardPaymentForwarderCategories: [CardPaymentForwarderCategory]\n  \"\"\"Gets a dispute\"\"\"\n  dispute(id: ID!): Dispute\n  credentials(after: String, before: String, first: Int, last: Int, vendor: [String!]): CredentialConnection\n  rule(id: ID!): Rule\n  supportedRoles: [String]\n  userCategories(after: String, before: String, first: Int, last: Int): UserCategoryConnection\n  depositsPayment(id: ID!): DepositsPayment\n  \"\"\"Get incentive placements to display to user.\"\"\"\n  placements(after: String, before: String, first: Int, last: Int, supportedPlacements: [IncentivePlacementType!]!): IncentivePlacementViewDataConnection\n  \"\"\"Fetch all linked payroll providers for account\"\"\"\n  payrollProviders: [PayrollProviderV2!]!\n  bill(id: ID!): Bill\n  rewardsBonusTriggers: [RewardsTrigger]\n  \"\"\"Fetch details of a specified payment.\"\"\"\n  cardPaymentForwarderPayment(paymentId: ID): CardPaymentForwarderPaymentObject\n  anomalies(actions: [CardTransactionInsightEventAction], after: String, before: String, customerUserIds: [ID], departmentIds: [ID], first: Int, fromDate: Time, insightIds: [ID], insightTypes: [CardTransactionsInsightType], last: Int, merchantIds: [ID], searchText: String, sortColumn: SortColumn, sortDirection: SortDirection, status: InsightStatus, toDate: Time): CardTransactionInsightConnection\n  rewardsCampaigns(after: String, before: String, first: Int, last: Int): RewardsCampaignConnection\n  previewIntegrationRule(after: String, before: String, first: Int, integrationId: ID!, last: Int, ruleBody: Json!, ruleId: ID): StatementEntryLensConnection\n  \"\"\"Query for Time Series\"\"\"\n  spendAggregateTimeSeries(after: String, filters: SpendAggregateTimeSeriesFilters!, first: Int, sortOrder: SpendAggregateTimeSeriesSortOrder): SpendAggregateTimeSeriesConnection\n  \"\"\"Internal\"\"\"\n  debugException(trigger: Boolean): Boolean\n  getUserCategoryForIntegrationMerchantCategory(integrationId: ID, merchantCategoryId: ID): UserCategory\n  users(after: String, before: String, departmentId: ID, first: Int, last: Int, locationId: ID, managerId: ID, role: UserRoleTypeInput, searchText: String, status: String): UserConnection\n  collectionIntention(id: ID!): CollectionIntention\n  reimbursementItemEvents(after: String, first: Int, reimbursementItemId: ID!): ReimbursementItemEventConnection\n  \"\"\"Fetch all recipient information for account.\"\"\"\n  cardPaymentForwarderRecipients: [CardPaymentForwarderRecipient]\n  fraudAlert(id: ID!): FraudAlert\n  \"\"\"Loyalty programs for miles transfer\"\"\"\n  loyaltyPrograms(after: String, before: String, first: Int, last: Int): LoyaltyProgramConnection\n  expensesSettings(after: String, before: String, first: Int, last: Int): ExpensesSettingConnection\n  \"\"\"All credit marketing offers for a users account\"\"\"\n  creditMarketingOffers(after: String, before: String, first: Int, last: Int): CreditMarketingOfferConnection\n  spendAggregates(after: String, filters: SpendAggregateFilters!, first: Int, groupKeys: [SpendAggregateGroupKey!], sortKey: SpendAggregateSortKey, sortOrder: SpendAggregateSortOrder): SpendAggregateConnection\n  \"\"\"Return devportal related information\"\"\"\n  devAccessAgreementStatus: DevAccessAgreement\n  availableProductOffers: [ProductOffer!]!\n  \"\"\"Given an FSP, lists all client accounts connected to it\"\"\"\n  getClientAcctsForFsp(accountId: String!): [FspClientAccount]\n  paymentApproval(approvalToken: String!): PaymentApprovalResponse\n  \"\"\"Return a list of OAuth scopes the customer can request\"\"\"\n  scopes: [ScopeWrapper]\n  \"\"\"Rewind campaign video. Customer not eligible if null\"\"\"\n  marketingRewindVideo(year: MarketingRewindYear!): MarketingRewindVideo\n  \"\"\"Return a list of tokens for the current user's account\"\"\"\n  developerApiTokens: [DeveloperApiToken]\n  \"\"\"Given a client account, list all FSPs connected to it\"\"\"\n  getFspsForClientAcct(accountId: String!): [String]\n  searchIndustries(after: String, first: Int, keywords: String!): IndustrySearchResultEntryConnection\n  \"\"\"Gets a timeline with the estimated transaction time for a payment rail\"\"\"\n  cashTransactionTimelineEstimates(origin: CashTransactionOrigin!, paymentMethod: CashTransactionPaymentMethod!, scheduledSendAt: Time): PaymentRailTimeline\n  reimbursementItems(\n    after: String\n    \"\"\"Optional field to query reimbursement_items by expense_ids\"\"\"\n    expenseIds: [ID!]\n    first: Int\n    reimbursementItemIds: [ID!]\n    \"\"\"Optional field to change scope from user to account\"\"\"\n    scopeToAccount: Boolean = false\n    states: [ReimbursementItemState!]\n  ): ReimbursementItemConnection\n  connectHasEncounteredFailure(vendor: FinancialsVendor!): Boolean!\n  approvalsSetting: ApprovalsSetting\n  \"\"\"Get status and result of an export attempt\"\"\"\n  getExportAttemptState(input: GetExportAttemptStateInput!): GetExportAttemptStatePayload\n  referralRecords: [ReferralRecord]\n  approvalsPolicies(productTypes: [ProductType]): [ApprovalsPolicy]\n  \"\"\"Internal query supporting federation. Do not use in client calls.\"\"\"\n  departmentEntity(id: ID): Department!\n  \"\"\"Given an FSP, lists all of its external bookkeepers\"\"\"\n  getBookkeepersForFsp(accountId: String!): [String]\n  financialStatementRequestedAccounts(after: String, before: String, first: Int, last: Int): FinancialStatementRequestedAccountConnection\n  integrationEntities(after: String, before: String, entityType: String, fieldId: String, filterDeleted: Boolean, first: Int, last: Int, query: String): ExternalIntegrationEntityConnection\n  accountConnectedApiClients: [ApiClient]\n  referrals(after: String, before: String, first: Int, last: Int): ReferralConnection\n  approvalsRequests(after: String, assigneeCustomerUserId: ID, before: String, customerUserId: ID, excludeAssigneeCustomerUserId: ID, first: Int, fromDate: Time, includeDirectReports: IncludeDirectReportsOption, last: Int, searchQuery: String, status: ApprovalsRequestStatus, statuses: [ApprovalsRequestStatus], toDate: Time, type: ApprovalsRequestType, types: [ApprovalsRequestType]): ApprovalsRequestConnection\n  isIntegrationReadyToSync(endDate: Time, id: ID!, isPrimitive: Boolean, startDate: Time, statementEntryTypes: [String]): SyncReadyStatus\n  financialAccountsWithFunding(after: String, before: String, first: Int, last: Int): FinancialAccountConnection\n  statementEntries(after: String, before: String, first: Int, last: Int, onlyUnexported: Boolean): StatementEntryConnection\n  departments(after: String, before: String, first: Int, last: Int): DepartmentConnection\n  \"\"\"Get a link token from HRIS aggregator vendor and return back to the client\"\"\"\n  getLinkToken(\n    \"\"\"The vendor we are retrieving the link token from\"\"\"\n    hrisAggregatorVendor: HrisAggregatorVendor!\n  ): HrisLinkToken\n  \"\"\"Find the Fed ACH Participant \"\"\"\n  fedachParticipant(routingNumber: String!): FedachParticipant\n  unexportedStatementEntries(activeFacetType: IntegrationRulesFilterFacetType, after: String, before: String, endDate: Time, first: Int, integrationId: ID, last: Int, ruleIds: [ID], startDate: Time, statementEntryTypes: [String]): StatementEntryConnection\n  pointsBalanceAsCashRedemptionAmount: Int\n  collectionAttempt(id: ID!): CollectionAttempt\n  node(\n    \"\"\"The id of an object.\"\"\"\n    id: ID!\n  ): Node\n  \"\"\"These are institutions for which we should fallback to using Finicity\"\"\"\n  finicityEnabledInstitutions: [FinancialInstitution!]!\n  \"\"\"Miles transfers\"\"\"\n  milesTransfers(after: String, before: String, first: Int, last: Int): MilesTransferConnection\n  \"\"\"Allows for the tracking of sessions during soft signup\"\"\"\n  anonymousSession: ApplicationSession\n  invoicingAccount: InvoicingAccount\n  integrationRule(id: ID!): IntegrationRule\n  \"\"\"List all registered FSP accounts\"\"\"\n  fspAccounts: [FspAccount]\n  suggest(scopeToUser: Boolean, text: String!): [Suggestion]\n  customerAttributes: CustomerAttributes\n  \"\"\"Get point history entries to display to user.\"\"\"\n  rewardsPointHistoryEntries(after: String, before: String, descriptionTypes: [RewardsPointsHistoryEntryDescriptionType], endAt: Time, first: Int, last: Int, orderField: RewardsHistoryEntryOrderField, orderType: RewardsHistoryEntryOrderType, startAt: Time, type: RewardsPointsHistoryEntryType): RewardsPointsHistoryEntryConnection\n  marketoLeadForm(marketoFormId: SafeString!): MarketoLeadForm\n  \"\"\"Rewards bonuses\"\"\"\n  rewardsBonuses(after: String, before: String, first: Int, last: Int): RewardsBonusConnection\n  search(aggregates: Json, cursor: String, filters: Json!, orderBy: [OrderByInput], pageSize: Int, scopeToUser: Boolean, type: String!): SearchResult\n  integration(id: ID!): Integration\n  internationalWireConfig: InternationalWireConfig\n  \"\"\"Internal query supporting federation. Do not use in client calls.\"\"\"\n  locationEntity(id: ID): Location!\n  \"\"\"List of the customer's top categories.\"\"\"\n  rewardsCurrentTopCategories(after: String, before: String, first: Int, last: Int): RewardsTopCategoryConnection\n  accountConnectedApiClient: ApiClient\n  validateActivation(token: String!): ValidateActivation\n  rules(after: String, before: String, first: Int, last: Int): RuleConnection\n  \"\"\"Reward offered to referred user for new referrals by logged-in referrer.\"\"\"\n  currentReferredReward: ReferralReward\n  bankAggregatorDecision: BankAggregatorDecision\n  \"\"\"UW Engine parameters for this account\"\"\"\n  currentUnderwritingParameters: UnderwritingParameters!\n  unexportedStatementEntryFilterFacets(endDate: Time, integrationId: ID, startDate: Time): [IntegrationRulesFilterFacet]\n  anomalyMutingPolicies(after: String, before: String, first: Int, last: Int): CardTransactionInsightMutingPolicyConnection\n  \"\"\"Returns true if the user is an external bookkeeper of the FSP, false otherwise\"\"\"\n  isExternalBookkeeper(userId: String!): Boolean\n  insights: Insights!\n  rewardsMarketplaceUpsell: RewardsMarketplaceUpsell\n  financialInstitutions(after: String, before: String, first: Int, last: Int, status: FinancialInstitutionStatus): FinancialInstitutionConnection\n  \"\"\"The documents for financials data (mainly used for bank statement collection)\"\"\"\n  financialBankStatements(after: String, before: String, first: Int, last: Int): FinancialBankStatementDocumentConnection\n  accountClosureStatus: ClosureStatus\n  \"\"\"Query to validate contact inputs\"\"\"\n  validatedVendorContactInputs(\n    after: String\n    before: String\n    first: Int\n    last: Int\n    \"\"\"Contact inputs to be validated\"\"\"\n    vendorContactInputs: [VendorContactInput!]!\n  ): ValidatedVendorContactInputConnection\n  \"\"\"The information requests for financials data (mainly used for bank statement collection)\"\"\"\n  financialSources(after: String, before: String, first: Int, last: Int): FinancialSourceConnection\n  \"\"\"Internal query supporting federation. Do not use in client calls.\"\"\"\n  reimbursementItemEntity(id: ID): ReimbursementItem!\n  unexportedStatementEntryCount(endDate: Time, integrationId: ID, startDate: Time, statementEntryTypes: [String]): UnexportedStatementEntryCount\n  \"\"\"Returns true if an account is a financial service provider (i.e. FSP), false otherwise\"\"\"\n  isFsp(accountId: String!): Boolean\n  authzRules: [RoleRule]\n  previewTriggerComparison(toCardAccountType: CardAccountType!): [RewardsTriggerComparison!]!\n  findContact(identifier: FindContactIdentifierInputUnion, name: String): PaymentContact\n  \"\"\"\n  Fetch all associated payments for account.\n  TODO: support pagination.\n  \"\"\"\n  cardPaymentForwarderListPayments(statusFilter: [CardPaymentForwarderPaymentStatus]): [CardPaymentForwarderPaymentObject]\n  merchantCategories(after: String, before: String, first: Int, last: Int): MerchantCategoryConnection\n  \"\"\"Reward offered to referrer for new referrals by logged-in referrer.\"\"\"\n  currentReferrerReward: ReferralReward\n  location(id: ID!): Location\n  credential(id: ID!): Credential\n  cards(after: String, before: String, customerUserId: [ID!], departmentIds: [String!], first: Int, hasActiveLimitIncrease: Boolean, instrumentType: InstrumentType, isPreapproved: Boolean, last: Int, searchQuery: String, sortBy: CardSortColumn, status: [String!], statusViews: [StatusView!]): CardConnection\n  referralsSummary(isAdmin: Boolean, isExperimental: Boolean): ReferralsSummary\n  expensesItems(after: String, before: String, externalEntryId: [ID], first: Int, last: Int): ExpensesItemConnection\n  countries(filters: CountriesListFilters): [Country!]!\n  user(id: ID): User\n  \"\"\"Key factors that impact the credit limit on an account\"\"\"\n  keyCreditLimitFactors: [UnderwritingLimitFactor!]!\n  receivablesOffersAccount: ReceivablesOffersAccount\n  \"\"\"Query for periodic review by customer account ID\"\"\"\n  periodicReview: PeriodicReview\n  \"\"\"Get single HRIS connection based on id\"\"\"\n  hrisConnection(id: ID!): HrisConnection\n  rewardsRedemptionPrograms(after: String, before: String, first: Int, last: Int): RewardsRedemptionProgramConnection\n  userCategory(id: ID!): UserCategory\n  \"\"\"Internal query supporting federation. Do not use in client calls.\"\"\"\n  accountEntity(id: ID): Account!\n  onboardingApplications(after: String, applicantCustomerUserId: ID, before: String, first: Int, last: Int, type: OnboardingBlueprintType): OnboardingApplicationConnection\n  \"\"\"Internal query supporting federation. Do not use in client calls.\"\"\"\n  userEntity(id: ID): User!\n  bills(\n    after: String\n    before: String\n    dueAt: Time\n    endTime: Time\n    first: Int\n    \"\"\"If provided, only bills with these invoice processing statuses will be returned.\"\"\"\n    invoiceProcessingStatuses: [BillInvoiceProcessingStatus]\n    isDueSoon: Boolean\n    isRecurring: Boolean\n    last: Int\n    searchQuery: String\n    sortKey: BillSortKey\n    sortOrder: BillSortOrder\n    startTime: Time\n    \"\"\"If provided, only bills with these bill statuses will be returned.\"\"\"\n    statuses: [BillStatus]\n  ): BillConnection\n  premiumSetting: PremiumSetting\n  transactedMerchants(limit: Int, query: String): [Merchant]\n  locations(after: String, before: String, first: Int, last: Int): LocationConnection\n  \"\"\"Query for a documentOcr entity by ID\"\"\"\n  documentOcr(\n    \"\"\"The ID of the document OCR entity\"\"\"\n    id: ID!\n  ): DocumentOcr\n  currentCardStatementPeriod: CardStatementPeriod\n  cashTransaction(id: ID!): CashTransaction\n  getRfi(input: GetRfiInput!): Rfi\n  internationalBankInformation(iban: String, swiftCode: String): InternationalBankInformation\n  asset(id: ID): Asset\n  \"\"\"Internal query supporting federation. Do not use in client calls.\"\"\"\n  merchantCategoryEntity(id: ID): MerchantCategory!\n  \"\"\"Whether the user should be in the product onboarding flow\"\"\"\n  mustSeeProductOnboarding: Boolean!\n  \"\"\"Session object\"\"\"\n  applicationSession: ApplicationSession\n  collectionAttempts(after: String, before: String, first: Int, last: Int): CollectionAttemptConnection\n  approvalsUnsafeFlag(flagName: String!, keyType: ApprovalsUnsafeFlagKeyType!): ApprovalsUnsafeFlag\n  contact(id: ID!): PaymentContact\n  \"\"\"Internal query supporting federation. Do not use in client calls.\"\"\"\n  expenseEntityExtension(id: ID!): Expense!\n  statementEntry(id: ID!): StatementEntry\n  \"\"\"Customer account's current servicing policy\"\"\"\n  currentServicingPolicy: ServicingPolicy\n  account: Account\n  receivablesOffersPayout(id: ID!): ReceivablesOffersPayout\n  \"\"\"get spend alerts config for the current account\"\"\"\n  spendAlertsConfigurationDetails: SpendAlertsConfigurationDetails!\n  plaidInstitutionFallbacks: [PlaidInstitutionMapping]!\n  cardOverviewPage: CardOverviewPage\n  onboardingApplication(id: ID!): OnboardingApplication\n  \"\"\"Get matching rules filter facets for unexported expenses\"\"\"\n  unexportedExpenseFilterFacets(endDate: Time, integrationId: ID, startDate: Time): [MatchingRulesFilterFacet]\n  \"\"\"Gets a timeline with the estimated transaction time\"\"\"\n  cashTransactionTimelineEstimate(location: AccountLocation, origin: CashTransactionOrigin!, paymentMethod: CashTransactionPaymentMethod!, paymentRail: PaymentRail!, scheduledSendAt: Time): CashTransactionTimeline\n  merchant(id: ID!): Merchant\n  expensesFlags(after: String, before: String, first: Int, last: Int, status: String): ExpensesFlagConnection\n  financialInstitution(id: ID!): FinancialInstitution\n  \"\"\"Institutions enabled for use on Finicity\"\"\"\n  financialSource(\n    \"\"\"Financial source by id\"\"\"\n    id: ID!\n  ): FinancialSource\n  financialInformationRequests(after: String, before: String, first: Int, last: Int): FinancialInformationRequestConnection\n  \"\"\"List all connections for a customer account id given some filter criterion\"\"\"\n  hrisConnections(\n    \"\"\"HRIS vendor filter\"\"\"\n    hrisAggregatorVendor: [HrisAggregatorVendor]\n    \"\"\"HRIS system filter\"\"\"\n    hrisSystem: [HrisSystem]\n    \"\"\"Status filter\"\"\"\n    statuses: [HrisStatus]\n  ): [HrisConnection!]\n  \"\"\"Internal\"\"\"\n  debugExit(trigger: Boolean): Boolean\n  invoicingInvoice(invoiceId: ID!): InvoicingInvoice\n  unexportedExpenseCount(endDate: Time, integrationId: ID, startDate: Time): UnexportedExpenseCount\n  earlyAccessFeatures: [EarlyAccessFeature]!\n  financialStatementAccounts(after: String, before: String, first: Int, last: Int): FinancialStatementAccountConnection\n  \"\"\"Internal query supporting federation. Do not use in client calls.\"\"\"\n  merchantEntity(id: ID): Merchant!\n  staleFinancialSources(after: String, before: String, first: Int, last: Int): FinancialSourceConnection\n  transactions(after: String, before: String, customerUserId: ID, first: Int, last: Int, status: String): TransactionConnection\n  limitPreview(cardAccountType: CardAccountType!): LimitPreview\n  integrationEntity(id: ID!): ExternalIntegrationEntity\n  approvalsReview(id: ID!): ApprovalsReview\n  erpFeeds(after: String, before: String, first: Int, last: Int): ErpFeedConnection\n  integrations(after: String, before: String, first: Int, last: Int, status: [String]): IntegrationConnection\n  countryAddressMetadata(alpha2: CountryAlpha2!): CountryAddressMetadata!\n  \"\"\"\n  Get the future transaction timelines for a recurring schedule\n  that has not been created yet.\n  \"\"\"\n  cashRecurringSchedule(\n    paymentRail: PaymentRail!\n    recurringSchedule: InputCashRecurringSchedule!\n    \"\"\"\n    The date on which the recurring schedule will start\n    If starts_at is set to NULL, we assume the schedule will start today\n    \"\"\"\n    startsAt: Time\n    timelineCount: Int\n  ): CashRecurringScheduleWithTimelines\n  \"\"\"Internal query supporting federation. Do not use in client calls.\"\"\"\n  disputeEntity(id: ID): Dispute!\n  findContactByPaymentInstrumentInfo(achPaymentInstrument: AchPaymentInstrumentFindInput, chequePaymentInstrument: ChequePaymentInstrumentFindInput, domesticWirePaymentInstrument: DomesticWirePaymentInstrumentFindInput, internationalWirePaymentInstrument: InternationalWirePaymentInstrumentFindInput): PaymentContact\n  receivablesOffersActiveOffers: [ReceivablesOffersOffer!]\n  navigation: Navigation\n  \"\"\"Get payment source mapping for the account\"\"\"\n  reimbursementPaymentSource: ReimbursementPaymentSource\n  approvalsReviews(after: String, before: String, customerUserId: ID, filterByAccount: Boolean, first: Int, fromDate: Time, last: Int, requestType: ApprovalsRequestType, searchQuery: String, statuses: [ApprovalsReviewStatus!], toDate: Time): ApprovalsReviewConnection\n  referralRecordsPaginated(pageSize: Int, pageToken: String): ReferralRecordsPaginated\n  fedwireParticipant(routingNumber: String!): FedwireParticipant\n  \"\"\"\n  Get the decision and the decision details of an approval for a given\n  transaction, given its identifier - either its id of approval token.\n  \"\"\"\n  cashTransactionApproval(approvalToken: String!): CashTransactionApprovalResponse\n  depositsTransaction(id: ID!): DepositsTransaction\n  promotions(count: Int, type: PromotionsType!): [PromotionsItem!]!\n  card(id: ID!, showPan: Boolean): Card\n  cashTransactionDepositsPayment(id: ID!): DepositsPayment\n  receivablesOffersOffersGroup(id: ID!): ReceivablesOffersOffersGroup\n  \"\"\"General information on the customer's top category bonus.\"\"\"\n  rewardsCurrentTopCategoryBonusInfo: RewardsTopCategoryBonusInfo\n  \"\"\"Fetch ssu prefill data for partner referrals\"\"\"\n  ssuPrefillData(referralIdentifier: String!): SsuPrefillData\n  cardStatements(after: String, first: Int, fromPeriod: Time, toPeriod: Time): CardStatementConnection\n  financialAccounts(after: String, before: String, excludeCustomerHidden: Boolean, first: Int, last: Int): FinancialAccountConnection\n  getBankingHolidays(endDate: Date, startDate: Date): BankingHolidays\n}\n\ninput UpdateDepartmentInput {\n  clientMutationId: String!\n  description: String\n  id: ID!\n  name: String!\n}\n\ninput ProcessInvoiceAndCreateBillInput {\n  assetId: ID!\n  clientMutationId: String!\n  uploadSessionId: String!\n}\n\ntype BillSyncError implements Node {\n  bill: Bill\n  errorMessage: String\n  errorType: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  idempotencyKey: String\n  insertedAt: Time\n  operation: String\n  rawResponse: Json\n  requestPayload: Json\n  status: SyncStatus!\n  updatedAt: Time\n}\n\ntype SearchResult {\n  aggregates: [AggregationResult]\n  cursor: String\n  hits: [Searchable]!\n  totalHits: Int!\n}\n\nenum FinancialInstitutionStatus {\n  DISABLED\n  ENABLED\n  INTERNAL\n  PENDING\n}\n\ninput CreateDeveloperApiTokenInput {\n  authorizationCode: String!\n  clientMutationId: String!\n  isLocalRedirect: Boolean\n  name: String!\n}\n\nenum BillSortKey {\n  CREATED_AT\n  SEND_AT\n  UPDATED_AT\n}\n\ntype FinancialInstitutionImageUrls {\n  icon: String\n  logo: String\n}\n\nenum FinancialInstrumentCode {\n  DOP\n  UYI\n  USD\n  XCD\n  SGD\n  EUR\n  NASDAQ_GGSXX\n  BYN\n  RWF\n  NASDAQ_GSBXX\n  SVC\n  AED\n  GIP\n  MDL\n  XXX\n  XPT\n  XPD\n  PKR\n  PGK\n  NPR\n  JPY\n  MXV\n  ILS\n  YER\n  SLL\n  TZS\n  NASDAQ_DGCXX\n  MWK\n  TND\n  HUF\n  KMF\n  ERN\n  BHD\n  AMD\n  PHP\n  NASDAQ_DGVXX\n  CHF\n  XTS\n  IQD\n  KZT\n  DZD\n  SBD\n  PYG\n  KYD\n  UAH\n  CVE\n  LSL\n  KRW\n  USN\n  OMR\n  CAD\n  NAD\n  BAM\n  XAG\n  UYU\n  KGS\n  AOA\n  AZN\n  GTQ\n  MGA\n  DKK\n  BOB\n  XAF\n  MZN\n  NASDAQ_GGDXX\n  GEL\n  TOP\n  CHW\n  COU\n  NOK\n  SRD\n  XPF\n  BIF\n  CRYPTO_USDC\n  GNF\n  HNL\n  TRY\n  SSP\n  BBD\n  VND\n  SEK\n  AWG\n  KWD\n  PAB\n  MXN\n  CUC\n  NZD\n  CLF\n  WST\n  XBB\n  TJS\n  CRYPTO_BTC\n  XUA\n  BWP\n  PEN\n  GYD\n  VES\n  CNY\n  SCR\n  CRYPTO_ETH\n  SAR\n  VUV\n  NASDAQ_DPGXX\n  ISK\n  BDT\n  TWD\n  NASDAQ_GGBXX\n  THB\n  XSU\n  BZD\n  HKD\n  BRL\n  CHE\n  INR\n  STN\n  LRD\n  JOD\n  UYW\n  LBP\n  SOS\n  LAK\n  JMD\n  MVR\n  XAU\n  UZS\n  AFN\n  BND\n  FJD\n  GBP\n  CUP\n  IRR\n  KPW\n  KHR\n  HTG\n  NASDAQ_DAGXX\n  MYR\n  XBC\n  CZK\n  MKD\n  BOV\n  COP\n  GMD\n  TTD\n  ZMW\n  LKR\n  BTN\n  CDF\n  XBD\n  UGX\n  NIO\n  QAR\n  MMK\n  ETB\n  MAD\n  FKP\n  ARS\n  BGN\n  AUD\n  MUR\n  XBA\n  CLP\n  TMT\n  MRU\n  DJF\n  EGP\n  LYD\n  PLN\n  ANG\n  XOF\n  XDR\n  SZL\n  BMD\n  GHS\n  SHP\n  SDG\n  MNT\n  BSD\n  RSD\n  SYP\n  RUB\n  ALL\n  RON\n  MOP\n  HRK\n  ZAR\n  NGN\n  ZWL\n  IDR\n  CRC\n  KES\n}\n\ntype RewardsTriggerComparison {\n  \"\"\"Accrual rate of the current trigger\"\"\"\n  currentAccrualRate: Float!\n  \"\"\"Description of the current trigger\"\"\"\n  description: String!\n  \"\"\"Accrual rate of the future trigger\"\"\"\n  futureAccrualRate: Float!\n  \"\"\"Name of the current trigger\"\"\"\n  name: String!\n}\n\n\"\"\"A cycle reoccurring every other week on a particular day of the week.\"\"\"\ntype BiweeklyCardStatementPolicyCycle {\n  \"\"\"The day of the week.\"\"\"\n  dayOfWeek: Int\n}\n\ntype CreateMilesTransferPayload {\n  clientMutationId: String!\n  milesTransfer: MilesTransfer\n}\n\nenum DepositsRecurringPaymentCancellationType {\n  PROCESSING_AND_RECURRING_PAYMENT\n  PROCESSING_PAYMENT\n  RECURRING_PAYMENT\n}\n\ninput CardPaymentForwarderBeneficialOwnerInput {\n  firstName: String\n  lastName: String\n}\n\nunion FraudAlert = CardTransactionFraudAlert\n\ninput ConvertCardAccountTypeInput {\n  bypassEligibilityChecks: Boolean\n  clientMutationId: String!\n  isFicoUnderwriting: Boolean\n  toCardAccountType: CardAccountType!\n  underwritingLimit: Int\n}\n\ntype AscendaTransferPayload {\n  loyaltyProgramId: String!\n  redemptionRate: Int!\n}\n\ntype InviteUserWithMonthlyLimitPayload {\n  clientMutationId: String!\n  user: User\n}\n\n\"\"\"account-level spend alerts config\"\"\"\ninput SpendAlertsConfigurationDetailsInput {\n  \"\"\"all muting configurations for this account\"\"\"\n  alertTypeMutingConfigurations: [AlertTypeMutingConfigurationsInput!]!\n  \"\"\"alerts enabled for this account\"\"\"\n  enabledAlertTypes: [SpendAlertType!]!\n  \"\"\"users muted from all alerts\"\"\"\n  universallyMutedUserIds: [ID!]!\n}\n\ntype CompleteOnboardingPayload {\n  clientMutationId: String!\n  user: User!\n}\n\ntype CreateFraudDisputePayload {\n  clientMutationId: String!\n  fraudAlerts: [FraudAlert!]!\n  transactions: [Transaction!]!\n}\n\ntype RewardsPointsHistoryEntryConnection {\n  edges: [RewardsPointsHistoryEntryEdge]\n  pageInfo: PageInfo!\n}\n\nenum ErpVendorType {\n  CONCUR\n  CONFERMA\n  INVALID\n  XERO\n}\n\n\"\"\"Quickbooks Desktop GL account settings\"\"\"\ntype QbdCategories {\n  \"\"\"Default accounts payable GL account\"\"\"\n  accountsPayableUserCategory: UserCategory\n  \"\"\"Default collections GL account\"\"\"\n  collectionTargetUserCategory: UserCategory\n  \"\"\"Default rewards GL account\"\"\"\n  rewardsIncomeUserCategory: UserCategory\n}\n\ninput FinalizeConnectCredentialInput {\n  clientMutationId: String!\n  integrationCredentialId: ID!\n}\n\ntype ApprovalsReviewConnection {\n  edges: [ApprovalsReviewEdge]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\n\"\"\"The approvals routing rule input object. Only one of individuals, manager and individuals_v2 should be specified\"\"\"\ninput ApprovalsRoutingRuleInput {\n  \"\"\"The individuals routing rule input object\"\"\"\n  individuals: ApprovalsRoutingRuleIndividualsInput\n  \"\"\"The dynamic routing rule input object can be specified by a manager role or a individual user\"\"\"\n  individualsV2: ApprovalsRoutingRuleIndividualsV2Input\n  \"\"\"The manager routing rule\"\"\"\n  manager: ApprovalsRoutingRuleManagerInput\n}\n\nunion OriginMetadata = EmailMetadata\n\ntype FundingSourceEdge {\n  cursor: String\n  node: FundingSource\n}\n\nunion UserType = UserTypeIndividual | UserTypeManager\n\ninput ResetUserInput {\n  clientMutationId: String!\n  token: String!\n  user: ResetUserUserInput!\n}\n\ninput CreatePhysicalCardV2Input {\n  budgetId: ID\n  clientMutationId: String!\n  customerUserId: ID\n  defaultMemo: String\n  displayName: String\n  holderName: String\n  shippingAddress: ShippingAddressInput!\n}\n\nenum CashTransactionPaymentMethod {\n  CREDIT\n  DEBIT\n  INVALID\n}\n\ntype OnboardingFormPeriodicReview {\n  business: Json\n  individuals: Json\n}\n\ntype ExportItem implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  insertedAt: Time!\n  status: String!\n}\n\ntype RefreshIntegrationPayload {\n  clientMutationId: String!\n  integration: Integration\n}\n\nenum PushProviderType {\n  APNS\n  FCM\n}\n\nenum BusinessDays {\n  FRIDAY\n  MONDAY\n  THURSDAY\n  TUESDAY\n  WEDNESDAY\n}\n\nunion BillingPaymentSource = DepositsAccount | FundingSource | OfflineSource | RewardsRedemptionSource\n\ninput UpdateTransactionBillableStatusInput {\n  billableStatus: BillableStatus\n  clientMutationId: String!\n  transactionId: ID!\n}\n\ntype ExternalIntegrationEntity implements Node {\n  \"\"\"Time of deletion, either if explicitly deleted in the ERP or not found in refetch\"\"\"\n  deletedAt: Time\n  \"\"\"ID that references an entity's parent integration field, i.e. Netsuite Class\"\"\"\n  externalIntegrationFieldId: ID!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  integration: Integration\n  \"\"\"Flag that denotes whether this entity was marked as inactive on the ERP side\"\"\"\n  isInactive: Boolean\n  \"\"\"Human-readable name\"\"\"\n  name: String\n  \"\"\"Entities are arranged in a tree structure\"\"\"\n  parentEntity: ExternalIntegrationEntity\n  \"\"\"Soft deprecated, will delete soon - use external_integration_field_id\"\"\"\n  payload: ExternalIntegrationEntityPayload\n  \"\"\"ID used by the external ERP to uniquely identify an entity\"\"\"\n  vendorInternalId: String\n}\n\ntype CollectionIntention implements Node {\n  amount: Int\n  collectedAt: Time\n  collectionAttempts(after: String, before: String, first: Int, last: Int): CollectionAttemptConnection\n  customerAccountId: String\n  fundingSource: FundingSource\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  initiator: User\n  insertedAt: Time\n  originatorType: String\n  scheduledForDate: Time\n  status: String\n}\n\ninput UpdateTransactionMemoInput {\n  clientMutationId: String!\n  memo: String\n  transactionId: ID!\n}\n\ntype DepositsAdminBalanceAdjustmentDetails {\n  description: String\n  method: Method!\n}\n\ntype CredentialRedirectResult {\n  credential: Credential\n  redirectUrl: String\n}\n\ntype Receipt implements Node {\n  asset: Asset\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  origin: String\n}\n\ninput ReimbursementMetadataInput {\n  addAssetIds: [ID!]\n  amount: Int\n  budgetId: ID\n  departmentId: ID\n  departmentName: String\n  locationId: ID\n  locationName: String\n  memo: String\n  merchantCategoryId: ID\n  merchantId: ID\n  merchantName: String\n  netsuiteClassExternalEntityId: ID\n  purchaseDate: Time\n  receiptAssetFileId: ID\n  removeAssetIds: [ID!]\n  userCategoryId: ID\n}\n\n\"\"\"A user to invite\"\"\"\ninput UserInvite {\n  \"\"\"The ID of the department to add the new user to\"\"\"\n  departmentId: ID\n  \"\"\"The email address to send the invite to\"\"\"\n  email: Email!\n  \"\"\"The new user's first name\"\"\"\n  firstName: String!\n  \"\"\"A list of groups to add the user to\"\"\"\n  groups: [String!]\n  \"\"\"whether or not the user should have access to corporate cards\"\"\"\n  isCorporateCardUser: Boolean\n  \"\"\"The new user's last name\"\"\"\n  lastName: String!\n  \"\"\"The ID of the location to assign this user to\"\"\"\n  locationId: ID\n  \"\"\"The ID of the user who should be assigned as the new user's manager\"\"\"\n  managerId: ID\n  \"\"\"When true, this user will be made to set up a physical card while activating\"\"\"\n  requirePhysicalCard: Boolean\n  \"\"\"The new user's role\"\"\"\n  role: UserRoleTypeInput!\n}\n\ninput EnableExpensesInput {\n  clientMutationId: String!\n  id: ID!\n}\n\nenum SpendAlertType {\n  ALL\n  EXPENSIVE_TRANSACTION\n  HIGH_SPEND_PER_DIEM_RESTAURANTS\n  HIGH_SPEND_PER_DIEM_RIDESHARE\n  INVALID\n  NEW_VENDOR_SAAS\n  RECURRING\n  RECURRING_DUPLICATE\n  SPEND_INCREASE_DEPARTMENT\n  SPEND_INCREASE_MERCHANT\n  SPEND_INCREASE_MERCHANT_CATEGORY\n  SPEND_INCREASE_RECURRING\n  SPEND_INCREASE_USER\n}\n\nenum FundingSourceProvenance {\n  DEPOSITS_ACCOUNT\n  FINANCIAL_ACCOUNT\n  MANUAL_INTERNAL\n  MANUAL_USER\n}\n\ninput ReceivablesOffersIntegrationFinancialAccountMappingInput {\n  \"\"\"The id of the financial_account\"\"\"\n  financialAccountId: String!\n  \"\"\"The id of the integration\"\"\"\n  integrationCredentialId: String!\n}\n\n\"\"\"A category that is a candidate for being the top category in a given period.\"\"\"\ntype RewardsTopCategory implements Node {\n  \"\"\"Information about the category fetched from Present.\"\"\"\n  category: MerchantCategory!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The ID of the category in present.\"\"\"\n  presentMerchantCategoryId: String!\n  \"\"\"The amount the customer has spent on the category.\"\"\"\n  totalAmountSpentCents: Int!\n}\n\ntype DeleteIntegrationRulePayload {\n  clientMutationId: String!\n}\n\ntype OnboardingInformationRequestConnection {\n  edges: [OnboardingInformationRequestEdge]\n  pageInfo: PageInfo!\n}\n\ninput OrderByInput {\n  direction: OrderDirection!\n  sort: String!\n}\n\nenum CardPaymentFailureTypeV2 {\n  ACCOUNT_CLOSED\n  ACCOUNT_NOT_FOUND\n  INSUFFICIENT_FUNDS\n  NON_TRANSACTION_ACCOUNT\n  NOT_AUTHORIZED\n}\n\ninput CreatePaymentInput {\n  amount: Int!\n  clientMutationId: String!\n  consumerSettings: TransactionConsumerSettings\n  contactId: ID\n  contactVersion: Int\n  \"\"\"Use contact id instead\"\"\"\n  counterpartyId: ID\n  depositsAccountId: ID!\n  endsAt: Time\n  endsOn: Date\n  externalMemo: String\n  idempotencyKey: String!\n  monthlySchedule: MonthlySchedule\n  paymentInstrumentId: ID\n  paymentInstrumentVersion: Int\n  sendAt: Time\n  sendOn: Date\n  totalNumberOfPayments: Int\n  weeklySchedule: WeeklySchedule\n}\n\n\"\"\"Mobile summary schema\"\"\"\ntype MobileReferralsSummary implements Node {\n  \"\"\"Title for entry point\"\"\"\n  entryPointTitle: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"Landing screen description\"\"\"\n  landingScreenDescription: String\n  \"\"\"Landing screen title\"\"\"\n  landingScreenTitle: String\n  \"\"\"Terms and conditions\"\"\"\n  termsAndConditions: String\n}\n\ntype QuickbooksClass {\n  name: String\n}\n\ninput ProgramMembershipPayload {\n  firstName: String\n  lastName: String\n  membershipId: String\n}\n\nenum CompanyType {\n  ECOMMERCE\n  LIFESCIENCE\n  OTHERS\n  STARTUP\n}\n\nenum PendingRecordApprovalDecision {\n  APPROVED\n  CANCELLED\n  DENIED\n  PENDING\n}\n\ntype OnboardingFormBlocking {\n  _: Boolean\n}\n\ntype MerchantCategoryConnection {\n  edges: [MerchantCategoryEdge]\n  pageInfo: PageInfo!\n}\n\nenum BankAccountClass {\n  BUSINESS\n  PERSONAL\n}\n\nenum WeavSalesPlatform {\n  AMAZON_SP\n  PAYPAL\n  SHOPIFY\n  SQUARE\n  STRIPE\n  WALMART\n}\n\ntype ConvertCardAccountTypePayload {\n  clientMutationId: String!\n  ineligibilityReason: ConversionIneligibilityReason\n}\n\ntype CreateIntegrationRulePayload {\n  clientMutationId: String!\n  \"\"\"the integration containing new rule\"\"\"\n  integration: Integration\n}\n\ninput CreateOnboardingProductApplicationInput {\n  \"\"\"Cancel any existing applications of the same named blueprint\"\"\"\n  cancelPreviousApplication: Boolean\n  clientMutationId: String!\n  \"\"\"The specific implementation of the blueprint type\"\"\"\n  name: String!\n}\n\ntype DepositsProcessingAndFuturePaymentDateConnection {\n  edges: [DepositsProcessingAndFuturePaymentDateEdge]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\ntype CreateNetsuiteCredentialPayload {\n  authenticationResult: CredentialAuthenticationResult\n  clientMutationId: String!\n  subsidiaries: [NetsuiteSubsidiary]\n}\n\ntype BankingHolidays {\n  bankingHolidays: [Date!]!\n}\n\nenum ConfirmationStatus {\n  CONFIRMATION_STATUS_CONFIRMED\n  CONFIRMATION_STATUS_DISMISSED\n  CONFIRMATION_STATUS_INVALID\n  CONFIRMATION_STATUS_PENDING\n}\n\ntype CreateReceiptPayload {\n  clientMutationId: String!\n  receipt: Receipt\n}\n\ninput SetTransactionIntegrationFieldInput {\n  clientMutationId: String!\n  field: String!\n  transactionId: ID!\n  value: String!\n}\n\ntype CompletePromotionPayload {\n  clientMutationId: String!\n}\n\ninput CheckReceivingMethodInput {\n  address: AddressInput\n}\n\n\"\"\"Collected (for fee) via Rewards Redemption\"\"\"\ntype ReceivablesOffersPaymentIntentSourceRewardsRedemption {\n  \"\"\"ID of the Payout that is linked to the Offer Fee that we collected against.\"\"\"\n  payoutId: ID!\n  rewardsRedemptionInstanceId: String!\n}\n\ninput CreatePayerInput {\n  address: ContactAddressInput\n  clientMutationId: String!\n  dbaName: String\n  email: String\n  idempotencyKey: String!\n  invoicingAccountId: ID!\n  phoneNumber: String\n}\n\ntype Restrictions {\n  \"\"\"Indicates if the country is sanctioned for card shipping purposes\"\"\"\n  isSanctionedForCardShipping: Boolean!\n}\n\ninput CreateExpensesSettingInput {\n  clientMutationId: String!\n  rules: [ExpensesRuleInput]!\n  sendEmailToEmployees: Boolean\n  status: ExpensesSettingStatus!\n}\n\ntype UpdateIntegrationSettingsPayload {\n  clientMutationId: String!\n  integration: Integration\n}\n\ninput SetUserRoleInput {\n  clientMutationId: String!\n  role: String!\n  useOnboarding: Boolean\n  userId: ID!\n}\n\nunion PaymentInstrumentType = AchPaymentInstrument | ChequePaymentInstrument | DomesticWirePaymentInstrument | InternationalWirePaymentInstrument\n\ntype DeleteReceiptPayload {\n  clientMutationId: String!\n}\n\n\"\"\"The computed integration lens field from integration rule engine for expenses.\"\"\"\ntype ExpenseLens implements Node {\n  billableStatus: Boolean\n  disabledIntegrationRules: [IntegrationRule]\n  disabledRuleIds: [String]\n  expenseId: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  integrationFields: [IntegrationField]\n  integrationRuleEvaluations: [RuleEvaluation]\n  \"\"\"Whether the expense is exported\"\"\"\n  isExported: Boolean\n  userCategory: UserCategory\n  userCategoryId: String\n}\n\ntype SoftExpirationSummary {\n  isSoftExpired: Boolean\n  softExpiresAt: Time\n}\n\ntype RewardsTriggerInstanceStateCashActivationCardSpendBonus {\n  amountSpentUsdCents: Int!\n}\n\ntype SpendAggregateTimeSeries {\n  amount: Int!\n  time: Time\n}\n\ntype OnboardingPageUwEcommerceConnection {\n  _: Boolean\n  content: OnboardingFormUwEcommerceConnection!\n}\n\n\"\"\"Describes a link token object\"\"\"\ntype HrisLinkToken {\n  \"\"\"The link token we want to pass back to the FE\"\"\"\n  linkToken: String!\n}\n\ntype BulkCreateExpensesItemEventPayload {\n  clientMutationId: String!\n  expensesItemEvents: [ExpensesItemEvent!]\n}\n\ntype UpdateInstitutionLoginPayload {\n  clientMutationId: String!\n  result: FinancialsSourceResult\n}\n\ntype TellerPayload {\n  enrollmentId: String!\n  tellerEnrollmentId: String\n  tellerInstitutionId: String!\n}\n\nenum CashTransactionWireReturnReason {\n  INVALID\n  UNKNOWN\n}\n\ntype ReceivablesOffersPaymentIntentConnection {\n  edges: [ReceivablesOffersPaymentIntentEdge]\n  pageInfo: PageInfo!\n  summary: ReceivablesOffersPaymentIntentAllocationSummary\n}\n\ninput ActivateUserInput {\n  activationToken: String!\n  clientMutationId: String!\n  user: ActivateUserInfo\n}\n\ntype DisconnectErpFeedPayload {\n  clientMutationId: String!\n  erpFeed: ErpFeed\n  errorMessage: String\n}\n\ntype RewardsRedemptionOfferConnection {\n  edges: [RewardsRedemptionOfferEdge]\n  pageInfo: PageInfo!\n}\n\nenum PaymentApprovalDecisionReason {\n  FRAUDULENT\n  INCORRECT\n  OTHER\n  UNAUTHORIZED\n}\n\ntype LocationConnection {\n  edges: [LocationEdge]\n  pageInfo: PageInfo!\n}\n\ntype ReplaceCardWithVirtualPayload {\n  clientMutationId: String!\n  replacedCard: Card\n  replacementCard: Card\n}\n\ninput DeleteDepartmentInput {\n  clientMutationId: String!\n  id: ID!\n}\n\nenum ApprovalsReviewStatus {\n  APPROVED\n  DENIED\n  PENDING\n  SKIP\n}\n\ntype ExpensesSettingEdge {\n  cursor: String\n  node: ExpensesSetting\n}\n\ninput InputCashRecurringScheduleTypeUnion {\n  monthlyByDay: InputCashRecurringScheduleMonthlyByDay\n  monthlyByWeek: InputCashRecurringScheduleMonthlyByWeek\n  weekly: InputCashRecurringScheduleWeekly\n}\n\ntype OnboardingPageEmailVerification {\n  _: Boolean\n  content: OnboardingFormBlocking!\n}\n\ninput SignupInfoInput {\n  attributionSource: String\n  attributionToken: String\n  blackbox: String\n  companyIndustry: String\n  companyName: String!\n  companyType: CompanyType\n  companyUrl: String\n  \"\"\"Approximate monthly credit card spending\"\"\"\n  creditCardSpend: String\n  \"\"\"The external accounts the user had when they signed up (e.g. Shopify, Amazon, etc)\"\"\"\n  externalAccounts: [String]\n  financialProductType: FinancialProductType!\n  firstName: SafeString!\n  \"\"\"Users intent for signing up for brex\"\"\"\n  intent: [String]\n  investmentSource: String\n  lastName: SafeString!\n  legalAgreements: [LegalAgreementReference]!\n  marketingMetadata: Json\n  \"\"\"Answers to the business maturity question\"\"\"\n  maturity: [String]\n  role: String\n  salesVolume: String\n}\n\ntype GenerateDepositsTransactionConfirmationDownloadUrlPayload {\n  clientMutationId: String!\n  \"\"\"url to download confirmation\"\"\"\n  depositsTransactionConfirmationDownloadUrl: String\n}\n\ntype CashRecurringScheduleMonthlyByDay {\n  \"\"\"Number of months between successive transactions\"\"\"\n  cadence: Int!\n  \"\"\"Day of the month to schedule transactions\"\"\"\n  dayOfMonth: Int!\n}\n\ntype CollectionIntentionEdge {\n  cursor: String\n  node: CollectionIntention\n}\n\nenum ReceivablesOffersAccountOnboardingAction {\n  INVALID\n  LEGAL_AGREEMENT_ACCEPTED\n}\n\n\"\"\"muting config for an individual column\"\"\"\ntype MutingConfiguration {\n  muteColumn: MuteColumn!\n  muteValues: [String!]!\n}\n\ntype BillingPeriod {\n  endPeriod: Time!\n  startPeriod: Time!\n}\n\ntype FinancialSourceConnection {\n  edges: [FinancialSourceEdge]\n  pageInfo: PageInfo!\n}\n\ninput CreateCardTransactionInsightEventInput {\n  action: CardTransactionInsightEventAction!\n  clientMutationId: String!\n  eventMetadata: Json\n  insightId: ID!\n  notifyManagers: Boolean\n  notifySelectedUsers: [ID]\n}\n\ntype EftReceivingMethod {\n  accountNumber: String\n  beneficiaryName: String\n  routingNumber: String\n}\n\nunion Searchable = Card | CollectionIntention | Department | Merchant | MerchantCategory | StatementEntry | Transaction | TransactionOperation | User | UserCategory\n\ntype RemoveFspBookkeeperPayload {\n  clientMutationId: String!\n  policyUrn: String\n}\n\ninput NotifyAllUsersApprovalsEnabledInput {\n  clientMutationId: String!\n  idempotencyKey: String\n}\n\n\"\"\"muting config for an alert type\"\"\"\ntype AlertTypeMutingConfigurations {\n  alertType: SpendAlertType!\n  mutingConfigurations: [MutingConfiguration!]!\n}\n\ntype BillConnection {\n  edges: [BillEdge]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\ntype DisableReimbursementsPayload {\n  clientMutationId: String!\n  integration: Integration\n}\n\ninput FlexibleAddressInput {\n  address1: String!\n  address2: String\n  city: String!\n  country: String!\n  state: String\n  zip: String\n}\n\ninput RemoveFspBookkeeperInput {\n  bookkeeperAccountId: String!\n  clientMutationId: String!\n}\n\ninput CreateAssetInput {\n  clientMutationId: String!\n  \"\"\"The file content type\"\"\"\n  contentType: String!\n  \"\"\"For Internal Use Only: Assets will not be accessible in the dashboard when this is true\"\"\"\n  fiuo: Boolean\n  \"\"\"\n  Strong compliance means that assets will be stored in an s3 bucket where assets cannot be deleted.\n  This is necessary for assets which are required by FINRA to be stored in a WORM compliant way.\n  \"\"\"\n  isStrongCompliance: Boolean\n  \"\"\"The name of the file\"\"\"\n  name: String!\n  \"\"\"Idempotency key for the upload request\"\"\"\n  uploadRequestId: String!\n}\n\ninput ReconnectErpFeedInput {\n  clientMutationId: String!\n  erpFeedId: ID!\n}\n\ninput InputCashTransactionCreditArguments {\n  \"\"\"Contact and payment instrument of the external account to push funds to\"\"\"\n  payee: Payee!\n}\n\ntype CreatePayrollProviderPayload {\n  clientMutationId: String!\n  payrollProvider: PayrollProvider\n}\n\ntype AscendaDetails {\n  currencyName: String\n  description: String\n  enrollmentLink: String\n  estimatedProcessingTimeHours: Int\n  fullCurrencyName: String\n  maintenance: AscendaMaintenance!\n  partnerName: String\n  programName: String\n  shortProgramName: String\n  termsAndConditionsLink: String\n}\n\n\"\"\"A financial_document representing specifically a bank statement\"\"\"\ntype FinancialBankStatementDocument implements Node {\n  \"\"\"The last digits of the bank account number for display\"\"\"\n  accountNumberLastFour: String\n  \"\"\"Asset/Filestore ID of statement document\"\"\"\n  assetId: String!\n  bankAccountNumber: String\n  \"\"\"Bank/Financial institution & account number associated with the statement account\"\"\"\n  bankName: String\n  \"\"\"First & last name of user who uploaded the statement\"\"\"\n  firstName: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  lastName: String\n  \"\"\"The month of the requested statement\"\"\"\n  requestedMonth: Int!\n  \"\"\"Status of uploaded statement document\"\"\"\n  status: FinancialDocumentStatus!\n  \"\"\"Upload timestamp of the statement document\"\"\"\n  uploadedAt: Time!\n}\n\ntype OnboardingPagePersona {\n  _: Boolean\n  content: OnboardingFormPersona!\n}\n\ntype UpdateCardDisplayNamePayload {\n  card: Card!\n  clientMutationId: String!\n}\n\ninput ThirdPartyAttribution {\n  \"\"\"the Facebook click ID\"\"\"\n  fbc: String\n  \"\"\"the Facebook browser ID\"\"\"\n  fbp: String\n  \"\"\"/** Google Click ID */\"\"\"\n  gclid: String\n}\n\ntype TurnOffSeenFlagPayload {\n  clientMutationId: String!\n  \"\"\"Updated flag\"\"\"\n  seenFlag: SeenFlag\n}\n\ntype CashTransactionAdminBalanceAdjustmentDetails {\n  \"\"\"Internal reason why the admin balance adjustment was created\"\"\"\n  description: String\n  \"\"\"Whether the transaction was a debit or credit\"\"\"\n  paymentMethod: CashTransactionPaymentMethod!\n}\n\nenum PayeeType {\n  USER\n  VENDOR\n}\n\ninput CreateCashTransactionInput {\n  amountUsdCents: Int!\n  clientMutationId: String!\n  \"\"\"The type of transaction to create\"\"\"\n  creationType: InputCashTransactionCreationArgumentUnion!\n  \"\"\"Optional internal customer memo of the transaction\"\"\"\n  customerMemo: String\n  depositsAccountId: ID!\n  \"\"\"\n  Optional description for transfer that will be used for the \"Payment Instructions\" for\n  Wires and the \"Entry Description\" field for Ach transactions\n  \"\"\"\n  externalMemo: String\n  idempotencyKey: String!\n  \"\"\"\n  Notify the contact if and when the transaction moves to the processing state\n  False by default, ignored unless a credit to a contact with a valid email\n  \"\"\"\n  notifyContactProcessing: Boolean\n  \"\"\"\n  Optional schedule to repeat the transaction on. If not set, the transaction will only be\n   initiated once.\n  \"\"\"\n  recurringSchedule: InputCashRecurringSchedule\n  \"\"\"\n  Optional time to initiate the transaction. If not set, initiate the transaction as soon\n  as possible (e.g. business day)\n  \"\"\"\n  scheduledSendAt: Time\n}\n\ntype DepositsTransactionConnection {\n  edges: [DepositsTransactionEdge]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\ntype ApprovalsRequestEdge {\n  cursor: String\n  node: ApprovalsRequest\n}\n\nunion OnboardingInformationRequestContent = OnboardingFormBlocking | OnboardingFormEmpty | OnboardingFormJsonSchema | OnboardingFormPeriodicReview | OnboardingFormPersona | OnboardingFormTerms | OnboardingFormUwBankConnection | OnboardingFormUwEcommerceConnection\n\ntype Bill implements Node {\n  \"\"\"\n  DEPRECATED.\n  Use cashTransaction { timeline { scheduledSendAt } } instead.\n  \"\"\"\n  paymentSendAt: Time\n  merchantCategory: MerchantCategory\n  \"\"\"DEPRECATED, PLEASE USE cashTransaction INSTEAD\"\"\"\n  depositsPayment: DepositsPayment\n  originMetadata: OriginMetadata\n  createdByUser: User\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  transferDescription: String\n  deletedAt: Time\n  createdAt: Time\n  externalInvoiceNumber: String\n  isDraft: Boolean\n  dueAt: Time\n  \"\"\"Boolean to indicate whether payment recipient should be notified\"\"\"\n  notifyRecipient: Boolean\n  \"\"\"DEPRECATED, PLEASE USE contact/paymentInstrument INSTEAD\"\"\"\n  counterparty: Counterparty\n  \"\"\"Total number of payments to recur\"\"\"\n  totalNumberOfPayments: Int\n  invoice: Asset\n  invoiceProcessingStatus: BillInvoiceProcessingStatus\n  \"\"\"Recurring schedule for bills\"\"\"\n  recurringSchedule: RecurringSchedule\n  lastUpdatedAt: Time\n  paymentInstrument: PaymentInstrument\n  \"\"\"If not NULL, the transaction associated with the bill.\"\"\"\n  cashTransaction: CashTransaction\n  \"\"\"Date to end recurring payments\"\"\"\n  endsAt: Time\n  paymentInitiatedByUser: User\n  chequeMemo: String\n  contact: PaymentContact\n  \"\"\"Recurring rules for bills\"\"\"\n  recurringRules: RecurringRules\n  origin: BillOrigin\n  userErpCategory: UserCategory\n  \"\"\"The deposits account the money will be pulled from\"\"\"\n  depositsAccount: DepositsAccount\n  dueAmountCents: Int\n  \"\"\"\n  DO NOT BATCH, WILL RESULT IN AN N+1 QUERY.\n  Extracted fields from OCR\n  \"\"\"\n  extractedBillFields: ExtractedBillFields\n  description: String\n}\n\n\"\"\"View data for rewards page scale\"\"\"\ntype IncentivePlacementViewDataRewardsPageScale {\n  \"\"\"Additional point multiplier for purchases above threshold\"\"\"\n  additionalPointMultiplier: Int!\n  \"\"\"Description of bonus (potentially to put in modal)\"\"\"\n  description: String!\n  \"\"\"Time when the user was paid the points, null if they haven't been paid\"\"\"\n  payedOutAt: Time\n  \"\"\"Placement\"\"\"\n  placement: IncentivePlacement!\n  \"\"\"Progress (cents) i.e $500 in $500/$1000\"\"\"\n  progress: Int!\n  \"\"\"Short description (quick summary)\"\"\"\n  shortDescription: String!\n  \"\"\"Status\"\"\"\n  status: IncentivePlacementViewDataStatus\n  \"\"\"Threshold (cents) i.e $1000 in $500/$1000\"\"\"\n  threshold: Int!\n  \"\"\"Title\"\"\"\n  title: String!\n}\n\nenum CashTransactionChequeReturnReason {\n  COUNTERFEIT_WARRANTY_BREACH\n  ALTERED_OR_COUNTERFEIT\n  ITEMS_EXCEEDS_STATED_MAX_VALUE\n  POST_DATED\n  WARRANTY_BREACH\n  EXCEEDS_MAX_PRESENTMENTS\n  INDETERMINATE_AMOUNT\n  RETIRED_OR_INELIGIBLE_ROUTING_NUMBER\n  ACCOUNT_FROZEN\n  DUPLICATE_PRESENTMENT\n  FORGERY\n  PAYMENT_STOPPED\n  REFER_TO_MAKER\n  NON_CASH_ITEM\n  UNABLE_TO_PROCESS\n  INSUFFICIENT_FUNDS\n  RCC_WARRANTY_BREACH\n  CORPORATE_CUSTOMER_ADVISES_NOT_AUTHORIZED\n  ACCOUNT_NOT_FOUND\n  NOT_AUTHORIZED_RCC\n  MANUALLY_CANCELLED\n  REFER_TO_IMAGE\n  STALE_DATED\n  ONE_OR_MORE_SIGNATURES_IRREGULAR\n  UNKNOWN\n  UNUSABLE_IMAGE\n  ONE_OR_MORE_SIGNATURES_MISSING\n  BRANCH_SOLD\n  ENDORSEMENT_MISSING\n  UNCOLLECTED_FUNDS\n  INVALID\n  ENDORSEMENT_IRREGULAR\n  ACCOUNT_CLOSED\n}\n\ninput InputCashRecurringScheduleMonthlyByDay {\n  cadence: Int!\n  dayOfMonth: Int!\n}\n\ntype AccountBalanceSummary {\n  globalLimit: Int\n  remainingSpend: Int\n  usedBalance: Int\n}\n\ntype LocationEdge {\n  cursor: String\n  node: Location\n}\n\ntype ConfirmPaymentDraftPayload {\n  payment: CardPaymentForwarderPaymentObject!\n}\n\ntype DisableBillsPayload {\n  clientMutationId: String!\n  integration: Integration\n}\n\ntype AddFspBookkeeperUserPayload {\n  clientMutationId: String!\n  groupUrn: String\n}\n\ninput SoftSignupInput {\n  attributionMetadata: AttributionMetadata\n  clientMutationId: String!\n  email: Email!\n  info: SignupInfoInput!\n  partnerRefToken: String\n  password: String!\n  redirectUrl: String!\n}\n\ninput ResendWelcomeEmailInput {\n  clientMutationId: String!\n  \"\"\"Url for the button in the email\"\"\"\n  redirectUrl: String!\n  \"\"\"Unique token for the email (won't send duplicates)\"\"\"\n  uniqueToken: String!\n}\n\ninput SetReceivablesOffersSellerAccountHasSeenFullAccessConfirmationBannerInput {\n  clientMutationId: String!\n  sellerAccountId: ID!\n  value: Boolean!\n}\n\nenum InsightsTimeUnit {\n  DAY\n  MONTH\n  QUARTER\n  WEEK\n  YEAR\n}\n\ntype ChannelEmailOptions {\n  email: Email\n}\n\ntype DocumentOcrResult implements Node {\n  \"\"\"The type of document, determined based on the OCR result.\"\"\"\n  classificationType: DocumentOcrClassificationType\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The information extracted from the document\"\"\"\n  parsedDetails: DocumentOcrParsedDetails\n}\n\ninput ApprovalsRoutingRuleIndividualsInput {\n  \"\"\"A list of allowed approver ids\"\"\"\n  staticAllowedApproverUserIds: [ID!]!\n}\n\nenum InstrumentType {\n  PHYSICAL\n  VIRTUAL\n}\n\ntype ReceivablesOffersPayoutConnection {\n  edges: [ReceivablesOffersPayoutEdge]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\ninput CreateInvoiceInput {\n  clientMutationId: String!\n  depositsAccountId: ID\n  discountAmount: FinancialAssetInput\n  discountPercent: Float\n  dueDate: Date\n  idempotencyKey: String!\n  invoiceNumber: String!\n  invoiceTemplateId: ID!\n  invoicingAccountId: ID\n  lineItems: [InvoiceLineItemInput]\n  memo: String\n  payerContactId: ID\n  subtotal: FinancialAssetInput\n  totalAmount: FinancialAssetInput\n}\n\ntype CashTransactionConnection {\n  edges: [CashTransactionEdge]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\ntype CashTransactionEdge {\n  cursor: String\n  node: CashTransaction\n}\n\nenum RewardsTopCategoryNotEnabledReason {\n  AUTOPAY_NOT_SET\n  INVALID\n  NOT_ELIGIBLE\n  PAYMENTS_DO_NOT_QUALIFY\n}\n\ntype ReceivablesOffersRepaymentDetails {\n  resourceId: String\n}\n\ntype DisconnectCredentialPayload {\n  clientMutationId: String!\n  credential: Credential\n}\n\nenum RewardsRedemptionClassType {\n  ASCENDA_TRANSFER\n  CASH_BALANCE\n  INSTANT_PAYOUTS_FEE\n  ISSUER_TRANSACTION\n  REFUND_TRANSACTION\n}\n\ntype CashBalancePayload {\n  centsPerPoint: Float!\n}\n\ninput SetPrimaryFundingSourceInput {\n  clientMutationId: String!\n  fundingSourceId: ID!\n}\n\ntype OnboardingFormJsonSchema {\n  jsonSchema: Json!\n  \"\"\"Metadata to supplement the form schema\"\"\"\n  metadata: Json\n  uiSchema: Json\n}\n\ntype StatementEntryLensEdge {\n  cursor: String\n  node: StatementEntryLens\n}\n\nenum PayrollProviderType {\n  ADP\n  BAMBOO_HR\n  GUSTO\n  INVALID\n  JUSTWORKS\n  PAYCHEX\n  PAYLOCITY\n  QUICKBOOKS\n  RIPPLING\n  TRINET\n  ZENEFITS\n}\n\ntype CreateReimbursementReportPayload {\n  clientMutationId: String!\n  report: Report!\n}\n\n\"\"\"Incentive placement. Used only for ID translation right now.\"\"\"\ntype IncentivePlacement implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\ntype PayrollProvider {\n  name: String\n  payrollInfo: PayrollInfo\n  source: PayrollSource\n  status: PayrollStatus\n}\n\nenum DepositsPaymentStatus {\n  ADMIN_APPROVAL_REQUIRED\n  APPROVAL_REQUIRED\n  CANCELLED\n  PAYROLL_ESTIMATE\n  PROCESSED\n  PROCESSING\n  SCHEDULED\n  UNINITIATED\n}\n\ntype FraudAlertConnection {\n  edges: [FraudAlertEdge]\n  pageInfo: PageInfo!\n}\n\ntype DepositsPayment implements Node {\n  paymentApprovalPaymentContext(paymentId: ID): PaymentApprovalPaymentContext\n  amount: Int!\n  \"\"\"The raw transaction_id (not encoded).\"\"\"\n  transactionId: ID\n  pendingRecordApproval(paymentId: ID): PendingRecordApproval\n  endsOn: Date\n  bill: Bill\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  paymentApproval(paymentId: ID): PaymentApproval\n  associationIds: [String]\n  createdOn: Date!\n  createdAt: Time!\n  memo: String\n  sendAt: Time\n  cancelledAt: Time\n  status: DepositsPaymentStatus!\n  cancellationInitiatedByUser: User\n  consumerSettings: DepositsTransactionConsumerSettings\n  counterpartyName: String!\n  totalNumberOfPayments: Int\n  \"\"\"Encoded source deposits account ID\"\"\"\n  depositsAccountId: ID!\n  depositsTraceId: String\n  sendOn: Date\n  recurringSchedule: RecurringSchedule\n  externalMemo: String\n  endsAt: Time\n  contact: PaymentContact\n  type: PaymentRail!\n  processingAndFuturePayments(after: String, before: String, first: Int, last: Int): DepositsProcessingAndFuturePaymentDateConnection\n  recurringRules: RecurringRules\n  \"\"\"Source deposits account\"\"\"\n  depositsAccount: DepositsAccount\n  statusReason: StatusReason\n  \"\"\"Encoded CashTransaction ID\"\"\"\n  cashTransactionId: ID!\n  details: DepositsPaymentDetails!\n  isCancellable: Boolean!\n}\n\ntype FinancialStatementAccountConnection {\n  edges: [FinancialStatementAccountEdge]\n  pageInfo: PageInfo!\n}\n\nenum FinancialInformationRequestStatus {\n  PENDING\n  SUBMITTED\n}\n\n\"\"\"The seller account settings for a receivables_offers seller account. These settings are nil if the customer hasn't set them yet\"\"\"\ntype ReceivablesOffersSellerAccountSettings {\n  \"\"\"Whether the customer indicated that they routed their payouts to Brex (null if not set)\"\"\"\n  confirmedPayoutsRoutedToBrex: Boolean\n  \"\"\"Whether the customer has seen the failing checks error banner on the frontend (null if not set)\"\"\"\n  hasSeenFailingChecksErrorBanner: Boolean\n  \"\"\"Whether the customer has seen the confirmation banner for Full Access on the frontend (null if not set)\"\"\"\n  hasSeenFullAccessConfirmationBanner: Boolean\n  \"\"\"Whether the customer has seen the confirmation banner for Trial Access on the frontend (null if not set)\"\"\"\n  hasSeenTrialAccessConfirmationBanner: Boolean\n}\n\ninput FakeMutationDoNotUseInput {\n  cashIntensiveMaxCashHandled: CashIntensiveMaxCashHandled\n  clientMutationId: String!\n  fiNbfiRegistrationStatus: FiNbfiRegistrationStatus\n}\n\ntype DepositsTransactionEdge {\n  cursor: String\n  node: DepositsTransaction\n}\n\nunion EducationTile = CreditLimitEducationTile\n\ntype SemiWeeklyClosingStrategy {\n  firstDay: Int\n  secondDay: Int\n}\n\ntype CreateTransactionApprovedSubscriptionPayload {\n  clientMutationId: String!\n  notificationSubscription: NotificationSubscription\n}\n\n\"\"\"The value type when mute_column is set to merchant_id\"\"\"\ntype MuteValueMerchant {\n  \"\"\"The merchant that is being muted for this muting policy\"\"\"\n  merchant: Merchant\n}\n\nunion AccountCategories = ExpensifyCategories | IntacctCategories | NetsuiteCategories | QbdCategories | QuickbooksCategories | XeroCategories\n\ntype ConnectPlaidInstitutionPayload {\n  clientMutationId: String!\n  result: FinancialSource!\n}\n\nenum CashTransactionOrderField {\n  FAILED_AT\n  INITIATED_AT\n  PROCESSED_AT\n  SCHEDULED_SEND_AT\n}\n\ntype InternationalWirePaymentInstrument {\n  address: Address\n  beneficiaryBankAddress: Address\n  beneficiaryBankInfo: Json\n  beneficiaryBankName: String\n  iban: String\n  swiftCode: String\n}\n\ninput SetSpendAlertsConfigurationInput {\n  clientMutationId: String!\n  configurationDetails: SpendAlertsConfigurationDetailsInput!\n}\n\nscalar Email\n\ntype DepositsPayrollEstimateDetails {\n  counterparty: Counterparty!\n  origin: Origin!\n  paymentMethod: Method!\n  payrollPeriod: String!\n}\n\ninput SubmitFinancialInformationRequestInput {\n  assetIds: [ID]!\n  clientMutationId: String!\n  informationRequestId: ID!\n}\n\ntype CreditMarketingOfferConnection {\n  edges: [CreditMarketingOfferEdge]\n  pageInfo: PageInfo!\n}\n\ninput DisconnectPayrollProviderIntegrationInput {\n  clientMutationId: String!\n  \"\"\"The integration the user wants to disconnect\"\"\"\n  payrollProviderIntegrationId: ID!\n}\n\ntype UpcomingDueAmount {\n  amountDueUsdCents: Int!\n  dueAt: Time!\n}\n\ntype Rule implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  metadata: RuleMetadata\n  type: String\n  user: User\n}\n\ntype Dispute implements Node @key(fields: \"id\") {\n  cardPossession: DisputeCardPossession\n  disputeTransactions(after: String, before: String, first: Int, last: Int): DisputeTransactionConnection\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  reason: String!\n  status: DisputeStatus\n  type: DisputeType\n}\n\ninput CardLimit {\n  amount: Int!\n  frequency: CardLimitFrequency!\n}\n\ntype EmailAsset {\n  accrualTime: Time\n  attachments: [EmailAssetAttachment]\n  bodies: [EmailAssetBody]\n  forwardedBy: String\n  from: String\n  subject: String\n}\n\nunion StatementEntryOriginator = Collection | CollectionAttempt | RewardsRefund | TransactionOperation\n\ntype EveryNDaysClosingStrategy {\n  numDays: Int\n}\n\nenum TxType {\n  RETURN\n  STANDARD\n}\n\ninput BulkCreateExpensesItemEventInput {\n  action: ExpensesItemEventAction!\n  clientMutationId: String!\n  description: String\n  itemIds: [ID]\n  itemStatus: ExpensesItemStatus\n}\n\ntype SetSpendAlertsConfigurationPayload {\n  clientMutationId: String!\n}\n\ntype ReceivablesOffersPaymentIntentEdge {\n  cursor: String\n  node: ReceivablesOffersPaymentIntent\n}\n\n\"\"\"Source of a Payment intent: where we collected from\"\"\"\nunion ReceivablesOffersPaymentIntentSource = ReceivablesOffersPaymentIntentSourceCollectFundingSource | ReceivablesOffersPaymentIntentSourceDepositsAccount | ReceivablesOffersPaymentIntentSourceDepositsLockedTransaction | ReceivablesOffersPaymentIntentSourceRewardsRedemption\n\nenum ReportFormat {\n  CSV\n  HTML\n  PDF\n  TXT\n  XLSX\n}\n\ninput CompleteCashTransactionApprovalInput {\n  clientMutationId: String!\n  decision: CashTransactionApprovalDecision!\n  \"\"\"Any notes the admin wants to fill in a free form field when processing a draft payment.\"\"\"\n  decisionNotes: String\n  decisionReason: CashTransactionApprovalDecisionReason\n  transactionIdentifier: InputTransactionApprovalIdentifierUnion!\n}\n\ntype CardPaymentForwarderContact {\n  email: String\n  firstName: String\n  lastName: String\n  phoneNumber: String\n}\n\ntype CancelApprovalsRequestPayload {\n  approvalsRequests: [ApprovalsRequest!]\n  clientMutationId: String!\n}\n\ntype OnboardingPagePhotoIdIntro {\n  _: Boolean\n  content: OnboardingFormJsonSchema!\n}\n\ntype ProgramMembershipConnection {\n  edges: [ProgramMembershipEdge]\n  pageInfo: PageInfo!\n}\n\n\"\"\"Payload for Codat tracking categories\"\"\"\ntype CodatTrackingCategory {\n  \"\"\"Category name imported from Codat\"\"\"\n  categoryName: String\n  \"\"\"Is marked inactive on Codat side\"\"\"\n  isInactive: Boolean\n}\n\ntype DisableIntegrationPayload {\n  clientMutationId: String!\n  integration: Integration\n}\n\ntype ReimbursementItem implements Node @key(fields: \"id\") {\n  approvalRequestId: ID\n  approvalsRequest: ApprovalsRequest\n  customerAccountId: ID!\n  customerUserId: ID!\n  expenseId: ID\n  fundingSource: FundingSource\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  insertedAt: Time!\n  modifiedBy: String\n  paymentInstrument: PaymentInstrument\n  paymentInstrumentVersion: Int\n  postedDate: Time\n  reimbursementMetadata: ReimbursementMetadata!\n  requestingUser: User\n  state: ReimbursementItemState!\n  updatedAt: Time!\n}\n\ntype CreateContactPayload {\n  clientMutationId: String!\n  contact: PaymentContact!\n}\n\ntype SetReceivablesOffersSellerAccountHasSeenFullAccessConfirmationBannerPayload {\n  clientMutationId: String!\n  sellerAccount: ReceivablesOffersSellerAccount\n}\n\ntype DeleteDepartmentPayload {\n  clientMutationId: String!\n}\n\ntype DeviceInformation {\n  additionalInformation: Json\n  appVersion: String!\n  model: String!\n  os: String!\n}\n\ninput AchReceivingMethodInput {\n  accountNumber: String\n  beneficiaryName: String\n  routingNumber: String\n}\n\ninput BatchCreateContactsInput {\n  \"\"\"The id of asset uploaded to create these contacts\"\"\"\n  assetId: String!\n  clientMutationId: String!\n  \"\"\"The contact inputs\"\"\"\n  vendorContactInputs: [VendorContactInput!]!\n}\n\ninput SpendAggregateFilters {\n  cardIds: [String]\n  departmentIds: [String]\n  from: Time!\n  merchantCategoryIds: [String]\n  merchantIds: [String]\n  to: Time!\n  userCategoryIds: [String]\n  userIds: [String]\n}\n\ntype CreateIntegrationPayload {\n  clientMutationId: String!\n  integration: Integration\n}\n\ninput ErpFeedInput {\n  \"\"\"financial_account_id the feed is for\"\"\"\n  financialAccountId: ID!\n  \"\"\"Date to begin the sync\"\"\"\n  syncFrom: Time!\n  \"\"\"Erp Vendor type\"\"\"\n  type: ErpVendorType!\n  \"\"\"Raw json object with metadata\"\"\"\n  vendorOptions: Json\n}\n\ntype MilesTransferQuote {\n  exchangeRate: Int!\n  redemptionOfferId: String!\n}\n\ntype CreateOrUpdatePaymentPayload {\n  payment: CardPaymentForwarderPaymentObject!\n}\n\ntype PlaidInstitutionMapping {\n  fallbackInstitution: FinancialInstitution!\n  plaidInstitutionId: String!\n}\n\ntype TransactionConnection {\n  edges: [TransactionEdge]\n  pageInfo: PageInfo!\n}\n\ntype ProcessDocumentPayload {\n  success: Boolean\n}\n\nunion RuleMetadata = GlobalLimitRuleMetadata | LimitRuleMetadata\n\ntype MerchantCategory implements Node @key(fields: \"id\") {\n  description: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  isDefault: Boolean\n  name: String\n}\n\ntype ConnectInstitutionPayload {\n  clientMutationId: String!\n  result: FinancialsSourceResult\n}\n\ntype CancelCashTransactionPayload {\n  clientMutationId: String!\n  transaction: CashTransaction!\n}\n\nunion JournalEntryOriginator = RewardsRefund | TransactionOperation\n\ninput ChequePaymentInstrumentInput {\n  address: AddressInput!\n  recipientName: String!\n}\n\ntype ExportConnection {\n  edges: [ExportEdge]\n  pageInfo: PageInfo!\n}\n\ninput RefreshIntegrationInput {\n  clientMutationId: String!\n  id: ID!\n}\n\ntype CreateOnboardingProductApplicationPayload {\n  clientMutationId: String!\n  onboardingApplication: OnboardingApplication!\n}\n\ntype CreatePeriodicReviewApplicationPayload {\n  clientMutationId: String!\n  onboardingApplication: OnboardingApplication!\n}\n\ntype PendingRecordApproval implements Node {\n  approvalToken: String!\n  decidedByUser: User\n  decision: PendingRecordApprovalDecision!\n  decisionNotes: String\n  decisionReason: PendingRecordApprovalDecisionReason\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  pendingRecordId: ID!\n  updatedAt: Time\n}\n\nunion CashTransactionDetails = CashTransactionAchDetails | CashTransactionAchReturnDetails | CashTransactionAdminBalanceAdjustmentDetails | CashTransactionBookTransferDetails | CashTransactionBrexOperationalTransferDetails | CashTransactionCardCollectionDetails | CashTransactionDepositedChequeDetails | CashTransactionDepositedChequeReturnDetails | CashTransactionDividendDetails | CashTransactionDomesticWireDetails | CashTransactionDomesticWireReturnDetails | CashTransactionFboTransferDetails | CashTransactionInterestDetails | CashTransactionInternationalWireDetails | CashTransactionInternationalWireReturnDetails | CashTransactionIntraCuaccBookTransferDetails | CashTransactionOutgoingChequeDetails | CashTransactionOutgoingChequeReturnDetails | CashTransactionPayrollEstimateDetails | CashTransactionReceivablesOffersAdvanceDetails | CashTransactionReceivablesOffersCollectionDetails | CashTransactionReceivablesOffersRepaymentDetails | CashTransactionRewardsRedemptionDetails\n\ninput CreatePaymentInstrumentInput {\n  achPaymentInstrument: AchPaymentInstrumentInput\n  \"\"\"Payment instrument's beneficiary name\"\"\"\n  beneficiaryName: String\n  chequePaymentInstrument: ChequePaymentInstrumentInput\n  clientMutationId: String!\n  contactId: ID!\n  domesticWirePaymentInstrument: DomesticWirePaymentInstrumentInput\n  internationalWirePaymentInstrument: InternationalWirePaymentInstrumentInput\n}\n\ntype SetReceivablesOffersPayFeeWithRewardsPayload {\n  account: ReceivablesOffersAccount\n  clientMutationId: String!\n}\n\ninput BankAccountSourceInput {\n  accountName: String!\n  accountNumber: String!\n  accountType: String!\n  routingNumber: String!\n}\n\ntype Transaction implements Node {\n  accrualTime: Time\n  amount: TransactionAmount @deprecated(reason: \"Use pending_amount instead\")\n  authorizationCode: String\n  card: Card\n  cardAcceptor: CardAcceptor\n  categorizationType: String\n  clearedAmount: Int\n  department: Department\n  disputeTransaction: DisputeTransaction\n  hasDispute: Boolean\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  lens: TransactionLens\n  location: Location\n  memo: String\n  merchant: Merchant\n  operations(after: String, before: String, first: Int, last: Int): TransactionOperationConnection\n  pendingAmount: Int\n  purchaseTime: Time\n  receipts(after: String, before: String, first: Int, last: Int): ReceiptConnection\n  status: String\n  userCategory: UserCategory\n}\n\nenum CashTransactionAccountType {\n  CHECKING\n  INVALID\n  SAVINGS\n}\n\ntype ChequePaymentInstrument {\n  address: Address\n  recipientName: String\n}\n\nenum DepositsTransactionType {\n  ACH\n  ACH_RETURN\n  ADMIN_BALANCE_ADJUSTMENT\n  BOOK_TRANSFER\n  BREX_OPERATIONAL_TRANSFER\n  CARD_COLLECTION\n  CHEQUE\n  CHEQUE_RETURN\n  DIVIDEND\n  FBO_TRANSFER\n  INTEREST\n  INTRA_CUSTOMER_ACCOUNT_BOOK_TRANSFER\n  RECEIVABLES_OFFERS_ADVANCE\n  RECEIVABLES_OFFERS_COLLECTION\n  RECEIVABLES_OFFERS_REPAYMENT\n  REWARDS_REDEMPTION\n  WIRE\n  WIRE_RETURN\n}\n\ntype SubmitEarlyAccessFeatureSuggestionPayload {\n  clientMutationId: String!\n}\n\ninput UpdateCardFraudAlertsInput {\n  clientMutationId: String!\n  fraudulentTransactionIds: [ID!]\n  legitimateTransactionIds: [ID!]\n}\n\ntype ReceivablesOffersOffersGroupConnection {\n  edges: [ReceivablesOffersOffersGroupEdge]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\ninput InputCashRecurringScheduleMonthlyByWeek {\n  cadence: Int!\n  dayOfWeek: CashTransactionBusinessDay!\n  weekOfMonth: Int!\n}\n\nenum IncludeDirectReportsOption {\n  DIRECT_REPORTS_ONLY\n  SELF_AND_DIRECT_REPORTS\n}\n\nenum OnboardingApplicationStatus {\n  \"\"\"Application approved\"\"\"\n  APPROVED\n  \"\"\"User needs to submit evidence requests (before application submission)\"\"\"\n  IN_PROGRESS\n  \"\"\"User needs to submit evidence requests (after application submission)\"\"\"\n  PENDING_EVIDENCE\n  PENDING_REVIEW\n  PROCESSING\n  \"\"\"Same as processing. Will be deprecated.\"\"\"\n  PROCESSING_EVIDENCES\n  \"\"\"Application rejected\"\"\"\n  REJECTED\n  \"\"\"Application submitted by user\"\"\"\n  SUBMITTED\n}\n\ninput CancelCashRecurringScheduleInput {\n  clientMutationId: String!\n  \"\"\"ID of the recurring schedule\"\"\"\n  id: ID!\n}\n\ntype FinancialLoginField {\n  contentType: FinancialLoginFieldContentType\n  description: String\n  id: String\n  masked: Boolean\n  name: String\n  order: Int\n}\n\nenum Api {\n  INVALID\n  ONBOARDING\n  PAYMENTS\n  TEAM\n  TRANSACTIONS\n}\n\ntype ResendWelcomeEmailPayload {\n  clientMutationId: String!\n}\n\ntype OnboardingApplicationStateProductV1 {\n  \"\"\"The state of the card portion of the product application\"\"\"\n  card: OnboardingApplicationStateProductV1Value\n  \"\"\"The state of the cash portion of the product application\"\"\"\n  cash: OnboardingApplicationStateProductV1Value\n}\n\ntype CashTransactionBeneficiaryBank {\n  address: Address\n  info: Json\n  name: String\n}\n\nenum BillOrigin {\n  DASHBOARD\n  EMAIL\n  RECURRING\n}\n\nunion AssetData = EmailAsset | FileAsset\n\ninput InputCashRecurringScheduleDurationUnion {\n  endsAt: Time\n  totalCount: Int\n}\n\ninput ReplaceCardWithVirtualInput {\n  cardId: ID!\n  clientMutationId: String!\n  displayName: String\n  holderName: String\n  replacementDescription: String\n  replacementReason: CardReplacementReason!\n}\n\ninput ReplaceFundingSourceInput {\n  bankAccountSource: BankAccountSourceInput!\n  clientMutationId: String!\n  fundingSourceId: String!\n  idempotencyKey: String!\n  notes: String!\n  priority: FundingSourcePriority\n  reason: FundingSourceStatusChangeReason!\n  type: String!\n}\n\ninput CreateApprovalsRequestInput {\n  clientMutationId: String!\n  description: String\n  monthlyLimitOverrideMetadata: ApprovalsRequestMonthlyLimitOverrideInput\n  preapprovedCardMetadata: ApprovalsRequestPreapprovedCardInput\n  type: ApprovalsRequestType!\n}\n\ntype CreateSubscriptionPayload {\n  clientMutationId: String!\n  notificationSubscription: NotificationSubscription\n}\n\ntype DeleteContactPayload {\n  clientMutationId: String!\n  contact: PaymentContact!\n}\n\ninput CreateInvoiceTemplateInput {\n  clientMutationId: String!\n  footer: String\n  header: String\n  idempotencyKey: String!\n  invoicerContactId: ID\n  invoicingAccountId: ID!\n  logoAssetId: ID\n  note: String\n  setAsDefaultTemplate: Boolean\n}\n\ntype StatementEntryEdge {\n  cursor: String\n  node: StatementEntry\n}\n\ntype SoftSignupPayload {\n  authType: SoftSignupAuthType!\n  clientMutationId: String!\n  session: Session!\n  token: String!\n  user: User!\n}\n\ninput UpdateCashTransactionInput {\n  amountUsdCents: Int\n  clientMutationId: String!\n  \"\"\"A customer editable memo for the transaction which is not meant to be processed in any way outside of a note for the customer to view\"\"\"\n  customerMemo: String\n  \"\"\"\n  Optional description for transfer that will be used for the \"Payment Instructions\" for\n  Wires and the \"Entry Description\" field for Ach transactions\n  \"\"\"\n  externalMemo: String\n  id: ID!\n  idempotencyKey: String!\n  \"\"\"\n  Notify the contact if and when the transaction moves to the processing state\n  False by default, ignored unless a credit to a contact with a valid email\n  \"\"\"\n  notifyContactProcessing: Boolean\n  recurringSchedule: InputCashRecurringSchedule\n  \"\"\"If not set, initiate the transaction as soon as possible (e.g. business day)\"\"\"\n  scheduledSendAt: Time\n  updateType: InputCashTransactionUpdateArgumentUnion\n}\n\n\"\"\"Miles transfer failure reasons\"\"\"\nenum MilesTransferFailureReason {\n  \"\"\"A generic error occurred during miles transaction\"\"\"\n  GENERIC_ERROR\n  \"\"\"Membership is invalid\"\"\"\n  INVALID_MEMBER_INFORMATION_ID\n  \"\"\"Membership account is ineligible\"\"\"\n  MEMBER_ACCOUNT_INELEGIBLE\n  \"\"\"Membership name does not match\"\"\"\n  MEMBER_NAME_NOT_MATCHING\n}\n\ntype CreditLimitFactorTileEdge {\n  cursor: String\n  \"\"\"Credit Limit Factor Tile Node\"\"\"\n  node: CreditLimitFactorTile\n}\n\ntype DisableExpensesPayload {\n  clientMutationId: String!\n  integration: Integration\n}\n\nenum CardPaymentFailureSeverity {\n  FATAL\n  NONE\n  RECOVERABLE\n  UNKNOWN\n}\n\ninput RefundPaymentInput {\n  paymentId: ID\n}\n\ntype PaymentDetailsTile implements Node {\n  \"\"\"The billing period. Resolved by the present service\"\"\"\n  currentBillingPeriod: BillingPeriod\n  \"\"\"The default funding source, this will be used for automatic collections and scheduled collections where no funding source is explicitly requested\"\"\"\n  defaultFundingSource: FundingSource\n  \"\"\"Estimated next due amount\"\"\"\n  estimatedNextDueAmount: UpcomingDueAmount\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\ntype StatementEntryConnection {\n  edges: [StatementEntryEdge]\n  pageInfo: PageInfo!\n}\n\ntype CompletePaymentApprovalWithTokenPayload {\n  clientMutationId: String!\n  paymentApproval: PaymentApproval!\n  paymentApprovalResult: PaymentApprovalResult!\n  paymentContext: DepositsPayment!\n}\n\ntype CashTransactionReceivablesOffersRepaymentDetails {\n  _: Boolean\n}\n\ninput InputCashTransactionAchDebitArguments {\n  \"\"\"ID of a connected external bank account to pull funds from\"\"\"\n  financialAccountId: ID!\n}\n\ntype DisconnectApiClientPayload {\n  clientMutationId: String!\n}\n\ntype CollectionAttemptPeekDetails {\n  \"\"\"Journal Entries approximately leading to this payment attempt\"\"\"\n  cardTransactionJournalEntries(limit: Int!): [JournalEntry]!\n  periodEndTime: Time!\n  periodStartTime: Time\n}\n\n\"\"\"details about manager setup\"\"\"\ntype ManagerSetupSummary {\n  \"\"\"has managers setup for all regular users\"\"\"\n  hasCompleteManagerSetup: Boolean\n  \"\"\"has some managers setup for regular users\"\"\"\n  hasSomeManagers: Boolean\n}\n\nenum GetRfiInputType {\n  ARFI_CASE_ID\n  ARFI_CASE_NUMBER\n  ID\n}\n\nenum CountryAlpha3 {\n  BRB\n  RWA\n  SDN\n  GAB\n  ZWE\n  PCN\n  BRA\n  CUW\n  ATF\n  ISR\n  CRI\n  BTN\n  BWA\n  GMB\n  CAF\n  LCA\n  BRN\n  ARM\n  LKA\n  NLD\n  MHL\n  CAN\n  VNM\n  BVT\n  PRT\n  URY\n  UGA\n  GRC\n  DNK\n  CPV\n  MRT\n  MMR\n  TJK\n  CCK\n  AND\n  FRA\n  SLE\n  GBR\n  JEY\n  LBN\n  GGY\n  MNP\n  FJI\n  GUM\n  PLW\n  KAZ\n  MTQ\n  BLM\n  ABW\n  LAO\n  GRL\n  COL\n  DZA\n  MKD\n  NIU\n  STP\n  PRI\n  TON\n  KHM\n  VEN\n  NFK\n  UZB\n  TZA\n  AIA\n  BIH\n  HRV\n  VAT\n  DMA\n  VIR\n  LUX\n  JOR\n  UMI\n  PER\n  MLI\n  SJM\n  TGO\n  SWZ\n  MCO\n  HMD\n  IDN\n  HTI\n  LIE\n  VCT\n  BGR\n  SGP\n  MSR\n  SLB\n  HND\n  GNB\n  ZAF\n  SRB\n  ATG\n  LBY\n  ETH\n  UKR\n  SYC\n  MYT\n  DEU\n  TWN\n  GUF\n  VGB\n  MAR\n  LSO\n  NPL\n  KOR\n  EST\n  FRO\n  HUN\n  THA\n  SHN\n  KNA\n  BEN\n  SPM\n  EGY\n  BES\n  MLT\n  MAC\n  TUN\n  PYF\n  SUR\n  KGZ\n  NCL\n  FSM\n  TKL\n  ROU\n  NIC\n  MWI\n  CHE\n  ZMB\n  ISL\n  IOT\n  GIN\n  ARG\n  GIB\n  ITA\n  ECU\n  GHA\n  PHL\n  TTO\n  QAT\n  TCD\n  NRU\n  SYR\n  JPN\n  CHN\n  KIR\n  MUS\n  BFA\n  ATA\n  BOL\n  ERI\n  OMN\n  GNQ\n  TUR\n  LVA\n  JAM\n  WSM\n  COG\n  GTM\n  AGO\n  SVK\n  SOM\n  LBR\n  IRL\n  CYP\n  BDI\n  ARE\n  CYM\n  SVN\n  GRD\n  AZE\n  BMU\n  AUS\n  VUT\n  TCA\n  COD\n  MDA\n  PRY\n  BLZ\n  NER\n  IMN\n  AFG\n  BHS\n  NAM\n  YEM\n  CIV\n  SMR\n  GEO\n  POL\n  SEN\n  USA\n  PAN\n  GLP\n  SSD\n  MDG\n  SWE\n  PNG\n  COK\n  GUY\n  MNE\n  TKM\n  KWT\n  MNG\n  WLF\n  NOR\n  ALA\n  KEN\n  FLK\n  BEL\n  LTU\n  IRQ\n  TUV\n  MYS\n  SXM\n  NGA\n  BHR\n  ESP\n  MOZ\n  PAK\n  SGS\n  ALB\n  SLV\n  CZE\n  ESH\n  CHL\n  NZL\n  BGD\n  MEX\n  MDV\n  BLR\n  PRK\n  HKG\n  REU\n  CMR\n  DJI\n  AUT\n  IND\n  ASM\n  COM\n  TLS\n  CXR\n  DOM\n  RUS\n  PSE\n  MAF\n  CUB\n  IRN\n  SAU\n  FIN\n}\n\ntype CreateReimbursementPayload {\n  clientMutationId: String!\n  reimbursementItem: ReimbursementItem!\n}\n\nenum RewardsTriggerInstanceStatus {\n  ACTIVE\n  EXPIRED\n  TRIGGERED\n}\n\ntype DeleteLocationPayload {\n  clientMutationId: String!\n}\n\ntype EmailAssetAttachment {\n  asset: Asset\n  contentType: String\n  size: Int\n}\n\ninput UpdateUserCategoriesInput {\n  clientMutationId: String!\n  userCategories: [UserCategoryInput]!\n}\n\ntype ShouldWithdrawPointsResponse {\n  allowed: Boolean!\n}\n\ninput GenerateDepositsVerificationLetterDownloadUrlInput {\n  clientMutationId: String!\n  depositsAccountId: ID\n}\n\nenum ExpensesRuleType {\n  MANAGER_REVIEW\n  MEMO\n  RECEIPT\n  REJECTION\n  STANDARD\n}\n\ntype ExternalIntegrationEntityEdge {\n  cursor: String\n  node: ExternalIntegrationEntity\n}\n\n\"\"\"ISOz time\"\"\"\nscalar Time\n\ntype CanWithdrawFundsResponse {\n  \"\"\"Days since the last ach debit or cheque deposit settled transaction\"\"\"\n  daysSinceLastSettledAddFundsTransaction: Int\n  daysSinceLatestAchDebitSettlement: Int\n  enabled: Boolean!\n  issues: [DepositsWithdrawFundsIssue!]!\n}\n\ntype CardStatementConnection {\n  edges: [CardStatementEdge]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\nenum ReimbursementAction {\n  APPROVE\n  CANCEL\n  COMPLETE_PAYMENT\n  CREATE\n  CREATE_PAYMENT\n  FAIL_PAYMENT\n  INVALID\n  REJECT\n  RETRY_PAYMENT\n  REVOKE\n  SUBMIT\n  UPDATE\n}\n\ntype CancelTransactionPayload {\n  clientMutationId: String!\n  transaction: DepositsTransaction!\n}\n\ntype VendorInstitution {\n  logoBase64: String\n  metadata: VendorInstitutionMetadata\n  vendor: FinancialsVendor\n}\n\ntype ApprovalsReviewAssigneeEdge {\n  cursor: String\n  node: ApprovalsReviewAssignee\n}\n\ntype Report {\n  file: Asset\n  format: ReportFormat\n  type: ReportType\n}\n\ntype SetReceivablesOffersRevenueAccessEnabledPayload {\n  account: ReceivablesOffersAccount\n  clientMutationId: String!\n}\n\ninput DisableExpensesInput {\n  clientMutationId: String!\n  id: ID!\n}\n\ntype MonthlyUserBalance {\n  amountSpent: Int!\n  month: String!\n  year: Int!\n}\n\ntype PositivePayAccountSetting implements Node {\n  achCompanyId: String!\n  deletedAt: Time\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  name: String!\n  status: PositivePayAccountSettingStatus!\n}\n\ntype FinicityMetadata {\n  isOauth: Boolean\n}\n\nenum ConversionIneligibilityReason {\n  MANUAL_UNDERWRITING_REQUIRED\n}\n\ntype UpdateContactDefaultErpCategoryPayload {\n  clientMutationId: String!\n}\n\ninput DisableIntegrationInput {\n  clientMutationId: String!\n  id: ID!\n}\n\ninput CDaInput {\n  clientMutationId: String!\n}\n\ntype CardPaymentForwarderBeneficialOwner {\n  firstName: String\n  lastName: String\n}\n\n\"\"\"Payload for Netsuite vendors\"\"\"\ntype NetsuiteVendor {\n  isInactive: Boolean\n  name: String\n}\n\ntype AdminUpdateApprovalsReviewPayload {\n  approvalsReview: ApprovalsReview\n  clientMutationId: String!\n}\n\ntype RecurringRulesAndFutureDates {\n  futurePayments(after: String, before: String, first: Int, last: Int): DepositsProcessingAndFuturePaymentDateConnection\n  recurringRules: RecurringRules\n}\n\ntype MerchantCategoryEdge {\n  cursor: String\n  node: MerchantCategory\n}\n\ninput ConnectAmazonMwsCredentialInput {\n  authToken: String!\n  clientMutationId: String!\n  id: ID!\n  sellerId: String!\n}\n\nenum CountryAlpha2 {\n  CZ\n  NL\n  BH\n  KZ\n  MC\n  LR\n  BV\n  PS\n  ST\n  GQ\n  TR\n  BF\n  KG\n  FK\n  ID\n  UA\n  ET\n  CA\n  CI\n  BE\n  VE\n  VI\n  RS\n  ZM\n  GL\n  KN\n  TC\n  TL\n  CX\n  US\n  SM\n  TZ\n  MT\n  EC\n  MZ\n  NF\n  VG\n  GT\n  FM\n  HK\n  BM\n  IQ\n  KI\n  HT\n  RU\n  TV\n  LY\n  DK\n  PH\n  DM\n  FO\n  AZ\n  RO\n  AG\n  YE\n  LU\n  VC\n  KE\n  KW\n  ZW\n  IL\n  PE\n  SN\n  BJ\n  PF\n  CC\n  AQ\n  OM\n  CU\n  GA\n  SL\n  DO\n  PG\n  UZ\n  PN\n  SJ\n  NU\n  TK\n  NZ\n  SY\n  ZA\n  NC\n  TN\n  EH\n  BA\n  SK\n  AS\n  AX\n  IR\n  GE\n  NI\n  PR\n  UG\n  TT\n  KR\n  MF\n  TG\n  MR\n  IO\n  MG\n  JP\n  TF\n  BN\n  MH\n  GD\n  NP\n  BW\n  BO\n  FJ\n  QA\n  CN\n  NR\n  DZ\n  AU\n  MN\n  BZ\n  VN\n  EE\n  GP\n  NE\n  MO\n  BQ\n  AF\n  GF\n  DE\n  IS\n  VU\n  CM\n  TM\n  AI\n  PK\n  MU\n  IM\n  UM\n  SG\n  AD\n  AO\n  SH\n  CV\n  SE\n  JE\n  AM\n  CL\n  GN\n  CO\n  KY\n  SC\n  GS\n  GW\n  KM\n  SV\n  FR\n  RE\n  AT\n  CF\n  BY\n  AW\n  GR\n  MQ\n  SX\n  GH\n  SB\n  GG\n  BB\n  MP\n  JO\n  SO\n  GY\n  ML\n  LI\n  CD\n  JM\n  NG\n  NA\n  LV\n  HM\n  TW\n  HR\n  GB\n  LA\n  WF\n  EG\n  SZ\n  CR\n  BS\n  KH\n  MA\n  BL\n  SD\n  MV\n  SS\n  LB\n  SA\n  TO\n  TD\n  MX\n  SI\n  GI\n  CY\n  PT\n  BT\n  MK\n  BG\n  MM\n  VA\n  PL\n  YT\n  BI\n  MY\n  TH\n  BR\n  PA\n  HN\n  TJ\n  CK\n  BD\n  MD\n  PM\n  RW\n  KP\n  IE\n  LS\n  LC\n  GU\n  NO\n  AE\n  PY\n  CG\n  LT\n  IN\n  ES\n  DJ\n  SR\n  GM\n  HU\n  ME\n  AR\n  IT\n  CW\n  CH\n  PW\n  FI\n  LK\n  MS\n  WS\n  AL\n  MW\n  UY\n  ER\n}\n\ntype ReplacesRecordConnection {\n  edges: [ReplacesRecordEdge]\n  pageInfo: PageInfo!\n}\n\ntype ReconnectErpFeedPayload {\n  clientMutationId: String!\n  erpFeed: ErpFeed\n  errorMessage: String\n  status: String\n}\n\ntype UpdateCashTransactionPayload {\n  clientMutationId: String!\n  transaction: CashTransaction!\n}\n\ntype Department implements Node @key(fields: \"id\") {\n  deletedAt: Time\n  description: String\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  membersCount: Int\n  name: String\n  users(after: String, before: String, first: Int, last: Int): UserConnection\n}\n\ninput ApprovalsRoutingRuleIndividualsV2Input {\n  individualTypes: [ApprovalsUserTypeIndividualInput!]!\n  managerTypes: [ApprovalsUserTypeManagerInput!]!\n}\n\ntype AscendaMaintenance {\n  creditingDelayHours: Int\n  enabled: Boolean!\n}\n\ntype SendInvoicePayload {\n  clientMutationId: String!\n  invoice: InvoicingInvoice\n}\n\ninput AddressInput {\n  address1: String!\n  address2: String\n  city: String!\n  country: String!\n  state: String!\n  zip: String!\n}\n\ninput SyncIntegrationInput {\n  clientMutationId: String!\n  endDateRange: Time\n  id: ID!\n  isPrimitive: Boolean\n  startDateRange: Time\n  statementEntryTypes: [String]\n}\n\ntype GenerateDepositsVerificationLetterDownloadUrlPayload {\n  clientMutationId: String!\n  depositsVerificationLetterDownloadUrl: String!\n}\n\ntype OptOutOfIncentiveCampaignPayload {\n  clientMutationId: String!\n}\n\n\"\"\"The summation of all active offers that the customer has available as of now\"\"\"\ntype ReceivablesOffersCumulativeOffer {\n  \"\"\"Whether any of the active offers has been capped\"\"\"\n  hasBeenCapped: Boolean\n  \"\"\"Sum of previously advanced amounts across all active offers\"\"\"\n  sumAdvancedAmount: FinancialAsset\n  \"\"\"Sum of estimated loan repayments amounts across all active offers\"\"\"\n  sumEstimatedLoanRepayments: FinancialAsset\n  \"\"\"Sum of estimated payout amounts across all active offers\"\"\"\n  sumEstimatedPayout: FinancialAsset\n  \"\"\"Sum of estimated reserve amounts across all active offers\"\"\"\n  sumEstimatedReserveAmount: FinancialAsset\n  \"\"\"Sum of offer amounts across all active offers minus any pending balance from card transactions\"\"\"\n  sumOfferAmount: FinancialAsset\n  \"\"\"Sum of payout net sales amounts across all active offers\"\"\"\n  sumPayoutNetSales: FinancialAsset\n  \"\"\"Sum of payout reserve credit amounts across all active offers\"\"\"\n  sumPayoutReserveCredit: FinancialAsset\n}\n\ninput SetApprovalsUnsafeFlagInput {\n  clientMutationId: String!\n  flagName: String!\n  keyType: ApprovalsUnsafeFlagKeyType!\n  value: String!\n}\n\nenum SpendAggregateSortOrder {\n  ASC\n  DESC\n  INVALID\n}\n\n\"\"\"The event metadata for a comment event\"\"\"\ntype CardTransactionsInsightCommentEventMetadata {\n  \"\"\"The comment the user made on this spend alert\"\"\"\n  comment: String!\n}\n\ninput CreateCredentialInput {\n  clientMutationId: String!\n  vendor: String!\n}\n\ntype EditPaymentPayload {\n  clientMutationId: String!\n  payment: DepositsPayment!\n}\n\ninput SendInvoiceInput {\n  clientMutationId: String!\n  idempotencyKey: String!\n  invoiceId: ID!\n}\n\n\"\"\"object containing information describing the health of a funding source\"\"\"\ntype FundingSourceHealth {\n  \"\"\"Whether this account has any 'successful' or 'failed' collections\"\"\"\n  hasSettledCollections: Boolean!\n  \"\"\"The most recent failure severity\"\"\"\n  mostRecentFailureSeverity: CardPaymentFailureSeverity\n  \"\"\"The most recent failure type\"\"\"\n  mostRecentFailureType: CardPaymentFailureTypeV3\n  \"\"\"The timestamp of the most recently settled collection\"\"\"\n  mostRecentSettledAt: Time\n}\n\ntype Suggestion {\n  field: String!\n  options: [SuggestionType]!\n}\n\ntype UnderwritingAnalysisFlagConnection {\n  edges: [UnderwritingAnalysisFlagEdge]\n  pageInfo: PageInfo!\n}\n\ntype CreateApprovalsRequestPayload {\n  approvalsRequest: ApprovalsRequest\n  clientMutationId: String!\n}\n\ntype CashRecurringScheduleDurationWithTotalCount {\n  \"\"\"\n  Keep creating transactions until `total_count` transactions have been scheduled.\n  We make this distinction because transactions can be cancelled which still count towards the `total_count` amount.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"Quickbooks credential payload\"\"\"\ntype CredentialQuickbooksPayload {\n  \"\"\"Boolean describing whether the credential has the required scopes for enabling bill sync\"\"\"\n  hasBillSyncScopes: Boolean\n}\n\ntype OnboardingPageMfa {\n  _: Boolean\n  content: OnboardingFormEmpty!\n}\n\ntype ReceivablesOffersOffersGroupEdge {\n  cursor: String\n  node: ReceivablesOffersOffersGroup\n}\n\ntype UpdateApprovalsRequestPayload {\n  approvalsRequest: ApprovalsRequest\n  clientMutationId: String!\n}\n\nenum FinancialDocumentStatus {\n  ACCEPTED\n  DUPLICATE\n  \"\"\"Uploaded statements are defaulted to `processing` status\"\"\"\n  PROCESSING\n  REJECTED\n}\n\ninput ProcessPageViewInput {\n  clientMutationId: String!\n  pageView: PageView!\n}\n\nunion BulkUserInviteResult = BulkUserInviteError | User\n\ninput SetReceivablesOffersAutoAdvanceModeInput {\n  clientMutationId: String!\n  value: Boolean!\n}\n\ntype PaymentApprovalPaymentContext {\n  amount: Int\n  associationId: ID\n  \"\"\"The institution's logo as a base64 PNG, if available\"\"\"\n  beneficiaryBankLogoBase64: String\n  counterpartyLocation: AccountLocation\n  counterpartyName: String\n  logicalId: ID!\n  paymentDescription: String\n  paymentInitiatorFirstName: String\n  paymentInitiatorLastName: String\n  paymentStatus: DepositsPaymentStatus\n  paymentStatusReason: StatusReason\n  paymentType: PaymentRail\n  \"\"\"Routing number associated with the recipient (counterparty)\"\"\"\n  routingNumber: String\n}\n\ntype OnboardingPagePeriodicReview {\n  _: Boolean\n  content: OnboardingPagePeriodicReview!\n}\n\ntype TransactionOperationEdge {\n  cursor: String\n  node: TransactionOperation\n}\n\ntype CreateInvoiceTemplatePayload {\n  clientMutationId: String!\n  invoiceTemplate: InvoiceTemplate\n}\n\ntype MarkInvoicePayload {\n  clientMutationId: String!\n  invoice: InvoicingInvoice\n}\n\ntype ActivateCardPayload {\n  card: Card\n  clientMutationId: String!\n}\n\ntype CurrentBalanceTile implements Node {\n  \"\"\"Customer's global limit and balance consumption\"\"\"\n  balanceSummary: AccountBalanceSummary!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n}\n\ninput ToggleRuleForStatementEntryInput {\n  clientMutationId: String!\n  integrationRuleId: ID!\n  statementEntryId: ID!\n}\n\n\"\"\"One of many seller accounts associated with a receivables offers account\"\"\"\ntype ReceivablesOffersSellerAccount implements Node {\n  \"\"\"The data-importer data provider id\"\"\"\n  dataProviderId: String!\n  \"\"\"The list of failing checks (for trial/full access, or ongoing monitoring checks)\"\"\"\n  failingChecks: ReceivablesOffersAccountFailingChecks!\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  \"\"\"The integration credential id\"\"\"\n  integrationCredentialId: String!\n  \"\"\"The settings for the seller account (user-modifiable)\"\"\"\n  settings: ReceivablesOffersSellerAccountSettings!\n  \"\"\"The status of the seller account\"\"\"\n  status: ReceivablesOffersAccountStatus!\n  \"\"\"The vendor type (sales platform, i.e. Amazon, Shopify, etc.)\"\"\"\n  vendor: ReceivablesOffersVendorType!\n}\n\ntype ReplacedByRecord {\n  card: Card!\n  insertedAt: Time!\n  reason: CardReplacementReason!\n}\n	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
sm_cl109wxxh000a0e603t4ne8an	sv_ckwwkmg94000e0e427i4onev8	\"Directs the executor to include this field or fragment only when the `if` argument is true\"\ndirective @include(\n    \"Included when true.\"\n    if: Boolean!\n  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"Directs the executor to skip this field or fragment when the `if`'argument is true.\"\ndirective @skip(\n    \"Skipped when true.\"\n    if: Boolean!\n  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ndirective @extends on OBJECT | INTERFACE\n\ndirective @external on FIELD_DEFINITION\n\ndirective @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE\n\ndirective @provides(fields: _FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: _FieldSet!) on FIELD_DEFINITION\n\n\"Marks the field, argument, input field or enum value as deprecated\"\ndirective @deprecated(\n    \"The reason for the deprecation\"\n    reason: String = \"No longer supported\"\n  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION\n\n\"Exposes a URL that specifies the behaviour of this scalar.\"\ndirective @specifiedBy(\n    \"The URL that specifies the behaviour of this scalar.\"\n    url: String!\n  ) on SCALAR\n\n\"\"\"\nThe interface for paginating through collections of elements.\nEvery collection of entities not returned by a mutation result should\npaginate through a connection. That is, `types` with a field that is\nan `array` should be exceedingly rare.\nWe want all collections of things to be paginated.\n\"\"\"\ninterface Connection {\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"\"\"\n  The total count of items matching the filter criteria specified for this connection.\n  This value may be approximate. And this value may not be provided at all. Not all connections\n  can be counted easily.\n  \"\"\"\n  totalCount: Int\n}\n\n\"A single node in a policy graph. This interface is implemented by rules, rule groups.\"\ninterface PolicyNode {\n  \"\"\"\n  The child nodes of this rule ( may be rules or more groups)\n  IDs are used so that clients don't have to make recursive queries.\n  \"\"\"\n  childIds: [ID!]\n  \"The unique ID of the node in this policy document\"\n  nodeId: ID!\n}\n\nunion PolicyReason = PolicyDocument\n\n\"All possible forms of metadata-based rule-definition\"\nunion PolicyRuleDefinition = PolicyCustomRuleDefinition | PolicyPerDiemRuleDefinition | PolicyReimbursementRuleDefinition | PolicyStandardRuleDefinition | PolicyVendorsForCategoryRuleDefinition\n\n\"PolicyRuleGroups either have a predefined type, or a custom name\"\nunion PolicyRuleGroupDescription = CustomRuleGroup | PolicyPredefinedRuleGroup\n\nunion _Entity = Policy | RequestAction\n\n\"A rule group with a configured name. This can be used for custom categories, and for subcategories.\"\ntype CustomRuleGroup {\n  name: String\n}\n\n\"Financial Asset wrapper\"\ntype FinancialAsset {\n  \"The instrument code (usd, etc.). Currently, only usd is supported.\"\n  instrumentCode: FinancialInstrumentCode!\n  \"The amount in cents\"\n  quantityCents: Int!\n}\n\n\"Mutations\"\ntype Mutation {\n  createOrUpdateExpensePolicy(input: CreateOrUpdateExpensePolicyInput!): Policy!\n  disablePolicy(id: ID!): Policy!\n  enablePolicy(id: ID!): Policy!\n}\n\ntype PageInfo {\n  \"When paginating forwards, the cursor to continue.\"\n  endCursor: String\n  \"When paginating forwards, are there more items?\"\n  hasNextPage: Boolean!\n  \"When paginating backwards, are there more items?\"\n  hasPreviousPage: Boolean!\n  \"When paginating backwards, the cursor to continue.\"\n  startCursor: String\n}\n\n\"Top level Policy\"\ntype Policy @key(fields : \"id\") {\n  \"An optional customer specified description\"\n  description: String\n  \"An optional customer specified display name\"\n  displayName: String\n  \"The policy's unique ID\"\n  id: ID!\n  \"Specifies the type of request which this policy operates on\"\n  requestType: RequestType!\n  \"The actual content of the policy, which can be used to render the policy for a user to read.\"\n  ruleDetails: PolicyDocument\n  \"The status of this policy (e.g. whether it is disabled)\"\n  status: PolicyStatus!\n}\n\n\"A policy connection for policy pagination.\"\ntype PolicyConnection implements Connection {\n  \"The policies in the current page of results.\"\n  edges: [PolicyEdge!]!\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"The total count of policies matching the filter criteria specified for this connection.\"\n  totalCount: Int\n}\n\n\"A rule for which we will not generate the description. Instead, we rely on a hardcoded one.\"\ntype PolicyCustomRuleDefinition {\n  policyDescription: String!\n}\n\ntype PolicyDocument implements PolicyNode {\n  \"\"\"\n  The 'root nodes' of the Policy Document.\n  When used to represent a Policy, there will usually have multiple nodes, e.g. one for each category of rules.\n  When used to represent a single Rule, there will usually be just a single root node.\n  \"\"\"\n  childIds: [ID!]!\n  \"The unique ID of the node in this root node.\"\n  nodeId: ID!\n  \"\"\"\n  The list of Policy elements which describe a policy (or policy fragment).\n  Since each node has an ID and a list of childIds, they form an Adjacency List graph.\n  \"\"\"\n  nodes: [PolicyNode!]!\n}\n\n\"A Policy edge for Policy pagination.\"\ntype PolicyEdge {\n  \"The opaque cursor of the current edge.\"\n  cursor: String\n  \"The policy at this edge.\"\n  node: Policy\n}\n\n\"A 'virtual' group of merchant categories, which combines multiple underlying merchant categories.\"\ntype PolicyMerchantCategoryGroup {\n  ids: [ID!]\n  name: String!\n}\n\n\"A 'virtual' group of merchants, which combines multiple underlying merchants with a single name.\"\ntype PolicyMerchantGroup {\n  ids: [ID!]\n  name: String!\n}\n\n\"A rule which limit's a user's per-day spending in specific categories\"\ntype PolicyPerDiemRuleDefinition {\n  \"If the threshold applies only to a set of merchant categories, they are listed here\"\n  includedMerchantCategories: [PolicyMerchantCategoryGroup!]!\n  \"If the threshold applies only to a set of merchants, they are listed here\"\n  includedMerchants: [PolicyMerchantGroup!]!\n  \"The rule is triggered if the user's expenses in a single day exceed this amount\"\n  limit: FinancialAsset!\n}\n\n\"A rule group with a set 'type' which corresponds to preset descriptions in clients\"\ntype PolicyPredefinedRuleGroup {\n  \"The 'type' of the rule group. Each type generally corresponds to a single kind of RequestAction.\"\n  type: PolicyRuleGroupType\n}\n\n\"\"\"\nA rule that deals with reimbursement submission.\nExample: Reimbursements must be submitted up to 60 days after the purchase.\n\"\"\"\ntype PolicyReimbursementRuleDefinition {\n  submissionDeadlineDaysAfterPurchase: Int\n}\n\n\"A PolicyRule describes a Policy Engine Rule, which performs actions when expenses meet particular conditions.\"\ntype PolicyRule implements PolicyNode {\n  \"The actions that can be returned by the rule.\"\n  actionTypes: [RequestActionType!]!\n  \"\"\"\n  The child nodes of this rule (may be rules or more groups).\n  Note that sub-rules are not implemented yet (dec-2021), even though the API supports them.\n  \"\"\"\n  childIds: [ID!]\n  \"if set, this description will override the metadata-generated rule description in the frontend.\"\n  customDescription: PolicyRuleDescription\n  \"An object which defines the rule's conditions\"\n  definition: PolicyRuleDefinition\n  \"When specified, this rule only applies to the specific types of expense.\"\n  expenseTypes: [ExpenseType!]!\n  \"\"\"\n  When true, this rule should be displayed as a \"prohibition\" (i.e. you may not spend)\n  instead of advisory (i.e. these will be flagged for review)\n  \"\"\"\n  isProhibition: Boolean\n  \"The unique ID of the node in this policy document. May also be the ID of the Rule.\"\n  nodeId: ID!\n}\n\n\"A hardcoded rule description.\"\ntype PolicyRuleDescription {\n  \"A hardcoded description to explain a rule to the user.\"\n  overrideDescription: String\n}\n\n\"A PolicyRuleGroup references rules and sub-groups. PolicyRuleGroups are used both for top-level categories, and for subcategories.\"\ntype PolicyRuleGroup implements PolicyNode {\n  \"The child nodes of this group (may be rules or more groups)\"\n  childIds: [ID!]!\n  \"The type of group, or null\"\n  description: PolicyRuleGroupDescription\n  \"\"\"\n  The unique ID of the node in this policy document.\n  May be the ID of a Rule, or a Policy, or even a generated ID, depending\n  on how Groups are implemented.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"A rule which results in an action when all of its conditions are met\"\ntype PolicyStandardRuleDefinition {\n  \"If the threshold applies only to a set of merchant categories, they are listed here\"\n  merchantCategories: [PolicyMerchantCategoryGroup!]!\n  \"Which operation to apply for the list of merchant categories.\"\n  merchantCategoriesCondition: PolicyStandardRuleConditionOperator!\n  \"If the threshold applies only to a set of merchant, they are listed here\"\n  merchants: [PolicyMerchantGroup!]!\n  \"Which operation to apply for the list of merchants.\"\n  merchantsCondition: PolicyStandardRuleConditionOperator!\n  \"The rule is triggered if an expense amount is over this amount\"\n  threshold: FinancialAsset\n}\n\n\"\"\"\nA rule which specifies permitted merchants for specific categories.\nE.g. Airfare must be booked in TravelBank.\n\"\"\"\ntype PolicyVendorsForCategoryRuleDefinition {\n  \"The rule's actions are triggered when expenses in the categories are made with merchants not in this list\"\n  allowedMerchantsForCategory: [PolicyMerchantGroup!]!\n  \"The category for which we are specifying merchants\"\n  merchantCategory: PolicyMerchantCategoryGroup\n}\n\n\"Queries\"\ntype Query {\n  _entities(representations: [_Any!]!): [_Entity]!\n  _service: _Service\n  \"List Policies\"\n  policies(filter: PolicyFilterInput, page: PaginationInput): PolicyConnection\n  \"Get an policy by id\"\n  policy(id: ID!): Policy\n  \"Get the logged in customer account's root policy for the given request type\"\n  rootPolicy(requestType: RequestType!): Policy\n}\n\ntype RequestAction @extends @key(fields : \"id\") {\n  id: ID! @external\n  policyReason: PolicyReason\n}\n\ntype _Service {\n  sdl: String!\n}\n\n\"The type of the Expense.\"\nenum ExpenseType {\n  \"A bill pay expense.\"\n  BILLPAY\n  \"A card expense.\"\n  CARD\n  \"A reimbursement expense.\"\n  REIMBURSEMENT\n}\n\n\"\"\"\n From APIv1\n https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L7\n https://github.com/brexhq/credit_card/blob/main/libraries/brex_financial_asset/lib/financial_instrument_constants.ex#L962\n\"\"\"\nenum FinancialInstrumentCode {\n  AED\n  AFN\n  ALL\n  AMD\n  ANG\n  AOA\n  ARS\n  AUD\n  AWG\n  AZN\n  BAM\n  BBD\n  BDT\n  BGN\n  BHD\n  BIF\n  BMD\n  BND\n  BOB\n  BOV\n  BRL\n  BSD\n  BTN\n  BWP\n  BYN\n  BZD\n  CAD\n  CDF\n  CHE\n  CHF\n  CHW\n  CLF\n  CLP\n  CNY\n  COP\n  COU\n  CRC\n  CRYPTO_BTC\n  CRYPTO_ETH\n  CRYPTO_USDC\n  CUC\n  CUP\n  CVE\n  CZK\n  DJF\n  DKK\n  DOP\n  DZD\n  EGP\n  ERN\n  ETB\n  EUR\n  FJD\n  FKP\n  GBP\n  GEL\n  GHS\n  GIP\n  GMD\n  GNF\n  GTQ\n  GYD\n  HKD\n  HNL\n  HRK\n  HTG\n  HUF\n  IDR\n  ILS\n  INR\n  IQD\n  IRR\n  ISK\n  JMD\n  JOD\n  JPY\n  KES\n  KGS\n  KHR\n  KMF\n  KPW\n  KRW\n  KWD\n  KYD\n  KZT\n  LAK\n  LBP\n  LKR\n  LRD\n  LSL\n  LYD\n  MAD\n  MDL\n  MGA\n  MKD\n  MMK\n  MNT\n  MOP\n  MRU\n  MUR\n  MVR\n  MWK\n  MXN\n  MXV\n  MYR\n  MZN\n  NAD\n  NASDAQ_DAGXX\n  NASDAQ_DGCXX\n  NASDAQ_DGVXX\n  NASDAQ_DPGXX\n  NASDAQ_GGBXX\n  NASDAQ_GGDXX\n  NASDAQ_GGSXX\n  NASDAQ_GSBXX\n  NGN\n  NIO\n  NOK\n  NPR\n  NZD\n  OMR\n  PAB\n  PEN\n  PGK\n  PHP\n  PKR\n  PLN\n  PYG\n  QAR\n  RON\n  RSD\n  RUB\n  RWF\n  SAR\n  SBD\n  SCR\n  SDG\n  SEK\n  SGD\n  SHP\n  SLL\n  SOS\n  SRD\n  SSP\n  STN\n  SVC\n  SYP\n  SZL\n  THB\n  TJS\n  TMT\n  TND\n  TOP\n  TRY\n  TTD\n  TWD\n  TZS\n  UAH\n  UGX\n  USD\n  USN\n  UYI\n  UYU\n  UYW\n  UZS\n  VES\n  VND\n  VUV\n  WST\n  XAF\n  XAG\n  XAU\n  XBA\n  XBB\n  XBC\n  XBD\n  XCD\n  XDR\n  XOF\n  XPD\n  XPF\n  XPT\n  XSU\n  XTS\n  XUA\n  XXX\n  YER\n  ZAR\n  ZMW\n  ZWL\n}\n\n\"\"\"\nTime bucketting strategy\n- START: Buckets start at the startsAt timestamp\n- END: Buckets start at the endsAt timestamp\n- CALENDAR: Buckets are aligned with the calendar units (e.g. WEEKS) but can include\npartial buckets based on the startsAt and endsAt timebuckets\n\"\"\"\nenum InsightsTimeBucketStrategy {\n  CALENDAR\n  END\n  START\n}\n\n\"Generic time unit\"\nenum InsightsTimeUnit {\n  DAY\n  MONTH\n  QUARTER\n  WEEK\n  YEAR\n}\n\nenum OrderByDirection {\n  ASCENDING\n  DESCENDING\n}\n\nenum PolicyRuleGroupType {\n  \"A group for rules which define when memos are required\"\n  MEMOS\n  \"A group for rules which define when receipts are required\"\n  RECEIPTS\n  \"A group for rules prohibit certain kinds of expenses\"\n  RESTRICTIONS\n  \"A group for rules which flag expenses for review\"\n  REVIEW\n  \"A group to represent a root policy that calls many others\"\n  ROOT\n  \"A group for rules which monitor travel expenses\"\n  TRAVEL\n}\n\n\"An operation to be used for a list of subjects.\"\nenum PolicyStandardRuleConditionOperator {\n  ANY_OF\n  NONE_OF\n}\n\nenum PolicyStatus {\n  CREATED\n  DISABLED\n}\n\n\"The type of the request action.\"\nenum RequestActionType {\n  \"A memo is requested.\"\n  MEMO\n  \"A receipt is requested.\"\n  RECEIPT\n  \"A manager (or other) review is requested.\"\n  REVIEW\n}\n\n\"The type of the Request.\"\nenum RequestType {\n  \"This is a budget request.\"\n  BUDGET\n  \"This is an expense request.\"\n  EXPENSE\n}\n\n\"ISOz date\"\nscalar Date\n\n\"Json object\"\nscalar Json\n\n\"64Bit integer\"\nscalar Long\n\n\"ISOz time\"\nscalar Time\n\nscalar _Any\n\nscalar _FieldSet\n\n\"Input type for creating or updating an expense policy.\"\ninput CreateOrUpdateExpensePolicyInput {\n  \"Parameters for generating the new policy definition.\"\n  generateExpensePolicyRequest: GenerateExpensePolicyRequest!\n  \"A policy that should be updated with the new definition. If empty, a new policy will be created.\"\n  policyId: ID\n}\n\n\"\"\"\n From APIv1\n https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L13\n\"\"\"\ninput FinancialAssetInput {\n  \"The instrument code (usd, etc.). Currently, only usd is supported.\"\n  instrumentCode: FinancialInstrumentCode = USD\n  \"The amount in cents\"\n  quantityCents: Int\n}\n\ninput FinancialAssetRangeInput {\n  \"Exclusive, only considers given currency, required to have same currency when minAmount is provided.\"\n  maxAmount: FinancialAssetInput\n  \"Inclusive, only considers given currency, required to have same currency when maxAmount is provided.\"\n  minAmount: FinancialAssetInput\n}\n\ninput GenerateExpensePolicyRequest {\n  \"\"\"\n  The list of approval chains that should be used. The conditions are evaluated in the order they are given and the\n  first one that matches the expense will be used if a review is requested.\n  \"\"\"\n  approvalChains: [PolicyApprovalChainInput!]!\n  \"A name that will allow users to identify this policy.\"\n  displayName: String!\n  \"A complete representation of a policy given by its metadata.\"\n  ruleGroup: PolicyRuleGroupInput!\n}\n\n\"\"\"\nPagination parameters for enumerating items in a connection.\nOnly {first, after} OR {last, before} pairs can be set.\ne.g. If {first, before} is set, that will cause a validation error.\nThe cursors are optional. Without a specified cursor, it is assumed to start at\nthe first item (for `first`) or last item (for `last`) of the collection.\n\"\"\"\ninput PaginationInput {\n  \"The cursor to start the page at (exclusive).\"\n  after: String\n  \"The cursor to end the page at (exclusive).\"\n  before: String\n  \"The number of items to return in a page after the `after` cursor.\"\n  first: Int\n  \"The number of items to return in a page prior to the `before` cursor.\"\n  last: Int\n}\n\n\"An action set to be returned by a rule.\"\ninput PolicyActionSetInput {\n  \"A set of descriptions to inform users about the actions that are required.\"\n  descriptions: [String!]!\n  requireMemo: PolicyRequireExpenseMemoInput\n  requireReceipt: PolicyRequireExpenseReceiptInput\n  requireReview: PolicyRequireReviewInput\n}\n\n\"A user (or set of users) that are the target of an action.\"\ninput PolicyActionTargetInput {\n  customerUserId: ID\n  hierarchiesHierarchyLevelId: ID\n  managerLevelDifference: Int\n}\n\n\"An approval chain, including the condition for it to be used.\"\ninput PolicyApprovalChainInput {\n  \"\"\"\n  A rule to determine whether this approval chain should be used. If null, the approval chain will apply to any\n  expense.\n  \"\"\"\n  condition: PolicyExpenseRuleMetadataInput\n  \"The steps in this approval chain.\"\n  steps: [PolicyApprovalStepInput!]!\n}\n\n\"\"\"\nA step in the approval process consisting of reviews that can be requested in parallel. The step is only completed once\nALL reviews are completed.\n\"\"\"\ninput PolicyApprovalStepInput {\n  \"The reviews that must be performed before the next review step.\"\n  reviews: [PolicyReviewInput!]!\n}\n\n\"A node in the tree structure we use to represent a policy. Only one of the fields can be set.\"\ninput PolicyExpensePolicyNodeInput {\n  rule: PolicyRuleInput\n  ruleGroup: PolicyRuleGroupInput\n}\n\n\"The base type that contains the specific kinds of rule metadata.\"\ninput PolicyExpenseRuleMetadataInput {\n  \"A description to override our generated explainability text.\"\n  description: PolicyRuleDescriptionInput\n  \"A list of expense types this rule applies to.\"\n  expenseTypes: [ExpenseType!]\n  \"Specifies whether a rule is a prohibition for explainability purposes.\"\n  isProhibition: Boolean\n  perDiemMetadata: PolicyPerDiemMetadataInput\n  reimbursementRuleMetadata: PolicyReimbursementRuleMetadataInput\n  \"The different metadata types that can be used to describe a rule condition.\"\n  standardRuleMetadata: PolicyStandardRuleMetadataInput\n  vendorsInCategoryMetadata: PolicyVendorsForCategoryMetadataInput\n}\n\n\"Filters available to control which policies get returned.\"\ninput PolicyFilterInput {\n  \"Match IN specific types, match ALL when no filter is provided\"\n  requestTypes: [RequestType!]\n  \"Match IN specific statuses, match ALL when no filter is provided\"\n  statuses: [PolicyStatus!]\n}\n\n\"\"\"\nRepresentation of any attribute that should be represented as a Name and a set of IDs. Examples are Merchant Groups and\nMerchant Category Groups.\n\"\"\"\ninput PolicyNameAndIdsInput {\n  ids: [ID!]\n  name: String!\n}\n\n\"A rule that caps the total amount that can be spent daily. Currently can only be applied for Meals.\"\ninput PolicyPerDiemMetadataInput {\n  \"\"\"\n  The list of merchant categories in which this per diem amount can be used. It is not currently used in the rule\n  itself, but rather as metadata for display purposes.\n  \"\"\"\n  includedMerchantCategories: [PolicyNameAndIdsInput!]\n  \"\"\"\n  The list of merchants in which this per diem amount can be used. It is not currently used in the rule itself, but\n  rather as metadata for display purposes.\n  \"\"\"\n  includedMerchants: [PolicyNameAndIdsInput!]\n  \"The maximum amount that can be spent daily before this rule is triggered.\"\n  threshold: FinancialAssetInput!\n}\n\n\"\"\"\nA rule that deals with reimbursement submission.\nExample: Reimbursements must be submitted up to 60 days after the purchase.\n\"\"\"\ninput PolicyReimbursementRuleMetadataInput {\n  \"The maximum number of days after the purchase for the reimbursement to be submitted.\"\n  submissionDeadlineDaysAfterPurchase: Int\n}\n\n\"An action meaning a memo must be added to the expense.\"\ninput PolicyRequireExpenseMemoInput {\n  \"\"\"\n  A dummy field because input objects must have at least one input field.\n  https://spec.graphql.org/October2021/#sec-Input-Objects\n  \"\"\"\n  _: Boolean\n}\n\n\"An action meaning a receipt must be added to the expense.\"\ninput PolicyRequireExpenseReceiptInput {\n  \"\"\"\n  A dummy field because input objects must have at least one input field.\n  https://spec.graphql.org/October2021/#sec-Input-Objects\n  \"\"\"\n  _: Boolean\n}\n\n\"An action meaning a review is required. The object has no fields because the reviewers are to be specified in the review chain.\"\ninput PolicyRequireReviewInput {\n  \"\"\"\n  A dummy field because input objects must have at least one input field.\n  https://spec.graphql.org/October2021/#sec-Input-Objects\n  \"\"\"\n  _: Boolean\n}\n\n\"A set of reviewers that can perform a given review. An approval by ANY of them will cause the review to be completed.\"\ninput PolicyReviewInput {\n  reviewerSet: [PolicyActionTargetInput!]!\n}\n\n\"A description that overrides our generated explainability text.\"\ninput PolicyRuleDescriptionInput {\n  description: String!\n}\n\n\"A logical grouping of rules for explainability and compilation.\"\ninput PolicyRuleGroupInput {\n  \"Other groups or rules nested inside this rule group.\"\n  childNodes: [PolicyExpensePolicyNodeInput!]!\n  \"If this is a custom group, information to be shown in the UI. Otherwise, this is ignored.\"\n  groupMetadata: PolicyRuleGroupMetadataInput\n  \" The kind of group. Used by the frontend to display the group correctly. \"\n  groupType: PolicyRuleGroupType!\n}\n\n\"Additional metadata for a rule group that can be displayed in the UI.\"\ninput PolicyRuleGroupMetadataInput {\n  \"The text to be shown to users.\"\n  description: String!\n}\n\n\"Definition of a rule for explainability and compilation.\"\ninput PolicyRuleInput {\n  \"The actions that are returned if the criteria are true.\"\n  actions: [PolicyActionSetInput!]\n  \"The condition for the rule to match.\"\n  condition: PolicyExpenseRuleMetadataInput!\n}\n\n\"An inclusion or exclusion condition for any attribute that can be represented by the PolicyNameAndIdsInput type.\"\ninput PolicyStandardRuleConditionInput {\n  conditionOperator: PolicyStandardRuleConditionOperator!\n  subjects: [PolicyNameAndIdsInput!]!\n}\n\n\"A simple rule with conditions for amount and inclusion or exclusion of both merchants and categories.\"\ninput PolicyStandardRuleMetadataInput {\n  \"A (possibly empty) set of merchant categories to be included or excluded from this rule.\"\n  merchantCategories: PolicyStandardRuleConditionInput\n  \"A (possibly empty) set of merchants to be included or excluded from this rule.\"\n  merchants: PolicyStandardRuleConditionInput\n  \"An amount such that expenses OVER this threshold will trigger the rule.\"\n  threshold: FinancialAssetInput!\n}\n\n\"\"\"\nA rule that restricts expenses in a given category to a predetermined set of vendors.\nExample: Airfare must be booked through TravelBank.\n\"\"\"\ninput PolicyVendorsForCategoryMetadataInput {\n  \"The merchants that can be used for this category.\"\n  allowedMerchants: [PolicyNameAndIdsInput!]!\n  \"The category on which spending is restricted.\"\n  merchantCategory: PolicyNameAndIdsInput!\n}\n\ninput TimeIntervalInput {\n  \"Exclusive end at.\"\n  endAt: Time\n  \"Inclusive start at.\"\n  startAt: Time\n}\n	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
sm_cl109x3np000k0e608ydipjrj	sv_ckwwkl97x000a0e42crg0mk0h	\"Directs the executor to include this field or fragment only when the `if` argument is true\"\ndirective @include(\n    \"Included when true.\"\n    if: Boolean!\n  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"Directs the executor to skip this field or fragment when the `if`'argument is true.\"\ndirective @skip(\n    \"Skipped when true.\"\n    if: Boolean!\n  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ndirective @extends on OBJECT | INTERFACE\n\ndirective @external on FIELD_DEFINITION\n\ndirective @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE\n\ndirective @provides(fields: _FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: _FieldSet!) on FIELD_DEFINITION\n\n\"Marks the field, argument, input field or enum value as deprecated\"\ndirective @deprecated(\n    \"The reason for the deprecation\"\n    reason: String = \"No longer supported\"\n  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION\n\n\"Exposes a URL that specifies the behaviour of this scalar.\"\ndirective @specifiedBy(\n    \"The URL that specifies the behaviour of this scalar.\"\n    url: String!\n  ) on SCALAR\n\n\"\"\"\nThe interface for paginating through collections of elements.\nEvery collection of entities not returned by a mutation result should\npaginate through a connection. That is, `types` with a field that is\nan `array` should be exceedingly rare.\nWe want all collections of things to be paginated.\n\"\"\"\ninterface Connection {\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"\"\"\n  The total count of items matching the filter criteria specified for this connection.\n  This value may be approximate. And this value may not be provided at all. Not all connections\n  can be counted easily.\n  \"\"\"\n  totalCount: Int\n}\n\nunion ExpenseOriginator = CardTransaction | ReimbursementItem\n\nunion _Entity = Account | Budget | Card | CardTransaction | Department | Dispute | Employee | Expense | ExpenseRequest | Location | Merchant | MerchantCategory | ReimbursementItem | User\n\ntype Account @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\ntype Budget @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\ntype Card @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\ntype CardPaymentAcceptor {\n  \"The address of the acceptor.\"\n  address: String!\n  \"The city of the acceptor.\"\n  city: String!\n  \"The country of the acceptor.\"\n  country: String!\n  \"The Merchant Category Code of the acceptor.\"\n  mcc: String!\n  \"The unique ID of the Merchant that is the card acceptor.\"\n  mid: String!\n  \"The name of the acceptor.\"\n  name: String!\n  \"The postal code of the acceptor.\"\n  postalCode: String!\n  \"The state of the acceptor.\"\n  state: String!\n}\n\ntype CardTransaction @key(fields : \"id\") {\n  \"The Card the transaction was made on.\"\n  card: Card\n  \"The Card Acceptor at which the transaction was made\"\n  cardPaymentAcceptor: CardPaymentAcceptor\n  \"\"\"\n  DO NOT USE THIS FIELD WHEN LISTING EXPENSES. YOU WILL BREAK THE DASHBOARD\n  The optional dispute associated with the Card Transaction.\n  \"\"\"\n  dispute: Dispute\n  \"The unique TILL Payment ID of the Card Transaction.\"\n  id: ID!\n  \"The unique present transaction ID of the Card Transaction.\"\n  presentTransactionId: ID!\n}\n\ntype CreateExpensesSearchReportResult {\n  \"The expenses search report.\"\n  report: ExpensesReport!\n}\n\ntype Department @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\ntype Dispute @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\ntype Employee @extends @key(fields : \"customerUserId\") {\n  customerUserId: ID @external\n}\n\n\"An Expense incurred by a customer.\"\ntype Expense @key(fields : \"id\") {\n  \"The Customer Account that has visibility to this expense\"\n  account: Account!\n  \"The time of accrual\"\n  accruedAt: Time @deprecated(reason : \"Use postedAt instead.\")\n  \"Amount of the expense; may be negative\"\n  amount: FinancialAsset\n  \"The budget to which this expense accrues (has customer default; optional before default budgets exist)\"\n  budget: Budget\n  \"The custom merchant name that the user manually saved\"\n  customMerchant: String\n  \"The Customer User who incurred the expense\"\n  customer: User!\n  \"The Customer Department to which the expense is attributed, auto-denormalized from User\"\n  department: Department\n  \"The display status of the expense; takes into account payment status & disputes\"\n  displayStatus: ExpenseDisplayStatus\n  \"The Employee who incurred the expense\"\n  employee: Employee!\n  \"The unique ID of the expense.\"\n  id: ID!\n  \"The Customer Location to which the expense is attributed, auto-denormalized from User\"\n  location: Location\n  \"The memo line\"\n  memo: String\n  \"The merchant counter-party\"\n  merchant: Merchant\n  \"Merchant accuracy\"\n  merchantAccuracy: Boolean\n  \"Merchant category\"\n  merchantCategory: MerchantCategory\n  \"Expense Originator\"\n  originator: ExpenseOriginator\n  \"The parent expense of this expense\"\n  parentExpense: Expense\n  \"The payment status reason of the expense\"\n  paymentStatus: ExpensePaymentStatus\n  \"The time when the associated payment is posted\"\n  postedAt: Time\n  \"The time of purchase\"\n  purchasedAt: Time\n  \"Denormalized count of receipts for an expense\"\n  receiptCount: Int!\n  \"The current active request that is associated with this expense\"\n  request: ExpenseRequest\n  \"The status of the expense\"\n  status: ExpenseStatus!\n  \"The type of the expense\"\n  type: ExpenseType!\n}\n\n\"An Expense connection for Expense pagination.\"\ntype ExpenseConnection implements Connection {\n  \"The expenses in the current page of results.\"\n  edges: [ExpenseEdge!]!\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"The total count of expenses matching the filter criteria specified for this connection.\"\n  totalCount: Int\n}\n\n\"A Expense edge for the Expense connection.\"\ntype ExpenseEdge {\n  \"The opaque cursor of the current edge.\"\n  cursor: String\n  \"The expense at this edge.\"\n  node: Expense\n}\n\ntype ExpensePaymentStatus {\n  \"\"\"\n  DO NOT INCLUDE THIS FIELD IN ANY expenses() (ListExpenses) call. Can be used only for expense() (GetExpense).\n  \n  The reason for the payemnt status reason\n  \"\"\"\n  reason: ExpensePaymentStatusReason\n  \"The expense's payment status.\"\n  statusType: ExpensePaymentStatusType\n}\n\ntype ExpenseRequest @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\n\"The report incurred by a customer.\"\ntype ExpensesReport {\n  \"The file of the report\"\n  file: ExpensesReportFile!\n}\n\ntype ExpensesReportFile {\n  \"The file download url of the report.\"\n  downloadUrl: String!\n  \"The unique ID of the report file.\"\n  id: ID!\n}\n\n\"Financial Asset wrapper\"\ntype FinancialAsset {\n  \"The instrument code (usd, etc.). Currently, only usd is supported.\"\n  instrumentCode: FinancialInstrumentCode!\n  \"The amount in cents\"\n  quantityCents: Int!\n}\n\ntype ItemizeExpenseResult {\n  \"The itemized expenses that were created.\"\n  expenses: [Expense!]!\n}\n\ntype Location @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\ntype Merchant @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\ntype MerchantCategory @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\ntype Mutation {\n  \"Exports expenses from given expenses filter search report by request file type\"\n  createExpensesSearchReport(input: CreateExpensesSearchReportInput!): CreateExpensesSearchReportResult!\n  \"Itemize expense\"\n  itemizeExpense(input: ItemizeExpenseInput!): ItemizeExpenseResult!\n  \"Retry reimbursement payment\"\n  retryReimbursementPayment(input: RetryReimbursementPaymentInput!): RetryReimbursementPaymentResult!\n  \"\"\"\n  Update an expense\n  The operation isn't guaranteed to be atomic, and should be retried until it succeeds.\n  \"\"\"\n  updateExpense(input: UpdateExpenseInput!): UpdateExpenseResult!\n  \"Update multiple expenses\"\n  updateExpenses(input: UpdateExpensesInput!): UpdateExpensesResult!\n}\n\ntype PageInfo {\n  \"When paginating forwards, the cursor to continue.\"\n  endCursor: String\n  \"When paginating forwards, are there more items?\"\n  hasNextPage: Boolean!\n  \"When paginating backwards, are there more items?\"\n  hasPreviousPage: Boolean!\n  \"When paginating backwards, the cursor to continue.\"\n  startCursor: String\n}\n\ntype Query {\n  _entities(representations: [_Any!]!): [_Entity]!\n  _service: _Service\n  \"Get an expense by id\"\n  expense(id: ID!): Expense\n  \"List expenses\"\n  expenses(filter: ExpenseFilterInput, order: ExpenseOrderInput, page: PaginationInput): ExpenseConnection!\n  \"Preview expense lenses with a new integration rule\"\n  previewExpenseLenses(integrationId: ID!, omitRuleId: ID, page: PaginationInput, ruleBody: String!): ExpenseConnection!\n  \"List unexported Expenses\"\n  unexportedExpenses(endDate: Time, filter: ExpenseLensFilterInput, integrationId: ID!, page: PaginationInput, startDate: Time): ExpenseConnection!\n}\n\ntype ReimbursementItem @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\ntype RetryReimbursementPaymentResult {\n  \"The expense that was retried.\"\n  expense: Expense!\n}\n\ntype UpdateExpenseResult {\n  \"The expense that was updated.\"\n  expense: Expense!\n}\n\ntype UpdateExpensesResult {\n  \"The expenses that were updated.\"\n  expenses: [Expense!]!\n}\n\ntype User @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\ntype _Service {\n  sdl: String!\n}\n\n\"The display status of the expense; takes into account payment and disputes.\"\nenum ExpenseDisplayStatus {\n  \"An approved expense is evaluated to have met the policy requirements.\"\n  APPROVED\n  \"The expense got cancelled (from a submitted reimbursement or pending charge).\"\n  CANCELED\n  \"Payment for the expense is a chargeback.\"\n  CHARGEBACK\n  \"Payment for the expense got declined, applies to card expense only.\"\n  DECLINED\n  \"The expense was rejected.\"\n  DENIED\n  \"\"\"\n  The expense is disputed.\n  \n  NOT YET SUPPORTED\n  \"\"\"\n  DISPUTED\n  \"An expense that has not been submitted yet, applies to reimbursement only.\"\n  DRAFT\n  \"Payment for the expense completed.\"\n  PAID\n  \"Payment for the expense failed to go through.\"\n  PAYMENT_FAILED\n  \"The expense has open action requests - can include reviews, memos, etc.\"\n  PENDING_APPROVAL\n  \"Payment for the expense is processing.\"\n  PROCESSING\n  \"Payment for the expense is a refund.\"\n  REFUND\n}\n\n\"\"\"\nPayment Status reasons common across all rails\n\nReimbursement Payment Status Reasons: TODO\n\"\"\"\nenum ExpensePaymentStatusReason {\n  ACCOUNT_SUSPENDED\n  \"Common across Payment Types\"\n  APPROVED\n  BUDGET_ARCHIVED\n  BUDGET_CATEGORY_RESTRICTION\n  BUDGET_EXPIRED\n  BUDGET_MERCHANT_RESTRICTION\n  BUDGET_NOT_APPROVED\n  BUDGET_NOT_YET_STARTED\n  CARD_EXPIRED\n  CARD_NOT_ACTIVE\n  CARD_SUSPENDED\n  CARD_TERMINATED\n  EXCEEDED_BUDGET_LIMIT\n  EXCEEDED_CARD_LIMIT\n  EXCEEDED_CASH_ADVANCE_GLOBAL_LIMIT\n  EXCEEDED_CASH_ADVANCE_USER_LIMIT\n  EXCEEDED_GLOBAL_LIMIT\n  EXCEEDED_PIN_ATTEMPTS\n  EXCEEDED_USER_LIMIT\n  INSIDE_SANCTIONED_COUNTRY\n  INVALID_BILLING_ADDRESS\n  INVALID_CARD_CREDENTIALS\n  INVALID_CVV\n  \"Card Payment Status Reasons\"\n  INVALID_EXPIRATION_DATE\n  INVALID_PIN\n  MCC_BLOCKED\n  NO_BUDGET\n  OTHER\n  SOFT_EXPIRATION\n  SUSPECTED_FRAUD\n  USER_SUSPENDED\n}\n\n\"The status of the expense's payment.\"\nenum ExpensePaymentStatusType {\n  \"Payment is canceled.\"\n  CANCELED\n  \"\"\"\n  Payment is a withdrawal, which represents a cash advance.\n  This corresponds to both WITHDRAWING & WITHDREW on the back-end.\n  \"\"\"\n  CASH_ADVANCE\n  \"Payment cleared.\"\n  CLEARED\n  \"\"\"\n  Payment is a credit to the user.\n  Currently, this means chargebacks.\n  \"\"\"\n  CREDITED\n  \"Payment failed or got declined.\"\n  DECLINED\n  \"Payment is processing.\"\n  PROCESSING\n  \"Payment is a cleared refund.\"\n  REFUNDED\n  \"Payment is a refund in progress.\"\n  REFUNDING\n}\n\n\"The type of the request action.\"\nenum ExpenseRequestActionType {\n  \"A notification is requested.\"\n  NOTIFY\n  \"A justification is requested.\"\n  REQUIRE_JUSTIFICATION\n  \"A memo is requested.\"\n  REQUIRE_MEMO\n  \"A receipt is requested.\"\n  REQUIRE_RECEIPT\n  \"A manager (or other) review is requested.\"\n  REQUIRE_REVIEW\n}\n\n\"The status of the expense.\"\nenum ExpenseStatus {\n  \"An approved expense is public, with a request evaluated to have met the policy requirements\"\n  APPROVED\n  \"A canceled expense is a public expense that does not accrue\"\n  CANCELED\n  \"A draft expense is private and not ready for policy evaluation\"\n  DRAFT\n  \"An out of policy expense is public, with a request evaluated to have not met the policy requirements\"\n  OUT_OF_POLICY\n  \"A settled expense is an approved expense terminally locked from mutation\"\n  SETTLED\n  \"A submitted expense is public, with a request submitted for policy evaluation\"\n  SUBMITTED\n  \"A void expense is a hidden expense that does not accrue (soft-delete)\"\n  VOID\n}\n\n\"The type of the Expense.\"\nenum ExpenseType {\n  \"A bill pay expense.\"\n  BILLPAY\n  \"A card expense.\"\n  CARD\n  \"A reimbursement expense.\"\n  REIMBURSEMENT\n}\n\n\"The type of rule facet.\"\nenum FacetType {\n  \"Conflicting rule type facet.\"\n  CONFLICTING\n  \"Custom rule type facet.\"\n  CUSTOM\n  \"Invalid facet type.\"\n  INVALID\n  \"Merchant rule type facet.\"\n  MERCHANT\n  \"Manual override rule type facet.\"\n  OVERRIDE\n}\n\n\"\"\"\n From APIv1\n https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L7\n https://github.com/brexhq/credit_card/blob/main/libraries/brex_financial_asset/lib/financial_instrument_constants.ex#L962\n\"\"\"\nenum FinancialInstrumentCode {\n  AED\n  AFN\n  ALL\n  AMD\n  ANG\n  AOA\n  ARS\n  AUD\n  AWG\n  AZN\n  BAM\n  BBD\n  BDT\n  BGN\n  BHD\n  BIF\n  BMD\n  BND\n  BOB\n  BOV\n  BRL\n  BSD\n  BTN\n  BWP\n  BYN\n  BZD\n  CAD\n  CDF\n  CHE\n  CHF\n  CHW\n  CLF\n  CLP\n  CNY\n  COP\n  COU\n  CRC\n  CRYPTO_BTC\n  CRYPTO_ETH\n  CRYPTO_USDC\n  CUC\n  CUP\n  CVE\n  CZK\n  DJF\n  DKK\n  DOP\n  DZD\n  EGP\n  ERN\n  ETB\n  EUR\n  FJD\n  FKP\n  GBP\n  GEL\n  GHS\n  GIP\n  GMD\n  GNF\n  GTQ\n  GYD\n  HKD\n  HNL\n  HRK\n  HTG\n  HUF\n  IDR\n  ILS\n  INR\n  IQD\n  IRR\n  ISK\n  JMD\n  JOD\n  JPY\n  KES\n  KGS\n  KHR\n  KMF\n  KPW\n  KRW\n  KWD\n  KYD\n  KZT\n  LAK\n  LBP\n  LKR\n  LRD\n  LSL\n  LYD\n  MAD\n  MDL\n  MGA\n  MKD\n  MMK\n  MNT\n  MOP\n  MRU\n  MUR\n  MVR\n  MWK\n  MXN\n  MXV\n  MYR\n  MZN\n  NAD\n  NASDAQ_DAGXX\n  NASDAQ_DGCXX\n  NASDAQ_DGVXX\n  NASDAQ_DPGXX\n  NASDAQ_GGBXX\n  NASDAQ_GGDXX\n  NASDAQ_GGSXX\n  NASDAQ_GSBXX\n  NGN\n  NIO\n  NOK\n  NPR\n  NZD\n  OMR\n  PAB\n  PEN\n  PGK\n  PHP\n  PKR\n  PLN\n  PYG\n  QAR\n  RON\n  RSD\n  RUB\n  RWF\n  SAR\n  SBD\n  SCR\n  SDG\n  SEK\n  SGD\n  SHP\n  SLL\n  SOS\n  SRD\n  SSP\n  STN\n  SVC\n  SYP\n  SZL\n  THB\n  TJS\n  TMT\n  TND\n  TOP\n  TRY\n  TTD\n  TWD\n  TZS\n  UAH\n  UGX\n  USD\n  USN\n  UYI\n  UYU\n  UYW\n  UZS\n  VES\n  VND\n  VUV\n  WST\n  XAF\n  XAG\n  XAU\n  XBA\n  XBB\n  XBC\n  XBD\n  XCD\n  XDR\n  XOF\n  XPD\n  XPF\n  XPT\n  XSU\n  XTS\n  XUA\n  XXX\n  YER\n  ZAR\n  ZMW\n  ZWL\n}\n\n\"\"\"\nTime bucketting strategy\n- START: Buckets start at the startsAt timestamp\n- END: Buckets start at the endsAt timestamp\n- CALENDAR: Buckets are aligned with the calendar units (e.g. WEEKS) but can include\npartial buckets based on the startsAt and endsAt timebuckets\n\"\"\"\nenum InsightsTimeBucketStrategy {\n  CALENDAR\n  END\n  START\n}\n\n\"Generic time unit\"\nenum InsightsTimeUnit {\n  DAY\n  MONTH\n  QUARTER\n  WEEK\n  YEAR\n}\n\nenum OrderByDirection {\n  ASCENDING\n  DESCENDING\n}\n\n\"The types of relationships for filtering who an expense is pending approval on.\"\nenum PendingApprovalFilterInput {\n  \"Pending approval on the logged in user\"\n  ME\n  \"Pending approval on anyone else but the logged in user\"\n  OTHER\n}\n\n\"The type of report file type.\"\nenum ReportFormatType {\n  CSV\n  HTML\n  PDF\n  TXT\n  XLSX\n}\n\n\"The type of the request action.\"\nenum RequestActionType {\n  \"A memo is requested.\"\n  MEMO\n  \"A receipt is requested.\"\n  RECEIPT\n  \"A manager (or other) review is requested.\"\n  REVIEW\n}\n\n\"The type of the Request.\"\nenum RequestType {\n  \"This is a budget request.\"\n  BUDGET\n  \"This is an expense request.\"\n  EXPENSE\n}\n\n\"Available fields to order the Expense connection by.\"\nenum SortableExpenseField {\n  ACCRUED_AT\n  AMOUNT\n  PURCHASED_AT\n}\n\n\"ISOz date\"\nscalar Date\n\n\"Json object\"\nscalar Json\n\n\"64Bit integer\"\nscalar Long\n\n\"ISOz time\"\nscalar Time\n\nscalar _Any\n\nscalar _FieldSet\n\ninput CreateExpensesSearchReportInput {\n  \"clientMutationId\"\n  clientMutationId: String\n  \"Time when expenses search results were displayed.\"\n  displayTime: Time\n  \"The expense filter input used to get the list of expenses to be exported.\"\n  filter: ExpenseFilterInput\n  \"The report format type for the exported expenses search.\"\n  reportFormat: ReportFormatType\n}\n\n\"Filters available to control which expenses get returned.\"\ninput ExpenseFilterInput {\n  \"Range query filter for amount.\"\n  amountBetween: FinancialAssetRangeInput\n  \"Match IN specific budgets\"\n  budgetIds: [ID!]\n  \"Match IN specific users\"\n  customerUserIds: [ID!]\n  \"Match IN specific departments\"\n  departmentIds: [ID!]\n  \"Match IN specific display statuses, match ALL when no filter is provided\"\n  displayStatus: [ExpenseDisplayStatus!]\n  \"Whether the expense has a memo\"\n  hasMemo: Boolean\n  \"Whether the expense has at least one attached receipt\"\n  hasReceipt: Boolean\n  \"Match IN specific merchant categories\"\n  merchantCategoryIds: [ID!]\n  \"Match IN specific merchants\"\n  merchantIds: [ID!]\n  \"Match IN specific parent expense ids\"\n  parentExpenseIds: [ID!]\n  \"Range query filter for paymentPostedAt\"\n  paymentPostedBetween: TimeIntervalInput\n  \"Match IN specific payment statuses, match ALL when no filter is provided\"\n  paymentStatus: [ExpensePaymentStatusType!]\n  \"Matches if the expense is currently pending approval on yourself or others.\"\n  pendingApproval: PendingApprovalFilterInput\n  \"Matches IN open compliance request types\"\n  pendingRequestActionTypes: [ExpenseRequestActionType!]\n  \"Range query filter for purchaseAt\"\n  purchasedBetween: TimeIntervalInput\n  \"Match IN specific statuses, match ALL when no filter is provided\"\n  status: [ExpenseStatus!]\n  \"Match IN specific types, match ALL when no filter is provided\"\n  types: [ExpenseType!]\n}\n\ninput ExpenseInput {\n  \"The receipt assets to which the expense will create a receipt for and be linked to\"\n  addedReceiptAssetIds: [ID!]\n  \"Amount of the expense; may be negative\"\n  amount: FinancialAssetInput\n  \"The budget to which this expense accrues (has customer default; optional before default budgets exist)\"\n  budgetId: ID\n  \"The Customer Department to which the expense is attributed, auto-denormalized from User\"\n  departmentId: ID\n  \"The Customer Location to which the expense is attributed, auto-denormalized from User\"\n  locationId: ID\n  \"\"\"\n  The memo line\n  \n  Updating an expense's memo will resolve any associated Memo Request Action.\n  \"\"\"\n  memo: String\n  \"The category to which this expense belongs to, auto-denormalized from Merchant\"\n  merchantCategoryId: ID\n  \"The merchant counter-party\"\n  merchantId: ID\n  \"The merchant name\"\n  merchantName: String\n  \"The time of purchase\"\n  purchasedAt: Time\n  \"The receipts to be unlinked from the expense\"\n  removedReceiptIds: [ID!]\n}\n\ninput ExpenseLensFilterInput {\n  \"Optional field, when set only the expenses with expense lens of this facet type will be returned.\"\n  facetType: FacetType\n  \"Optional field, when set only the expenses with expense lens matches these rules will be returned.\"\n  ruleIds: [ID!]\n}\n\n\"Determines the order that the expenses will be returned.\"\ninput ExpenseOrderInput {\n  field: SortableExpenseField!\n  order: OrderByDirection!\n}\n\n\"\"\"\n From APIv1\n https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L13\n\"\"\"\ninput FinancialAssetInput {\n  \"The instrument code (usd, etc.). Currently, only usd is supported.\"\n  instrumentCode: FinancialInstrumentCode = USD\n  \"The amount in cents\"\n  quantityCents: Int\n}\n\ninput FinancialAssetRangeInput {\n  \"Exclusive, only considers given currency, required to have same currency when minAmount is provided.\"\n  maxAmount: FinancialAssetInput\n  \"Inclusive, only considers given currency, required to have same currency when maxAmount is provided.\"\n  minAmount: FinancialAssetInput\n}\n\ninput IntegrationFieldInput {\n  \"Required field, external integration field ID.\"\n  fieldId: ID!\n  \"Required field, external integration entity ID.\"\n  fieldValue: ID!\n}\n\ninput IntegrationInput {\n  \"\"\"\n  Optional field, billable status.\n  \n  One or more of these fields (integrationField, userCategoryId, and billableStatus) must be set.\n  \"\"\"\n  billableStatus: Boolean\n  \"\"\"\n  Optional field, integration fields.\n  \n  One or more of these fields (integrationField, userCategoryId, and billableStatus) must be set.\n  \"\"\"\n  integrationFields: [IntegrationFieldInput!]\n  \"\"\"\n  Optional field, user category ID.\n  \n  One or more of these fields (integrationField, userCategoryId, and billableStatus) must be set.\n  \"\"\"\n  userCategoryId: ID\n}\n\ninput ItemizeExpenseInput {\n  \"clientMutationId\"\n  clientMutationId: String!\n  \"The ID of the expense to itemize.\"\n  id: ID!\n  \"The input for the itemized expense.\"\n  itemizedExpenses: [ItemizedExpense!]!\n}\n\ninput ItemizedExpense {\n  \"Amount of the expense; may be negative\"\n  amount: FinancialAssetInput\n  \"The category to which this expense belongs to\"\n  merchantCategoryId: ID\n}\n\n\"\"\"\nPagination parameters for enumerating items in a connection.\nOnly {first, after} OR {last, before} pairs can be set.\ne.g. If {first, before} is set, that will cause a validation error.\nThe cursors are optional. Without a specified cursor, it is assumed to start at\nthe first item (for `first`) or last item (for `last`) of the collection.\n\"\"\"\ninput PaginationInput {\n  \"The cursor to start the page at (exclusive).\"\n  after: String\n  \"The cursor to end the page at (exclusive).\"\n  before: String\n  \"The number of items to return in a page after the `after` cursor.\"\n  first: Int\n  \"The number of items to return in a page prior to the `before` cursor.\"\n  last: Int\n}\n\ninput RetryReimbursementPaymentInput {\n  \"clientMutationId\"\n  clientMutationId: String!\n  \"The reimbursement ID to retry payment.\"\n  id: ID!\n}\n\ninput TimeIntervalInput {\n  \"Exclusive end at.\"\n  endAt: Time\n  \"Inclusive start at.\"\n  startAt: Time\n}\n\ninput UpdateExpenseInput {\n  \"clientMutationId\"\n  clientMutationId: String\n  \"\"\"\n  The input for the expense object.\n  \n  Either ExpenseInput or IntegrationInput must be set.\n  It is okay to set both arguments.\n  \"\"\"\n  expense: ExpenseInput\n  \"The ID of the expense to update.\"\n  id: ID!\n  \"\"\"\n  The input for the integration fields.\n  \n  Either ExpenseInput or IntegrationInput must be set.\n  It is okay to set both arguments.\n  \"\"\"\n  integration: IntegrationInput\n}\n\ninput UpdateExpensesInput {\n  \"clientMutationId\"\n  clientMutationId: String!\n  \"A list of expense inputs.\"\n  updateExpenseInputs: [UpdateExpenseInput!]!\n}\n	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
sm_cl109xm51000u0e60hk04vq90	sv_ckwwkkp9l00020e420yyi9lxn	\"Directs the executor to include this field or fragment only when the `if` argument is true\"\ndirective @include(\n    \"Included when true.\"\n    if: Boolean!\n  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"Directs the executor to skip this field or fragment when the `if`'argument is true.\"\ndirective @skip(\n    \"Skipped when true.\"\n    if: Boolean!\n  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ndirective @extends on OBJECT | INTERFACE\n\ndirective @external on FIELD_DEFINITION\n\ndirective @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE\n\ndirective @provides(fields: _FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: _FieldSet!) on FIELD_DEFINITION\n\n\"Marks the field, argument, input field or enum value as deprecated\"\ndirective @deprecated(\n    \"The reason for the deprecation\"\n    reason: String = \"No longer supported\"\n  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION\n\n\"Exposes a URL that specifies the behaviour of this scalar.\"\ndirective @specifiedBy(\n    \"The URL that specifies the behaviour of this scalar.\"\n    url: String!\n  ) on SCALAR\n\n\"\"\"\nThe interface for paginating through collections of elements.\nEvery collection of entities not returned by a mutation result should\npaginate through a connection. That is, `types` with a field that is\nan `array` should be exceedingly rare.\nWe want all collections of things to be paginated.\n\"\"\"\ninterface Connection {\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"\"\"\n  The total count of items matching the filter criteria specified for this connection.\n  This value may be approximate. And this value may not be provided at all. Not all connections\n  can be counted easily.\n  \"\"\"\n  totalCount: Int\n}\n\n\"Merchant category controls reference.\"\nunion MerchantCategoryControlReference = MerchantCategoryIdControlReference | MerchantNameControlReference\n\nunion _Entity = Account | Budget | BudgetRequest | BudgetTemplate | Card | Employee | Merchant | MerchantCategory | Policy | User\n\ntype Account @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\n\"Response type for assigning budgets to cards.\"\ntype AssignBudgetToCardResult {\n  cardBudgetMapping: CardBudgetMapping!\n  clientMutationId: String!\n}\n\n\"A budget to manage expenses.\"\ntype Budget @key(fields : \"id\") {\n  \"The Customer Account that has visibility to this budget\"\n  account: Account!\n  \"Ordered list of ancestors\"\n  ancestryPath: [Budget!]!\n  \"List of cards related to the Budget\"\n  cards(filter: CardFilterInput!, page: PaginationInput): BudgetCardConnection!\n  \"The children of this budget, if any\"\n  children(filter: BudgetFilterInput, order: BudgetOrderInput, page: PaginationInput): BudgetConnection!\n  \"The User who created this budget\"\n  creator: User! @deprecated(reason : \"Incorrect permission scoping, use 'creatorEmployee'\")\n  \"The Employee who created this budget\"\n  creatorEmployee: Employee!\n  \"Budget period balance\"\n  currentPeriodBalance: BudgetPeriodBalance\n  \"The descendants of this budget, if any\"\n  descendants(filter: BudgetFilterInput, order: BudgetOrderInput, page: PaginationInput): BudgetConnection!\n  \"Description of what the budget is used for\"\n  description: String\n  \"Budget edit permission grant\"\n  editPermissionGrant: BudgetEditPermissionGrant\n  \"The end date of the budget, inclusive.\"\n  endDate: Date\n  \"The end datetime of the budget, inclusive.\"\n  endTime: Time\n  \"True if the budget limit is hard enforced\"\n  enforceLimit: Boolean!\n  \"Budget ID\"\n  id: ID!\n  \"Merchant category controls, including those along ancestry path.\"\n  inheritedMerchantCategoryControls: MerchantCategoryControls\n  \"Last status update detail\"\n  lastStatusUpdateDetails: StatusUpdateDetails\n  \"Limit on the budget\"\n  limit: FinancialAsset!\n  \"The employees who are considered members of this budget\"\n  memberEmployees(filter: BudgetEmployeeFilter, order: BudgetEmployeeOrder, page: PaginationInput): BudgetEmployeeConnection\n  \"The users who are considered members of this budget\"\n  memberUsers(page: PaginationInput): BudgetUserConnection @deprecated(reason : \"Incorrect permission scoping, use 'memberEmployees'\")\n  \"The users / hierarchy group assigned to the budget\"\n  members(page: PaginationInput): BudgetPersonnelConnection! @deprecated(reason : \"No longer supported\")\n  \"Name of the budget\"\n  name: String!\n  \"True if only provisioned cards can spend from this budget\"\n  onlyProvisionedCardSpend: Boolean!\n  \"The employees who are considered owners of this budget\"\n  ownerEmployees(filter: BudgetEmployeeFilter, order: BudgetEmployeeOrder, page: PaginationInput): BudgetEmployeeConnection\n  \"The users who are considered owners of this budget\"\n  ownerUsers(page: PaginationInput): BudgetUserConnection @deprecated(reason : \"Incorrect permission scoping, use 'ownerEmployees'\")\n  \"The users who are considered owners of this budget\"\n  owners(page: PaginationInput): BudgetPersonnelConnection! @deprecated(reason : \"No longer supported\")\n  \"The parent of this budget, if any\"\n  parent: Budget\n  \"The budget period\"\n  period: BudgetPeriod! @deprecated(reason : \"Use the fields directly on budget schema\")\n  \"The recurring period type of the budget.\"\n  periodType: BudgetPeriodType!\n  \"The policy that manages expenses for this budget\"\n  policy: Policy!\n  \"Settings related to the Budget\"\n  settings: BudgetSettings! @deprecated(reason : \"Use the fields directly on budget schema\")\n  \"How much of the budget has been spent\"\n  spent: FinancialAsset! @deprecated(reason : \"Deprecated in favor of `currentPeriodBalance.spent`\")\n  \"The start date of the budget, inclusive.\"\n  startDate: Date\n  \"The start time of the budget, inclusive.\"\n  startTime: Time\n  \"Budget status\"\n  status: BudgetStatus!\n  \"Budget version\"\n  version: Int!\n}\n\n\"A Card connection for pagination\"\ntype BudgetCardConnection implements Connection {\n  \"The cards in the current page of results.\"\n  edges: [BudgetCardEdge!]!\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"The total count of cards matching the filter criteria specified for this connection.\"\n  totalCount: Int\n}\n\n\"A Card edge for the Card connection.\"\ntype BudgetCardEdge {\n  \"The opaque cursor of the current edge.\"\n  cursor: String\n  \"The card at this edge.\"\n  node: Card!\n}\n\n\"An Budget connection for Budget pagination.\"\ntype BudgetConnection implements Connection {\n  \"The budgets in the current page of results.\"\n  edges: [BudgetEdge!]!\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"The total count of budget matching the filter criteria specified for this connection.\"\n  totalCount: Int\n}\n\n\"A Budget edge for the Budget connection.\"\ntype BudgetEdge {\n  \"The opaque cursor of the current edge.\"\n  cursor: String\n  \"The budget at this edge.\"\n  node: Budget\n}\n\n\"A BudgetEmployee connection for Budget owner/member pagination futureproofing\"\ntype BudgetEmployeeConnection implements Connection {\n  \"The items in the current page of results.\"\n  edges: [BudgetEmployeeEdge]!\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"The total count of items, across all pages, matching the filter criteria specified for this connection.\"\n  totalCount: Int\n}\n\n\"A BudgetEmployee edge for the BudgetEmployee connection.\"\ntype BudgetEmployeeEdge {\n  \"The opaque cursor of the current edge.\"\n  cursor: String\n  \"The item at this edge.\"\n  node: Employee\n}\n\n\"Result type for matched merchants and categories.\"\ntype BudgetMerchantsAndCategoriesSuggestionsResult {\n  \"Merchant categories.\"\n  merchantCategories: [MerchantCategory!]\n  \"Merchants.\"\n  merchants: [Merchant!]\n}\n\n\"A period of time and cadence that a budget applies to.\"\ntype BudgetPeriod {\n  \"The end date (YYYY-MM-DD) of the budget, inclusive. Semantically end of PST midnight\"\n  endDate: Date\n  \"The end datetime of the budget, inclusive. (always 7:59am UTC the next day)\"\n  endTime: Time\n  \"The recurring period type of the budget.\"\n  periodType: BudgetPeriodType!\n  \"The start date of the budget, inclusive.\"\n  startDate: Date\n  \"The start time of the budget, inclusive.\"\n  startTime: Time\n}\n\n\"Budget period balance\"\ntype BudgetPeriodBalance {\n  \"Balance end time\"\n  endTime: Time\n  \"Balance spent amount\"\n  spent: FinancialAsset!\n  \"Balance start time\"\n  startTime: Time\n}\n\ntype BudgetPersonnel {\n  users: [User!]\n}\n\n\"A BudgetPersonnel connection for BudgetPersonnel pagination.\"\ntype BudgetPersonnelConnection implements Connection {\n  \"The items in the current page of results.\"\n  edges: [BudgetPersonnelEdge]!\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"The total count of items, across all pages, matching the filter criteria specified for this connection.\"\n  totalCount: Int\n}\n\n\"A BudgetPersonnel edge for the BudgetPersonnel connection.\"\ntype BudgetPersonnelEdge {\n  \"The opaque cursor of the current edge.\"\n  cursor: String\n  \"The item at this edge.\"\n  node: BudgetPersonnel\n}\n\ntype BudgetRequest @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\n\"A request to create a new budget\"\ntype BudgetRequestEntity {\n  \"The Customer Account that has visibility to this budget\"\n  account: Account!\n  \"Budget that was created from this request\"\n  createdBudget: Budget\n  \"Description of what this budget request is for\"\n  description: String!\n  \"The end date of the budget, inclusive.\"\n  endDate: Date\n  \"True if the budget limit is hard enforced\"\n  enforceLimit: Boolean!\n  \"Budget Request ID (within budgets service)\"\n  id: ID!\n  \"Limit on the budget\"\n  limit: FinancialAsset!\n  \"The employees who are considered members of this budget\"\n  memberEmployees: BudgetEmployeeConnection!\n  \"Name of the budget\"\n  name: String!\n  \"True if only provisioned cards can spend from this budget\"\n  onlyProvisionedCardSpend: Boolean!\n  \"The employees who are considered owners of this budget\"\n  ownerEmployees: BudgetEmployeeConnection!\n  \"The parent of this budget, if any\"\n  parent: Budget\n  \"The recurring period type of the budget.\"\n  periodType: BudgetPeriodType!\n  \"The policy that manages expenses for this budget\"\n  policy: Policy\n  \"The initiated request instance itself\"\n  request: BudgetRequest\n  \"The Employee who created this budget request\"\n  requestedByEmployee: Employee!\n  \"The start date of the budget, inclusive.\"\n  startDate: Date!\n  \"Version of the Budget Request\"\n  version: Int!\n}\n\ntype BudgetSettings {\n  \"True if the budget limit is hard enforced\"\n  enforceLimit: Boolean!\n  \"True if only provisioned cards can spend from this budget\"\n  onlyProvisionedCardSpend: Boolean!\n}\n\n\" currently assumed to be a top-level entity due to the existence of an ID key.\"\ntype BudgetTemplate @key(fields : \"id\") {\n  id: ID!\n}\n\n\"An BudgetTemplate connection for BudgetTemplate pagination.\"\ntype BudgetTemplateConnection implements Connection {\n  \"The budget templates in the current page of results.\"\n  edges: [BudgetTemplateEdge!]!\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"The total count of budget matching the filter criteria specified for this connection.\"\n  totalCount: Int\n}\n\n\"A BudgetTemplate edge for the BudgetTemplate connection.\"\ntype BudgetTemplateEdge {\n  \"The opaque cursor of the current edge.\"\n  cursor: String\n  \"The budget at this edge.\"\n  node: BudgetTemplate\n}\n\ntype BudgetUserAmountSpent {\n  amountSpent: FinancialAsset\n  employee: Employee\n  user: User @deprecated(reason : \"Incorrect permission scoping, use 'employee' instead\")\n}\n\n\"A BudgetUser connection for Budget owner/member pagination futureproofing\"\ntype BudgetUserConnection implements Connection {\n  \"The items in the current page of results.\"\n  edges: [BudgetUserEdge]!\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"The total count of items, across all pages, matching the filter criteria specified for this connection.\"\n  totalCount: Int\n}\n\n\"A BudgetUser edge for the BudgetUser connection.\"\ntype BudgetUserEdge {\n  \"The opaque cursor of the current edge.\"\n  cursor: String\n  \"The item at this edge.\"\n  node: User\n}\n\ntype Card @extends @key(fields : \"id\") {\n  budget: Budget\n  cardBudgetOwnershipType: CardBudgetOwnershipType\n  id: ID! @external\n}\n\n\"Card Budget Mapping object type.\"\ntype CardBudgetMapping {\n  budget: Budget!\n  budgetMappingExpiration: BudgetMappingExpiration!\n  card: Card!\n  cardBudgetOwnershipType: CardBudgetOwnershipType!\n  effectiveRange: EffectiveRange!\n  id: ID!\n  type: BudgetMappingType! @deprecated(reason : \"Use budgetMappingExpiration\")\n}\n\n\"Response type for a conflicting merchant.\"\ntype ConflictingMerchant {\n  \"The offending budget.\"\n  budget: Budget\n  \"The offending merchant category configs.\"\n  configs: [MerchantCategoryConfig!]!\n  \"ConflictingMerchant object id.\"\n  id: String!\n  \"Merchant name.\"\n  name: String!\n}\n\n\"Response type for a conflicting merchant category.\"\ntype ConflictingMerchantCategory {\n  \"The offending budget.\"\n  budget: Budget\n  \"The offending merchant category configs.\"\n  configs: [MerchantCategoryConfig!]!\n  \"ConflictingMerchantCategory object id.\"\n  id: String!\n  \"Merchant category name.\"\n  name: String!\n}\n\n\"Response type for validation of merchant category controls.\"\ntype ConflictingMerchantsCategoryResult {\n  \"Conflicting merchant categories.\"\n  merchantCategories: [ConflictingMerchantCategory!]\n  \"Conflicting merchants.\"\n  merchants: [ConflictingMerchant!]\n}\n\ntype CreateBudgetRequestResult {\n  \"The budget that was created.\"\n  budgetRequestEntity: BudgetRequestEntity!\n}\n\ntype CreateBudgetResult {\n  \"The budget that was created.\"\n  budget: Budget!\n  \"The request that was generated when this budget was created.\"\n  request: BudgetRequest @deprecated(reason : \"This field is always null. Budget Requests were moved to createBudgetRequest mutation.\")\n}\n\ntype CreateBudgetsResult {\n  \"The budgets that were created.\"\n  budgets: [CreateBudgetResult!]!\n}\n\ntype DeleteBudgetResult {\n  \"The result of the budget deletion - success/failure\"\n  budgetDeletionResult: Boolean!\n}\n\ntype DeleteBudgetsResult {\n  \"The result of the budget deletions - success/failure\"\n  budgetDeletionResults: [DeleteBudgetResult!]!\n}\n\n\"Effective range type, used for specifying mapping start/end dates.\"\ntype EffectiveRange {\n  endTime: Time\n  startTime: Time!\n}\n\ntype Employee @extends @key(fields : \"customerUserId\") {\n  customerUserId: ID @external\n}\n\n\"Financial Asset wrapper\"\ntype FinancialAsset {\n  \"The instrument code (usd, etc.). Currently, only usd is supported.\"\n  instrumentCode: FinancialInstrumentCode!\n  \"The amount in cents\"\n  quantityCents: Int!\n}\n\n\"Merchant.\"\ntype Merchant @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\n\"Merchant category.\"\ntype MerchantCategory @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\n\"Merchant category config.\"\ntype MerchantCategoryConfig {\n  controlReference: MerchantCategoryControlReference!\n  controlType: MerchantCategoryControlType!\n}\n\n\"Merchant category controls from global budget, ancestor budgets and current budget.\"\ntype MerchantCategoryControls {\n  ancestorBudgetsConfigs: [MerchantCategoryConfig]\n  currentBudgetConfigs: [MerchantCategoryConfig]\n  globalBudgetConfigs: [MerchantCategoryConfig]\n}\n\n\"Merchant category id control reference.\"\ntype MerchantCategoryIdControlReference {\n  merchantCategoryId: String!\n  merchantCategoryName: String!\n}\n\n\"Merchant name control reference.\"\ntype MerchantNameControlReference {\n  merchantName: String!\n}\n\ntype Mutation {\n  \"Assign a budget to a card\"\n  assignBudgetToCard(input: AssignBudgetToCardInput!): AssignBudgetToCardResult!\n  \"Create Budget\"\n  createBudget(input: CreateBudgetInput!): CreateBudgetResult!\n  \"Create a request for a new Budget\"\n  createBudgetRequest(input: CreateBudgetRequestInput!): CreateBudgetRequestResult!\n  \"Create multiple budgets.\"\n  createBudgets(input: [CreateBudgetInput!]!): CreateBudgetsResult!\n  \"Delete Budget\"\n  deleteBudget(clientMutationId: String, id: ID!): DeleteBudgetResult!\n  \"Delete multiple budgets.\"\n  deleteBudgets(clientMutationId: String, ids: [ID!]!): DeleteBudgetsResult!\n  \"Update Budget\"\n  updateBudget(input: UpdateBudgetInput!): UpdateBudgetResult!\n  \"Update multiple budgets.\"\n  updateBudgets(input: [UpdateBudgetInput!]!): UpdateBudgetsResult!\n}\n\ntype PageInfo {\n  \"When paginating forwards, the cursor to continue.\"\n  endCursor: String\n  \"When paginating forwards, are there more items?\"\n  hasNextPage: Boolean!\n  \"When paginating backwards, are there more items?\"\n  hasPreviousPage: Boolean!\n  \"When paginating backwards, the cursor to continue.\"\n  startCursor: String\n}\n\n\"External types for federation\"\ntype Policy @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\ntype Query {\n  _entities(representations: [_Any!]!): [_Entity]!\n  _service: _Service\n  \"Get a budget by id\"\n  budget(id: ID): Budget\n  \"List a budget's descendants by id upto optional maximum depth\"\n  budgetDescendants(id: ID!, maxDepth: Int): [Budget]\n  \"Search merchants and categories according to the given search text.\"\n  budgetMerchantsAndCategoriesSuggestions(suggestionsInput: [BudgetMerchantsAndCategoriesSuggestionsInput!]): BudgetMerchantsAndCategoriesSuggestionsResult!\n  \"\"\"\n  Get Budget Template (?)\n  \n  TODO: Specifics TBD\n  \"\"\"\n  budgetTemplate(id: ID!): BudgetTemplate!\n  \"\"\"\n  List Budget Template (?)\n  \n  TODO: Specifics TBD\n  \"\"\"\n  budgetTemplates(page: PaginationInput): BudgetTemplateConnection!\n  \"Get a budget's member and owner spend\"\n  budgetUsersAmountSpent(id: ID!): [BudgetUserAmountSpent]\n  \"List Budgets\"\n  budgets(filter: BudgetFilterInput, order: BudgetOrderInput, page: PaginationInput): BudgetConnection!\n  \"Get the total spend across all the budgets in their current periods that fit a certain filter\"\n  budgetsTotalSpendAcrossCurrentPeriods(filter: BudgetFilterInput): FinancialAsset\n  \"Validate conflicting merchants or categories with ancestor budgets.\"\n  conflictingAncestorBudgetMerchantCategoryControls(merchantCategoryControls: [ConflictingAncestorBudgetMerchantCategoryControls!]): ConflictingMerchantsCategoryResult!\n  \"Validate conflicting merchants or categories with ancestor and descendant budgets.\"\n  conflictingBudgetMerchantCategoryControls(merchantCategoryControls: [ConflictingBudgetMerchantCategoryControls!]): ConflictingMerchantsCategoryResult!\n  \"Get global budget for account\"\n  globalBudget: Budget\n}\n\n\"Detail about an status update.\"\ntype StatusUpdateDetails {\n  \"Time at which the status update occurred.\"\n  updatedAt: Time\n  \"Employee that triggered the update .\"\n  updatedBy: Employee\n}\n\ntype UpdateBudgetResult {\n  \"The budget that was updated.\"\n  budget: Budget!\n  \"The request that was potentially modifed when this budget was updated.\"\n  request: BudgetRequest\n}\n\ntype UpdateBudgetsResult {\n  \"The budget that was updated.\"\n  budgets: [UpdateBudgetResult!]!\n}\n\ntype User @extends @key(fields : \"id\") {\n  budgetAmountSpentCurrentMonth: FinancialAsset\n  id: ID! @external\n}\n\ntype _Service {\n  sdl: String!\n}\n\nenum BudgetEditPermissionGrant {\n  FULL\n  NONE\n  PARTIAL\n}\n\nenum BudgetMappingExpiration {\n  EXPIRING\n  NON_EXPIRING\n}\n\nenum BudgetMappingType {\n  EXPIRING\n  NON_EXPIRING\n}\n\nenum BudgetPeriodType {\n  \"Invalid\"\n  INVALID\n  \"Only once\"\n  ONE_TIME\n  \"Every month\"\n  PER_MONTH\n  \"Every quarter\"\n  PER_QUARTER\n  \"Every week\"\n  PER_WEEK\n  \"Every year\"\n  PER_YEAR\n}\n\nenum BudgetStatus {\n  APPROVED\n  CLOSED\n  DELETED\n  DRAFT\n  EXPIRED\n  REJECTED\n  SUBMITTED\n  TERMINATED\n}\n\nenum CardBudgetOwnershipType {\n  BUDGET\n  USER\n}\n\n\"The type of the Expense.\"\nenum ExpenseType {\n  \"A bill pay expense.\"\n  BILLPAY\n  \"A card expense.\"\n  CARD\n  \"A reimbursement expense.\"\n  REIMBURSEMENT\n}\n\n\"\"\"\n From APIv1\n https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L7\n https://github.com/brexhq/credit_card/blob/main/libraries/brex_financial_asset/lib/financial_instrument_constants.ex#L962\n\"\"\"\nenum FinancialInstrumentCode {\n  AED\n  AFN\n  ALL\n  AMD\n  ANG\n  AOA\n  ARS\n  AUD\n  AWG\n  AZN\n  BAM\n  BBD\n  BDT\n  BGN\n  BHD\n  BIF\n  BMD\n  BND\n  BOB\n  BOV\n  BRL\n  BSD\n  BTN\n  BWP\n  BYN\n  BZD\n  CAD\n  CDF\n  CHE\n  CHF\n  CHW\n  CLF\n  CLP\n  CNY\n  COP\n  COU\n  CRC\n  CRYPTO_BTC\n  CRYPTO_ETH\n  CRYPTO_USDC\n  CUC\n  CUP\n  CVE\n  CZK\n  DJF\n  DKK\n  DOP\n  DZD\n  EGP\n  ERN\n  ETB\n  EUR\n  FJD\n  FKP\n  GBP\n  GEL\n  GHS\n  GIP\n  GMD\n  GNF\n  GTQ\n  GYD\n  HKD\n  HNL\n  HRK\n  HTG\n  HUF\n  IDR\n  ILS\n  INR\n  IQD\n  IRR\n  ISK\n  JMD\n  JOD\n  JPY\n  KES\n  KGS\n  KHR\n  KMF\n  KPW\n  KRW\n  KWD\n  KYD\n  KZT\n  LAK\n  LBP\n  LKR\n  LRD\n  LSL\n  LYD\n  MAD\n  MDL\n  MGA\n  MKD\n  MMK\n  MNT\n  MOP\n  MRU\n  MUR\n  MVR\n  MWK\n  MXN\n  MXV\n  MYR\n  MZN\n  NAD\n  NASDAQ_DAGXX\n  NASDAQ_DGCXX\n  NASDAQ_DGVXX\n  NASDAQ_DPGXX\n  NASDAQ_GGBXX\n  NASDAQ_GGDXX\n  NASDAQ_GGSXX\n  NASDAQ_GSBXX\n  NGN\n  NIO\n  NOK\n  NPR\n  NZD\n  OMR\n  PAB\n  PEN\n  PGK\n  PHP\n  PKR\n  PLN\n  PYG\n  QAR\n  RON\n  RSD\n  RUB\n  RWF\n  SAR\n  SBD\n  SCR\n  SDG\n  SEK\n  SGD\n  SHP\n  SLL\n  SOS\n  SRD\n  SSP\n  STN\n  SVC\n  SYP\n  SZL\n  THB\n  TJS\n  TMT\n  TND\n  TOP\n  TRY\n  TTD\n  TWD\n  TZS\n  UAH\n  UGX\n  USD\n  USN\n  UYI\n  UYU\n  UYW\n  UZS\n  VES\n  VND\n  VUV\n  WST\n  XAF\n  XAG\n  XAU\n  XBA\n  XBB\n  XBC\n  XBD\n  XCD\n  XDR\n  XOF\n  XPD\n  XPF\n  XPT\n  XSU\n  XTS\n  XUA\n  XXX\n  YER\n  ZAR\n  ZMW\n  ZWL\n}\n\n\"\"\"\nTime bucketting strategy\n- START: Buckets start at the startsAt timestamp\n- END: Buckets start at the endsAt timestamp\n- CALENDAR: Buckets are aligned with the calendar units (e.g. WEEKS) but can include\npartial buckets based on the startsAt and endsAt timebuckets\n\"\"\"\nenum InsightsTimeBucketStrategy {\n  CALENDAR\n  END\n  START\n}\n\n\"Generic time unit\"\nenum InsightsTimeUnit {\n  DAY\n  MONTH\n  QUARTER\n  WEEK\n  YEAR\n}\n\n\"Merchant category control type.\"\nenum MerchantCategoryControlType {\n  ALLOW\n  BLOCK\n}\n\nenum OrderByDirection {\n  ASCENDING\n  DESCENDING\n}\n\n\"The type of the request action.\"\nenum RequestActionType {\n  \"A memo is requested.\"\n  MEMO\n  \"A receipt is requested.\"\n  RECEIPT\n  \"A manager (or other) review is requested.\"\n  REVIEW\n}\n\n\"The type of the Request.\"\nenum RequestType {\n  \"This is a budget request.\"\n  BUDGET\n  \"This is an expense request.\"\n  EXPENSE\n}\n\n\"Available fields to order budget employees by\"\nenum SortableBudgetEmployeeField {\n  AMOUNT_SPENT\n  NAME\n}\n\n\"Available fields to order the Budget connection by.\"\nenum SortableBudgetField {\n  AMOUNT_SPENT\n  CREATED_AT\n  END_TIME\n  LIMIT\n  NAME\n  START_TIME\n}\n\n\"ISOz date\"\nscalar Date\n\n\"Json object\"\nscalar Json\n\n\"64Bit integer\"\nscalar Long\n\n\"ISOz time\"\nscalar Time\n\nscalar _Any\n\nscalar _FieldSet\n\n\"Input type for assigning budgets to cards.\"\ninput AssignBudgetToCardInput {\n  budgetId: ID!\n  budgetMappingExpiration: BudgetMappingExpiration\n  clientMutationId: String!\n  effectiveRange: EffectiveRangeInput\n  networkCardId: ID!\n  type: BudgetMappingType @deprecated(reason : \"Use budgetMappingExpiration\")\n}\n\ninput BudgetEmployeeFilter {\n  \"filter for users by text\"\n  text: String!\n}\n\ninput BudgetEmployeeOrder {\n  \"Direction\"\n  direction: OrderByDirection!\n  \"Which field is being sorted on\"\n  field: SortableBudgetEmployeeField!\n}\n\ninput BudgetFilterInput {\n  \"Filter out budgets with an end date later than this value.\"\n  endDateBefore: Date\n  \"Whether or not the budget has nested budgets\"\n  hasSubBudgets: Boolean\n  \"Match IN specific members\"\n  members: BudgetPersonnelInput\n  \"Whether or not the budget has a virtual card\"\n  onlyProvisionedCardSpend: Boolean\n  \"Match IN specific owners\"\n  owners: BudgetPersonnelInput\n  \"List all budgets belonging to a parent budget\"\n  parentBudgetId: ID\n  \"Search budgets by name\"\n  search: String\n  \"Filter out budgets with a start date earlier than this value.\"\n  startDateAfter: Date\n  \"Filter out budgets with a start date later than this value.\"\n  startDateBefore: Date\n  \"Budget Status IN statuses\"\n  statuses: [BudgetStatus!]\n}\n\n\"Input type for searching for merchants and categories.\"\ninput BudgetMerchantsAndCategoriesSuggestionsInput {\n  \"User's input of merchant category control type.\"\n  controlType: MerchantCategoryControlType!\n  \"User's input of search text.\"\n  searchText: String!\n}\n\ninput BudgetOrderInput {\n  direction: OrderByDirection!\n  field: SortableBudgetField!\n}\n\n\"Input type for specifying budget personnel (list of users or groups, or both)\"\ninput BudgetPersonnelInput {\n  userIds: [ID]\n}\n\ninput CardFilterInput {\n  \"\"\"\n  Expects an array of CardBudgetOwnershipTypes, which will be used to filter cards. Cannot be empty.\n  To get all cards simply pass [CardBudgetOwnershipType.USER, CardBudgetOwnershipType.BUDGET]\n  \"\"\"\n  cardBudgetOwnershipTypes: [CardBudgetOwnershipType!]!\n}\n\n\"Input type for validating merchants and/or categories with ancestor budgets.\"\ninput ConflictingAncestorBudgetMerchantCategoryControls {\n  \"Merchant category control type (BLOCK or ALLOW).\"\n  controlType: MerchantCategoryControlType!\n  \"Merchant category list.\"\n  merchantCategories: [MerchantCategoryInput!]\n  \"Merchant list.\"\n  merchants: [MerchantInput!]\n  \"Parent budget id.\"\n  parentBudgetId: ID!\n}\n\n\"Input type for validating merchants and/or categories with ancestor and descendant budgets.\"\ninput ConflictingBudgetMerchantCategoryControls {\n  \"Budget id.\"\n  budgetId: ID!\n  \"Merchant category control type (BLOCK or ALLOW).\"\n  controlType: MerchantCategoryControlType!\n  \"Merchant category list.\"\n  merchantCategories: [MerchantCategoryInput!]\n  \"Merchant list.\"\n  merchants: [MerchantInput!]\n}\n\ninput CreateBudgetFields {\n  \"Description of what the budget is used for\"\n  description: String\n  \"The end date of the budget, inclusive.\"\n  endDate: Date\n  \"True if the budget limit is hard enforced\"\n  enforceLimit: Boolean!\n  \"Limit on the budget\"\n  limit: FinancialAssetInput!\n  \"The employees who are considered members of this budget\"\n  members: [ID!]!\n  \"Merchant category controls\"\n  merchantCategoryControls: [MerchantCategoryConfigInput!]\n  \"Name of the budget\"\n  name: String!\n  \"True if only provisioned cards can spend from this budget\"\n  onlyProvisionedCardSpend: Boolean!\n  \"The employees who are considered owners of this budget\"\n  owners: [ID!]!\n  \"The parent of this budget, if any\"\n  parent: ID!\n  \"The recurring period type of the budget.\"\n  periodType: BudgetPeriodType!\n  \"The policy that manages expenses for this budget\"\n  policyId: ID\n  \"The start date of the budget, inclusive.\"\n  startDate: Date!\n}\n\ninput CreateBudgetInput {\n  clientMutationId: String!\n  fields: CreateBudgetFields!\n}\n\n\"Fields needed to create a request for a budget.\"\ninput CreateBudgetRequestFields {\n  description: String!\n  endDate: Date\n  limit: FinancialAssetInput!\n  members: [ID!]!\n  name: String!\n  owners: [ID!]!\n  periodType: BudgetPeriodType!\n  startDate: Date!\n}\n\n\"Input to create a request for a budget.\"\ninput CreateBudgetRequestInput {\n  clientMutationId: String!\n  fields: CreateBudgetRequestFields!\n}\n\n\"Input for effective range.\"\ninput EffectiveRangeInput {\n  endTime: Time\n  startTime: Time\n}\n\n\"\"\"\n From APIv1\n https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L13\n\"\"\"\ninput FinancialAssetInput {\n  \"The instrument code (usd, etc.). Currently, only usd is supported.\"\n  instrumentCode: FinancialInstrumentCode = USD\n  \"The amount in cents\"\n  quantityCents: Int\n}\n\ninput FinancialAssetRangeInput {\n  \"Exclusive, only considers given currency, required to have same currency when minAmount is provided.\"\n  maxAmount: FinancialAssetInput\n  \"Inclusive, only considers given currency, required to have same currency when maxAmount is provided.\"\n  minAmount: FinancialAssetInput\n}\n\n\"Input for merchant category config.\"\ninput MerchantCategoryConfigInput {\n  controlReference: MerchantControlReferenceInput!\n  controlType: MerchantCategoryControlType!\n}\n\n\"Input for validating a single merchant or merchant category.\"\ninput MerchantCategoryInput {\n  \"Merchant category id.\"\n  id: String!\n  \"Merchant category name.\"\n  name: String!\n}\n\n\"Merchant control reference input.\"\ninput MerchantControlReferenceInput {\n  merchantCategoryId: String\n  merchantName: String\n}\n\n\"Input for validating a single merchant or merchant category.\"\ninput MerchantInput {\n  \"Merchant category.\"\n  category: MerchantCategoryInput!\n  \"Merchant id.\"\n  id: String\n  \"Merchant name.\"\n  name: String!\n}\n\n\"\"\"\nPagination parameters for enumerating items in a connection.\nOnly {first, after} OR {last, before} pairs can be set.\ne.g. If {first, before} is set, that will cause a validation error.\nThe cursors are optional. Without a specified cursor, it is assumed to start at\nthe first item (for `first`) or last item (for `last`) of the collection.\n\"\"\"\ninput PaginationInput {\n  \"The cursor to start the page at (exclusive).\"\n  after: String\n  \"The cursor to end the page at (exclusive).\"\n  before: String\n  \"The number of items to return in a page after the `after` cursor.\"\n  first: Int\n  \"The number of items to return in a page prior to the `before` cursor.\"\n  last: Int\n}\n\ninput TimeIntervalInput {\n  \"Exclusive end at.\"\n  endAt: Time\n  \"Inclusive start at.\"\n  startAt: Time\n}\n\ninput UpdateBudgetFields {\n  \"Description of what the budget is used for\"\n  description: String\n  \"The end date of the budget, inclusive.\"\n  endDate: Date\n  \"True if the budget limit is hard enforced\"\n  enforceLimit: Boolean\n  \"Limit on the budget\"\n  limit: FinancialAssetInput\n  \"The employees who are considered members of this budget\"\n  members: [ID]\n  \"Merchant category controls\"\n  merchantCategoryControls: [MerchantCategoryConfigInput]\n  \"Name of the budget\"\n  name: String\n  \"True if only provisioned cards can spend from this budget\"\n  onlyProvisionedCardSpend: Boolean\n  \"The employees who are considered owners of this budget\"\n  owners: [ID]\n  \"The recurring period type of the budget.\"\n  periodType: BudgetPeriodType\n  \"The policy that manages expenses for this budget\"\n  policyId: ID\n  \"The start date of the budget, inclusive.\"\n  startDate: Date\n  \"Budget Status\"\n  status: BudgetStatus\n}\n\ninput UpdateBudgetInput {\n  clientMutationId: String!\n  fields: UpdateBudgetFields!\n  id: ID!\n}\n	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
sm_cl109xnh000140e6099qvyxbj	sv_ckwwklx3a000c0e42a95s2wzb	\"Directs the executor to include this field or fragment only when the `if` argument is true\"\ndirective @include(\n    \"Included when true.\"\n    if: Boolean!\n  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"Directs the executor to skip this field or fragment when the `if`'argument is true.\"\ndirective @skip(\n    \"Skipped when true.\"\n    if: Boolean!\n  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ndirective @extends on OBJECT | INTERFACE\n\ndirective @external on FIELD_DEFINITION\n\ndirective @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE\n\ndirective @provides(fields: _FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: _FieldSet!) on FIELD_DEFINITION\n\n\"Marks the field, argument, input field or enum value as deprecated\"\ndirective @deprecated(\n    \"The reason for the deprecation\"\n    reason: String = \"No longer supported\"\n  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION\n\n\"Exposes a URL that specifies the behaviour of this scalar.\"\ndirective @specifiedBy(\n    \"The URL that specifies the behaviour of this scalar.\"\n    url: String!\n  ) on SCALAR\n\n\"\"\"\nThe interface for paginating through collections of elements.\nEvery collection of entities not returned by a mutation result should\npaginate through a connection. That is, `types` with a field that is\nan `array` should be exceedingly rare.\nWe want all collections of things to be paginated.\n\"\"\"\ninterface Connection {\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"\"\"\n  The total count of items matching the filter criteria specified for this connection.\n  This value may be approximate. And this value may not be provided at all. Not all connections\n  can be counted easily.\n  \"\"\"\n  totalCount: Int\n}\n\n\"A request to accomplish some task (e.g. approve an expense, approve a budget, etc...)\"\ninterface Request {\n  \"\"\"\n  Fetch actions on the Request.\n  Can be filtered e.g. to select only pending actions\n  \"\"\"\n  actions(filter: RequestActionFilterInput, order: RequestActionOrderInput, page: PaginationInput): RequestActionConnection\n  \"When the request was created.\"\n  createdAt: Time!\n  \"The unique ID of the request\"\n  id: ID!\n  \"The timestamp when a controller overridden the request\"\n  overriddenAt: Time\n  \"The employee who overridden the request.\"\n  overriddenBy: Employee\n  \"The user who initiated the request\"\n  requestedBy: User @deprecated(reason : \"Incorrect permission scoping, use requestedByEmployee instead\")\n  \"The employee who initiated the request\"\n  requestedByEmployee: Employee\n  \"The stage of approval of the request, e.g. created, approved, denied\"\n  status: RequestStatus\n  \"\"\"\n  The type of thing being requested.\n  \n  This is a 1:1 mapping to __typename, but it exists for convenience and consistency.\n  \"\"\"\n  type: RequestType\n}\n\ninterface RequestActionOwner {\n  \"A employee who is requested to perform this action\"\n  employee: Employee\n  \"A user who is requested to perform this action\"\n  user: User @deprecated(reason : \"Incorrect permission scoping, use employee instead\")\n}\n\nunion _Entity = Budget | BudgetRequest | Employee | Expense | ExpenseRequest | RequestAction | User\n\ntype Budget @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\n\"A budget request.\"\ntype BudgetRequest implements Request @key(fields : \"id\") {\n  \"Actions for the budget request.\"\n  actions(filter: RequestActionFilterInput, order: RequestActionOrderInput, page: PaginationInput): RequestActionConnection\n  \"\"\"\n  The Budget which this Request was created to get approval for\n  The Budget's status will be 'pending_approval' while the request is 'pending'\n  \"\"\"\n  budget: Budget\n  \"When the request was created.\"\n  createdAt: Time!\n  \"The unique ID of the budget request.\"\n  id: ID!\n  \"The timestamp when a controller overridden the request.\"\n  overriddenAt: Time\n  \"The employee who overridden the request.\"\n  overriddenBy: Employee\n  \"The user who requested the budget.\"\n  requestedBy: User @deprecated(reason : \"Incorrect permission scoping, use requestedByEmployee instead\")\n  \"The employee who initiated the request.\"\n  requestedByEmployee: Employee\n  \"The stage of approval of the request, e.g. created, approved, denied\"\n  status: RequestStatus\n  \"Will always map to BUDGET for a BudgetRequest.\"\n  type: RequestType\n}\n\ntype Employee @extends @key(fields : \"customerUserId\") {\n  customerUserId: ID @external\n}\n\n\"\"\"\n TODO: this will be done after hierachies are implemented\nextend type Title @key(fields: \"id\") {\n   id: ID! @external\n}\n\"\"\"\ntype Expense @extends @key(fields : \"id\") {\n  id: ID! @external\n  \"A history of the requests associated with the expense.\"\n  requestHistory: ExpenseRequestConnection\n}\n\n\"An expense request.\"\ntype ExpenseRequest implements Request @key(fields : \"id\") {\n  \"Actions for the expense request.\"\n  actions(filter: RequestActionFilterInput, order: RequestActionOrderInput, page: PaginationInput): RequestActionConnection\n  \"When the request was created.\"\n  createdAt: Time!\n  \"\"\"\n  The Expense which this Request was created to get approval for\n  The Expense's status will be 'submitted' or 'out_of_policy' while the request is 'pending'\n  \"\"\"\n  expense: Expense\n  \"The unique ID of the expense request.\"\n  id: ID!\n  \"The timestamp when a controller overridden the request\"\n  overriddenAt: Time\n  \"The employee who overridden the request.\"\n  overriddenBy: Employee\n  \"The user who initiated the request - generally the user who created the expense.\"\n  requestedBy: User @deprecated(reason : \"Incorrect permission scoping, use requestedByEmployee instead\")\n  \"The employee who initiated the request\"\n  requestedByEmployee: Employee\n  \"The stage of approval of the request, e.g. created, approved, denied\"\n  status: RequestStatus\n  \"Will always map to EXPENSE for an ExpenseRequest.\"\n  type: RequestType\n}\n\n\"An expense request connection for the expense request pagination.\"\ntype ExpenseRequestConnection implements Connection {\n  \"The requests in the current page of results.\"\n  edges: [ExpenseRequestEdge!]!\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"The total count of requests matching the filter criteria specified for this connection.\"\n  totalCount: Int\n}\n\n\"A Request edge for Request pagination.\"\ntype ExpenseRequestEdge {\n  \"The opaque cursor of the current edge.\"\n  cursor: String\n  \"The request at this edge.\"\n  node: ExpenseRequest\n}\n\n\"Financial Asset wrapper\"\ntype FinancialAsset {\n  \"The instrument code (usd, etc.). Currently, only usd is supported.\"\n  instrumentCode: FinancialInstrumentCode!\n  \"The amount in cents\"\n  quantityCents: Int!\n}\n\ntype Mutation {\n  \"Update a Request.\"\n  updateRequest(input: UpdateRequestInput!): UpdateRequestResult!\n  \"Update a request action.\"\n  updateRequestAction(input: UpdateRequestActionInput!): UpdateRequestActionResult!\n  \"Update multiple request actions at once.\"\n  updateRequestActions(input: UpdateRequestActionsInput!): UpdateRequestActionResults!\n  \"Update multiple Requests at once.\"\n  updateRequests(input: UpdateRequestsInput!): UpdateRequestResults!\n}\n\ntype PageInfo {\n  \"When paginating forwards, the cursor to continue.\"\n  endCursor: String\n  \"When paginating forwards, are there more items?\"\n  hasNextPage: Boolean!\n  \"When paginating backwards, are there more items?\"\n  hasPreviousPage: Boolean!\n  \"When paginating backwards, the cursor to continue.\"\n  startCursor: String\n}\n\ntype Query {\n  _entities(representations: [_Any!]!): [_Entity]!\n  _service: _Service\n  \"Get a request by id\"\n  request(id: ID): Request\n  \"Get a single Request Action by ID\"\n  requestAction(id: ID!): RequestAction\n  \"Get a list of Requests\"\n  requests(filter: RequestFilterInput, page: PaginationInput): RequestConnection!\n}\n\n\"An action which needs (or needed) to be taken on a Request\"\ntype RequestAction @key(fields : \"id\") {\n  \"The unique ID of the RequestAction\"\n  id: ID!\n  \"\"\"\n  A list of the users who have been requested to take this action,\n  alongside information about why they are the owners.\n  For Receipt/Memo requests, this will generally be the requester\n  \"\"\"\n  owners: [RequestActionOwner!]!\n  \"The Request which this action must be performed for\"\n  request: Request\n  \"\"\"\n  The comment left by the person who resolved the action.\n  \n  - If this was an Approval action, this would be the approver\n  - If this was a Justification action, this would be the justifier\n  \"\"\"\n  resolutionComment: String\n  \"The time that the action was resolved at.\"\n  resolvedAt: Time\n  \"The user who resolved the request action (and the reason they were able to resolve it)\"\n  resolvedBy: RequestActionOwner\n  \"The current status of the request action e.g. whether it has been performed\"\n  status: RequestActionStatus\n  \"The type of action to be performed\"\n  type: RequestActionType\n}\n\n\"A request action connection for the request action pagination.\"\ntype RequestActionConnection implements Connection {\n  \"The request actions in the current page of results.\"\n  edges: [RequestActionEdge!]!\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"The total count of request actions matching the filter criteria specified for this connection.\"\n  totalCount: Int\n}\n\n\"A RequestAction edge for the RequestAction pagination.\"\ntype RequestActionEdge {\n  \"The opaque cursor of the current edge.\"\n  cursor: String\n  \"The request action at this edge.\"\n  node: RequestAction\n}\n\ntype RequestActionManagerDifference implements RequestActionOwner {\n  \"\"\"\n  A employee who is (or was, if the Request is resolved) 'levelDifference' levels up the manager hierarchy from the\n  requester, and is therefore requested to take action.\n  \"\"\"\n  employee: Employee\n  \"\"\"\n  The action/review was requested from the manager N-levels up the manager chain.\n  \n  For example, N=1 = the requester's manager. N=2 = the requester's manager's manager.\n  \"\"\"\n  levelDifference: Int!\n  \"\"\"\n  A user who is (or was, if the Request is resolved) 'levelDifference' levels up the manager hierarchy from the\n  requester, and is therefore requested to take action.\n  \"\"\"\n  user: User @deprecated(reason : \"Incorrect permission scoping, use employee instead\")\n}\n\ntype RequestActionSpecificOwner implements RequestActionOwner {\n  \"\"\"\n  The policy specified that this exact employee is requested to take action.\n  Often this will be the requester, e.g. for requests to upload Memos/Receipts\n  \"\"\"\n  employee: Employee\n  \"\"\"\n  The policy specified that this exact user is requested to take action.\n  Often this will be the requester, e.g. for requests to upload Memos/Receipts\n  \"\"\"\n  user: User @deprecated(reason : \"Incorrect permission scoping, use employee instead\")\n}\n\ntype RequestActionTitleOwner implements RequestActionOwner {\n  \"A employee who holds (or held, if the Request is resolved) the the title specified by the policy to take action.\"\n  employee: Employee\n  \"A user who holds (or held, if the Request is resolved) the the title specified by the policy to take action.\"\n  user: User @deprecated(reason : \"Incorrect permission scoping, use employee instead\")\n}\n\n\"A request connection for the request pagination.\"\ntype RequestConnection implements Connection {\n  \"The requests in the current page of results.\"\n  edges: [RequestEdge!]!\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"The total count of requests matching the filter criteria specified for this connection.\"\n  totalCount: Int\n}\n\n\"A Request edge for Request pagination.\"\ntype RequestEdge {\n  \"The opaque cursor of the current edge.\"\n  cursor: String\n  \"The request at this edge.\"\n  node: Request\n}\n\ntype UpdateRequestActionResult {\n  \"The RequestAction which was updated\"\n  requestAction: RequestAction!\n}\n\ntype UpdateRequestActionResults {\n  \"The RequestAction which were updated\"\n  results: [UpdateRequestActionResult!]!\n}\n\ntype UpdateRequestResult {\n  \"The Request which was updated\"\n  request: Request!\n}\n\ntype UpdateRequestResults {\n  \"The Requests which were updated\"\n  results: [UpdateRequestResult!]!\n}\n\n\" Federation Types\"\ntype User @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\ntype _Service {\n  sdl: String!\n}\n\n\"The types of relationships for filtering who is assigned a request.\"\nenum AssignedToFilterInput {\n  \"Assigned to anyone in the user's company\"\n  COMPANY\n  \"Assigned to the logged in user\"\n  ME\n  \"Assigned to anyone except the logged in user\"\n  OTHERS\n}\n\n\"The type of the Expense.\"\nenum ExpenseType {\n  \"A bill pay expense.\"\n  BILLPAY\n  \"A card expense.\"\n  CARD\n  \"A reimbursement expense.\"\n  REIMBURSEMENT\n}\n\n\"\"\"\n From APIv1\n https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L7\n https://github.com/brexhq/credit_card/blob/main/libraries/brex_financial_asset/lib/financial_instrument_constants.ex#L962\n\"\"\"\nenum FinancialInstrumentCode {\n  AED\n  AFN\n  ALL\n  AMD\n  ANG\n  AOA\n  ARS\n  AUD\n  AWG\n  AZN\n  BAM\n  BBD\n  BDT\n  BGN\n  BHD\n  BIF\n  BMD\n  BND\n  BOB\n  BOV\n  BRL\n  BSD\n  BTN\n  BWP\n  BYN\n  BZD\n  CAD\n  CDF\n  CHE\n  CHF\n  CHW\n  CLF\n  CLP\n  CNY\n  COP\n  COU\n  CRC\n  CRYPTO_BTC\n  CRYPTO_ETH\n  CRYPTO_USDC\n  CUC\n  CUP\n  CVE\n  CZK\n  DJF\n  DKK\n  DOP\n  DZD\n  EGP\n  ERN\n  ETB\n  EUR\n  FJD\n  FKP\n  GBP\n  GEL\n  GHS\n  GIP\n  GMD\n  GNF\n  GTQ\n  GYD\n  HKD\n  HNL\n  HRK\n  HTG\n  HUF\n  IDR\n  ILS\n  INR\n  IQD\n  IRR\n  ISK\n  JMD\n  JOD\n  JPY\n  KES\n  KGS\n  KHR\n  KMF\n  KPW\n  KRW\n  KWD\n  KYD\n  KZT\n  LAK\n  LBP\n  LKR\n  LRD\n  LSL\n  LYD\n  MAD\n  MDL\n  MGA\n  MKD\n  MMK\n  MNT\n  MOP\n  MRU\n  MUR\n  MVR\n  MWK\n  MXN\n  MXV\n  MYR\n  MZN\n  NAD\n  NASDAQ_DAGXX\n  NASDAQ_DGCXX\n  NASDAQ_DGVXX\n  NASDAQ_DPGXX\n  NASDAQ_GGBXX\n  NASDAQ_GGDXX\n  NASDAQ_GGSXX\n  NASDAQ_GSBXX\n  NGN\n  NIO\n  NOK\n  NPR\n  NZD\n  OMR\n  PAB\n  PEN\n  PGK\n  PHP\n  PKR\n  PLN\n  PYG\n  QAR\n  RON\n  RSD\n  RUB\n  RWF\n  SAR\n  SBD\n  SCR\n  SDG\n  SEK\n  SGD\n  SHP\n  SLL\n  SOS\n  SRD\n  SSP\n  STN\n  SVC\n  SYP\n  SZL\n  THB\n  TJS\n  TMT\n  TND\n  TOP\n  TRY\n  TTD\n  TWD\n  TZS\n  UAH\n  UGX\n  USD\n  USN\n  UYI\n  UYU\n  UYW\n  UZS\n  VES\n  VND\n  VUV\n  WST\n  XAF\n  XAG\n  XAU\n  XBA\n  XBB\n  XBC\n  XBD\n  XCD\n  XDR\n  XOF\n  XPD\n  XPF\n  XPT\n  XSU\n  XTS\n  XUA\n  XXX\n  YER\n  ZAR\n  ZMW\n  ZWL\n}\n\n\"\"\"\nTime bucketting strategy\n- START: Buckets start at the startsAt timestamp\n- END: Buckets start at the endsAt timestamp\n- CALENDAR: Buckets are aligned with the calendar units (e.g. WEEKS) but can include\npartial buckets based on the startsAt and endsAt timebuckets\n\"\"\"\nenum InsightsTimeBucketStrategy {\n  CALENDAR\n  END\n  START\n}\n\n\"Generic time unit\"\nenum InsightsTimeUnit {\n  DAY\n  MONTH\n  QUARTER\n  WEEK\n  YEAR\n}\n\nenum OrderByDirection {\n  ASCENDING\n  DESCENDING\n}\n\n\"The current status of the request action.\"\nenum RequestActionStatus {\n  \"An action which is not ready to be taken because its dependencies are unresolved\"\n  BLOCKED\n  \"The action's request was canceled\"\n  CANCELED\n  \"The desired action was taken by the owner\"\n  COMPLETED\n  \"The action was marked as not needed\"\n  DISMISSED\n  \"An action which is ready to be taken (no dependencies, or all dependencies are resolved)\"\n  PENDING\n  \"\"\"\n  The owner explicitly refuses to take an action, e.g. approving an expense.\n  Not all Request Actions can be REJECTED.\n  \"\"\"\n  REJECTED\n}\n\nenum RequestActionStatusInput {\n  \"Approve a request action, approving the request if this was the last action\"\n  COMPLETED\n  \"The action was marked as not needed\"\n  DISMISSED\n  \"Reject a request action, therefore rejecting the whole request\"\n  REJECTED\n}\n\n\"The type of the request action.\"\nenum RequestActionType {\n  \"A memo is requested.\"\n  MEMO\n  \"A receipt is requested.\"\n  RECEIPT\n  \"A manager (or other) review is requested.\"\n  REVIEW\n}\n\n\"The status of a Request.\"\nenum RequestStatus {\n  \"\"\"\n  When all request actions associated with this request are approved/dismissed,\n  or an admin directly overrode the request with an approval\n  \"\"\"\n  APPROVED\n  \"\"\"\n  When a request was canceled by the requester\n  \n  TODO: do we need to differentiate between 'user'-canceled vs 'system'-canceled? (e.g. VOID)\n  \"\"\"\n  CANCELED\n  \"Requests are created as pending\"\n  PENDING\n  \"When one of the actions was rejected\"\n  REJECTED\n}\n\nenum RequestStatusInput {\n  \"Force a request to be approved, even if its actions have not been completed\"\n  APPROVED\n  \"Cancel a request which is no longer needed\"\n  CANCELED\n  \"Completely reject a request, even if it didn't ask for your approval\"\n  REJECTED\n}\n\n\"The type of the Request.\"\nenum RequestType {\n  \"This is a budget request.\"\n  BUDGET\n  \"This is an expense request.\"\n  EXPENSE\n}\n\n\"The types of relationships for filtering who requested a request.\"\nenum RequestedByFilterInput {\n  \"Created by anyone in the user's company\"\n  COMPANY\n  \"Created by the logged in user\"\n  ME\n  \"Created by anyone in the user's team\"\n  TEAM\n}\n\n\"Available fields to order the Expense connection by.\"\nenum SortableRequestActionField {\n  EXECUTION_ORDER\n}\n\n\"ISOz date\"\nscalar Date\n\n\"Json object\"\nscalar Json\n\n\"64Bit integer\"\nscalar Long\n\n\"ISOz time\"\nscalar Time\n\nscalar _Any\n\nscalar _FieldSet\n\n\"\"\"\n From APIv1\n https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L13\n\"\"\"\ninput FinancialAssetInput {\n  \"The instrument code (usd, etc.). Currently, only usd is supported.\"\n  instrumentCode: FinancialInstrumentCode = USD\n  \"The amount in cents\"\n  quantityCents: Int\n}\n\ninput FinancialAssetRangeInput {\n  \"Exclusive, only considers given currency, required to have same currency when minAmount is provided.\"\n  maxAmount: FinancialAssetInput\n  \"Inclusive, only considers given currency, required to have same currency when maxAmount is provided.\"\n  minAmount: FinancialAssetInput\n}\n\n\"\"\"\nPagination parameters for enumerating items in a connection.\nOnly {first, after} OR {last, before} pairs can be set.\ne.g. If {first, before} is set, that will cause a validation error.\nThe cursors are optional. Without a specified cursor, it is assumed to start at\nthe first item (for `first`) or last item (for `last`) of the collection.\n\"\"\"\ninput PaginationInput {\n  \"The cursor to start the page at (exclusive).\"\n  after: String\n  \"The cursor to end the page at (exclusive).\"\n  before: String\n  \"The number of items to return in a page after the `after` cursor.\"\n  first: Int\n  \"The number of items to return in a page prior to the `before` cursor.\"\n  last: Int\n}\n\n\"Filters available to control which request actions get returned.\"\ninput RequestActionFilterInput {\n  \"Match IN specific statues, match ALL when no filter is provided\"\n  status: [RequestActionStatus!]\n}\n\ninput RequestActionInput {\n  \"\"\"\n  The status of the request action.\n  Note: Only REVIEW request actions can be COMPLETED or REJECTED.\n  Note: Any request action can be DISMISSED.\n  \"\"\"\n  status: RequestActionStatusInput\n}\n\n\"Determines the order that the requests will be returned.\"\ninput RequestActionOrderInput {\n  field: SortableRequestActionField!\n  order: OrderByDirection!\n}\n\n\"Filters available to control which requests get returned in a connection.\"\ninput RequestFilterInput {\n  \"Select requests by one or more types\"\n  requestTypes: [RequestType!]\n  \"Match IN specific statuses, match ALL when no filter it provided\"\n  status: [RequestStatus!]\n}\n\ninput RequestInput {\n  \"The status of the request.\"\n  status: RequestStatus\n}\n\ninput TimeIntervalInput {\n  \"Exclusive end at.\"\n  endAt: Time\n  \"Inclusive start at.\"\n  startAt: Time\n}\n\ninput UpdateRequestActionInput {\n  \"clientMutationId\"\n  clientMutationId: String\n  \"The ID of the request action to update.\"\n  id: ID!\n  \"The input for the request action object.\"\n  requestAction: RequestActionInput!\n}\n\ninput UpdateRequestActionsInput {\n  \"clientMutationId\"\n  clientMutationId: String\n  \"A list of individual update request input\"\n  updateRequestActionInputs: [UpdateRequestActionInput!]!\n}\n\ninput UpdateRequestInput {\n  \"clientMutationId\"\n  clientMutationId: String\n  \"The ID of the request to update.\"\n  id: ID!\n  \"The input for the request object.\"\n  request: RequestInput!\n}\n\ninput UpdateRequestsInput {\n  \"clientMutationId\"\n  clientMutationId: String\n  \"A list of individual update request input\"\n  updateRequestInputs: [UpdateRequestInput!]!\n}\n	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
sm_cl109y2eh001o0e608wiur9rq	sv_ckwwkn11z000g0e425ef0dtpo	\"Directs the executor to include this field or fragment only when the `if` argument is true\"\ndirective @include(\n    \"Included when true.\"\n    if: Boolean!\n  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"Directs the executor to skip this field or fragment when the `if`'argument is true.\"\ndirective @skip(\n    \"Skipped when true.\"\n    if: Boolean!\n  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ndirective @extends on OBJECT | INTERFACE\n\ndirective @external on FIELD_DEFINITION\n\ndirective @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE\n\ndirective @provides(fields: _FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: _FieldSet!) on FIELD_DEFINITION\n\n\"Marks the field, argument, input field or enum value as deprecated\"\ndirective @deprecated(\n    \"The reason for the deprecation\"\n    reason: String = \"No longer supported\"\n  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION\n\n\"Exposes a URL that specifies the behaviour of this scalar.\"\ndirective @specifiedBy(\n    \"The URL that specifies the behaviour of this scalar.\"\n    url: String!\n  ) on SCALAR\n\n\"\"\"\nThe interface for paginating through collections of elements.\nEvery collection of entities not returned by a mutation result should\npaginate through a connection. That is, `types` with a field that is\nan `array` should be exceedingly rare.\nWe want all collections of things to be paginated.\n\"\"\"\ninterface Connection {\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"\"\"\n  The total count of items matching the filter criteria specified for this connection.\n  This value may be approximate. And this value may not be provided at all. Not all connections\n  can be counted easily.\n  \"\"\"\n  totalCount: Int\n}\n\nunion _Entity = CostCenter | Department | Employee | LegalEntity | Location | Title\n\n\"An employee's cost center defined within a company's organization hierarchy.\"\ntype CostCenter @key(fields : \"id\") {\n  \"The name of the cost center defined by the customer\"\n  displayName: String!\n  \"The unique ID of the title.\"\n  id: ID!\n  \"Number of employees associated with the cost center\"\n  memberCount: Int\n}\n\n\"Cost center connection for pagination\"\ntype CostCenterConnection implements Connection {\n  edges: [CostCenterEdge!]!\n  pageInfo: PageInfo!\n  totalCount: Int\n}\n\n\"Cost center edge for the cost center connection.\"\ntype CostCenterEdge {\n  cursor: String\n  node: CostCenter\n}\n\ntype CreateCostCenterResult {\n  \"Cost center that was created.\"\n  costCenter: CostCenter!\n}\n\ntype CreateEmployeeResult {\n  \"The employee that was created.\"\n  employee: Employee!\n}\n\ntype CreateLegalEntityResult {\n  \"Legal entity that was created.\"\n  legalEntity: LegalEntity!\n}\n\ntype DeleteCostCenterResult {\n  \"ID of the cost center that was deleted.\"\n  id: ID!\n}\n\ntype DeleteLegalEntityResult {\n  \"ID of the legal entity that was deleted.\"\n  id: ID!\n}\n\ntype DeleteTitleResult {\n  \"ID of the title that was deleted.\"\n  id: ID!\n}\n\ntype Department @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\n\"An Employee defined within a company's organization hierarchy.\"\ntype Employee @key(fields : \"id\") @key(fields : \"customerUserId\") {\n  \"Display name of the cost center.\"\n  costCenterDisplayName: String\n  \"The cost center the employee reports within. Defined in the 3rd party HRIS system.\"\n  costCenterId: ID\n  \"Customer ID, null if this employee is not yet a Brex user.\"\n  customerUserId: ID\n  \"Department the employee belongs to\"\n  department: Department\n  \"Full name of the employee.\"\n  displayName: String!\n  \"Email of the employee.\"\n  email: String!\n  \"Employment type of the employee.\"\n  employmentType: EmploymentType\n  \"The unique ID of the employee.\"\n  id: ID!\n  \"Whether or not the employee is a manager.\"\n  isManager: Boolean\n  \"Display name of the legal entity.\"\n  legalEntityDisplayName: String\n  \"The legal entity the employee reports within. Defined in the 3rd party HRIS system.\"\n  legalEntityId: ID\n  \"Location the employee belongs to\"\n  location: Location\n  \"Employee's manager's full name.\"\n  managerDisplayName: String\n  \"ID of this employee's manager.\"\n  managerEmployeeId: ID\n  \"ID of this employee in the 3rd party HRIS system.\"\n  remoteId: ID\n  \"The UserRole of the employee\"\n  role: UserRole\n  \"Display name of this employee's title.\"\n  titleDisplayName: String\n  \"ID of this employee's title.\"\n  titleId: ID\n}\n\n\"Employee connection for pagination\"\ntype EmployeeConnection implements Connection {\n  edges: [EmployeeEdge!]!\n  pageInfo: PageInfo!\n  totalCount: Int\n}\n\n\"Employee edge for the Employee connection.\"\ntype EmployeeEdge {\n  cursor: String\n  node: Employee\n}\n\ntype EmployeeError {\n  description: String!\n  employeeId: ID!\n}\n\n\"Financial Asset wrapper\"\ntype FinancialAsset {\n  \"The instrument code (usd, etc.). Currently, only usd is supported.\"\n  instrumentCode: FinancialInstrumentCode!\n  \"The amount in cents\"\n  quantityCents: Int!\n}\n\ntype ImportEmployeeResult {\n  errors: [EmployeeError!]!\n}\n\n\"An employee's legal entity defined within a company's organization hierarchy.\"\ntype LegalEntity @key(fields : \"id\") {\n  \"The name of the legal entity defined by the customer\"\n  displayName: String!\n  \"The unique ID of the title.\"\n  id: ID!\n  \"Number of employees associated with the legal entity\"\n  memberCount: Int\n}\n\n\"Legal entity connection for pagination\"\ntype LegalEntityConnection implements Connection {\n  edges: [LegalEntityEdge!]!\n  pageInfo: PageInfo!\n  totalCount: Int\n}\n\n\"Legal entity edge for the cost center connection.\"\ntype LegalEntityEdge {\n  cursor: String\n  node: LegalEntity\n}\n\ntype Location @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\ntype Mutation {\n  \"Create a cost center\"\n  createCostCenter(input: CreateCostCenterInput!): CreateCostCenterResult\n  \"Create a new employee\"\n  createEmployee(input: CreateEmployeeInput!): CreateEmployeeResult!\n  \"Create a legal entity\"\n  createLegalEntity(input: CreateLegalEntityInput!): CreateLegalEntityResult\n  \"Delete a cost center\"\n  deleteCostCenter(input: DeleteCostCenterInput!): DeleteCostCenterResult\n  \"Delete a legal entity\"\n  deleteLegalEntity(input: DeleteLegalEntityInput!): DeleteLegalEntityResult\n  \"Delete a title\"\n  deleteTitle(input: DeleteTitleInput!): DeleteCostCenterResult\n  \"Import employees from an HRIS connection.\"\n  importEmployees(input: ImportEmployeeInput!): ImportEmployeeResult!\n  \"Suspend users\"\n  suspendUsers(input: SuspendUsersInput!): SuspendUsersResult\n  \"Update a cost center\"\n  updateCostCenter(input: UpdateCostCenterInput!): UpdateCostCenterResult\n  \"Update an Employee.\"\n  updateEmployee(input: UpdateEmployeeInput!): UpdateEmployeeResult\n  \"Update a legal entity\"\n  updateLegalEntity(input: UpdateLegalEntityInput!): UpdateLegalEntityResult\n}\n\ntype PageInfo {\n  \"When paginating forwards, the cursor to continue.\"\n  endCursor: String\n  \"When paginating forwards, are there more items?\"\n  hasNextPage: Boolean!\n  \"When paginating backwards, are there more items?\"\n  hasPreviousPage: Boolean!\n  \"When paginating backwards, the cursor to continue.\"\n  startCursor: String\n}\n\ntype Query {\n  _entities(representations: [_Any!]!): [_Entity]!\n  _service: _Service\n  \"Get cost center by identifier\"\n  costCenter(identifier: CostCenterIdentifier!): CostCenter\n  \"List cost centers\"\n  costCenters(page: PaginationInput): CostCenterConnection\n  \"\"\"\n  Get an employee by id or customer user id.\n  Or, if no id is provided, get the employee associated with the current BrexContext.\n  \"\"\"\n  employee(identifier: EmployeeIdentifier): Employee\n  \"List employees\"\n  employees(filter: EmployeeFilterInput, page: PaginationInput): EmployeeConnection\n  \"List legal entities\"\n  legalEntities(page: PaginationInput): LegalEntityConnection\n  \"Get legal entity by identifier\"\n  legalEntity(identifier: LegalEntityIdentifier!): LegalEntity\n  \"List titles\"\n  titles(page: PaginationInput): TitleConnection\n}\n\ntype SuspendUsersResult {\n  errors: [UserError!]!\n}\n\n\"An employee's title defined within a company's organization hierarchy.\"\ntype Title @key(fields : \"id\") {\n  \"The name of the title defined by the customer\"\n  displayTitle: String!\n  \"The unique ID of the title.\"\n  id: ID!\n  \"Number of employees associated with the title\"\n  memberCount: Int\n  \"\"\"\n  Where in the organizational hierarchy this title sits. Lower rank is higher up, for example the CEO might be rank 0.\n  Null if not set.\n  \"\"\"\n  rank: Int\n}\n\n\"Title connection for pagination\"\ntype TitleConnection implements Connection {\n  edges: [TitleEdge!]!\n  pageInfo: PageInfo!\n  totalCount: Int\n}\n\n\"Title edge for the Title connection.\"\ntype TitleEdge {\n  cursor: String\n  node: Title\n}\n\ntype UpdateCostCenterResult {\n  \"Cost center that was updated.\"\n  costCenter: CostCenter!\n}\n\ntype UpdateEmployeeResult {\n  \"The employee that was updated.\"\n  employee: Employee!\n}\n\ntype UpdateLegalEntityResult {\n  \"Legal entity that was updated.\"\n  legalEntity: LegalEntity!\n}\n\ntype UserError {\n  description: String!\n  userId: ID!\n}\n\ntype _Service {\n  sdl: String!\n}\n\nenum CostCenterIdentifierType {\n  DISPLAY_NAME\n  ID\n}\n\nenum EmployeeIdentifierType {\n  CUSTOMER_USER_ID\n  EMAIL\n  ID\n  REMOTE_ID\n}\n\nenum EmployeeStatusFilter {\n  TO_BE_DISABLED\n  TO_BE_INVITED\n}\n\nenum EmploymentStatus {\n  ACTIVE\n  INACTIVE\n  PENDING\n}\n\nenum EmploymentType {\n  CONTRACTOR\n  FREELANCE\n  FULL_TIME\n  INTERN\n  PART_TIME\n}\n\n\"The type of the Expense.\"\nenum ExpenseType {\n  \"A bill pay expense.\"\n  BILLPAY\n  \"A card expense.\"\n  CARD\n  \"A reimbursement expense.\"\n  REIMBURSEMENT\n}\n\n\"\"\"\n From APIv1\n https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L7\n https://github.com/brexhq/credit_card/blob/main/libraries/brex_financial_asset/lib/financial_instrument_constants.ex#L962\n\"\"\"\nenum FinancialInstrumentCode {\n  AED\n  AFN\n  ALL\n  AMD\n  ANG\n  AOA\n  ARS\n  AUD\n  AWG\n  AZN\n  BAM\n  BBD\n  BDT\n  BGN\n  BHD\n  BIF\n  BMD\n  BND\n  BOB\n  BOV\n  BRL\n  BSD\n  BTN\n  BWP\n  BYN\n  BZD\n  CAD\n  CDF\n  CHE\n  CHF\n  CHW\n  CLF\n  CLP\n  CNY\n  COP\n  COU\n  CRC\n  CRYPTO_BTC\n  CRYPTO_ETH\n  CRYPTO_USDC\n  CUC\n  CUP\n  CVE\n  CZK\n  DJF\n  DKK\n  DOP\n  DZD\n  EGP\n  ERN\n  ETB\n  EUR\n  FJD\n  FKP\n  GBP\n  GEL\n  GHS\n  GIP\n  GMD\n  GNF\n  GTQ\n  GYD\n  HKD\n  HNL\n  HRK\n  HTG\n  HUF\n  IDR\n  ILS\n  INR\n  IQD\n  IRR\n  ISK\n  JMD\n  JOD\n  JPY\n  KES\n  KGS\n  KHR\n  KMF\n  KPW\n  KRW\n  KWD\n  KYD\n  KZT\n  LAK\n  LBP\n  LKR\n  LRD\n  LSL\n  LYD\n  MAD\n  MDL\n  MGA\n  MKD\n  MMK\n  MNT\n  MOP\n  MRU\n  MUR\n  MVR\n  MWK\n  MXN\n  MXV\n  MYR\n  MZN\n  NAD\n  NASDAQ_DAGXX\n  NASDAQ_DGCXX\n  NASDAQ_DGVXX\n  NASDAQ_DPGXX\n  NASDAQ_GGBXX\n  NASDAQ_GGDXX\n  NASDAQ_GGSXX\n  NASDAQ_GSBXX\n  NGN\n  NIO\n  NOK\n  NPR\n  NZD\n  OMR\n  PAB\n  PEN\n  PGK\n  PHP\n  PKR\n  PLN\n  PYG\n  QAR\n  RON\n  RSD\n  RUB\n  RWF\n  SAR\n  SBD\n  SCR\n  SDG\n  SEK\n  SGD\n  SHP\n  SLL\n  SOS\n  SRD\n  SSP\n  STN\n  SVC\n  SYP\n  SZL\n  THB\n  TJS\n  TMT\n  TND\n  TOP\n  TRY\n  TTD\n  TWD\n  TZS\n  UAH\n  UGX\n  USD\n  USN\n  UYI\n  UYU\n  UYW\n  UZS\n  VES\n  VND\n  VUV\n  WST\n  XAF\n  XAG\n  XAU\n  XBA\n  XBB\n  XBC\n  XBD\n  XCD\n  XDR\n  XOF\n  XPD\n  XPF\n  XPT\n  XSU\n  XTS\n  XUA\n  XXX\n  YER\n  ZAR\n  ZMW\n  ZWL\n}\n\nenum ImportRuleType {\n  AUTO\n  MANUAL\n}\n\n\"\"\"\nTime bucketting strategy\n- START: Buckets start at the startsAt timestamp\n- END: Buckets start at the endsAt timestamp\n- CALENDAR: Buckets are aligned with the calendar units (e.g. WEEKS) but can include\npartial buckets based on the startsAt and endsAt timebuckets\n\"\"\"\nenum InsightsTimeBucketStrategy {\n  CALENDAR\n  END\n  START\n}\n\n\"Generic time unit\"\nenum InsightsTimeUnit {\n  DAY\n  MONTH\n  QUARTER\n  WEEK\n  YEAR\n}\n\nenum LegalEntityIdentifierType {\n  DISPLAY_NAME\n  ID\n}\n\nenum OrderByDirection {\n  ASCENDING\n  DESCENDING\n}\n\n\"The type of the request action.\"\nenum RequestActionType {\n  \"A memo is requested.\"\n  MEMO\n  \"A receipt is requested.\"\n  RECEIPT\n  \"A manager (or other) review is requested.\"\n  REVIEW\n}\n\n\"The type of the Request.\"\nenum RequestType {\n  \"This is a budget request.\"\n  BUDGET\n  \"This is an expense request.\"\n  EXPENSE\n}\n\nenum UserRole {\n  ACCOUNT_ADMIN\n  AP_CLERK\n  BOOKKEEPER\n  CARD_ADMIN\n  EMPLOYEE\n  EMPLOYEE_WITHOUT_CORP_CARDS\n}\n\n\"ISOz date\"\nscalar Date\n\n\"Json object\"\nscalar Json\n\n\"64Bit integer\"\nscalar Long\n\n\"ISOz time\"\nscalar Time\n\nscalar _Any\n\nscalar _FieldSet\n\ninput CostCenterIdentifier {\n  displayName: String\n  id: ID\n  type: CostCenterIdentifierType!\n}\n\ninput CostCenterInput {\n  \"Name of the cost center.\"\n  name: String\n}\n\ninput CreateCostCenterInput {\n  \"clientMutationId\"\n  clientMutationId: String\n  \"Name of the cost center.\"\n  name: String!\n}\n\ninput CreateEmployeeInput {\n  \"The aggregatorId for the employee.\"\n  aggregatorId: String\n  \"The costCenterId for the employee.\"\n  costCenterId: String\n  \"The departmentId for the employee.\"\n  departmentId: String\n  \"The email for the employee.\"\n  email: String!\n  \"The employment status for the employee\"\n  employmentStatus: EmploymentStatus\n  \"The employment type for the employee.\"\n  employmentType: EmploymentType\n  \"The first name for the employee.\"\n  firstName: String!\n  \"The last name for the employee.\"\n  lastName: String!\n  \"The legalEntityId for the employee.\"\n  legalEntityId: String\n  \"The locationId for the employee.\"\n  locationId: String\n  \"The manager employee id for the employee.\"\n  managerEmployeeId: String\n  \"The remoteId for the employee.\"\n  remoteId: String\n  \"The ID of the employee's title.\"\n  titleId: String\n  \"The user's settings including the user role for the employee\"\n  userSetting: UserSetting\n}\n\ninput CreateLegalEntityInput {\n  \"clientMutationId\"\n  clientMutationId: String\n  \"Name of the legal entity.\"\n  name: String!\n}\n\ninput DeleteCostCenterInput {\n  \"clientMutationId\"\n  clientMutationId: String\n  \"The ID of the cost center to delete.\"\n  id: ID!\n}\n\ninput DeleteLegalEntityInput {\n  \"clientMutationId\"\n  clientMutationId: String\n  \"The ID of the legal entity to delete.\"\n  id: ID!\n}\n\ninput DeleteTitleInput {\n  \"clientMutationId\"\n  clientMutationId: String\n  \"The ID of the title to delete.\"\n  id: ID!\n}\n\n\"Filters for list employees query. Records returned will match ALL filters.\"\ninput EmployeeFilterInput {\n  employeeStatusFilter: EmployeeStatusFilter\n  identifiers: [EmployeeIdentifier!]\n  managerEmployeeIds: [ID!]\n  name: String\n  titleIds: [ID!]\n}\n\ninput EmployeeIdentifier {\n  customerUserId: ID\n  email: String\n  id: ID\n  remoteId: ID\n  type: EmployeeIdentifierType!\n}\n\ninput EmployeeUpdateInput {\n  \"The new aggregatorId for the employee.\"\n  aggregatorId: ID\n  \"The new costCenterId for the employee.\"\n  costCenterId: ID\n  \"The new departmentId for the employee.\"\n  departmentId: ID\n  \"The new email for the employee.\"\n  email: String\n  \"The new employment type for the employee.\"\n  employmentType: EmploymentType\n  \"The new first name for the employee.\"\n  firstName: String\n  \"The new last name for the employee.\"\n  lastName: String\n  \"The new legalEntityId for the employee.\"\n  legalEntityId: ID\n  \"The new locationId for the employee.\"\n  locationId: ID\n  \"The new manager employee id for the employee.\"\n  managerEmployeeId: ID\n  \"The new remoteId for the employee.\"\n  remoteId: ID\n  \"The new title (display value, not id) for the employee.\"\n  title: String\n  \"NOTE: Not currently implemented on the backend and may be deprecated entirely.\"\n  userSetting: UserSetting\n}\n\n\"\"\"\n From APIv1\n https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L13\n\"\"\"\ninput FinancialAssetInput {\n  \"The instrument code (usd, etc.). Currently, only usd is supported.\"\n  instrumentCode: FinancialInstrumentCode = USD\n  \"The amount in cents\"\n  quantityCents: Int\n}\n\ninput FinancialAssetRangeInput {\n  \"Exclusive, only considers given currency, required to have same currency when minAmount is provided.\"\n  maxAmount: FinancialAssetInput\n  \"Inclusive, only considers given currency, required to have same currency when maxAmount is provided.\"\n  minAmount: FinancialAssetInput\n}\n\ninput ImportEmployeeInput {\n  clientMutationId: String\n  connectionId: ID!\n  rule: ImportRule!\n  setting: UserSetting!\n}\n\ninput ImportRule {\n  employmentTypes: [EmploymentType!]\n  ids: [ID!]\n  type: ImportRuleType!\n}\n\ninput LegalEntityIdentifier {\n  displayName: String\n  id: ID\n  type: LegalEntityIdentifierType!\n}\n\ninput LegalEntityInput {\n  \"Name of the legal entity.\"\n  name: String\n}\n\n\"\"\"\nPagination parameters for enumerating items in a connection.\nOnly {first, after} OR {last, before} pairs can be set.\ne.g. If {first, before} is set, that will cause a validation error.\nThe cursors are optional. Without a specified cursor, it is assumed to start at\nthe first item (for `first`) or last item (for `last`) of the collection.\n\"\"\"\ninput PaginationInput {\n  \"The cursor to start the page at (exclusive).\"\n  after: String\n  \"The cursor to end the page at (exclusive).\"\n  before: String\n  \"The number of items to return in a page after the `after` cursor.\"\n  first: Int\n  \"The number of items to return in a page prior to the `before` cursor.\"\n  last: Int\n}\n\ninput SuspendUsersInput {\n  clientMutationId: String\n  userIds: [ID!]!\n}\n\ninput TimeIntervalInput {\n  \"Exclusive end at.\"\n  endAt: Time\n  \"Inclusive start at.\"\n  startAt: Time\n}\n\ninput UpdateCostCenterInput {\n  \"clientMutationId\"\n  clientMutationId: String\n  \"All fields are optional. Only those provided will be updated.\"\n  costCenter: CostCenterInput!\n  \"The ID of the cost center to update.\"\n  id: ID!\n}\n\ninput UpdateEmployeeInput {\n  \"clientMutationId\"\n  clientMutationId: String\n  \"The input for the request object. All fields are optional. Only those provided will be updated.\"\n  employee: EmployeeUpdateInput!\n  \"The ID of the employee to update.\"\n  id: ID!\n}\n\ninput UpdateLegalEntityInput {\n  \"clientMutationId\"\n  clientMutationId: String\n  \"The ID of the legal entity to update.\"\n  id: ID!\n  \"All fields are optional. Only those provided will be updated.\"\n  legalEntity: LegalEntityInput!\n}\n\ninput UserSetting {\n  \"Monthly limit for the employee in cents.\"\n  monthlyLimitAmount: FinancialAssetInput\n  \"Role that employees will be invited as\"\n  role: UserRole\n}\n	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
sm_cl10a1q68001y0e60kpadt3pj	sv_cl02z9e17001w0e1884qstooi	\"Directs the executor to include this field or fragment only when the `if` argument is true\"\ndirective @include(\n    \"Included when true.\"\n    if: Boolean!\n  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"Directs the executor to skip this field or fragment when the `if`'argument is true.\"\ndirective @skip(\n    \"Skipped when true.\"\n    if: Boolean!\n  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ndirective @extends on OBJECT | INTERFACE\n\ndirective @external on FIELD_DEFINITION\n\ndirective @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE\n\ndirective @provides(fields: _FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: _FieldSet!) on FIELD_DEFINITION\n\n\"Marks the field, argument, input field or enum value as deprecated\"\ndirective @deprecated(\n    \"The reason for the deprecation\"\n    reason: String = \"No longer supported\"\n  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION\n\n\"Exposes a URL that specifies the behaviour of this scalar.\"\ndirective @specifiedBy(\n    \"The URL that specifies the behaviour of this scalar.\"\n    url: String!\n  ) on SCALAR\n\n\"\"\"\nThe interface for paginating through collections of elements.\nEvery collection of entities not returned by a mutation result should\npaginate through a connection. That is, `types` with a field that is\nan `array` should be exceedingly rare.\nWe want all collections of things to be paginated.\n\"\"\"\ninterface Connection {\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"\"\"\n  The total count of items matching the filter criteria specified for this connection.\n  This value may be approximate. And this value may not be provided at all. Not all connections\n  can be counted easily.\n  \"\"\"\n  totalCount: Int\n}\n\nunion InsightsScenarioEventDetails = InsightsFundraisingEventDetails | InsightsGenericEventDetails | InsightsHiringEventDetails\n\nunion _Entity = Account | User\n\n\" ---[ Extensions ]---------------------\"\ntype Account @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\ntype CreateInsightsScenarioEventResponse {\n  \"Created scenario event\"\n  event: InsightsScenarioEvent!\n}\n\ntype CreateInsightsScenarioEventsResponse {\n  \"Created events\"\n  events: [InsightsScenarioEvent!]!\n}\n\ntype CreateInsightsScenarioResponse {\n  \"Created scenario\"\n  scenario: InsightsScenario!\n}\n\ntype DeleteInsightsScenarioEventResponse {\n  \"The result of the ScenarioEvent event deletion - success/failure\"\n  success: Boolean!\n}\n\ntype DeleteInsightsScenarioEventsResponse {\n  \"The result of the ScenarioEvent event deletions - success/failure\"\n  success: Boolean!\n}\n\ntype DeleteInsightsScenarioResponse {\n  \"The result of the scenario deletion - success/failure\"\n  success: Boolean!\n}\n\n\"Financial Asset wrapper\"\ntype FinancialAsset {\n  \"The instrument code (usd, etc.). Currently, only usd is supported.\"\n  instrumentCode: FinancialInstrumentCode!\n  \"The amount in cents\"\n  quantityCents: Int!\n}\n\n\"Amount (USD) snapshot for a given time\"\ntype InsightsCashAccountAvailableBalanceSnapshot {\n  \"Available snapshot value (USD)\"\n  amountUsdCents: Long!\n  \"Timestamp of the snapshot value\"\n  timestamp: Time!\n}\n\n\"Cash flow aggregate for a given time range\"\ntype InsightsCashFlowAggregateDataPoint {\n  \"Balance (USD) in the account at the end of the time range (endAt)\"\n  balanceUsdCents: Long!\n  \"The cash the business is burning within the time period\"\n  burnRate: Long!\n  \"End of the aggregate time range (exclusive)\"\n  endAt: Time!\n  \"Amount (USD) that will be brought into the account during the time range\"\n  moneyInUsdCents: Long!\n  \"Amount (USD) that will leave the account during the time range\"\n  moneyOutUsdCents: Long!\n  \"Start of the aggregate time range (inclusive)\"\n  startAt: Time!\n}\n\ntype InsightsFundraisingEventDetails {\n  \"Fundraising amount in USD cents\"\n  amountUsdCents: Long!\n}\n\ntype InsightsGenericEventDetails {\n  \"Initial amount in USD cents\"\n  initialAmountUsdCents: Long!\n  \"\"\"\n  If recurring_cadence is defined, apply this amount for each recurring_cadence\n  instance between the event's [startDate, endDate) period\n  \"\"\"\n  recurringAmountUsdCents: Long\n  \"If set, the cadence of the recurring cost\"\n  recurringCadence: InsightsGenericEventRecurringCadence\n  \"Generic event title\"\n  title: String!\n}\n\ntype InsightsHiringEventDetails {\n  \"Benefits portion of the hiring cost breakdown in USD cents\"\n  benefitsAmountUsdCents: Long!\n  \"How many employees are planned to be hired\"\n  employeeCount: Int!\n  \"The location the employee will be hired at\"\n  employeeLocation: String!\n  \"Employee title\"\n  employeeTitle: String!\n  \"Equipment portion of the hiring cost breakdown in USD cents\"\n  equipmentAmountUsdCents: Long!\n  \"Miscellaneous portion of the hiring cost breakdown in USD cents\"\n  miscellaneousAmountUsdCents: Long!\n  \"Recruiting portion of the hiring cost breakdown in USD cents\"\n  recruitingAmountUsdCents: Long!\n  \"Salary portion of the hiring cost breakdown in USD cents\"\n  salaryAmountUsdCents: Long!\n  \"Sign-On bonus portion of the hiring cost breakdown in USD cents\"\n  signOnBonusAmountUsdCents: Long!\n}\n\n\"A scenario event that can impact runway projections\"\ntype InsightsRunwayInsights {\n  \"Timeseries of projected cash flow data\"\n  cashFlowProjections: [InsightsCashFlowAggregateDataPoint!]!\n  \"A rough estimate of when the account will be out of cash\"\n  estimatedCashOutDate: Date\n  \"\"\"\n  Using the burn rate projection, estimate when the company\n  might need to raise fundraising money\n  \"\"\"\n  suggestedFundraisingDate: Date\n}\n\n\"Scenario Planning scenarios for runway projections\"\ntype InsightsScenario {\n  \"The customer account that owns this scenario\"\n  account: Account!\n  \"When the scenario was created\"\n  createdAt: Time!\n  \"The user who created the scenario\"\n  creator: User!\n  \"List the scenario events\"\n  events: [InsightsScenarioEvent!]!\n  \"Scenario ID\"\n  id: ID!\n  \"When the scenario was last updated\"\n  lastUpdatedAt: Time!\n  \"Scenario name\"\n  name: String!\n  \"Fetch scenario runway insights\"\n  runwayInsights(endDate: Date!, startDate: Date!, timeBucket: InsightsTimeUnit!, timeBucketStrategy: InsightsTimeBucketStrategy!): InsightsRunwayInsights!\n}\n\n\"InsightsScenarios connection\"\ntype InsightsScenarioConnection implements Connection {\n  \"The items in the current page of results.\"\n  edges: [InsightsScenarioEdge!]!\n  \"Page information for additional navigation through this connection.\"\n  pageInfo: PageInfo!\n  \"The total count of items, across all pages, matching the filter criteria specified for this connection.\"\n  totalCount: Int!\n}\n\n\"InsightsScenarioConnection edge\"\ntype InsightsScenarioEdge {\n  \"The opaque cursor of the current edge.\"\n  cursor: String\n  \"The scenario at this edge.\"\n  node: InsightsScenario!\n}\n\n\"A scenario event that can impact runway projections\"\ntype InsightsScenarioEvent {\n  \"When the scenario event was created\"\n  createdAt: Time!\n  \"The user who created the scenario\"\n  creator: User!\n  \"Event type and its specific details\"\n  details: InsightsScenarioEventDetails\n  \"The endDate of the event is EXCLUSIVE and if set to NULL the event never ends\"\n  endDate: Date\n  \"ScenarioEvent ID\"\n  id: ID!\n  \"If set to true, the event will impact the scenario forecast\"\n  isEnabled: Boolean!\n  \"When the scenario event was last updated\"\n  lastUpdatedAt: Time!\n  \"Scenario this event is for\"\n  scenario: InsightsScenario!\n  \"\"\"\n  Date range the event is active is for [startDate, endDate)\n  The startDate is INCLUSIVE\n  \"\"\"\n  startDate: Date!\n}\n\n\" ---[ Mutations ]----------------------\"\ntype Mutation {\n  \"Create a new scenario\"\n  createInsightsScenario(input: CreateInsightsScenarioInput!): CreateInsightsScenarioResponse!\n  \"Create a new scenario event\"\n  createInsightsScenarioEvent(input: CreateInsightsScenarioEventInput!): CreateInsightsScenarioEventResponse!\n  \"\"\"\n  Create multiple scenario events\n  We currently don't do it in a transactional way, so if an error occurs events will be partially created\n  \"\"\"\n  createInsightsScenarioEvents(input: CreateInsightsScenarioEventsInput!): CreateInsightsScenarioEventsResponse!\n  \"Delete an existing scenario\"\n  deleteInsightsScenario(input: DeleteInsightsScenarioInput!): DeleteInsightsScenarioResponse!\n  \"Delete an existing scenario event\"\n  deleteInsightsScenarioEvent(input: DeleteInsightsScenarioEventInput!): DeleteInsightsScenarioEventResponse!\n  \"\"\"\n  Deletes multiple existing scenario events\n  We currently don't do it in a transactional way, so if an error occurs events will be partially deleted\n  \"\"\"\n  deleteInsightsScenarioEvents(input: DeleteInsightsScenarioEventsInput!): DeleteInsightsScenarioEventsResponse!\n  \"Update an existing scenario\"\n  updateInsightsScenario(input: UpdateInsightsScenarioInput!): UpdateInsightsScenarioResponse!\n  \"Update an existing scenario event\"\n  updateInsightsScenarioEvent(input: UpdateInsightsScenarioEventInput!): UpdateInsightsScenarioEventResponse!\n  \"\"\"\n  Updates multiple existing scenario events\n  We currently don't do it in a transactional way, so if an error occurs events will be partially updated\n  \"\"\"\n  updateInsightsScenarioEvents(input: UpdateInsightsScenarioEventsInput!): UpdateInsightsScenarioEventsResponse!\n}\n\ntype PageInfo {\n  \"When paginating forwards, the cursor to continue.\"\n  endCursor: String\n  \"When paginating forwards, are there more items?\"\n  hasNextPage: Boolean!\n  \"When paginating backwards, are there more items?\"\n  hasPreviousPage: Boolean!\n  \"When paginating backwards, the cursor to continue.\"\n  startCursor: String\n}\n\n\" ---[ Queries ]------------------------\"\ntype Query {\n  _entities(representations: [_Any!]!): [_Entity]!\n  _service: _Service\n  \"Available balance snapshots for the account or if specified, a specific deposits account\"\n  cashAccountAvailableBalanceSnapshots(depositsAccountId: ID, timestamps: [Time!]!): [InsightsCashAccountAvailableBalanceSnapshot!]!\n  \"Cash flow transaction aggregates timeseries data\"\n  cashFlowTimeseries(depositsAccountId: ID, endDate: Date!, startDate: Date!, timeBucket: InsightsTimeUnit!, timeBucketStrategy: InsightsTimeBucketStrategy!): [InsightsCashFlowAggregateDataPoint!]!\n  \"Get a scenario by id\"\n  insightsScenario(id: ID): InsightsScenario!\n  \"List Scenarios\"\n  insightsScenarios(page: PaginationInput): InsightsScenarioConnection!\n  \"Fetch runway insights\"\n  runwayInsights(endDate: Date!, startDate: Date!, timeBucket: InsightsTimeUnit!, timeBucketStrategy: InsightsTimeBucketStrategy!): InsightsRunwayInsights!\n}\n\ntype UpdateInsightsScenarioEventResponse {\n  \"Updated event\"\n  event: InsightsScenarioEvent!\n}\n\ntype UpdateInsightsScenarioEventsResponse {\n  \"Updated events\"\n  events: [InsightsScenarioEvent!]!\n}\n\ntype UpdateInsightsScenarioResponse {\n  \"Updated scenario\"\n  scenario: InsightsScenario!\n}\n\n\" User is defined externally\"\ntype User @extends @key(fields : \"id\") {\n  id: ID! @external\n}\n\ntype _Service {\n  sdl: String!\n}\n\n\"The type of the Expense.\"\nenum ExpenseType {\n  \"A bill pay expense.\"\n  BILLPAY\n  \"A card expense.\"\n  CARD\n  \"A reimbursement expense.\"\n  REIMBURSEMENT\n}\n\n\"\"\"\n From APIv1\n https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L7\n https://github.com/brexhq/credit_card/blob/main/libraries/brex_financial_asset/lib/financial_instrument_constants.ex#L962\n\"\"\"\nenum FinancialInstrumentCode {\n  AED\n  AFN\n  ALL\n  AMD\n  ANG\n  AOA\n  ARS\n  AUD\n  AWG\n  AZN\n  BAM\n  BBD\n  BDT\n  BGN\n  BHD\n  BIF\n  BMD\n  BND\n  BOB\n  BOV\n  BRL\n  BSD\n  BTN\n  BWP\n  BYN\n  BZD\n  CAD\n  CDF\n  CHE\n  CHF\n  CHW\n  CLF\n  CLP\n  CNY\n  COP\n  COU\n  CRC\n  CRYPTO_BTC\n  CRYPTO_ETH\n  CRYPTO_USDC\n  CUC\n  CUP\n  CVE\n  CZK\n  DJF\n  DKK\n  DOP\n  DZD\n  EGP\n  ERN\n  ETB\n  EUR\n  FJD\n  FKP\n  GBP\n  GEL\n  GHS\n  GIP\n  GMD\n  GNF\n  GTQ\n  GYD\n  HKD\n  HNL\n  HRK\n  HTG\n  HUF\n  IDR\n  ILS\n  INR\n  IQD\n  IRR\n  ISK\n  JMD\n  JOD\n  JPY\n  KES\n  KGS\n  KHR\n  KMF\n  KPW\n  KRW\n  KWD\n  KYD\n  KZT\n  LAK\n  LBP\n  LKR\n  LRD\n  LSL\n  LYD\n  MAD\n  MDL\n  MGA\n  MKD\n  MMK\n  MNT\n  MOP\n  MRU\n  MUR\n  MVR\n  MWK\n  MXN\n  MXV\n  MYR\n  MZN\n  NAD\n  NASDAQ_DAGXX\n  NASDAQ_DGCXX\n  NASDAQ_DGVXX\n  NASDAQ_DPGXX\n  NASDAQ_GGBXX\n  NASDAQ_GGDXX\n  NASDAQ_GGSXX\n  NASDAQ_GSBXX\n  NGN\n  NIO\n  NOK\n  NPR\n  NZD\n  OMR\n  PAB\n  PEN\n  PGK\n  PHP\n  PKR\n  PLN\n  PYG\n  QAR\n  RON\n  RSD\n  RUB\n  RWF\n  SAR\n  SBD\n  SCR\n  SDG\n  SEK\n  SGD\n  SHP\n  SLL\n  SOS\n  SRD\n  SSP\n  STN\n  SVC\n  SYP\n  SZL\n  THB\n  TJS\n  TMT\n  TND\n  TOP\n  TRY\n  TTD\n  TWD\n  TZS\n  UAH\n  UGX\n  USD\n  USN\n  UYI\n  UYU\n  UYW\n  UZS\n  VES\n  VND\n  VUV\n  WST\n  XAF\n  XAG\n  XAU\n  XBA\n  XBB\n  XBC\n  XBD\n  XCD\n  XDR\n  XOF\n  XPD\n  XPF\n  XPT\n  XSU\n  XTS\n  XUA\n  XXX\n  YER\n  ZAR\n  ZMW\n  ZWL\n}\n\n\"Used in GenericEventDetails to define the recurring cost schedule\"\nenum InsightsGenericEventRecurringCadence {\n  DAILY\n  MONTHLY\n  WEEKLY\n}\n\n\"\"\"\nTime bucketting strategy\n- START: Buckets start at the startsAt timestamp\n- END: Buckets start at the endsAt timestamp\n- CALENDAR: Buckets are aligned with the calendar units (e.g. WEEKS) but can include\npartial buckets based on the startsAt and endsAt timebuckets\n\"\"\"\nenum InsightsTimeBucketStrategy {\n  CALENDAR\n  END\n  START\n}\n\n\"Generic time unit\"\nenum InsightsTimeUnit {\n  DAY\n  MONTH\n  QUARTER\n  WEEK\n  YEAR\n}\n\nenum OrderByDirection {\n  ASCENDING\n  DESCENDING\n}\n\n\"The type of the request action.\"\nenum RequestActionType {\n  \"A memo is requested.\"\n  MEMO\n  \"A receipt is requested.\"\n  RECEIPT\n  \"A manager (or other) review is requested.\"\n  REVIEW\n}\n\n\"The type of the Request.\"\nenum RequestType {\n  \"This is a budget request.\"\n  BUDGET\n  \"This is an expense request.\"\n  EXPENSE\n}\n\n\"ISOz date\"\nscalar Date\n\n\"Json object\"\nscalar Json\n\n\"64Bit integer\"\nscalar Long\n\n\"ISOz time\"\nscalar Time\n\nscalar _Any\n\nscalar _FieldSet\n\ninput CreateInsightsScenarioEventInput {\n  clientMutationId: String\n  \"ScenarioEvent creation inputs\"\n  event: InsightsScenarioEventCreationInput!\n  \"Idempotency key\"\n  idempotencyKey: String!\n  \"Scenario this event is for\"\n  scenarioId: String!\n}\n\ninput CreateInsightsScenarioEventsInput {\n  clientMutationId: String\n  \"Create multiple scenario events\"\n  inputs: [CreateInsightsScenarioEventInput!]!\n}\n\n\"   |---[ Query Inputs ]----------------\"\ninput CreateInsightsScenarioInput {\n  clientMutationId: String\n  \"Idempotency key\"\n  idempotencyKey: String!\n  \"Scenario creation inputs\"\n  scenario: InsightsScenarioCreationInput!\n}\n\ninput DeleteInsightsScenarioEventInput {\n  clientMutationId: String\n  \"ID of ScenarioEvent to delete\"\n  id: ID!\n}\n\ninput DeleteInsightsScenarioEventsInput {\n  clientMutationId: String\n  \"Delete multiple scenario events.\"\n  ids: [ID!]!\n}\n\ninput DeleteInsightsScenarioInput {\n  clientMutationId: String\n  \"ID of scenario to delete\"\n  id: ID!\n}\n\n\"\"\"\n From APIv1\n https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L13\n\"\"\"\ninput FinancialAssetInput {\n  \"The instrument code (usd, etc.). Currently, only usd is supported.\"\n  instrumentCode: FinancialInstrumentCode = USD\n  \"The amount in cents\"\n  quantityCents: Int\n}\n\ninput FinancialAssetRangeInput {\n  \"Exclusive, only considers given currency, required to have same currency when minAmount is provided.\"\n  maxAmount: FinancialAssetInput\n  \"Inclusive, only considers given currency, required to have same currency when maxAmount is provided.\"\n  minAmount: FinancialAssetInput\n}\n\ninput InsightsFundraisingEventDetailsCreationInput {\n  \"Fundraising amount in USD cents\"\n  amountUsdCents: Long!\n}\n\ninput InsightsFundraisingEventDetailsUpdateInput {\n  \"Fundraising amount in USD cents\"\n  amountUsdCents: Long\n}\n\ninput InsightsGenericEventDetailsCreationInput {\n  \"Initial amount in USD cents\"\n  initialAmountUsdCents: Long!\n  \"\"\"\n  If recurring_cadence is defined, apply this amount for each recurring_cadence\n  instance between the event's [startDate, endDate) period\n  \"\"\"\n  recurringAmountUsdCents: Long\n  \"The cadence of the recurring cost\"\n  recurringCadence: InsightsGenericEventRecurringCadence\n  \"Generic event title\"\n  title: String!\n}\n\ninput InsightsGenericEventDetailsUpdateInput {\n  \"Initial amount in USD cents\"\n  initialAmountUsdCents: Long\n  \"\"\"\n  If recurring_cadence is defined, apply this amount for each recurring_cadence\n  instance between the event's [startDate, endDate) period\n  \"\"\"\n  recurringAmountUsdCents: Long\n  \"The cadence of the recurring cost\"\n  recurringCadence: InsightsGenericEventRecurringCadence\n  \"Generic event title\"\n  title: String\n}\n\ninput InsightsHiringEventDetailsCreationInput {\n  \"Benefits portion of the hiring cost breakdown in USD cents\"\n  benefitsAmountUsdCents: Long!\n  \"How many employees are planned to be hired\"\n  employeeCount: Int!\n  \"The location the employee will be hired at\"\n  employeeLocation: String!\n  \"Employee title\"\n  employeeTitle: String!\n  \"Equipment portion of the hiring cost breakdown in USD cents\"\n  equipmentAmountUsdCents: Long!\n  \"Miscellaneous portion of the hiring cost breakdown in USD cents\"\n  miscellaneousAmountUsdCents: Long!\n  \"Recruiting portion of the hiring cost breakdown in USD cents\"\n  recruitingAmountUsdCents: Long!\n  \"Salary portion of the hiring cost breakdown in USD cents\"\n  salaryAmountUsdCents: Long!\n  \"Sign-On bonus portion of the hiring cost breakdown in USD cents\"\n  signOnBonusAmountUsdCents: Long!\n}\n\ninput InsightsHiringEventDetailsUpdateInput {\n  \"Benefits portion of the hiring cost breakdown in USD cents\"\n  benefitsAmountUsdCents: Long\n  \"How many employees are planned to be hired\"\n  employeeCount: Int\n  \"The location the employee will be hired at\"\n  employeeLocation: String\n  \"Employee title\"\n  employeeTitle: String\n  \"Equipment portion of the hiring cost breakdown in USD cents\"\n  equipmentAmountUsdCents: Long\n  \"Miscellaneous portion of the hiring cost breakdown in USD cents\"\n  miscellaneousAmountUsdCents: Long\n  \"Recruiting portion of the hiring cost breakdown in USD cents\"\n  recruitingAmountUsdCents: Long\n  \"Salary portion of the hiring cost breakdown in USD cents\"\n  salaryAmountUsdCents: Long\n  \"Sign-On bonus portion of the hiring cost breakdown in USD cents\"\n  signOnBonusAmountUsdCents: Long\n}\n\n\"\"\"\n ---[ Input Types ]--------------------\n   |---[ Creation Input Types ]--------\n\"\"\"\ninput InsightsScenarioCreationInput {\n  \"Scenario name\"\n  name: String!\n}\n\ninput InsightsScenarioEventCreationInput {\n  \"Event type and its specific details\"\n  details: InsightsScenarioEventDetailsCreationInputUnion!\n  \"The endDate of the event is EXCLUSIVE and if set to NULL the event never ends\"\n  endDate: Date\n  \"If set to true, the event will impact the scenario forecast\"\n  isEnabled: Boolean!\n  \"\"\"\n  Date range the event is active is for [startDate, endDate)\n  The startDate is INCLUSIVE\n  \"\"\"\n  startDate: Date!\n}\n\n\"\"\"\nActs as an input union depending on which field is not NULL\nOne field is required to be set\n\"\"\"\ninput InsightsScenarioEventDetailsCreationInputUnion {\n  fundraisingEventDetails: InsightsFundraisingEventDetailsCreationInput\n  genericEventDetails: InsightsGenericEventDetailsCreationInput\n  hiringEventDetails: InsightsHiringEventDetailsCreationInput\n}\n\n\"\"\"\nActs as an input union depending on which field is not NULL\nOne field is required to be set\n\"\"\"\ninput InsightsScenarioEventDetailsUpdateInputUnion {\n  fundraisingEventDetails: InsightsFundraisingEventDetailsUpdateInput\n  genericEventDetails: InsightsGenericEventDetailsUpdateInput\n  hiringEventDetails: InsightsHiringEventDetailsUpdateInput\n}\n\ninput InsightsScenarioEventUpdateInput {\n  \"Event type and its specific details\"\n  details: InsightsScenarioEventDetailsUpdateInputUnion\n  \"The endDate of the event is EXCLUSIVE and if set to NULL the event never ends\"\n  endDate: Date\n  \"If set to true, the event will impact the scenario forecast\"\n  isEnabled: Boolean\n  \"\"\"\n  Date range the event is active is for [startDate, endDate)\n  The startDate is INCLUSIVE\n  \"\"\"\n  startDate: Date\n}\n\n\"   |---[ Update Input Types ]----------\"\ninput InsightsScenarioUpdateInput {\n  \"Scenario name\"\n  name: String\n}\n\n\"\"\"\nPagination parameters for enumerating items in a connection.\nOnly {first, after} OR {last, before} pairs can be set.\ne.g. If {first, before} is set, that will cause a validation error.\nThe cursors are optional. Without a specified cursor, it is assumed to start at\nthe first item (for `first`) or last item (for `last`) of the collection.\n\"\"\"\ninput PaginationInput {\n  \"The cursor to start the page at (exclusive).\"\n  after: String\n  \"The cursor to end the page at (exclusive).\"\n  before: String\n  \"The number of items to return in a page after the `after` cursor.\"\n  first: Int\n  \"The number of items to return in a page prior to the `before` cursor.\"\n  last: Int\n}\n\ninput TimeIntervalInput {\n  \"Exclusive end at.\"\n  endAt: Time\n  \"Inclusive start at.\"\n  startAt: Time\n}\n\ninput UpdateInsightsScenarioEventInput {\n  clientMutationId: String\n  \"ScenarioEvent update values\"\n  event: InsightsScenarioEventUpdateInput!\n  \"ID of ScenarioEvent to update\"\n  id: ID!\n}\n\ninput UpdateInsightsScenarioEventsInput {\n  clientMutationId: String\n  \"Update multiple scenario events\"\n  updates: [UpdateInsightsScenarioEventInput!]!\n}\n\ninput UpdateInsightsScenarioInput {\n  clientMutationId: String\n  \"ID of scenario to update\"\n  id: ID!\n  \"Scenario update values\"\n  scenario: InsightsScenarioUpdateInput!\n}\n	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
\.


COPY public.supergraph_records (id, encoded_supergraph_schema, inserted_at, updated_at) FROM stdin;
sgr_cl10a1q6900240e60bukh7cmr	WyB7CiAgImlkIiA6ICJzbV9jbDEwOXdnejkwMDAwMGU2MDZhYmtqbzB5IiwKICAidmVyc2lvbiIgOiAiZWYzNGQzNGJiNzdlMWU5NWY5ZjNlNWE1MTljYjhiYjM1MTk3ODAxYzdmOGVkOTUzZWY3ZTBlMWUwNGMwOTIyNyIsCiAgInR5cGVfZGVmcyIgOiAic2NoZW1hIHtcbiAgcXVlcnk6IFJvb3RRdWVyeVR5cGVcbiAgbXV0YXRpb246IFJvb3RNdXRhdGlvblR5cGVcbn1cblxudHlwZSBSb290TXV0YXRpb25UeXBlIHtcbiAgcmVjb25uZWN0RXJwRmVlZChpbnB1dDogUmVjb25uZWN0RXJwRmVlZElucHV0ISk6IFJlY29ubmVjdEVycEZlZWRQYXlsb2FkXG4gIGZpbmFsaXplQ29ubmVjdENyZWRlbnRpYWwoaW5wdXQ6IEZpbmFsaXplQ29ubmVjdENyZWRlbnRpYWxJbnB1dCEpOiBGaW5hbGl6ZUNvbm5lY3RDcmVkZW50aWFsUGF5bG9hZFxuICB1cGRhdGVFYXJseUFjY2Vzc0ZlYXR1cmVKb2luU3RhdHVzKGlucHV0OiBVcGRhdGVFYXJseUFjY2Vzc0ZlYXR1cmVKb2luU3RhdHVzSW5wdXQhKTogVXBkYXRlRWFybHlBY2Nlc3NGZWF0dXJlSm9pblN0YXR1c1BheWxvYWRcbiAgY2FuY2VsQ2FzaFRyYW5zYWN0aW9uKGlucHV0OiBDYW5jZWxDYXNoVHJhbnNhY3Rpb25JbnB1dCEpOiBDYW5jZWxDYXNoVHJhbnNhY3Rpb25QYXlsb2FkXG4gIHByb2Nlc3NBY2NvdW50Q2xvc3VyZShpbnB1dDogUHJvY2Vzc0FjY291bnRDbG9zdXJlSW5wdXQhKTogUHJvY2Vzc0FjY291bnRDbG9zdXJlUGF5bG9hZFxuICBjcmVhdGVQYXltZW50KGlucHV0OiBDcmVhdGVQYXltZW50SW5wdXQhKTogQ3JlYXRlUGF5bWVudFBheWxvYWRcbiAgXCJcIlwiQ3JlYXRlIGEgY29ubmVjdGlvbiB3aXRoIHRoZSB2ZW5kb3JcIlwiXCJcbiAgY3JlYXRlSHJpc0Nvbm5lY3Rpb24oaW5wdXQ6IENyZWF0ZUhyaXNDb25uZWN0aW9uSW5wdXQhKTogQ3JlYXRlSHJpc0Nvbm5lY3Rpb25QYXlsb2FkXG4gIHVwZGF0ZUV4cGVuc2VzU2V0dGluZ0F1dG9EaXNtaXNzTWF0Y2hlckpzb24oaW5wdXQ6IFVwZGF0ZUV4cGVuc2VzU2V0dGluZ0F1dG9EaXNtaXNzTWF0Y2hlckpzb25JbnB1dCEpOiBVcGRhdGVFeHBlbnNlc1NldHRpbmdBdXRvRGlzbWlzc01hdGNoZXJKc29uUGF5bG9hZFxuICByZWRlZW1Gb3JCYWxhbmNlKGlucHV0OiBSZWRlZW1Gb3JCYWxhbmNlSW5wdXQhKTogUmVkZWVtRm9yQmFsYW5jZVBheWxvYWRcbiAgXCJcIlwiQnVsayBjcmVhdGUgY29udGFjdHNcIlwiXCJcbiAgYmF0Y2hDcmVhdGVDb250YWN0cyhpbnB1dDogQmF0Y2hDcmVhdGVDb250YWN0c0lucHV0ISk6IEJhdGNoQ3JlYXRlQ29udGFjdHNQYXlsb2FkXG4gIHNldFJlY2VpdmFibGVzT2ZmZXJzT3B0ZWRPdXRPZkluc3RhbnRQYXlvdXRzKGlucHV0OiBTZXRSZWNlaXZhYmxlc09mZmVyc09wdGVkT3V0T2ZJbnN0YW50UGF5b3V0c0lucHV0ISk6IFNldFJlY2VpdmFibGVzT2ZmZXJzT3B0ZWRPdXRPZkluc3RhbnRQYXlvdXRzUGF5bG9hZFxuICBmaW5pY2l0eUNvbm5lY3RHZW5lcmF0ZUZpeFVybChpbnB1dDogRmluaWNpdHlDb25uZWN0R2VuZXJhdGVGaXhVcmxJbnB1dCEpOiBGaW5pY2l0eUNvbm5lY3RHZW5lcmF0ZUZpeFVybFBheWxvYWRcbiAgY3JlYXRlQ291bnRlcnBhcnR5KGlucHV0OiBDcmVhdGVDb3VudGVycGFydHlJbnB1dCEpOiBDcmVhdGVDb3VudGVycGFydHlQYXlsb2FkXG4gIGVuYWJsZVJlaW1idXJzZW1lbnRzKGlucHV0OiBFbmFibGVSZWltYnVyc2VtZW50c0lucHV0ISk6IEVuYWJsZVJlaW1idXJzZW1lbnRzUGF5bG9hZFxuICByZWRlZW1TdGF0ZW1lbnRFbnRyeVJlZnVuZChpbnB1dDogUmVkZWVtU3RhdGVtZW50RW50cnlSZWZ1bmRJbnB1dCEpOiBSZWRlZW1TdGF0ZW1lbnRFbnRyeVJlZnVuZFBheWxvYWRcbiAgZGVsZXRlRGVwYXJ0bWVudChpbnB1dDogRGVsZXRlRGVwYXJ0bWVudElucHV0ISk6IERlbGV0ZURlcGFydG1lbnRQYXlsb2FkXG4gIHJlZmVyVXNlcihpbnB1dDogUmVmZXJVc2VySW5wdXQhKTogUmVmZXJVc2VyUGF5bG9hZFxuICBwdWxsRGF0YUFzeW5jKGlucHV0OiBQdWxsRGF0YUFzeW5jSW5wdXQhKTogUHVsbERhdGFBc3luY1BheWxvYWRcbiAgY3JlYXRlTm9uUHJpbWFyeURlcG9zaXRzQWNjb3VudChpbnB1dDogQ3JlYXRlTm9uUHJpbWFyeURlcG9zaXRzQWNjb3VudElucHV0ISk6IENyZWF0ZU5vblByaW1hcnlEZXBvc2l0c0FjY291bnRQYXlsb2FkXG4gIGNhbmNlbENhc2hSZWN1cnJpbmdTY2hlZHVsZShpbnB1dDogQ2FuY2VsQ2FzaFJlY3VycmluZ1NjaGVkdWxlSW5wdXQhKTogQ2FuY2VsQ2FzaFJlY3VycmluZ1NjaGVkdWxlUGF5bG9hZFxuICBidWxrRGlzY29ubmVjdEVycEZlZWRzKGlucHV0OiBCdWxrRGlzY29ubmVjdEVycEZlZWRzSW5wdXQhKTogQnVsa0Rpc2Nvbm5lY3RFcnBGZWVkc1BheWxvYWRcbiAgY3JlYXRlUHJlbWl1bVNldHRpbmdFdmVudChpbnB1dDogQ3JlYXRlUHJlbWl1bVNldHRpbmdFdmVudElucHV0ISk6IENyZWF0ZVByZW1pdW1TZXR0aW5nRXZlbnRQYXlsb2FkXG4gIHNlbmRNb2JpbGVDaGVxdWVEZXBvc2l0Tm90aWZpY2F0aW9uKGlucHV0OiBTZW5kTW9iaWxlQ2hlcXVlRGVwb3NpdE5vdGlmaWNhdGlvbklucHV0ISk6IFNlbmRNb2JpbGVDaGVxdWVEZXBvc2l0Tm90aWZpY2F0aW9uUGF5bG9hZFxuICBcIlwiXCJTdWJtaXRzIGEgcmVzcG9uc2UgdG8gYW4gZXhpc3RpbmcgUkZJLlwiXCJcIlxuICBjcmVhdGVSZXNwb25zZVRvUmZpKGlucHV0OiBDcmVhdGVSZXNwb25zZVRvUmZpSW5wdXQhKTogQ3JlYXRlUmVzcG9uc2VUb1JmaVBheWxvYWRcbiAgXCJcIlwiQWxsb3dzIGEgdXNlciB0byBvcHQgaW50byBhbiBpbmNlbnRpdmUgY2FtcGFpZ25cIlwiXCJcbiAgb3B0SW50b0luY2VudGl2ZUNhbXBhaWduKGlucHV0OiBPcHRJbnRvSW5jZW50aXZlQ2FtcGFpZ25JbnB1dCEpOiBPcHRJbnRvSW5jZW50aXZlQ2FtcGFpZ25QYXlsb2FkXG4gIGRlbGV0ZUxvY2F0aW9uKGlucHV0OiBEZWxldGVMb2NhdGlvbklucHV0ISk6IERlbGV0ZUxvY2F0aW9uUGF5bG9hZFxuICBcIlwiXCJEaXNjb25uZWN0ZWQgRlNQIGFuZCBhIGNsaWVudFwiXCJcIlxuICBkaXNjb25uZWN0RnNwQW5kQ2xpZW50KGlucHV0OiBEaXNjb25uZWN0RnNwQW5kQ2xpZW50SW5wdXQhKTogRGlzY29ubmVjdEZzcEFuZENsaWVudFBheWxvYWRcbiAgY3JlYXRlQ3JlZGVudGlhbChpbnB1dDogQ3JlYXRlQ3JlZGVudGlhbElucHV0ISk6IENyZWF0ZUNyZWRlbnRpYWxQYXlsb2FkXG4gIGdlbmVyYXRlRGVwb3NpdHNWZXJpZmljYXRpb25MZXR0ZXJEb3dubG9hZFVybChpbnB1dDogR2VuZXJhdGVEZXBvc2l0c1ZlcmlmaWNhdGlvbkxldHRlckRvd25sb2FkVXJsSW5wdXQhKTogR2VuZXJhdGVEZXBvc2l0c1ZlcmlmaWNhdGlvbkxldHRlckRvd25sb2FkVXJsUGF5bG9hZFxuICB0b2dnbGVSdWxlRm9yU3RhdGVtZW50RW50cnkoaW5wdXQ6IFRvZ2dsZVJ1bGVGb3JTdGF0ZW1lbnRFbnRyeUlucHV0ISk6IFRvZ2dsZVJ1bGVGb3JTdGF0ZW1lbnRFbnRyeVBheWxvYWRcbiAgY29tcGxldGVQZW5kaW5nUmVjb3JkQXBwcm92YWxMb2dnZWRPdXQoaW5wdXQ6IENvbXBsZXRlUGVuZGluZ1JlY29yZEFwcHJvdmFsTG9nZ2VkT3V0SW5wdXQhKTogQ29tcGxldGVQZW5kaW5nUmVjb3JkQXBwcm92YWxMb2dnZWRPdXRQYXlsb2FkXG4gIHByb2Nlc3NEb2N1bWVudChpbnB1dDogUHJvY2Vzc0RvY3VtZW50SW5wdXQhKTogUHJvY2Vzc0RvY3VtZW50UGF5bG9hZFxuICBidWxrSW52aXRlVXNlcnMoaW5wdXQ6IEJ1bGtJbnZpdGVVc2Vyc0lucHV0ISk6IEJ1bGtJbnZpdGVVc2Vyc1BheWxvYWRcbiAgYWN0aXZhdGVJbnRlZ3JhdGlvbihpbnB1dDogQWN0aXZhdGVJbnRlZ3JhdGlvbklucHV0ISk6IEFjdGl2YXRlSW50ZWdyYXRpb25QYXlsb2FkXG4gIGNhbmNlbFJlaW1idXJzZW1lbnQoaW5wdXQ6IENhbmNlbFJlaW1idXJzZW1lbnRJbnB1dCEpOiBDYW5jZWxSZWltYnVyc2VtZW50UGF5bG9hZFxuICBcIlwiXCJSZW1vdmVzIHRoZSBwb2xpY3kgZ3JhbnRpbmcgYWNjZXNzIGZvciBhIEZTUCBhY2NvdW50IHRvIGEgdGVuYW50IGFjY291bnRcIlwiXCJcbiAgcmVtb3ZlRnNwQm9va2tlZXBlcihpbnB1dDogUmVtb3ZlRnNwQm9va2tlZXBlcklucHV0ISk6IFJlbW92ZUZzcEJvb2trZWVwZXJQYXlsb2FkXG4gIGFjdGl2YXRlQ2FyZChpbnB1dDogQWN0aXZhdGVDYXJkSW5wdXQhKTogQWN0aXZhdGVDYXJkUGF5bG9hZFxuICBkaXNhYmxlSW50ZWdyYXRpb24oaW5wdXQ6IERpc2FibGVJbnRlZ3JhdGlvbklucHV0ISk6IERpc2FibGVJbnRlZ3JhdGlvblBheWxvYWRcbiAgdXBkYXRlQ2FyZERpc3BsYXlOYW1lKGlucHV0OiBVcGRhdGVDYXJkRGlzcGxheU5hbWVJbnB1dCEpOiBVcGRhdGVDYXJkRGlzcGxheU5hbWVQYXlsb2FkXG4gIHJlc2V0QmFja3VwQ29kZXMoaW5wdXQ6IFJlc2V0QmFja3VwQ29kZXNJbnB1dCEpOiBSZXNldEJhY2t1cENvZGVzUGF5bG9hZFxuICB1cGRhdGVSZWltYnVyc2VtZW50TWV0YWRhdGEoaW5wdXQ6IFVwZGF0ZVJlaW1idXJzZW1lbnRNZXRhZGF0YUlucHV0ISk6IFVwZGF0ZVJlaW1idXJzZW1lbnRNZXRhZGF0YVBheWxvYWRcbiAgd2l0aGRyYXdGdW5kcyhpbnB1dDogV2l0aGRyYXdGdW5kc0lucHV0ISk6IFdpdGhkcmF3RnVuZHNQYXlsb2FkXG4gIHN0YXJ0RGVwb3NpdHNPZmZib2FyZGluZyhpbnB1dDogU3RhcnREZXBvc2l0c09mZmJvYXJkaW5nSW5wdXQhKTogU3RhcnREZXBvc2l0c09mZmJvYXJkaW5nUGF5bG9hZFxuICB1bnN1c3BlbmRDYXJkKGlucHV0OiBVbnN1c3BlbmRDYXJkSW5wdXQhKTogVW5zdXNwZW5kQ2FyZFBheWxvYWRcbiAgY3JlYXRlRmlsZVVwbG9hZFVybChpbnB1dDogQ3JlYXRlRmlsZVVwbG9hZFVybElucHV0ISk6IENyZWF0ZUZpbGVVcGxvYWRVcmxQYXlsb2FkXG4gIFwiXCJcIk5vdGU6IGNyZWF0ZXMgYW5kIGNvbm5lY3RzIE5ldFN1aXRlIGNyZWRlbnRpYWwsIG5vIG5lZWQgdG8gY2FsbCBjb25uZWN0X2NyZWRlbnRpYWwgYWZ0ZXJ3YXJkc1wiXCJcIlxuICBjcmVhdGVOZXRzdWl0ZUNyZWRlbnRpYWwoaW5wdXQ6IENyZWF0ZU5ldHN1aXRlQ3JlZGVudGlhbElucHV0ISk6IENyZWF0ZU5ldHN1aXRlQ3JlZGVudGlhbFBheWxvYWRcbiAgZGVsZXRlUmVjZWlwdChpbnB1dDogRGVsZXRlUmVjZWlwdElucHV0ISk6IERlbGV0ZVJlY2VpcHRQYXlsb2FkXG4gIHNlbmRCaWxsUGF5bWVudChpbnB1dDogU2VuZEJpbGxQYXltZW50SW5wdXQhKTogU2VuZEJpbGxQYXltZW50UGF5bG9hZFxuICBcIlwiXCJBY2NlcHRzIGRldnBvcnRhbCBhY2Nlc3MgYWdyZWVtZW50XCJcIlwiXG4gIGFjY2VwdERldkFjY2Vzc0FncmVlbWVudChpbnB1dDogQWNjZXB0RGV2QWNjZXNzQWdyZWVtZW50SW5wdXQhKTogQWNjZXB0RGV2QWNjZXNzQWdyZWVtZW50UGF5bG9hZFxuICBzZXRQcmltYXJ5RnVuZGluZ1NvdXJjZShpbnB1dDogU2V0UHJpbWFyeUZ1bmRpbmdTb3VyY2VJbnB1dCEpOiBTZXRQcmltYXJ5RnVuZGluZ1NvdXJjZVBheWxvYWRcbiAgZGlzYWJsZVJlaW1idXJzZW1lbnRzKGlucHV0OiBEaXNhYmxlUmVpbWJ1cnNlbWVudHNJbnB1dCEpOiBEaXNhYmxlUmVpbWJ1cnNlbWVudHNQYXlsb2FkXG4gIGRpc2FibGVCaWxscyhpbnB1dDogRGlzYWJsZUJpbGxzSW5wdXQhKTogRGlzYWJsZUJpbGxzUGF5bG9hZFxuICBjcmVhdGVMb2NhdGlvbihpbnB1dDogQ3JlYXRlTG9jYXRpb25JbnB1dCEpOiBDcmVhdGVMb2NhdGlvblBheWxvYWRcbiAgY29ubmVjdENyZWRlbnRpYWwoaW5wdXQ6IENvbm5lY3RDcmVkZW50aWFsSW5wdXQhKTogQ29ubmVjdENyZWRlbnRpYWxQYXlsb2FkXG4gIHByb2Nlc3NQYWdlVmlldyhpbnB1dDogUHJvY2Vzc1BhZ2VWaWV3SW5wdXQhKTogUHJvY2Vzc1BhZ2VWaWV3UGF5bG9hZFxuICBcIlwiXCJVcGRhdGUgcGVybWlzc2lvbiBmb3IgdXNlciBpbiBNZWR1c2FcIlwiXCJcbiAgdXBkYXRlVXNlclBlcm1pc3Npb24oaW5wdXQ6IFVwZGF0ZVVzZXJQZXJtaXNzaW9uSW5wdXQhKTogVXBkYXRlVXNlclBlcm1pc3Npb25QYXlsb2FkXG4gIHVwZGF0ZUludGVncmF0aW9uU3luY1NldHRpbmdzKGlucHV0OiBVcGRhdGVJbnRlZ3JhdGlvblN5bmNTZXR0aW5nc0lucHV0ISk6IFVwZGF0ZUludGVncmF0aW9uU3luY1NldHRpbmdzUGF5bG9hZFxuICB1cGRhdGVFeHBlbnNlc1NldHRpbmdSdWxlcyhpbnB1dDogVXBkYXRlRXhwZW5zZXNTZXR0aW5nUnVsZXNJbnB1dCEpOiBVcGRhdGVFeHBlbnNlc1NldHRpbmdSdWxlc1BheWxvYWRcbiAgY2FuY2VsQXBwcm92YWxzUmVxdWVzdChpbnB1dDogQ2FuY2VsQXBwcm92YWxzUmVxdWVzdElucHV0ISk6IENhbmNlbEFwcHJvdmFsc1JlcXVlc3RQYXlsb2FkXG4gIGVkaXREZXBvc2l0c1BheW1lbnRNZW1vKGlucHV0OiBFZGl0RGVwb3NpdHNQYXltZW50TWVtb0lucHV0ISk6IEVkaXREZXBvc2l0c1BheW1lbnRNZW1vUGF5bG9hZFxuICBcIlwiXCJBZGQgYSB1c2VyIHRvIHRoZSBib29ra2VlcGVyIGdyb3VwLCBncmFudGluZyBhY2Nlc3MgdG8gdGVuYW50cyBhdmFpbGFibGUgdG8gdGhlIGdyb3VwXCJcIlwiXG4gIGFkZEZzcEJvb2trZWVwZXJVc2VyKGlucHV0OiBBZGRGc3BCb29ra2VlcGVyVXNlcklucHV0ISk6IEFkZEZzcEJvb2trZWVwZXJVc2VyUGF5bG9hZFxuICBub3RpZnlVc2VyT2ZDYXJkUmVxdWVzdChpbnB1dDogTm90aWZ5VXNlck9mQ2FyZFJlcXVlc3RJbnB1dCEpOiBOb3RpZnlVc2VyT2ZDYXJkUmVxdWVzdFBheWxvYWRcbiAgdXBkYXRlSW50ZWdyYXRpb25TZXR0aW5ncyhpbnB1dDogVXBkYXRlSW50ZWdyYXRpb25TZXR0aW5nc0lucHV0ISk6IFVwZGF0ZUludGVncmF0aW9uU2V0dGluZ3NQYXlsb2FkXG4gIGNhbmNlbFBheW1lbnQoaW5wdXQ6IENhbmNlbFBheW1lbnRJbnB1dCEpOiBDYW5jZWxQYXltZW50UGF5bG9hZFxuICB1cGRhdGVQYXltZW50U291cmNlKGlucHV0OiBVcGRhdGVQYXltZW50U291cmNlSW5wdXQhKTogVXBkYXRlUGF5bWVudFNvdXJjZVBheWxvYWRcbiAgZGVsZXRlUGF5bWVudEluc3RydW1lbnQoaW5wdXQ6IERlbGV0ZVBheW1lbnRJbnN0cnVtZW50SW5wdXQhKTogRGVsZXRlUGF5bWVudEluc3RydW1lbnRQYXlsb2FkXG4gIGNyZWF0ZUludm9pY2VUZW1wbGF0ZShpbnB1dDogQ3JlYXRlSW52b2ljZVRlbXBsYXRlSW5wdXQhKTogQ3JlYXRlSW52b2ljZVRlbXBsYXRlUGF5bG9hZFxuICBwdXNoTWFya2V0b0xlYWRzKGlucHV0OiBQdXNoTWFya2V0b0xlYWRzSW5wdXQhKTogUHVzaE1hcmtldG9MZWFkc1BheWxvYWRcbiAgc2V0dXBNZmEoaW5wdXQ6IFNldHVwTWZhSW5wdXQhKTogU2V0dXBNZmFQYXlsb2FkXG4gIFwiXCJcIkNyZWF0ZXMgYSBuZXcgZGV2ZWxvcGVyIEFQSSB0b2tlblwiXCJcIlxuICBjcmVhdGVEZXZlbG9wZXJBcGlUb2tlbihpbnB1dDogQ3JlYXRlRGV2ZWxvcGVyQXBpVG9rZW5JbnB1dCEpOiBDcmVhdGVEZXZlbG9wZXJBcGlUb2tlblBheWxvYWRcbiAgY3JlYXRlQ2FyZFRyYW5zYWN0aW9uSW5zaWdodEV2ZW50KGlucHV0OiBDcmVhdGVDYXJkVHJhbnNhY3Rpb25JbnNpZ2h0RXZlbnRJbnB1dCEpOiBDcmVhdGVDYXJkVHJhbnNhY3Rpb25JbnNpZ2h0RXZlbnRQYXlsb2FkXG4gIFwiXCJcIlVwZGF0ZXMgdGhlIGNhbGxpbmcgdXNlcidzIGVtYWlsIGFuZCBzZW5kcyBhIG5ldyBXZWxjb21lIGVtYWlsLiBXaWxsIGZhaWwgaWYgZWl0aGVyIHRoZSBhY2NvdW50IG9yIHVzZXIgaXMgYWxyZWFkeSBhY3RpdmUuXCJcIlwiXG4gIHVwZGF0ZVVzZXJFbWFpbChpbnB1dDogVXBkYXRlVXNlckVtYWlsSW5wdXQhKTogVXBkYXRlVXNlckVtYWlsUGF5bG9hZFxuICBzZXRSZWNlaXZhYmxlc09mZmVyc1JldmVudWVBY2Nlc3NFbmFibGVkKGlucHV0OiBTZXRSZWNlaXZhYmxlc09mZmVyc1JldmVudWVBY2Nlc3NFbmFibGVkSW5wdXQhKTogU2V0UmVjZWl2YWJsZXNPZmZlcnNSZXZlbnVlQWNjZXNzRW5hYmxlZFBheWxvYWRcbiAgdXBkYXRlQ2FzaFRyYW5zYWN0aW9uKGlucHV0OiBVcGRhdGVDYXNoVHJhbnNhY3Rpb25JbnB1dCEpOiBVcGRhdGVDYXNoVHJhbnNhY3Rpb25QYXlsb2FkXG4gIHVwZGF0ZUxvY2F0aW9uKGlucHV0OiBVcGRhdGVMb2NhdGlvbklucHV0ISk6IFVwZGF0ZUxvY2F0aW9uUGF5bG9hZFxuICBcIlwiXCJUb2dnbGVzIGZsYWcgYm9vbGVhbiB2YWx1ZSBvZmZcIlwiXCJcbiAgdHVybk9mZlNlZW5GbGFnKGlucHV0OiBUdXJuT2ZmU2VlbkZsYWdJbnB1dCEpOiBUdXJuT2ZmU2VlbkZsYWdQYXlsb2FkXG4gIHN5bmNJbnRlZ3JhdGlvbihpbnB1dDogU3luY0ludGVncmF0aW9uSW5wdXQhKTogU3luY0ludGVncmF0aW9uUGF5bG9hZFxuICBlbmFibGVVc2VyKGlucHV0OiBFbmFibGVVc2VySW5wdXQhKTogRW5hYmxlVXNlclBheWxvYWRcbiAgXCJcIlwiQ3JlYXRlcyByZWltYnVyc2VtZW50IGNzdiByZXBvcnRcIlwiXCJcbiAgY3JlYXRlUmVpbWJ1cnNlbWVudFJlcG9ydChpbnB1dDogQ3JlYXRlUmVpbWJ1cnNlbWVudFJlcG9ydElucHV0ISk6IENyZWF0ZVJlaW1idXJzZW1lbnRSZXBvcnRQYXlsb2FkXG4gIGNyZWF0ZVJlaW1idXJzZW1lbnQoaW5wdXQ6IENyZWF0ZVJlaW1idXJzZW1lbnRJbnB1dCEpOiBDcmVhdGVSZWltYnVyc2VtZW50UGF5bG9hZFxuICBzdXNwZW5kQ2FyZChpbnB1dDogU3VzcGVuZENhcmRJbnB1dCEpOiBTdXNwZW5kQ2FyZFBheWxvYWRcbiAgY3JlYXRlU3Vic2NyaXB0aW9uKGlucHV0OiBDcmVhdGVTdWJzY3JpcHRpb25JbnB1dCEpOiBDcmVhdGVTdWJzY3JpcHRpb25QYXlsb2FkXG4gIGNyZWF0ZUFwcHJvdmFsc1JlcXVlc3QoaW5wdXQ6IENyZWF0ZUFwcHJvdmFsc1JlcXVlc3RJbnB1dCEpOiBDcmVhdGVBcHByb3ZhbHNSZXF1ZXN0UGF5bG9hZFxuICByZW1vdmVGaW5hbmNpYWxTb3VyY2UoaW5wdXQ6IFJlbW92ZUZpbmFuY2lhbFNvdXJjZUlucHV0ISk6IFJlbW92ZUZpbmFuY2lhbFNvdXJjZVBheWxvYWRcbiAgXCJcIlwiUmV2b2tlcyBhIGRldmVsb3BlciBBUEkgdG9rZW5cIlwiXCJcbiAgcmV2b2tlRGV2ZWxvcGVyQXBpVG9rZW4oaW5wdXQ6IFJldm9rZURldmVsb3BlckFwaVRva2VuSW5wdXQhKTogUmV2b2tlRGV2ZWxvcGVyQXBpVG9rZW5QYXlsb2FkXG4gIHVwZGF0ZVBheW1lbnRJbnN0cnVtZW50KGlucHV0OiBVcGRhdGVQYXltZW50SW5zdHJ1bWVudElucHV0ISk6IFVwZGF0ZVBheW1lbnRJbnN0cnVtZW50UGF5bG9hZFxuICBzZXRSZWNlaXZhYmxlc09mZmVyc1NlbGxlckFjY291bnRIYXNTZWVuRnVsbEFjY2Vzc0NvbmZpcm1hdGlvbkJhbm5lcihpbnB1dDogU2V0UmVjZWl2YWJsZXNPZmZlcnNTZWxsZXJBY2NvdW50SGFzU2VlbkZ1bGxBY2Nlc3NDb25maXJtYXRpb25CYW5uZXJJbnB1dCEpOiBTZXRSZWNlaXZhYmxlc09mZmVyc1NlbGxlckFjY291bnRIYXNTZWVuRnVsbEFjY2Vzc0NvbmZpcm1hdGlvbkJhbm5lclBheWxvYWRcbiAgZGlzYWJsZU5vblByaW1hcnlGdW5kaW5nU291cmNlcyhpbnB1dDogRGlzYWJsZU5vblByaW1hcnlGdW5kaW5nU291cmNlc0lucHV0ISk6IERpc2FibGVOb25QcmltYXJ5RnVuZGluZ1NvdXJjZXNQYXlsb2FkXG4gIGNvbXBsZXRlT25ib2FyZGluZyhpbnB1dDogQ29tcGxldGVPbmJvYXJkaW5nSW5wdXQhKTogQ29tcGxldGVPbmJvYXJkaW5nUGF5bG9hZFxuICBzYXZlT25ib2FyZGluZ0luZm9ybWF0aW9uUmVxdWVzdChpbnB1dDogU2F2ZU9uYm9hcmRpbmdJbmZvcm1hdGlvblJlcXVlc3RJbnB1dCEpOiBTYXZlT25ib2FyZGluZ0luZm9ybWF0aW9uUmVxdWVzdFBheWxvYWRcbiAgY29ubmVjdFRlbGxlckluc3RpdHV0aW9uKGlucHV0OiBDb25uZWN0VGVsbGVySW5zdGl0dXRpb25JbnB1dCEpOiBDb25uZWN0VGVsbGVySW5zdGl0dXRpb25QYXlsb2FkXG4gIGNyZWF0ZVBoeXNpY2FsQ2FyZChpbnB1dDogQ3JlYXRlUGh5c2ljYWxDYXJkSW5wdXQhKTogQ3JlYXRlUGh5c2ljYWxDYXJkUGF5bG9hZFxuICBcIlwiXCJkaXNhYmxlIHByb3ZpZGVkIGZ1bmRpbmcgc291cmNlIGFuZCBjcmVhdGUgYSBuZXcgb25lIHdpdGggbmV3IHBheWxvYWRcIlwiXCJcbiAgcmVwbGFjZUZ1bmRpbmdTb3VyY2UoaW5wdXQ6IFJlcGxhY2VGdW5kaW5nU291cmNlSW5wdXQhKTogUmVwbGFjZUZ1bmRpbmdTb3VyY2VQYXlsb2FkXG4gIFwiXCJcIlNldHMgdGhlIG1vbnRobHkgdXNlciBsaW1pdCwgb3IgcmVtb3ZlcyB0aGUgbGltaXQgaWYgbmlsXCJcIlwiXG4gIHNldE1vbnRobHlVc2VyTGltaXQoaW5wdXQ6IFNldE1vbnRobHlVc2VyTGltaXRJbnB1dCEpOiBTZXRNb250aGx5VXNlckxpbWl0UGF5bG9hZFxuICBmaW5kT3JDcmVhdGVFcnBGZWVkKGlucHV0OiBGaW5kT3JDcmVhdGVFcnBGZWVkSW5wdXQhKTogRmluZE9yQ3JlYXRlRXJwRmVlZFBheWxvYWRcbiAgdXBkYXRlQ2FyZEZyYXVkQWxlcnRzKGlucHV0OiBVcGRhdGVDYXJkRnJhdWRBbGVydHNJbnB1dCEpOiBVcGRhdGVDYXJkRnJhdWRBbGVydHNQYXlsb2FkXG4gIGNyZWF0ZUZpbmFuY2lhbEJhbmtTdGF0ZW1lbnRGb3JOZXdBY2NvdW50KGlucHV0OiBDcmVhdGVGaW5hbmNpYWxCYW5rU3RhdGVtZW50Rm9yTmV3QWNjb3VudElucHV0ISk6IENyZWF0ZUZpbmFuY2lhbEJhbmtTdGF0ZW1lbnRGb3JOZXdBY2NvdW50UGF5bG9hZFxuICB1cGRhdGVBcHByb3ZhbHNSZXF1ZXN0KGlucHV0OiBVcGRhdGVBcHByb3ZhbHNSZXF1ZXN0SW5wdXQhKTogVXBkYXRlQXBwcm92YWxzUmVxdWVzdFBheWxvYWRcbiAgYWRtaW5VcGRhdGVBcHByb3ZhbHNSZXZpZXcoaW5wdXQ6IEFkbWluVXBkYXRlQXBwcm92YWxzUmV2aWV3SW5wdXQhKTogQWRtaW5VcGRhdGVBcHByb3ZhbHNSZXZpZXdQYXlsb2FkXG4gIGNyZWF0ZVB1c2hDaGFubmVsKGlucHV0OiBDcmVhdGVQdXNoQ2hhbm5lbElucHV0ISk6IENyZWF0ZVB1c2hDaGFubmVsUGF5bG9hZFxuICByZXN5bmNSZWltYnVyc2VtZW50SXRlbXMoaW5wdXQ6IFJlc3luY1JlaW1idXJzZW1lbnRJdGVtc0lucHV0ISk6IFJlc3luY1JlaW1idXJzZW1lbnRJdGVtc1BheWxvYWRcbiAgY29tcGxldGVDYXNoVHJhbnNhY3Rpb25BcHByb3ZhbChpbnB1dDogQ29tcGxldGVDYXNoVHJhbnNhY3Rpb25BcHByb3ZhbElucHV0ISk6IENvbXBsZXRlQ2FzaFRyYW5zYWN0aW9uQXBwcm92YWxQYXlsb2FkXG4gIHNldEFwcHJvdmFsc1Vuc2FmZUZsYWcoaW5wdXQ6IFNldEFwcHJvdmFsc1Vuc2FmZUZsYWdJbnB1dCEpOiBTZXRBcHByb3ZhbHNVbnNhZmVGbGFnUGF5bG9hZFxuICByZXBsYWNlQ2FyZFdpdGhWaXJ0dWFsKGlucHV0OiBSZXBsYWNlQ2FyZFdpdGhWaXJ0dWFsSW5wdXQhKTogUmVwbGFjZUNhcmRXaXRoVmlydHVhbFBheWxvYWRcbiAgYWNjZXB0TXVsdGlwbGVSZWNlaXZhYmxlc09mZmVyc0dyb3VwcyhpbnB1dDogQWNjZXB0TXVsdGlwbGVSZWNlaXZhYmxlc09mZmVyc0dyb3Vwc0lucHV0ISk6IEFjY2VwdE11bHRpcGxlUmVjZWl2YWJsZXNPZmZlcnNHcm91cHNQYXlsb2FkXG4gIHN1Ym1pdEZpbmFuY2lhbEluZm9ybWF0aW9uUmVxdWVzdChpbnB1dDogU3VibWl0RmluYW5jaWFsSW5mb3JtYXRpb25SZXF1ZXN0SW5wdXQhKTogU3VibWl0RmluYW5jaWFsSW5mb3JtYXRpb25SZXF1ZXN0UGF5bG9hZFxuICBcIlwiXCJTZXRzIHRoZSBkZWZhdWx0IGFjY291bnRpbmcgY2F0ZWdvcnkgZm9yIGEgZ2l2ZW4gY29udGFjdCBvbiBhIGdpdmVuIGludGVncmF0aW9uLlwiXCJcIlxuICB1cGRhdGVDb250YWN0RGVmYXVsdEVycENhdGVnb3J5KGlucHV0OiBVcGRhdGVDb250YWN0RGVmYXVsdEVycENhdGVnb3J5SW5wdXQhKTogVXBkYXRlQ29udGFjdERlZmF1bHRFcnBDYXRlZ29yeVBheWxvYWRcbiAgZGlzY29ubmVjdEFwaUNsaWVudChpbnB1dDogRGlzY29ubmVjdEFwaUNsaWVudElucHV0ISk6IERpc2Nvbm5lY3RBcGlDbGllbnRQYXlsb2FkXG4gIHNldFJlY2VpdmFibGVzT2ZmZXJzU2VsbGVyQWNjb3VudENvbmZpcm1lZFBheW91dHNSb3V0ZWRUb0JyZXgoaW5wdXQ6IFNldFJlY2VpdmFibGVzT2ZmZXJzU2VsbGVyQWNjb3VudENvbmZpcm1lZFBheW91dHNSb3V0ZWRUb0JyZXhJbnB1dCEpOiBTZXRSZWNlaXZhYmxlc09mZmVyc1NlbGxlckFjY291bnRDb25maXJtZWRQYXlvdXRzUm91dGVkVG9CcmV4UGF5bG9hZFxuICBcIlwiXCJUb2dnbGVzIGZsYWcgYm9vbGVhbiB2YWx1ZSBvZmZcIlwiXCJcbiAgdHVybk9uU2VlbkZsYWcoaW5wdXQ6IFR1cm5PblNlZW5GbGFnSW5wdXQhKTogVHVybk9uU2VlbkZsYWdQYXlsb2FkXG4gIGNyZWF0ZUF1dG9BZGRGdW5kcyhpbnB1dDogQ3JlYXRlQXV0b0FkZEZ1bmRzSW5wdXQhKTogQ3JlYXRlQXV0b0FkZEZ1bmRzUGF5bG9hZFxuICByZWZyZXNoSW50ZWdyYXRpb24oaW5wdXQ6IFJlZnJlc2hJbnRlZ3JhdGlvbklucHV0ISk6IFJlZnJlc2hJbnRlZ3JhdGlvblBheWxvYWRcbiAgc2V0UmVjZWl2YWJsZXNPZmZlcnNQYXlGZWVXaXRoUmV3YXJkcyhpbnB1dDogU2V0UmVjZWl2YWJsZXNPZmZlcnNQYXlGZWVXaXRoUmV3YXJkc0lucHV0ISk6IFNldFJlY2VpdmFibGVzT2ZmZXJzUGF5RmVlV2l0aFJld2FyZHNQYXlsb2FkXG4gIHVwZGF0ZUNhcmRQaW4oaW5wdXQ6IFVwZGF0ZUNhcmRQaW5JbnB1dCEpOiBVcGRhdGVDYXJkUGluUGF5bG9hZFxuICByZXNldFVzZXIoaW5wdXQ6IFJlc2V0VXNlcklucHV0ISk6IFJlc2V0VXNlclBheWxvYWRcbiAgdXBkYXRlQWNjb3VudEFkZHJlc3MoaW5wdXQ6IFVwZGF0ZUFjY291bnRBZGRyZXNzSW5wdXQhKTogVXBkYXRlQWNjb3VudEFkZHJlc3NQYXlsb2FkXG4gIFwiXCJcIlN0YXJ0cyBhbiBhc3luY2hyb25vdXMgaW50ZWdyYXRpb24gZXhwb3J0XCJcIlwiXG4gIHN0YXJ0SW50ZWdyYXRpb25FeHBvcnQoaW5wdXQ6IFN0YXJ0SW50ZWdyYXRpb25FeHBvcnRJbnB1dCEpOiBTdGFydEludGVncmF0aW9uRXhwb3J0UGF5bG9hZFxuICBjb252ZXJ0Q2FyZEFjY291bnRUeXBlKGlucHV0OiBDb252ZXJ0Q2FyZEFjY291bnRUeXBlSW5wdXQhKTogQ29udmVydENhcmRBY2NvdW50VHlwZVBheWxvYWRcbiAgc2lnbnVwKGlucHV0OiBTaWdudXBJbnB1dCEpOiBTaWdudXBQYXlsb2FkIEBkZXByZWNhdGVkKHJlYXNvbjogXCJVc2UgJ3NvZnRTaWdudXAnIGluc3RlYWRcIilcbiAgdXBkYXRlQXBwcm92YWxzUmV2aWV3KGlucHV0OiBVcGRhdGVBcHByb3ZhbHNSZXZpZXdJbnB1dCEpOiBVcGRhdGVBcHByb3ZhbHNSZXZpZXdQYXlsb2FkXG4gIGNyZWF0ZUNhcmRUcmFuc2FjdGlvbkluc2lnaHRNdXRpbmdQb2xpY3koaW5wdXQ6IENyZWF0ZUNhcmRUcmFuc2FjdGlvbkluc2lnaHRNdXRpbmdQb2xpY3lJbnB1dCEpOiBDcmVhdGVDYXJkVHJhbnNhY3Rpb25JbnNpZ2h0TXV0aW5nUG9saWN5UGF5bG9hZFxuICBjb25uZWN0QW1hem9uTXdzQ3JlZGVudGlhbChpbnB1dDogQ29ubmVjdEFtYXpvbk13c0NyZWRlbnRpYWxJbnB1dCEpOiBDb25uZWN0QW1hem9uTXdzQ3JlZGVudGlhbFBheWxvYWRcbiAgXCJcIlwiQ3JlYXRlcyByZXBvcnQgYmFzZWQgb24gc2VhcmNoIHF1ZXJ5IG9mIHN0YXRlbWVudCBlbnRyaWVzIGFuZCByZXR1cm5zIHJlcHJlc2VudGF0aXZlIGFzc2V0XCJcIlwiXG4gIGNyZWF0ZVN0YXRlbWVudEVudHJpZXNTZWFyY2hSZXBvcnQoaW5wdXQ6IENyZWF0ZVN0YXRlbWVudEVudHJpZXNTZWFyY2hSZXBvcnRJbnB1dCEpOiBDcmVhdGVTdGF0ZW1lbnRFbnRyaWVzU2VhcmNoUmVwb3J0UGF5bG9hZFxuICBjcmVhdGVPcGVuaWRTZXNzaW9uKGlucHV0OiBDcmVhdGVPcGVuaWRTZXNzaW9uSW5wdXQhKTogQ3JlYXRlT3BlbmlkU2Vzc2lvblBheWxvYWRcbiAgdmFsaWRhdGVDaGVxdWVJbWFnZXMoaW5wdXQ6IFZhbGlkYXRlQ2hlcXVlSW1hZ2VzSW5wdXQhKTogVmFsaWRhdGVDaGVxdWVJbWFnZXNQYXlsb2FkXG4gIGNyZWF0ZVBheWVyKGlucHV0OiBDcmVhdGVQYXllcklucHV0ISk6IENyZWF0ZVBheWVyUGF5bG9hZFxuICBidWxrQ3JlYXRlU3BlbmRBbGVydEV2ZW50KGlucHV0OiBCdWxrQ3JlYXRlU3BlbmRBbGVydEV2ZW50SW5wdXQhKTogQnVsa0NyZWF0ZVNwZW5kQWxlcnRFdmVudFBheWxvYWRcbiAgY3JlYXRlSW50ZWdyYXRpb24oaW5wdXQ6IENyZWF0ZUludGVncmF0aW9uSW5wdXQhKTogQ3JlYXRlSW50ZWdyYXRpb25QYXlsb2FkXG4gIHJlZnVuZFBheW1lbnQoaW5wdXQ6IFJlZnVuZFBheW1lbnRJbnB1dCEpOiBSZWZ1bmRQYXltZW50UGF5bG9hZFxuICBzdGFydFJlc2V0VXNlcihpbnB1dDogU3RhcnRSZXNldFVzZXJJbnB1dCEpOiBTdGFydFJlc2V0VXNlclBheWxvYWRcbiAgXCJcIlwiRGVsZXRlcyBhIGNvbm5lY3Rpb24gaWYgdGhlIHVzZXIgZGVjaWRlcyB0byBkaXNjb25uZWN0IHRoZWlyIEhSSVMgY29ubmVjdGlvblwiXCJcIlxuICBkZWxldGVIcmlzQ29ubmVjdGlvbihpbnB1dDogRGVsZXRlSHJpc0Nvbm5lY3Rpb25JbnB1dCEpOiBEZWxldGVIcmlzQ29ubmVjdGlvblBheWxvYWRcbiAgc2VuZEludm9pY2UoaW5wdXQ6IFNlbmRJbnZvaWNlSW5wdXQhKTogU2VuZEludm9pY2VQYXlsb2FkXG4gIHVwZGF0ZUluc3RpdHV0aW9uTG9naW4oaW5wdXQ6IFVwZGF0ZUluc3RpdHV0aW9uTG9naW5JbnB1dCEpOiBVcGRhdGVJbnN0aXR1dGlvbkxvZ2luUGF5bG9hZFxuICBjcmVhdGVDYXNoVHJhbnNhY3Rpb24oaW5wdXQ6IENyZWF0ZUNhc2hUcmFuc2FjdGlvbklucHV0ISk6IENyZWF0ZUNhc2hUcmFuc2FjdGlvblBheWxvYWRcbiAgXCJcIlwiRGlzY29ubmVjdCBhIGNvbm5lY3RlZCBwYXlyb2xsIHByb3ZpZGVyIGludGVncmF0aW9uXCJcIlwiXG4gIGRpc2Nvbm5lY3RQYXlyb2xsUHJvdmlkZXJJbnRlZ3JhdGlvbihpbnB1dDogRGlzY29ubmVjdFBheXJvbGxQcm92aWRlckludGVncmF0aW9uSW5wdXQhKTogRGlzY29ubmVjdFBheXJvbGxQcm92aWRlckludGVncmF0aW9uUGF5bG9hZFxuICBcIlwiXCJSZXNlbmRzIHRoZSB1c2VyIHdlbGNvbWUvYWN0aXZhdGlvbiBlbWFpbFwiXCJcIlxuICByZXNlbmRXZWxjb21lRW1haWwoaW5wdXQ6IFJlc2VuZFdlbGNvbWVFbWFpbElucHV0ISk6IFJlc2VuZFdlbGNvbWVFbWFpbFBheWxvYWRcbiAgdXBkYXRlVHJhbnNhY3Rpb25JbnRlZ3JhdGlvbkN1c3RvbWVyKGlucHV0OiBVcGRhdGVUcmFuc2FjdGlvbkludGVncmF0aW9uQ3VzdG9tZXJJbnB1dCEpOiBVcGRhdGVUcmFuc2FjdGlvbkludGVncmF0aW9uQ3VzdG9tZXJQYXlsb2FkXG4gIGNvbm5lY3RTaG9waWZ5Q3JlZGVudGlhbChpbnB1dDogQ29ubmVjdFNob3BpZnlDcmVkZW50aWFsSW5wdXQhKTogQ29ubmVjdFNob3BpZnlDcmVkZW50aWFsUGF5bG9hZFxuICBjcmVhdGVJbnRlZ3JhdGlvblJ1bGUoaW5wdXQ6IENyZWF0ZUludGVncmF0aW9uUnVsZUlucHV0ISk6IENyZWF0ZUludGVncmF0aW9uUnVsZVBheWxvYWRcbiAgY3JlYXRlRnVuZGluZ1NvdXJjZShpbnB1dDogQ3JlYXRlRnVuZGluZ1NvdXJjZUlucHV0ISk6IENyZWF0ZUZ1bmRpbmdTb3VyY2VQYXlsb2FkXG4gIHVwZGF0ZUNhcmRNZXRhZGF0YShpbnB1dDogVXBkYXRlQ2FyZE1ldGFkYXRhSW5wdXQhKTogVXBkYXRlQ2FyZE1ldGFkYXRhUGF5bG9hZFxuICByZXBsYWNlQ2FyZFdpdGhQaHlzaWNhbChpbnB1dDogUmVwbGFjZUNhcmRXaXRoUGh5c2ljYWxJbnB1dCEpOiBSZXBsYWNlQ2FyZFdpdGhQaHlzaWNhbFBheWxvYWRcbiAgYWR2YW5jZVRvTmV4dFN0ZXAoaW5wdXQ6IEFkdmFuY2VUb05leHRTdGVwSW5wdXQhKTogQWR2YW5jZVRvTmV4dFN0ZXBQYXlsb2FkXG4gIFwiXCJcIkVuYWJsZSBhbiBpbnRlZ3JhdGlvblwiXCJcIlxuICBlbmFibGVJbnRlZ3JhdGlvbihpbnB1dDogRW5hYmxlSW50ZWdyYXRpb25JbnB1dCEpOiBFbmFibGVJbnRlZ3JhdGlvblBheWxvYWRcbiAgZ2V0T3JDcmVhdGVQYXltZW50TWV0aG9kKGlucHV0OiBHZXRPckNyZWF0ZVBheW1lbnRNZXRob2RJbnB1dCEpOiBHZXRPckNyZWF0ZVBheW1lbnRNZXRob2RQYXlsb2FkXG4gIGNvbXBsZXRlUHJvbW90aW9uKGlucHV0OiBDb21wbGV0ZVByb21vdGlvbklucHV0ISk6IENvbXBsZXRlUHJvbW90aW9uUGF5bG9hZFxuICBlbmFibGVCaWxscyhpbnB1dDogRW5hYmxlQmlsbHNJbnB1dCEpOiBFbmFibGVCaWxsc1BheWxvYWRcbiAgc2V0QWNjb3VudFJlc3RyaWN0QWNoRGViaXRzKGlucHV0OiBTZXRBY2NvdW50UmVzdHJpY3RBY2hEZWJpdHNJbnB1dCEpOiBTZXRBY2NvdW50UmVzdHJpY3RBY2hEZWJpdHNQYXlsb2FkXG4gIFwiXCJcIk1hcmsgdGhlIGNhbXBhaWduIGFzIHdhdGNoZWRcIlwiXCJcbiAgcmVjb3JkTWFya2V0aW5nUmV3aW5kV2F0Y2goaW5wdXQ6IFJlY29yZE1hcmtldGluZ1Jld2luZFdhdGNoSW5wdXQhKTogUmVjb3JkTWFya2V0aW5nUmV3aW5kV2F0Y2hQYXlsb2FkXG4gIHNldFJlY2VpdmFibGVzT2ZmZXJzQ29uZmlybWVkUGF5b3V0c1JvdXRlZFRvQnJleChpbnB1dDogU2V0UmVjZWl2YWJsZXNPZmZlcnNDb25maXJtZWRQYXlvdXRzUm91dGVkVG9CcmV4SW5wdXQhKTogU2V0UmVjZWl2YWJsZXNPZmZlcnNDb25maXJtZWRQYXlvdXRzUm91dGVkVG9CcmV4UGF5bG9hZFxuICBmaW5pc2hDaGFubmVsVmVyaWZpY2F0aW9uKGlucHV0OiBGaW5pc2hDaGFubmVsVmVyaWZpY2F0aW9uSW5wdXQhKTogRmluaXNoQ2hhbm5lbFZlcmlmaWNhdGlvblBheWxvYWRcbiAgZ2VuZXJhdGVDYXJkU3RhdGVtZW50RG9jdW1lbnREb3dubG9hZFVybChpbnB1dDogR2VuZXJhdGVDYXJkU3RhdGVtZW50RG9jdW1lbnREb3dubG9hZFVybElucHV0ISk6IEdlbmVyYXRlQ2FyZFN0YXRlbWVudERvY3VtZW50RG93bmxvYWRVcmxQYXlsb2FkXG4gIHVwZGF0ZUV4cGVuc2VzU2V0dGluZ1N0YXR1cyhpbnB1dDogVXBkYXRlRXhwZW5zZXNTZXR0aW5nU3RhdHVzSW5wdXQhKTogVXBkYXRlRXhwZW5zZXNTZXR0aW5nU3RhdHVzUGF5bG9hZFxuICBkaXNjb25uZWN0RXJwRmVlZChpbnB1dDogRGlzY29ubmVjdEVycEZlZWRJbnB1dCEpOiBEaXNjb25uZWN0RXJwRmVlZFBheWxvYWRcbiAgZGVsZXRlQ2FyZFRyYW5zYWN0aW9uSW5zaWdodE11dGluZ1BvbGljeShpbnB1dDogRGVsZXRlQ2FyZFRyYW5zYWN0aW9uSW5zaWdodE11dGluZ1BvbGljeUlucHV0ISk6IERlbGV0ZUNhcmRUcmFuc2FjdGlvbkluc2lnaHRNdXRpbmdQb2xpY3lQYXlsb2FkXG4gIHByZXBhcmVNdWx0aUZlZVJlY2VpdmFibGVzT2ZmZXJzRm9yQWNjZXB0YW5jZShpbnB1dDogUHJlcGFyZU11bHRpRmVlUmVjZWl2YWJsZXNPZmZlcnNGb3JBY2NlcHRhbmNlSW5wdXQhKTogUHJlcGFyZU11bHRpRmVlUmVjZWl2YWJsZXNPZmZlcnNGb3JBY2NlcHRhbmNlUGF5bG9hZFxuICBjb25uZWN0SW5zdGl0dXRpb24oaW5wdXQ6IENvbm5lY3RJbnN0aXR1dGlvbklucHV0ISk6IENvbm5lY3RJbnN0aXR1dGlvblBheWxvYWRcbiAgcHJvY2Vzc0ludm9pY2UoaW5wdXQ6IFByb2Nlc3NJbnZvaWNlSW5wdXQhKTogUHJvY2Vzc0ludm9pY2VQYXlsb2FkXG4gIHVwZGF0ZUludGVncmF0aW9uUnVsZShpbnB1dDogVXBkYXRlSW50ZWdyYXRpb25SdWxlSW5wdXQhKTogVXBkYXRlSW50ZWdyYXRpb25SdWxlUGF5bG9hZFxuICBjcmVhdGVGcmF1ZERpc3B1dGUoaW5wdXQ6IENyZWF0ZUZyYXVkRGlzcHV0ZUlucHV0ISk6IENyZWF0ZUZyYXVkRGlzcHV0ZVBheWxvYWRcbiAgc29mdFNpZ251cChpbnB1dDogU29mdFNpZ251cElucHV0ISk6IFNvZnRTaWdudXBQYXlsb2FkXG4gIHVwZGF0ZVRyYW5zYWN0aW9uQ2F0ZWdvcnkoaW5wdXQ6IFVwZGF0ZVRyYW5zYWN0aW9uQ2F0ZWdvcnlJbnB1dCEpOiBVcGRhdGVUcmFuc2FjdGlvbkNhdGVnb3J5UGF5bG9hZFxuICBcIlwiXCJDcmVhdGUgb3IgdXBkYXRlIGEgcGF5bWVudC5cIlwiXCJcbiAgY3JlYXRlT3JVcGRhdGVQYXltZW50KGlucHV0OiBDcmVhdGVPclVwZGF0ZVBheW1lbnRJbnB1dCEpOiBDcmVhdGVPclVwZGF0ZVBheW1lbnRQYXlsb2FkXG4gIGNyZWF0ZUFzc2V0KGlucHV0OiBDcmVhdGVBc3NldElucHV0ISk6IENyZWF0ZUFzc2V0UGF5bG9hZFxuICB1cGRhdGVBcHByb3ZhbHNSZXZpZXdzKGlucHV0OiBVcGRhdGVBcHByb3ZhbHNSZXZpZXdzSW5wdXQhKTogVXBkYXRlQXBwcm92YWxzUmV2aWV3c1BheWxvYWRcbiAgZmluaWNpdHlDb25uZWN0R2VuZXJhdGVMaXRlVXJsKGlucHV0OiBGaW5pY2l0eUNvbm5lY3RHZW5lcmF0ZUxpdGVVcmxJbnB1dCEpOiBGaW5pY2l0eUNvbm5lY3RHZW5lcmF0ZUxpdGVVcmxQYXlsb2FkXG4gIGNyZWF0ZURlcG9zaXRzQXBwbGljYXRpb24oaW5wdXQ6IENyZWF0ZURlcG9zaXRzQXBwbGljYXRpb25JbnB1dCEpOiBDcmVhdGVEZXBvc2l0c0FwcGxpY2F0aW9uUGF5bG9hZFxuICBvbmJvYXJkaW5nSW5mb3JtYXRpb25SZXF1ZXN0KGlkOiBJRCEpOiBPbmJvYXJkaW5nSW5mb3JtYXRpb25SZXF1ZXN0XG4gIHNldFJlY2VpdmFibGVzT2ZmZXJzQXV0b0FkdmFuY2VNb2RlKGlucHV0OiBTZXRSZWNlaXZhYmxlc09mZmVyc0F1dG9BZHZhbmNlTW9kZUlucHV0ISk6IFNldFJlY2VpdmFibGVzT2ZmZXJzQXV0b0FkdmFuY2VNb2RlUGF5bG9hZFxuICBzdWJtaXRPbmJvYXJkaW5nSW5mb3JtYXRpb25SZXF1ZXN0KGlucHV0OiBTdWJtaXRPbmJvYXJkaW5nSW5mb3JtYXRpb25SZXF1ZXN0SW5wdXQhKTogU3VibWl0T25ib2FyZGluZ0luZm9ybWF0aW9uUmVxdWVzdFBheWxvYWRcbiAgYmVnaW5DaGFubmVsVmVyaWZpY2F0aW9uKGlucHV0OiBCZWdpbkNoYW5uZWxWZXJpZmljYXRpb25JbnB1dCEpOiBCZWdpbkNoYW5uZWxWZXJpZmljYXRpb25QYXlsb2FkXG4gIGNyZWF0ZU1vbnRobHlVc2VyTGltaXRJbmNyZWFzZShpbnB1dDogQ3JlYXRlTW9udGhseVVzZXJMaW1pdEluY3JlYXNlSW5wdXQhKTogQ3JlYXRlTW9udGhseVVzZXJMaW1pdEluY3JlYXNlUGF5bG9hZFxuICBwcm92aXNpb25BcHBsZVBheShpbnB1dDogUHJvdmlzaW9uQXBwbGVQYXlJbnB1dCEpOiBQcm92aXNpb25BcHBsZVBheVBheWxvYWRcbiAgXCJcIlwiRm9yIGFsbCBpbnRlZ3JhdGlvbnMgdGhhdCBtYXRjaCB0aGUgZmlsdGVycywgdGVzdHMgY29ubmVjdGl2aXR5IHdpdGggaW50ZWdyYXRpb24gdmVuZG9yIGFuZCB1cGRhdGVzIGNyZWRlbnRpYWwgc3RhdHVzLlwiXCJcIlxuICByZWZyZXNoSW50ZWdyYXRpb25DcmVkZW50aWFscyhpbnB1dDogUmVmcmVzaEludGVncmF0aW9uQ3JlZGVudGlhbHNJbnB1dCEpOiBSZWZyZXNoSW50ZWdyYXRpb25DcmVkZW50aWFsc1BheWxvYWRcbiAgZ2VuZXJhdGVSZWNlaXZhYmxlc1BheW91dFJlcG9ydChpbnB1dDogR2VuZXJhdGVSZWNlaXZhYmxlc1BheW91dFJlcG9ydElucHV0ISk6IEdlbmVyYXRlUmVjZWl2YWJsZXNQYXlvdXRSZXBvcnRQYXlsb2FkXG4gIGJ1bGtDcmVhdGVFeHBlbnNlc0l0ZW1FdmVudChpbnB1dDogQnVsa0NyZWF0ZUV4cGVuc2VzSXRlbUV2ZW50SW5wdXQhKTogQnVsa0NyZWF0ZUV4cGVuc2VzSXRlbUV2ZW50UGF5bG9hZFxuICBzZXRTb2Z0RXhwaXJhdGlvbkRhdGUoaW5wdXQ6IFNldFNvZnRFeHBpcmF0aW9uRGF0ZUlucHV0ISk6IFNldFNvZnRFeHBpcmF0aW9uRGF0ZVBheWxvYWRcbiAgY3JlYXRlRXhwZW5zZXNGbGFnRXZlbnQoaW5wdXQ6IENyZWF0ZUV4cGVuc2VzRmxhZ0V2ZW50SW5wdXQhKTogQ3JlYXRlRXhwZW5zZXNGbGFnRXZlbnRQYXlsb2FkXG4gIHVwZGF0ZVRyYW5zYWN0aW9uTWVtbyhpbnB1dDogVXBkYXRlVHJhbnNhY3Rpb25NZW1vSW5wdXQhKTogVXBkYXRlVHJhbnNhY3Rpb25NZW1vUGF5bG9hZFxuICBzZXRSZWNlaXZhYmxlc09mZmVyc1NlbGxlckFjY291bnRIYXNTZWVuRmFpbGluZ0NoZWNrc0Vycm9yQmFubmVyKGlucHV0OiBTZXRSZWNlaXZhYmxlc09mZmVyc1NlbGxlckFjY291bnRIYXNTZWVuRmFpbGluZ0NoZWNrc0Vycm9yQmFubmVySW5wdXQhKTogU2V0UmVjZWl2YWJsZXNPZmZlcnNTZWxsZXJBY2NvdW50SGFzU2VlbkZhaWxpbmdDaGVja3NFcnJvckJhbm5lclBheWxvYWRcbiAgc3VibWl0UmVpbWJ1cnNlbWVudChpbnB1dDogU3VibWl0UmVpbWJ1cnNlbWVudElucHV0ISk6IFN1Ym1pdFJlaW1idXJzZW1lbnRQYXlsb2FkXG4gIGFjY2VwdE9mZmVyKGlucHV0OiBBY2NlcHRPZmZlcklucHV0ISk6IEFjY2VwdE9mZmVyUGF5bG9hZFxuICBcIlwiXCJNdXRhdGlvbiBmb3Igc2V0dGluZyBzcGVjaWZpYyBpbnRlZ3JhdGlvbiBmaWVsZHMuIEdlbmVyYXRlcyBhIG1hbnVhbF9vdmVycmlkZSBydWxlLlwiXCJcIlxuICBzZXRTdGF0ZW1lbnRFbnRyeUludGVncmF0aW9uRmllbGQoaW5wdXQ6IFNldFN0YXRlbWVudEVudHJ5SW50ZWdyYXRpb25GaWVsZElucHV0ISk6IFNldFN0YXRlbWVudEVudHJ5SW50ZWdyYXRpb25GaWVsZFBheWxvYWRcbiAgc2V0UmVjZWl2YWJsZXNPZmZlcnNJbnRlZ3JhdGlvbkZpbmFuY2lhbEFjY291bnRNYXBwaW5ncyhpbnB1dDogU2V0UmVjZWl2YWJsZXNPZmZlcnNJbnRlZ3JhdGlvbkZpbmFuY2lhbEFjY291bnRNYXBwaW5nc0lucHV0ISk6IFNldFJlY2VpdmFibGVzT2ZmZXJzSW50ZWdyYXRpb25GaW5hbmNpYWxBY2NvdW50TWFwcGluZ3NQYXlsb2FkXG4gIGNyZWF0ZVBoeXNpY2FsQ2FyZFYyKGlucHV0OiBDcmVhdGVQaHlzaWNhbENhcmRWMklucHV0ISk6IENyZWF0ZVBoeXNpY2FsQ2FyZFYyUGF5bG9hZFxuICBjcmVhdGVGaW5hbmNpYWxCYW5rU3RhdGVtZW50KGlucHV0OiBDcmVhdGVGaW5hbmNpYWxCYW5rU3RhdGVtZW50SW5wdXQhKTogQ3JlYXRlRmluYW5jaWFsQmFua1N0YXRlbWVudFBheWxvYWRcbiAgY3JlYXRlU21zQ2hhbm5lbChpbnB1dDogQ3JlYXRlU21zQ2hhbm5lbElucHV0ISk6IENyZWF0ZVNtc0NoYW5uZWxQYXlsb2FkXG4gIGNvbm5lY3RXZWF2Q3JlZGVudGlhbChpbnB1dDogQ29ubmVjdFdlYXZDcmVkZW50aWFsSW5wdXQhKTogQ29ubmVjdFdlYXZDcmVkZW50aWFsUGF5bG9hZFxuICBzZXRSZWNlaXZhYmxlc09mZmVyc1NlbGVjdGVkVHJpYWxPbmJvYXJkaW5nKGlucHV0OiBTZXRSZWNlaXZhYmxlc09mZmVyc1NlbGVjdGVkVHJpYWxPbmJvYXJkaW5nSW5wdXQhKTogU2V0UmVjZWl2YWJsZXNPZmZlcnNTZWxlY3RlZFRyaWFsT25ib2FyZGluZ1BheWxvYWRcbiAgYWN0aXZhdGVVc2VyKGlucHV0OiBBY3RpdmF0ZVVzZXJJbnB1dCEpOiBBY3RpdmF0ZVVzZXJQYXlsb2FkXG4gIGNoYW5nZUludmVzdG1lbnRQb2xpY3koaW5wdXQ6IENoYW5nZUludmVzdG1lbnRQb2xpY3lJbnB1dCEpOiBDaGFuZ2VJbnZlc3RtZW50UG9saWN5UGF5bG9hZFxuICBmaW5pY2l0eUNvbm5lY3RNaWdyYXRlQWNjb3VudHMoaW5wdXQ6IEZpbmljaXR5Q29ubmVjdE1pZ3JhdGVBY2NvdW50c0lucHV0ISk6IEZpbmljaXR5Q29ubmVjdE1pZ3JhdGVBY2NvdW50c1BheWxvYWRcbiAgZW5hYmxlRXhwZW5zZXMoaW5wdXQ6IEVuYWJsZUV4cGVuc2VzSW5wdXQhKTogRW5hYmxlRXhwZW5zZXNQYXlsb2FkXG4gIFwiXCJcIlVzZSB0byBpbml0aWF0ZSBQbGFpZCBMaW5rIGluIHVwZGF0ZSBtb2RlXCJcIlwiXG4gIHVwZGF0ZVBsYWlkTGlua1Rva2VuKGlucHV0OiBVcGRhdGVQbGFpZExpbmtUb2tlbklucHV0ISk6IFVwZGF0ZVBsYWlkTGlua1Rva2VuUGF5bG9hZFxuICBkaXNtaXNzUHJvbW90aW9uKGlucHV0OiBEaXNtaXNzUHJvbW90aW9uSW5wdXQhKTogRGlzbWlzc1Byb21vdGlvblBheWxvYWRcbiAgXCJcIlwic2V0IHNwZW5kIGFsZXJ0cyBjb25maWcgZm9yIHRoZSBjdXJyZW50IGFjY291bnRcIlwiXCJcbiAgc2V0U3BlbmRBbGVydHNDb25maWd1cmF0aW9uKGlucHV0OiBTZXRTcGVuZEFsZXJ0c0NvbmZpZ3VyYXRpb25JbnB1dCEpOiBTZXRTcGVuZEFsZXJ0c0NvbmZpZ3VyYXRpb25QYXlsb2FkXG4gIGNyZWF0ZVBheXJvbGxQcm92aWRlcihpbnB1dDogQ3JlYXRlUGF5cm9sbFByb3ZpZGVySW5wdXQhKTogQ3JlYXRlUGF5cm9sbFByb3ZpZGVyUGF5bG9hZFxuICBjcmVhdGVQYXltZW50SW5zdHJ1bWVudChpbnB1dDogQ3JlYXRlUGF5bWVudEluc3RydW1lbnRJbnB1dCEpOiBDcmVhdGVQYXltZW50SW5zdHJ1bWVudFBheWxvYWRcbiAgaXNzdWVDb2xsZWN0aW9uKGlucHV0OiBJc3N1ZUNvbGxlY3Rpb25JbnB1dCEpOiBJc3N1ZUNvbGxlY3Rpb25QYXlsb2FkXG4gIGNyZWF0ZUVtYWlsQ2hhbm5lbChpbnB1dDogQ3JlYXRlRW1haWxDaGFubmVsSW5wdXQhKTogQ3JlYXRlRW1haWxDaGFubmVsUGF5bG9hZFxuICBjb21wbGV0ZVBlbmRpbmdSZWNvcmRBcHByb3ZhbChpbnB1dDogQ29tcGxldGVQZW5kaW5nUmVjb3JkQXBwcm92YWxJbnB1dCEpOiBDb21wbGV0ZVBlbmRpbmdSZWNvcmRBcHByb3ZhbFBheWxvYWRcbiAgc2V0VXNlclJvbGUoaW5wdXQ6IFNldFVzZXJSb2xlSW5wdXQhKTogU2V0VXNlclJvbGVQYXlsb2FkXG4gIGNyZWF0ZVN1YnNjcmlwdGlvbnMoaW5wdXQ6IENyZWF0ZVN1YnNjcmlwdGlvbnNJbnB1dCEpOiBDcmVhdGVTdWJzY3JpcHRpb25zUGF5bG9hZFxuICBcIlwiXCJBbGxvd3MgYSB1c2VyIHRvIG9wdCBpbnRvIGFuIGluY2VudGl2ZSBjYW1wYWlnblwiXCJcIlxuICBvcHRPdXRPZkluY2VudGl2ZUNhbXBhaWduKGlucHV0OiBPcHRPdXRPZkluY2VudGl2ZUNhbXBhaWduSW5wdXQhKTogT3B0T3V0T2ZJbmNlbnRpdmVDYW1wYWlnblBheWxvYWRcbiAgZGlzYWJsZUV4cGVuc2VzKGlucHV0OiBEaXNhYmxlRXhwZW5zZXNJbnB1dCEpOiBEaXNhYmxlRXhwZW5zZXNQYXlsb2FkXG4gIGNyZWF0ZUNhc2hXaXJlRGV0YWlscyhpbnB1dDogQ3JlYXRlQ2FzaFdpcmVEZXRhaWxzSW5wdXQhKTogQ3JlYXRlQ2FzaFdpcmVEZXRhaWxzUGF5bG9hZFxuICBkZWxldGVTdWJzY3JpcHRpb24oaW5wdXQ6IERlbGV0ZVN1YnNjcmlwdGlvbklucHV0ISk6IERlbGV0ZVN1YnNjcmlwdGlvblBheWxvYWRcbiAgc3VibWl0T25ib2FyZGluZ0FwcGxpY2F0aW9uKGlucHV0OiBTdWJtaXRPbmJvYXJkaW5nQXBwbGljYXRpb25JbnB1dCEpOiBTdWJtaXRPbmJvYXJkaW5nQXBwbGljYXRpb25QYXlsb2FkXG4gIGNvbXBsZXRlUGF5bWVudEFwcHJvdmFsV2l0aFRva2VuKGlucHV0OiBDb21wbGV0ZVBheW1lbnRBcHByb3ZhbFdpdGhUb2tlbklucHV0ISk6IENvbXBsZXRlUGF5bWVudEFwcHJvdmFsV2l0aFRva2VuUGF5bG9hZFxuICB1cGRhdGVUcmFuc2FjdGlvbkJpbGxhYmxlU3RhdHVzKGlucHV0OiBVcGRhdGVUcmFuc2FjdGlvbkJpbGxhYmxlU3RhdHVzSW5wdXQhKTogVXBkYXRlVHJhbnNhY3Rpb25CaWxsYWJsZVN0YXR1c1BheWxvYWRcbiAgY0RhKGlucHV0OiBDRGFJbnB1dCEpOiBDRGFQYXlsb2FkIEBkZXByZWNhdGVkKHJlYXNvbjogXCJVc2UgJ29uYm9hcmRpbmdDcmVhdGVBcHBsaWNhdGlvbicgaW5zdGVhZCwgcGFzc2luZyBpbiB0aGUgYmx1ZXByaW50IG5hbWU6J2dlbWluaSdcIilcbiAgZGVsZXRlQmlsbChpbnB1dDogRGVsZXRlQmlsbElucHV0ISk6IERlbGV0ZUJpbGxQYXlsb2FkXG4gIHVwZGF0ZUF1dG9BZGRGdW5kcyhpbnB1dDogVXBkYXRlQXV0b0FkZEZ1bmRzSW5wdXQhKTogVXBkYXRlQXV0b0FkZEZ1bmRzUGF5bG9hZFxuICBlZGl0UGF5bWVudChpbnB1dDogRWRpdFBheW1lbnRJbnB1dCEpOiBFZGl0UGF5bWVudFBheWxvYWRcbiAgdGVybWluYXRlQ2FyZChpbnB1dDogVGVybWluYXRlQ2FyZElucHV0ISk6IFRlcm1pbmF0ZUNhcmRQYXlsb2FkXG4gIGRlbGV0ZUNvbnRhY3QoaW5wdXQ6IERlbGV0ZUNvbnRhY3RJbnB1dCEpOiBEZWxldGVDb250YWN0UGF5bG9hZFxuICBjcmVhdGVQZXJpb2RpY1Jldmlld0FwcGxpY2F0aW9uKGlucHV0OiBDcmVhdGVQZXJpb2RpY1Jldmlld0FwcGxpY2F0aW9uSW5wdXQhKTogQ3JlYXRlUGVyaW9kaWNSZXZpZXdBcHBsaWNhdGlvblBheWxvYWRcbiAgZGlzYWJsZVVzZXIoaW5wdXQ6IERpc2FibGVVc2VySW5wdXQhKTogRGlzYWJsZVVzZXJQYXlsb2FkXG4gIGNyZWF0ZUFwcHJvdmFsc1BvbGljaWVzKGlucHV0OiBDcmVhdGVBcHByb3ZhbHNQb2xpY2llc0lucHV0ISk6IENyZWF0ZUFwcHJvdmFsc1BvbGljaWVzUGF5bG9hZFxuICBzdWJtaXRFYXJseUFjY2Vzc0ZlYXR1cmVTdWdnZXN0aW9uKGlucHV0OiBTdWJtaXRFYXJseUFjY2Vzc0ZlYXR1cmVTdWdnZXN0aW9uSW5wdXQhKTogU3VibWl0RWFybHlBY2Nlc3NGZWF0dXJlU3VnZ2VzdGlvblBheWxvYWRcbiAgc2V0RGVwb3NpdHNUcmFuc2FjdGlvblBheW1lbnRNZW1vKGlucHV0OiBTZXREZXBvc2l0c1RyYW5zYWN0aW9uUGF5bWVudE1lbW9JbnB1dCEpOiBTZXREZXBvc2l0c1RyYW5zYWN0aW9uUGF5bWVudE1lbW9QYXlsb2FkXG4gIHNldFRyYW5zYWN0aW9uSW50ZWdyYXRpb25GaWVsZChpbnB1dDogU2V0VHJhbnNhY3Rpb25JbnRlZ3JhdGlvbkZpZWxkSW5wdXQhKTogU2V0VHJhbnNhY3Rpb25JbnRlZ3JhdGlvbkZpZWxkUGF5bG9hZFxuICBtYXJrT2ZmZXJTZWVuKGlucHV0OiBNYXJrT2ZmZXJTZWVuSW5wdXQhKTogTWFya09mZmVyU2VlblBheWxvYWRcbiAgZ2VuZXJhdGVEZXBvc2l0c1RyYW5zYWN0aW9uQ29uZmlybWF0aW9uRG93bmxvYWRVcmwoaW5wdXQ6IEdlbmVyYXRlRGVwb3NpdHNUcmFuc2FjdGlvbkNvbmZpcm1hdGlvbkRvd25sb2FkVXJsSW5wdXQhKTogR2VuZXJhdGVEZXBvc2l0c1RyYW5zYWN0aW9uQ29uZmlybWF0aW9uRG93bmxvYWRVcmxQYXlsb2FkXG4gIGNhbmNlbENvbGxlY3Rpb25JbnRlbnRpb24oaW5wdXQ6IENhbmNlbENvbGxlY3Rpb25JbnRlbnRpb25JbnB1dCEpOiBDYW5jZWxDb2xsZWN0aW9uSW50ZW50aW9uUGF5bG9hZFxuICBpbnZpdGVVc2VyV2l0aE1vbnRobHlMaW1pdChpbnB1dDogSW52aXRlVXNlcldpdGhNb250aGx5TGltaXRJbnB1dCEpOiBJbnZpdGVVc2VyV2l0aE1vbnRobHlMaW1pdFBheWxvYWRcbiAgZ2VuZXJhdGVSZWNlaXZhYmxlc09mZmVyc0dyb3VwUmVwb3J0KGlucHV0OiBHZW5lcmF0ZVJlY2VpdmFibGVzT2ZmZXJzR3JvdXBSZXBvcnRJbnB1dCEpOiBHZW5lcmF0ZVJlY2VpdmFibGVzT2ZmZXJzR3JvdXBSZXBvcnRQYXlsb2FkXG4gIFwiXCJcIlVwZGF0ZXMgYSBwb3NpdGl2ZSBwYXkgYWNjb3VudCBzZXR0aW5nIHdpdGggdGhlIGdpdmVuIGlkLCB3aXRoIHRoZSBwcm92aWRlZCBmaWVsZHNcIlwiXCJcbiAgdXBkYXRlUG9zaXRpdmVQYXlBY2NvdW50U2V0dGluZyhpbnB1dDogVXBkYXRlUG9zaXRpdmVQYXlBY2NvdW50U2V0dGluZ0lucHV0ISk6IFVwZGF0ZVBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmdQYXlsb2FkXG4gIGRlcG9zaXRDaGVxdWUoaW5wdXQ6IERlcG9zaXRDaGVxdWVJbnB1dCEpOiBEZXBvc2l0Q2hlcXVlUGF5bG9hZFxuICBjcmVhdGVBcHByb3ZhbHNQb2xpY3koaW5wdXQ6IENyZWF0ZUFwcHJvdmFsc1BvbGljeUlucHV0ISk6IENyZWF0ZUFwcHJvdmFsc1BvbGljeVBheWxvYWRcbiAgdXBkYXRlQmlsbChpbnB1dDogVXBkYXRlQmlsbElucHV0ISk6IFVwZGF0ZUJpbGxQYXlsb2FkXG4gIGNvbm5lY3RQbGFpZEluc3RpdHV0aW9uKGlucHV0OiBDb25uZWN0UGxhaWRJbnN0aXR1dGlvbklucHV0ISk6IENvbm5lY3RQbGFpZEluc3RpdHV0aW9uUGF5bG9hZFxuICBcIlwiXCJTZW5kcyBhIGhlYXJ0YmVhdCBzaWduYWwgdG8ga2VlcCB0aGUgc2Vzc2lvbiBhbGl2ZVwiXCJcIlxuICBoZWFydGJlYXQoaW5wdXQ6IEhlYXJ0YmVhdElucHV0ISk6IEhlYXJ0YmVhdFBheWxvYWRcbiAgZGlzY29ubmVjdENyZWRlbnRpYWwoaW5wdXQ6IERpc2Nvbm5lY3RDcmVkZW50aWFsSW5wdXQhKTogRGlzY29ubmVjdENyZWRlbnRpYWxQYXlsb2FkXG4gIGRpc21pc3NDYXJkRnJhdWRBbGVydHMoaW5wdXQ6IERpc21pc3NDYXJkRnJhdWRBbGVydHNJbnB1dCEpOiBEaXNtaXNzQ2FyZEZyYXVkQWxlcnRzUGF5bG9hZFxuICBtb2RpZnlQcmVhcHByb3ZlZENhcmRTZXR0aW5ncyhpbnB1dDogTW9kaWZ5UHJlYXBwcm92ZWRDYXJkU2V0dGluZ3NJbnB1dCEpOiBNb2RpZnlQcmVhcHByb3ZlZENhcmRTZXR0aW5nc1BheWxvYWRcbiAgY3JlYXRlRGVwYXJ0bWVudChpbnB1dDogQ3JlYXRlRGVwYXJ0bWVudElucHV0ISk6IENyZWF0ZURlcGFydG1lbnRQYXlsb2FkXG4gIGRlbGV0ZVBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmcoaW5wdXQ6IERlbGV0ZVBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmdJbnB1dCEpOiBEZWxldGVQb3NpdGl2ZVBheUFjY291bnRTZXR0aW5nUGF5bG9hZFxuICBjcmVhdGVUcmFuc2FjdGlvbkFwcHJvdmVkU3Vic2NyaXB0aW9uKGlucHV0OiBDcmVhdGVUcmFuc2FjdGlvbkFwcHJvdmVkU3Vic2NyaXB0aW9uSW5wdXQhKTogQ3JlYXRlVHJhbnNhY3Rpb25BcHByb3ZlZFN1YnNjcmlwdGlvblBheWxvYWRcbiAgdG9nZ2xlUnVsZShpbnB1dDogVG9nZ2xlUnVsZUlucHV0ISk6IFRvZ2dsZVJ1bGVQYXlsb2FkXG4gIGNyZWF0ZUJpbGwoaW5wdXQ6IENyZWF0ZUJpbGxJbnB1dCEpOiBDcmVhdGVCaWxsUGF5bG9hZFxuICBmYWtlTXV0YXRpb25Eb05vdFVzZShpbnB1dDogRmFrZU11dGF0aW9uRG9Ob3RVc2VJbnB1dCEpOiBGYWtlTXV0YXRpb25Eb05vdFVzZVBheWxvYWQgQGRlcHJlY2F0ZWQocmVhc29uOiBcIkRPIE5PVCBVU0UuIFRoaXMgZXhpc3QganVzdCBzbyB0aGUgZW51bSB0eXBlcyBjYW4gYmUgYXV0byBnZW5lcmF0ZWQgaW4gZ2xvYmFsIHR5cGVzIGZpbGUuXCIpXG4gIHJlZnJlc2hGaW5hbmNpYWxTb3VyY2UoaW5wdXQ6IFJlZnJlc2hGaW5hbmNpYWxTb3VyY2VJbnB1dCEpOiBSZWZyZXNoRmluYW5jaWFsU291cmNlUGF5bG9hZFxuICBzZXRSZWNlaXZhYmxlc09mZmVyc0FjY291bnRPbmJvYXJkaW5nQWN0aW9uKGlucHV0OiBTZXRSZWNlaXZhYmxlc09mZmVyc0FjY291bnRPbmJvYXJkaW5nQWN0aW9uSW5wdXQhKTogU2V0UmVjZWl2YWJsZXNPZmZlcnNBY2NvdW50T25ib2FyZGluZ0FjdGlvblBheWxvYWRcbiAgY3JlYXRlQWNjb3VudChpbnB1dDogQ3JlYXRlQWNjb3VudElucHV0ISk6IENyZWF0ZUFjY291bnRQYXlsb2FkXG4gIGNyZWF0ZU1pbGVzVHJhbnNmZXIoaW5wdXQ6IENyZWF0ZU1pbGVzVHJhbnNmZXJJbnB1dCEpOiBDcmVhdGVNaWxlc1RyYW5zZmVyUGF5bG9hZFxuICByZXN5bmNCaWxscyhpbnB1dDogUmVzeW5jQmlsbHNJbnB1dCEpOiBSZXN5bmNCaWxsc1BheWxvYWRcbiAgY29uZmlybU1mYShpbnB1dDogQ29uZmlybU1mYUlucHV0ISk6IENvbmZpcm1NZmFQYXlsb2FkXG4gIHByb2Nlc3NJbnZvaWNlQW5kQ3JlYXRlQmlsbChpbnB1dDogUHJvY2Vzc0ludm9pY2VBbmRDcmVhdGVCaWxsSW5wdXQhKTogUHJvY2Vzc0ludm9pY2VBbmRDcmVhdGVCaWxsUGF5bG9hZFxuICB1cGRhdGVVc2VyQ2F0ZWdvcmllcyhpbnB1dDogVXBkYXRlVXNlckNhdGVnb3JpZXNJbnB1dCEpOiBVcGRhdGVVc2VyQ2F0ZWdvcmllc1BheWxvYWRcbiAgdXBkYXRlQ29udGFjdChpbnB1dDogVXBkYXRlQ29udGFjdElucHV0ISk6IFVwZGF0ZUNvbnRhY3RQYXlsb2FkXG4gIGNyZWF0ZVBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmcoaW5wdXQ6IENyZWF0ZVBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmdJbnB1dCEpOiBDcmVhdGVQb3NpdGl2ZVBheUFjY291bnRTZXR0aW5nUGF5bG9hZFxuICBjcmVhdGVFeHBlbnNlc0l0ZW1FdmVudChpbnB1dDogQ3JlYXRlRXhwZW5zZXNJdGVtRXZlbnRJbnB1dCEpOiBDcmVhdGVFeHBlbnNlc0l0ZW1FdmVudFBheWxvYWRcbiAgYWRtaW5VcGRhdGVBcHByb3ZhbHNSZXZpZXdzKGlucHV0OiBBZG1pblVwZGF0ZUFwcHJvdmFsc1Jldmlld3NJbnB1dCEpOiBBZG1pblVwZGF0ZUFwcHJvdmFsc1Jldmlld3NQYXlsb2FkXG4gIGNyZWF0ZUV4cGVuc2VzU2V0dGluZyhpbnB1dDogQ3JlYXRlRXhwZW5zZXNTZXR0aW5nSW5wdXQhKTogQ3JlYXRlRXhwZW5zZXNTZXR0aW5nUGF5bG9hZFxuICBjcmVhdGVDb250YWN0KGlucHV0OiBDcmVhdGVDb250YWN0SW5wdXQhKTogQ3JlYXRlQ29udGFjdFBheWxvYWRcbiAgZGVsZXRlVXNlckludml0ZShpbnB1dDogRGVsZXRlVXNlckludml0ZUlucHV0ISk6IERlbGV0ZVVzZXJJbnZpdGVQYXlsb2FkXG4gIGludml0ZVVzZXIoaW5wdXQ6IEludml0ZVVzZXJJbnB1dCEpOiBJbnZpdGVVc2VyUGF5bG9hZFxuICB0cmlnZ2VyRXJwRmVlZFN5bmMoaW5wdXQ6IFRyaWdnZXJFcnBGZWVkU3luY0lucHV0ISk6IFRyaWdnZXJFcnBGZWVkU3luY1BheWxvYWRcbiAgY3JlYXRlVmlydHVhbENhcmQoaW5wdXQ6IENyZWF0ZVZpcnR1YWxDYXJkSW5wdXQhKTogQ3JlYXRlVmlydHVhbENhcmRQYXlsb2FkXG4gIG5vdGlmeUFsbFVzZXJzQXBwcm92YWxzRW5hYmxlZChpbnB1dDogTm90aWZ5QWxsVXNlcnNBcHByb3ZhbHNFbmFibGVkSW5wdXQhKTogTm90aWZ5QWxsVXNlcnNBcHByb3ZhbHNFbmFibGVkUGF5bG9hZFxuICBtYXJrSW52b2ljZShpbnB1dDogTWFya0ludm9pY2VJbnB1dCEpOiBNYXJrSW52b2ljZVBheWxvYWRcbiAgY3JlYXRlTWVyY2hhbnREaXNwdXRlKGlucHV0OiBDcmVhdGVNZXJjaGFudERpc3B1dGVJbnB1dCEpOiBDcmVhdGVNZXJjaGFudERpc3B1dGVQYXlsb2FkXG4gIGFjY2VwdENyZWRpdE1hcmtldGluZ09mZmVyKGlucHV0OiBBY2NlcHRDcmVkaXRNYXJrZXRpbmdPZmZlcklucHV0ISk6IEFjY2VwdENyZWRpdE1hcmtldGluZ09mZmVyUGF5bG9hZFxuICB1cGRhdGVEZXBvc2l0c0FjY291bnQoaW5wdXQ6IFVwZGF0ZURlcG9zaXRzQWNjb3VudElucHV0ISk6IFVwZGF0ZURlcG9zaXRzQWNjb3VudFBheWxvYWRcbiAgZWRpdEludm9pY2UoaW5wdXQ6IEVkaXRJbnZvaWNlSW5wdXQhKTogRWRpdEludm9pY2VQYXlsb2FkXG4gIFwiXCJcIlJlbW92ZSBhIHVzZXIgZnJvbSB0aGUgYm9va2tlZXBlciBncm91cCwgcmV2b2tpbmcgYWNjZXNzIHRvIHRoZSB0ZW5hbnRzIGF2YWlsYWJsZSB0byB0aGUgZ3JvdXBcIlwiXCJcbiAgcmVtb3ZlRnNwQm9va2tlZXBlclVzZXIoaW5wdXQ6IFJlbW92ZUZzcEJvb2trZWVwZXJVc2VySW5wdXQhKTogUmVtb3ZlRnNwQm9va2tlZXBlclVzZXJQYXlsb2FkXG4gIGRlbGV0ZUludGVncmF0aW9uUnVsZShpbnB1dDogRGVsZXRlSW50ZWdyYXRpb25SdWxlSW5wdXQhKTogRGVsZXRlSW50ZWdyYXRpb25SdWxlUGF5bG9hZFxuICBjcmVhdGVJbnZvaWNlKGlucHV0OiBDcmVhdGVJbnZvaWNlSW5wdXQhKTogQ3JlYXRlSW52b2ljZVBheWxvYWRcbiAgY29tcGxldGVQYXltZW50QXBwcm92YWwoaW5wdXQ6IENvbXBsZXRlUGF5bWVudEFwcHJvdmFsSW5wdXQhKTogQ29tcGxldGVQYXltZW50QXBwcm92YWxQYXlsb2FkXG4gIGNyZWF0ZVRyYW5zYWN0aW9uUmVmdXNlZFN1YnNjcmlwdGlvbihpbnB1dDogQ3JlYXRlVHJhbnNhY3Rpb25SZWZ1c2VkU3Vic2NyaXB0aW9uSW5wdXQhKTogQ3JlYXRlVHJhbnNhY3Rpb25SZWZ1c2VkU3Vic2NyaXB0aW9uUGF5bG9hZFxuICB1cGRhdGVEZXBhcnRtZW50KGlucHV0OiBVcGRhdGVEZXBhcnRtZW50SW5wdXQhKTogVXBkYXRlRGVwYXJ0bWVudFBheWxvYWRcbiAgYnVsa0ZpbmRPckNyZWF0ZUVycEZlZWRzKGlucHV0OiBCdWxrRmluZE9yQ3JlYXRlRXJwRmVlZHNJbnB1dCEpOiBCdWxrRmluZE9yQ3JlYXRlRXJwRmVlZHNQYXlsb2FkXG4gIGNyZWF0ZVBheW1lbnRFYXJseUF1dGhCYWxhbmNlRGVjcmVhc2VDb21taXRtZW50KGlucHV0OiBDcmVhdGVQYXltZW50RWFybHlBdXRoQmFsYW5jZURlY3JlYXNlQ29tbWl0bWVudElucHV0ISk6IENyZWF0ZVBheW1lbnRFYXJseUF1dGhCYWxhbmNlRGVjcmVhc2VDb21taXRtZW50UGF5bG9hZFxuICBjb25maXJtUGF5bWVudERyYWZ0KGlucHV0OiBDb25maXJtUGF5bWVudERyYWZ0SW5wdXQhKTogQ29uZmlybVBheW1lbnREcmFmdFBheWxvYWRcbiAgY3JlYXRlUmVjZWlwdChpbnB1dDogQ3JlYXRlUmVjZWlwdElucHV0ISk6IENyZWF0ZVJlY2VpcHRQYXlsb2FkXG4gIFwiXCJcIkNyZWF0ZXMgYSBEb2N1bWVudE9DUiBlbnRyeSwgYW5kIGluaXRpYXRlcyB0aGUgT0NSIHByb2Nlc3Mgb24gdGhlIGRvY3VtZW50LlwiXCJcIlxuICBjcmVhdGVEb2N1bWVudE9jcihpbnB1dDogQ3JlYXRlRG9jdW1lbnRPY3JJbnB1dCEpOiBDcmVhdGVEb2N1bWVudE9jclBheWxvYWRcbiAgZGVsZXRlU3Vic2NyaXB0aW9ucyhpbnB1dDogRGVsZXRlU3Vic2NyaXB0aW9uc0lucHV0ISk6IERlbGV0ZVN1YnNjcmlwdGlvbnNQYXlsb2FkXG4gIHVwZGF0ZVVzZXIoaW5wdXQ6IFVwZGF0ZVVzZXJJbnB1dCEpOiBVcGRhdGVVc2VyUGF5bG9hZFxuICBzZXRNYW5hZ2VyKGlucHV0OiBTZXRNYW5hZ2VySW5wdXQhKTogU2V0TWFuYWdlclBheWxvYWRcbiAgdXBkYXRlSW50ZWdyYXRpb25DcmVkZW50aWFsKGlucHV0OiBVcGRhdGVJbnRlZ3JhdGlvbkNyZWRlbnRpYWxJbnB1dCEpOiBVcGRhdGVJbnRlZ3JhdGlvbkNyZWRlbnRpYWxQYXlsb2FkXG4gIHNldFJlY2VpdmFibGVzT2ZmZXJzU2VsbGVyQWNjb3VudEhhc1NlZW5UcmlhbEFjY2Vzc0NvbmZpcm1hdGlvbkJhbm5lcihpbnB1dDogU2V0UmVjZWl2YWJsZXNPZmZlcnNTZWxsZXJBY2NvdW50SGFzU2VlblRyaWFsQWNjZXNzQ29uZmlybWF0aW9uQmFubmVySW5wdXQhKTogU2V0UmVjZWl2YWJsZXNPZmZlcnNTZWxsZXJBY2NvdW50SGFzU2VlblRyaWFsQWNjZXNzQ29uZmlybWF0aW9uQmFubmVyUGF5bG9hZFxuICBnZW5lcmF0ZURlcG9zaXRzU3RhdGVtZW50RG9jdW1lbnREb3dubG9hZFVybChpbnB1dDogR2VuZXJhdGVEZXBvc2l0c1N0YXRlbWVudERvY3VtZW50RG93bmxvYWRVcmxJbnB1dCEpOiBHZW5lcmF0ZURlcG9zaXRzU3RhdGVtZW50RG9jdW1lbnREb3dubG9hZFVybFBheWxvYWRcbiAgY2FsY3VsYXRlQ3JlZGl0TWFya2V0aW5nT2ZmZXIoaW5wdXQ6IENhbGN1bGF0ZUNyZWRpdE1hcmtldGluZ09mZmVySW5wdXQhKTogQ2FsY3VsYXRlQ3JlZGl0TWFya2V0aW5nT2ZmZXJQYXlsb2FkXG4gIHVwZGF0ZVRyYW5zYWN0aW9uRGVwYXJ0bWVudChpbnB1dDogVXBkYXRlVHJhbnNhY3Rpb25EZXBhcnRtZW50SW5wdXQhKTogVXBkYXRlVHJhbnNhY3Rpb25EZXBhcnRtZW50UGF5bG9hZFxuICBjYW5jZWxUcmFuc2FjdGlvbihpbnB1dDogQ2FuY2VsVHJhbnNhY3Rpb25JbnB1dCEpOiBDYW5jZWxUcmFuc2FjdGlvblBheWxvYWRcbiAgXCJcIlwiQ3JlYXRlcyBhIHByb2R1Y3Qgb25ib2FyZGluZyBhcHBsaWNhdGlvbiBmb2xsb3dpbmcgYSBibHVlcHJpbnQgb2YgdGhlIGdpdmVuIG5hbWVcIlwiXCJcbiAgY3JlYXRlT25ib2FyZGluZ1Byb2R1Y3RBcHBsaWNhdGlvbihpbnB1dDogQ3JlYXRlT25ib2FyZGluZ1Byb2R1Y3RBcHBsaWNhdGlvbklucHV0ISk6IENyZWF0ZU9uYm9hcmRpbmdQcm9kdWN0QXBwbGljYXRpb25QYXlsb2FkXG4gIFwiXCJcIlVzZSB0byBpbml0aWF0ZSBQbGFpZCBMaW5rXCJcIlwiXG4gIGdlbmVyYXRlUGxhaWRMaW5rVG9rZW4oaW5wdXQ6IEdlbmVyYXRlUGxhaWRMaW5rVG9rZW5JbnB1dCEpOiBHZW5lcmF0ZVBsYWlkTGlua1Rva2VuUGF5bG9hZFxuICBcIlwiXCJBZGRzIGEgcG9saWN5IGdyYW50aW5nIGFjY2VzcyBmb3IgYSBGU1AgYWNjb3VudCB0byBhIHRlbmFudCBhY2NvdW50XCJcIlwiXG4gIGFkZEZzcEJvb2trZWVwZXIoaW5wdXQ6IEFkZEZzcEJvb2trZWVwZXJJbnB1dCEpOiBBZGRGc3BCb29ra2VlcGVyUGF5bG9hZFxuICB1cGRhdGVUcmFuc2FjdGlvbkxvY2F0aW9uKGlucHV0OiBVcGRhdGVUcmFuc2FjdGlvbkxvY2F0aW9uSW5wdXQhKTogVXBkYXRlVHJhbnNhY3Rpb25Mb2NhdGlvblBheWxvYWRcbn1cblxuaW5wdXQgVXBkYXRlSW50ZWdyYXRpb25TZXR0aW5nc0lucHV0IHtcbiAgYWNjb3VudHNQYXlhYmxlQ2F0ZWdvcnlJZDogSURcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBjb2xsZWN0aW9uVGFyZ2V0Q2F0ZWdvcnlJZDogSURcbiAgaWQ6IElEIVxuICBcIlwiXCJUaGUgR0wgYWNjb3VudCBpZCBmb3Igc3luY2luZyByZWltYnVyc2VtZW50cyBkYXRhXCJcIlwiXG4gIHJlaW1idXJzZW1lbnRzVXNlckNhdGVnb3J5SWQ6IElEXG4gIHJld2FyZHNJbmNvbWVVc2VyQ2F0ZWdvcnlJZDogSURcbn1cblxudW5pb24gUmV3YXJkc1RyaWdnZXJQYXlsb2FkID0gUmV3YXJkc1RyaWdnZXJDYXNoQWN0aXZhdGlvbkNhcmRTcGVuZEJvbnVzIHwgUmV3YXJkc1RyaWdnZXJEZXBvc2l0c1RyYW5zZmVyIHwgUmV3YXJkc1RyaWdnZXJMaW5rZWRBY2NvdW50Qm9udXMgfCBSZXdhcmRzVHJpZ2dlclB1cmNoYXNlIHwgUmV3YXJkc1RyaWdnZXJSZWZlcnJlZEFtb3VudFNwZW50IHwgUmV3YXJkc1RyaWdnZXJSZWZlcnJlckF3YXJkIHwgUmV3YXJkc1RyaWdnZXJUb3BDYXRlZ29yeU11bHRpcGxpZXJcblxuaW5wdXQgRGlzY29ubmVjdEVycEZlZWRJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZXJwRmVlZElkOiBJRCFcbn1cblxuaW5wdXQgV2lyZVJlY2VpdmluZ01ldGhvZElucHV0IHtcbiAgYWNjb3VudE51bWJlcjogU3RyaW5nXG4gIGJlbmVmaWNpYXJ5TmFtZTogU3RyaW5nXG4gIGNvdW50cnk6IFN0cmluZ1xuICByb3V0aW5nTnVtYmVyOiBTdHJpbmdcbn1cblxudHlwZSBDaGFubmVsRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IENoYW5uZWxcbn1cblxuZW51bSBGdW5kaW5nU291cmNlU3RhdHVzQ2hhbmdlUmVhc29uIHtcbiAgQUNDT1VOVF9DTE9TRURcbiAgQUNDT1VOVF9OT1RfRk9VTkRcbiAgQkFDS0ZJTExcbiAgQ1JFQVRFRFxuICBERVBPU0lUU19BQ0NPVU5UX05PVF9BQ1RJVkVcbiAgRklOQU5DSUFMX1NPVVJDRV9ERUxFVEVEXG4gIElOVkFMSURfQUNDT1VOVF9OVU1CRVJcbiAgTUFOVUFMXG4gIE1BUktFRF9BU19QUklNQVJZXG4gIE5PTl9UUkFOU0FDVElPTl9BQ0NPVU5UXG4gIFZFUklGSUNBVElPTl9DT0xMRUNUSU9OX1NVQ0NFRURFRFxufVxuXG5pbnB1dCBDb250YWN0QWRkcmVzc0lucHV0IHtcbiAgXCJcIlwiQWRkcmVzcyAxXCJcIlwiXG4gIGFkZHJlc3MxOiBTdHJpbmdcbiAgXCJcIlwiQWRkcmVzcyAyXCJcIlwiXG4gIGFkZHJlc3MyOiBTdHJpbmdcbiAgXCJcIlwiQ2l0eVwiXCJcIlxuICBjaXR5OiBTdHJpbmdcbiAgXCJcIlwiQ291bnRyeVwiXCJcIlxuICBjb3VudHJ5OiBTdHJpbmdcbiAgXCJcIlwiRmlyc3QgbmFtZVwiXCJcIlxuICBmaXJzdE5hbWU6IFN0cmluZ1xuICBcIlwiXCJMYXN0IG5hbWVcIlwiXCJcbiAgbGFzdE5hbWU6IFN0cmluZ1xuICBcIlwiXCJTdGF0ZVwiXCJcIlxuICBzdGF0ZTogU3RyaW5nXG4gIFwiXCJcIlppcCBjb2RlXCJcIlwiXG4gIHppcDogU3RyaW5nXG59XG5cbnR5cGUgRmluYW5jaWFsSW5zdGl0dXRpb25Db25uZWN0aW9uIHtcbiAgZWRnZXM6IFtGaW5hbmNpYWxJbnN0aXR1dGlvbkVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBSZWZlcnJhbFJld2FyZCB7XG4gIGFtb3VudDogSW50IVxuICB0eXBlOiBSZWZlcnJhbFJld2FyZFR5cGUhXG59XG5cbmlucHV0IFJlcGxhY2VDYXJkV2l0aFBoeXNpY2FsSW5wdXQge1xuICBjYXJkSWQ6IElEIVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGhvbGRlck5hbWU6IFN0cmluZ1xuICByZXBsYWNlbWVudERlc2NyaXB0aW9uOiBTdHJpbmdcbiAgcmVwbGFjZW1lbnRSZWFzb246IENhcmRSZXBsYWNlbWVudFJlYXNvbiFcbiAgc2hpcHBpbmdBZGRyZXNzOiBTaGlwcGluZ0FkZHJlc3NJbnB1dCFcbn1cblxuaW5wdXQgQ2FzaFRyYW5zYWN0aW9uT3JkZXJCeSB7XG4gIG9yZGVyRmllbGQ6IENhc2hUcmFuc2FjdGlvbk9yZGVyRmllbGRcbiAgb3JkZXJUeXBlOiBPcmRlclR5cGVcbn1cblxudHlwZSBMb3lhbHR5UHJvZ3JhbSBpbXBsZW1lbnRzIE5vZGUge1xuICBhc2NlbmRhRGV0YWlsczogQXNjZW5kYURldGFpbHMhXG4gIGFzY2VuZGFQcm9ncmFtSWQ6IFN0cmluZyFcbiAgY29uZmlnOiBMb3lhbHR5UHJvZ3JhbUNvbmZpZ1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgaW1hZ2VVcmw6IFN0cmluZyFcbiAgcXVvdGU6IE1pbGVzVHJhbnNmZXJRdW90ZVxufVxuXG5cIlwiXCJUaGUgaGlnaCBsZXZlbCBvYmplY3QgcmVwcmVzZW50cyBhbiBhcHByb3ZhbCBwb2xpY3lcIlwiXCJcbmlucHV0IEFwcHJvdmFsc1Byb2R1Y3RQb2xpY3kge1xuICBcIlwiXCJUaGUgYXBwcm92YWxzIHBvbGljeSBkZXRhaWxzXCJcIlwiXG4gIGRldGFpbHM6IEFwcHJvdmFsc1BvbGljeURldGFpbHNJbnB1dCFcbiAgXCJcIlwiVGhlIHByb2R1Y3QgdHlwZSBvZiB0aGlzIGFwcHJvdmFscyBwb2xpY3lcIlwiXCJcbiAgcHJvZHVjdFR5cGU6IFByb2R1Y3RUeXBlXG59XG5cbmVudW0gQ2FzaFRyYW5zYWN0aW9uVHlwZSB7XG4gIEFDSFxuICBBQ0hfUkVUVVJOXG4gIEFETUlOX0JBTEFOQ0VfQURKVVNUTUVOVFxuICBCT09LX1RSQU5TRkVSXG4gIEJSRVhfT1BFUkFUSU9OQUxfVFJBTlNGRVJcbiAgQ0FSRF9DT0xMRUNUSU9OXG4gIENIRVFVRVxuICBDSEVRVUVfUkVUVVJOXG4gIERJVklERU5EXG4gIEZCT19UUkFOU0ZFUlxuICBJTlRFUkVTVFxuICBJTlRSQV9DVVNUT01FUl9BQ0NPVU5UX0JPT0tfVFJBTlNGRVJcbiAgSU5WQUxJRFxuICBQQVlST0xMX0VTVElNQVRFXG4gIFJFQ0VJVkFCTEVTX09GRkVSU19BRFZBTkNFXG4gIFJFQ0VJVkFCTEVTX09GRkVSU19DT0xMRUNUSU9OXG4gIFJFQ0VJVkFCTEVTX09GRkVSU19SRVBBWU1FTlRcbiAgUkVXQVJEU19SRURFTVBUSU9OXG4gIFdJUkVcbiAgV0lSRV9SRVRVUk5cbn1cblxuaW5wdXQgRG9tZXN0aWNXaXJlUGF5bWVudEluc3RydW1lbnRJbnB1dCB7XG4gIGFjY291bnROdW1iZXI6IFN0cmluZyFcbiAgYWRkcmVzczogQWRkcmVzc0lucHV0IVxuICByb3V0aW5nTnVtYmVyOiBTdHJpbmchXG59XG5cbnR5cGUgRGVsZXRlUGF5bWVudEluc3RydW1lbnRQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG51bmlvbiBFdmVudE1ldGFkYXRhID0gQ2FyZFRyYW5zYWN0aW9uc0luc2lnaHRDb21tZW50RXZlbnRNZXRhZGF0YSB8IENhcmRUcmFuc2FjdGlvbnNJbnNpZ2h0RGlzbWlzc0V2ZW50TWV0YWRhdGFcblxuaW5wdXQgQ3JlYXRlSHJpc0Nvbm5lY3Rpb25JbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgXCJcIlwiVGhlIGlucHV0IGNvbnRhaW4gcGFyYW1ldGVycyB3ZSBuZWVkIHRvIG1ha2UgdGhlIGNvbm5lY3Rpb25cIlwiXCJcbiAgY3JlYXRlSHJpc0Nvbm5lY3Rpb25JbnB1dDogVmVuZG9yQ29ubmVjdGlvbkNyZWF0aW9uSW5wdXQhXG4gIFwiXCJcIlRoZSBIUklTIHZlbmRvciB3ZSB3YW50IHRvIGNyZWF0ZSBhIGNvbm5lY3Rpb24gdy9cIlwiXCJcbiAgaHJpc0FnZ3JlZ2F0b3JWZW5kb3I6IEhyaXNBZ2dyZWdhdG9yVmVuZG9yIVxufVxuXG50eXBlIEJhdGNoU2V0dGluZ3Mge1xuICBjYWRlbmNlOiBCYXRjaENhZGVuY2VcbiAgZW50aXR5OiBCYXRjaEVudGl0eVxufVxuXG50eXBlIEFjY291bnRFbGlnaWJsZUZvckNhcmRBY2NvdW50VHlwZSB7XG4gIGlzRWxpZ2libGU6IEJvb2xlYW4hXG59XG5cbmlucHV0IERpc2Nvbm5lY3RGc3BBbmRDbGllbnRJbnB1dCB7XG4gIGNsaWVudEN1c3RvbWVyQWNjb3VudElkOiBTdHJpbmchXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZnNwQ3VzdG9tZXJBY2NvdW50SWQ6IFN0cmluZyFcbn1cblxuZW51bSBDYXNoVHJhbnNhY3Rpb25BcHByb3ZhbERlY2lzaW9uIHtcbiAgQVBQUk9WRURcbiAgQ0FOQ0VMTEVEXG4gIERFTklFRFxuICBJTlZBTElEXG4gIFBFTkRJTkdcbn1cblxuZW51bSBDYXNoVHJhbnNhY3Rpb25BcHByb3ZhbERlY2lzaW9uUmVhc29uIHtcbiAgRlJBVURVTEVOVFxuICBJTkNPUlJFQ1RcbiAgSU5WQUxJRFxuICBPVEhFUlxuICBVTkFVVEhPUklaRURcbn1cblxudHlwZSBBY2NlcHRPZmZlclBheWxvYWQge1xuICBhdmFpbGFibGVQcm9kdWN0T2ZmZXJzOiBbUHJvZHVjdE9mZmVyIV0hXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBFeHBlbnNlc0NhcmRNZXRhZGF0YSBpbXBsZW1lbnRzIE5vZGUge1xuICBkZWZhdWx0TWVtbzogU3RyaW5nXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxufVxuXG5cIlwiXCJGaWVsZHMgZm9yIGN1c3RvbWl6aW5nIFNTVSBmb3Jtc1wiXCJcIlxudHlwZSBTc3VGb3JtQ3VzdG9taXphdGlvbiB7XG4gIFwiXCJcIkNhbGwgdG8gYWN0aW9uXCJcIlwiXG4gIGN0YTogU3RyaW5nXG4gIFwiXCJcIkluZGljYXRlcyB3aGV0aGVyIHdlIGtub3cgaWYgdGhpcyBhcHBsaWNhdGlvbiBoYXMgYmVlbiBpbmNvcnBvcmF0ZWRcIlwiXCJcbiAgaXNJbmNvcnBvcmF0ZWQ6IEJvb2xlYW5cbiAgXCJcIlwiU3ViLWhlYWRpbmdcIlwiXCJcbiAgc3ViaGVhZGVyOiBTdHJpbmdcbiAgXCJcIlwiVGl0bGVcIlwiXCJcbiAgdGl0bGU6IFN0cmluZ1xufVxuXG5lbnVtIFNvcnREaXJlY3Rpb24ge1xuICBBU0NcbiAgREVTQ1xuICBJTlZBTElEXG59XG5cbmVudW0gSW5jZW50aXZlUGxhY2VtZW50VHlwZSB7XG4gIEJBTk5FUlxuICBDQVNIX0FERF9GVU5EU19GTE9XX0JBTk5FUlxuICBDQVNIX0JBTEFOQ0VfVE9PTFRJUFxuICBFTUFJTFxuICBIT01FX1BST01PVElPTlxuICBJTlZBTElEXG4gIFJFV0FSRFNfUEFHRV9DSEVDS0JPWFxuICBSRVdBUkRTX1BBR0VfU0NBTEVcbiAgUkVXQVJEU19QQUdFX1RIUkVTSE9MRFxufVxuXG50eXBlIFNldFJlY2VpdmFibGVzT2ZmZXJzQXV0b0FkdmFuY2VNb2RlUGF5bG9hZCB7XG4gIGFjY291bnQ6IFJlY2VpdmFibGVzT2ZmZXJzQWNjb3VudFxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbmlucHV0IFNldFN0YXRlbWVudEVudHJ5SW50ZWdyYXRpb25GaWVsZElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJUaGUgSUQgb2YgdGhlIHRhcmdldCBpbnRlZ3JhdGlvbiBmaWVsZCwgb3Iga2V5d29yZCBmb3Igb3RoZXIgdGhpbmdzIGxpa2UgYmlsbGFibGUgc3RhdHVzLlwiXCJcIlxuICBmaWVsZDogU3RyaW5nIVxuICBzdGF0ZW1lbnRFbnRyeUlkOiBJRCFcbiAgXCJcIlwiVGFyZ2V0IHZhbHVlIHRvIHNldCB0aGUgaW50ZWdyYXRpb24gZmllbGQgdG9cIlwiXCJcbiAgdmFsdWU6IFN0cmluZyFcbn1cblxudHlwZSBDYXJkVHJhbnNhY3Rpb25JbnNpZ2h0RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IENhcmRUcmFuc2FjdGlvbkluc2lnaHRcbn1cblxuZW51bSBVbmRlcndyaXRpbmdMaW1pdEZhY3RvclR5cGUge1xuICBEVElcbiAgRklDT1xufVxuXG5cIlwiXCJcbkRlY2xhcmF0aXZlIGZsYWdzIGludGVuZGVkIHRvIHJlc29sdmUgZGF0YSBpbiB0aGUgYmFja2VuZFxudGhhdCBpbmZsdWVuY2VzIHRoZSB2aXNpYmlsaXR5IG9mIG5hdiBpdGVtcyAob3duZWQgYnkgY2FyZCksIGFuZCBzdXJmYWNlXG50aGUgdmlzaWJpbGl0eSBvZiB0aG9zZSBuYXYgaXRlbXMgYXMgVVggb3JpZW50ZWQgYm9vbGVhbnMuXG5cIlwiXCJcbnR5cGUgQ2FyZE5hdmlnYXRpb24gaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIldoZXRoZXIgY2FyZCBvdmVydmlldyBuYXYgaXRlbSBpcyB2aXNpYmxlXCJcIlwiXG4gIHNob3dDYXJkT3ZlcnZpZXc6IEJvb2xlYW4hXG59XG5cbnR5cGUgU3VibWl0UmVpbWJ1cnNlbWVudFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHJlaW1idXJzZW1lbnRJdGVtOiBSZWltYnVyc2VtZW50SXRlbSFcbn1cblxudHlwZSBCdWxrRGlzY29ubmVjdEVycEZlZWRzUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgXCJcIlwibGlzdCBvZiBlcnAgZmVlZHMgZGlzY29ubmVjdGVkXCJcIlwiXG4gIGVycEZlZWRzOiBbRXJwRmVlZF1cbiAgXCJcIlwiRXJyb3IgbWVzc2FnZSBkZXNjcmliaW5nIGlzc3VlXCJcIlwiXG4gIGVycm9yTWVzc2FnZTogU3RyaW5nXG59XG5cbmVudW0gQXBwcm92YWxzVW5zYWZlRmxhZ0tleVR5cGUge1xuICBDVVNUT01FUl9BQ0NPVU5UX0lEXG4gIENVU1RPTUVSX1VTRVJfSURcbiAgSU5WQUxJRFxufVxuXG50eXBlIFNzdVByZWZpbGxEYXRhIHtcbiAgYXR0cmlidXRpb25Ub2tlbjogU3RyaW5nXG4gIGNvbXBhbnlOYW1lOiBTdHJpbmdcbiAgY29tcGFueVR5cGU6IFN0cmluZ1xuICBjb21wYW55VXJsOiBTdHJpbmdcbiAgXCJcIlwiRm9ybSBjdXN0b21pemF0aW9uIGZpZWxkXCJcIlwiXG4gIGN1c3RvbWl6YXRpb246IFNzdUZvcm1DdXN0b21pemF0aW9uXG4gIGRpc2NsYWltZXI6IFN0cmluZ1xuICBlbXBsb3llZUNvdW50OiBTdHJpbmdcbiAgZmlyc3ROYW1lOiBTdHJpbmdcbiAgbGFzdE5hbWU6IFN0cmluZ1xuICBwYXJ0bmVyTG9nb1VybDogU3RyaW5nXG4gIHBhcnRuZXJOYW1lOiBTdHJpbmdcbiAgd29ya0VtYWlsOiBTdHJpbmdcbn1cblxuaW5wdXQgQ3JlYXRlU3Vic2NyaXB0aW9uSW5wdXQge1xuICBjaGFubmVsSWQ6IElEIVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIG5vdGlmaWNhdGlvblR5cGU6IE5vdGlmaWNhdGlvblR5cGUhXG59XG5cbnR5cGUgQ29tcGxldGVQZW5kaW5nUmVjb3JkQXBwcm92YWxMb2dnZWRPdXRQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBwYXltZW50Q29udGV4dDogRGVwb3NpdHNQYXltZW50IVxuICBwZW5kaW5nUmVjb3JkQXBwcm92YWw6IFBlbmRpbmdSZWNvcmRBcHByb3ZhbCFcbn1cblxuaW5wdXQgQ3JlYXRlRnJhdWREaXNwdXRlSW5wdXQge1xuICBjYXJkUG9zc2Vzc2lvbjogRGlzcHV0ZUNhcmRQb3NzZXNzaW9uIVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGZyYXVkdWxlbnREZWNsaW5lZFRyYW5zYWN0aW9uSWRzOiBbSUQhXVxuICBsZWdpdGltYXRlVHJhbnNhY3Rpb25JZHM6IFtJRCFdXG4gIHJlYXNvbjogU3RyaW5nIVxuICB0cmFuc2FjdGlvbklkczogW0lEIV0hXG59XG5cbmlucHV0IEdlbmVyYXRlUmVjZWl2YWJsZXNPZmZlcnNHcm91cFJlcG9ydElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBvZmZlcnNHcm91cElkOiBJRCFcbn1cblxuaW5wdXQgRmluZE9yQ3JlYXRlRXJwRmVlZElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBmaW5hbmNpYWxBY2NvdW50SWQ6IElEIVxuICBzeW5jRnJvbTogVGltZSFcbiAgdHlwZTogRXJwVmVuZG9yVHlwZSFcbiAgdmVuZG9yT3B0aW9uczogSnNvblxufVxuXG5cIlwiXCJBIGN5Y2xlIHJlb2NjdXJyaW5nIG9uY2UgYSB3ZWVrIG9uIGEgcGFydGljdWxhciBkYXkuXCJcIlwiXG50eXBlIFdlZWtseUNhcmRTdGF0ZW1lbnRQb2xpY3lDeWNsZSB7XG4gIFwiXCJcIlRoZSBkYXkgb2YgdGhlIHdlZWsuXCJcIlwiXG4gIGRheU9mV2VlazogSW50XG59XG5cblwiXCJcIlRoZSBoaWdoIGxldmVsIG9iamVjdCByZXByZXNlbnRzIGFuIGFwcHJvdmFsIHN0ZXBcIlwiXCJcbnR5cGUgUmVxdWlyZWRBcHByb3ZhbFN0ZXAge1xuICBcIlwiXCJBIGxpc3Qgb2YgcmV2aWV3IG9iamVjdHMgY2FuIGJlIHVzZSB0byBkZXRlcm1pbmUgd2hldGhlciBhIHN0ZXAgaXMgYXBwcm92ZWQgb3Igbm90LCB3aG8gYW5kIHdoZW4gYXBwcm92ZWQgaXQuIERvIG5vdCByZWx5IG9uIHRoZSBhcHByb3ZhbHNfcmV2aWV3LmFzc2lnbmVlcyBmaWVsZCB0byBkZXRlcm1pbmUgYSBsaXN0IG9mIGFsbG93ZWQgYXBwcm92ZXJzLCB1c2UgYXBwcm92YWxzX3N0ZXAuYXBwcm92ZXJzIGluc3RlYWRcIlwiXCJcbiAgcmV2aWV3czogW0FwcHJvdmFsc1Jldmlld11cbiAgXCJcIlwiVGhlIHN0ZXAgZGV0YWlsc1wiXCJcIlxuICBzdGVwRGV0YWlsczogQXBwcm92YWxzU3RlcFxufVxuXG50eXBlIENhc2hUcmFuc2FjdGlvblRpbWVsaW5lIHtcbiAgXCJcIlwiSWYgbm90IE5VTEwsIHdoZW4gdGhlIHRyYW5zYWN0aW9uIHdhcyBhcHByb3ZlZC5cIlwiXCJcbiAgYXBwcm92ZWRBdDogVGltZVxuICBcIlwiXCJcbiAgSWYgbm90IE5VTEwsIHRoaXMgZmllbGQgaG9sZHMgdGhlIG1heGltdW0gZXN0aW1hdGVkIG51bWJlciBvZiBidXNpbmVzcyBkYXlzIGZvciBhIHRyYW5zYWN0aW9uIHRvIHByb2Nlc3MuIFRoaXMgaXMgZXF1aXZhbGVudCB0byB0aGUgbnVtYmVyIG9mIGJ1c2luZXNzIGRheXMgYmV0d2VlbiBgZXN0aW1hdGVkX3NldHRsZWRfYXRfZW5kYCBhbmQgYHNjaGVkdWxlZF9zZW5kX2F0YC5cbiAgVXNlZnVsIHdoZW4gcHJvdmlkaW5nIGVzdGltYXRlIHRpbWVzIGZvciB0cmFuc2FjdGlvbnMgdGhhdCBoYXZlbid0IGJlZW4gY3JlYXRlZCBhbmQgZG9uJ3QgaGF2ZSBhIHNwZWNpZmllZCBgc2NoZWR1bGVkX3NlbmRfYXRgIGRhdGVcbiAgXCJcIlwiXG4gIGVzdGltYXRlZE51bWJlckJ1c2luZXNzRGF5c01heDogSW50XG4gIFwiXCJcIlxuICBJZiBub3QgTlVMTCwgdGhpcyBmaWVsZCBob2xkcyB0aGUgbWluaW11bSBlc3RpbWF0ZWQgbnVtYmVyIG9mIGJ1c2luZXNzIGRheXMgZm9yIGEgdHJhbnNhY3Rpb24gdG8gcHJvY2Vzcy4gVGhpcyBpcyBlcXVpdmFsZW50IHRvIHRoZSBudW1iZXIgb2YgYnVzaW5lc3MgZGF5cyBiZXR3ZWVuIGBlc3RpbWF0ZWRfc2V0dGxlZF9hdF9zdGFydGAgYW5kIGBzY2hlZHVsZWRfc2VuZF9hdGAuXG4gIFVzZWZ1bCB3aGVuIHByb3ZpZGluZyBlc3RpbWF0ZSB0aW1lcyBmb3IgdHJhbnNhY3Rpb25zIHRoYXQgaGF2ZW4ndCBiZWVuIGNyZWF0ZWQgYW5kIGRvbid0IGhhdmUgYSBzcGVjaWZpZWQgYHNjaGVkdWxlZF9zZW5kX2F0YCBkYXRlXG4gIFwiXCJcIlxuICBlc3RpbWF0ZWROdW1iZXJCdXNpbmVzc0RheXNNaW46IEludFxuICBcIlwiXCJcbiAgQSBTQ0hFRFVMRUQgb3IgUFJPQ0VTU0lORyB0cmFuc2FjdGlvbiBjYW4gaGF2ZSBhbiBlc3RpbWF0ZWQgc2V0dGxlZCBhdCB0aW1lIHJhbmdlIG9mIHdoZW4gdGhlXG4gIHRyYW5zYWN0aW9uIHdpbGwgYmUgc2V0dGxlZC4gVGhpcyBmaWVsZCBzdG9yZXMgdGhlIGVuZCBvZiB0aGUgZXN0aW1hdGVkIHNldHRsZWQgdGltZSByYW5nZSxcbiAgd2hpY2ggY2FuIGhvbGQgdGhlIHNhbWUgdmFsdWUgYXMgZXN0aW1hdGVkX3NldHRsZWRfYXRfc3RhcnQgd2hlbiB3ZSBoYXZlIGFuIGVzdGltYXRlZCBkYXRlXG4gIGJ1dCBub3QgZXN0aW1hdGVkIGRhdGUgcmFuZ2UuXG4gIENhbiBiZSBOVUxMIHdoZW4gcHJvdmlkaW5nIGVzdGltYXRlcyB0byBjdXN0b21lcnMgaW4gcGF5bWVudCBmbG93cy5cbiAgXCJcIlwiXG4gIGVzdGltYXRlZFNldHRsZWRBdEVuZDogVGltZVxuICBcIlwiXCJcbiAgQSBTQ0hFRFVMRUQgb3IgUFJPQ0VTU0lORyB0cmFuc2FjdGlvbiBjYW4gaGF2ZSBhbiBlc3RpbWF0ZWQgc2V0dGxlZCBhdCB0aW1lIHJhbmdlIG9mIHdoZW5cbiAgdGhlIHRyYW5zYWN0aW9uIHdpbGwgYmUgc2V0dGxlZC4gSWYgbm90IE5VTEwsIHRoaXMgZmllbGQgc3RvcmVzIHRoZSBzdGFydCBvZiB0aGUgZXN0aW1hdGVkXG4gIHNldHRsZWQgdGltZSByYW5nZS4gVGhpcyBmaWVsZCBjYW4gYmUgTlVMTCBpZiB0aGUgdHJhbnNhY3Rpb24gaXMgaW4gYSB0ZXJtaW5hbCBzdGF0ZSwgd2hldGhlclxuICBQUk9DRVNTRUQgb3IgRkFJTEVELlxuICBDYW4gYmUgTlVMTCB3aGVuIHByb3ZpZGluZyBlc3RpbWF0ZXMgdG8gY3VzdG9tZXJzIGluIHBheW1lbnQgZmxvd3NcbiAgXCJcIlwiXG4gIGVzdGltYXRlZFNldHRsZWRBdFN0YXJ0OiBUaW1lXG4gIFwiXCJcIlxuICBJZiBub3QgTlVMTCwgd2hlbiB0aGUgdHJhbnNhY3Rpb24gZW50ZXJlZCB0aGUgRkFJTEVEIHN0YXR1cyxcbiAgRXhhbXBsZXMgaW5jbHVkZTogY2FuY2VsbGVkIGJ5IHRoZSB1c2VyLCBhcHByb3ZhbCBkZW5pZWQgYnkgYW4gYWRtaW4sIG9yIGZhaWxlZCBpbnRlcm5hbGx5LlxuICBcIlwiXCJcbiAgZmFpbGVkQXQ6IFRpbWVcbiAgXCJcIlwiVGhlIElEIG9mIHRoZSB0cmFuc2FjdGlvbiwgaWYgaXQgZXhpc3RzLiBUaGlzIGlzIHVzZWQgZm9yIGFwb2xsbyBjYWNoaW5nLlwiXCJcIlxuICBpZDogSURcbiAgXCJcIlwiXG4gIElmIG5vdCBOVUxMLCB3aGVuIHRoZSB0cmFuc2FjdGlvbiBlbnRlcmVkIHRoZSBQUk9DRVNTSU5HIHN0YXR1c1xuICBUaGlzIGZpZWxkIGNhbiBhbHdheXMgYmUgTlVMTCBpZiB0aGUgdHJhbnNhY3Rpb24gd2FzIGNhbmNlbGxlZCBiZWZvcmUgaXQgd2FzIGluaXRpYXRlZC5cbiAgXCJcIlwiXG4gIGluaXRpYXRlZEF0OiBUaW1lXG4gIFwiXCJcIklmIG5vdCBOVUxMLCB3aGVuIHRoZSB0cmFuc2FjdGlvbiBlbnRlcmVkIHRoZSBQUk9DRVNTRUQgc3RhdHVzIGFuZCBpbXBhY3RlZCB0aGUgY3VzdG9tZXIncyBiYWxhbmNlLlwiXCJcIlxuICBwcm9jZXNzZWRBdDogVGltZVxuICBcIlwiXCJXaGVuIHRoZSB0cmFuc2FjdGlvbiB3YXMgY3JlYXRlZC5cIlwiXCJcbiAgc2NoZWR1bGVkQXQ6IFRpbWVcbiAgXCJcIlwiV2hlbiB0aGUgdHJhbnNhY3Rpb24gaXMgc2NoZWR1bGVkIHRvIGVudGVyIHRoZSBQUk9DRVNTSU5HIHN0YXR1cy5cIlwiXCJcbiAgc2NoZWR1bGVkU2VuZEF0OiBUaW1lXG59XG5cbnR5cGUgRG9tZXN0aWNXaXJlUGF5bWVudEluc3RydW1lbnQge1xuICBhY2NvdW50TnVtYmVyOiBTdHJpbmdcbiAgYWRkcmVzczogQWRkcmVzc1xuICBcIlwiXCJBIHNtYWxsIGxvZ28gZm9yIHRoZSBiZW5lZmljaWFyeSBiYW5rIGluIGJhc2U2NCBmb3JtYXQuIFdBUk5JTkc6IG1heSBjYXVzZSBzaWduaWZpY2FudGx5IHNsb3dlciByZXNwb25zZSB0aW1lc1wiXCJcIlxuICBiZW5lZmljaWFyeUJhbmtMb2dvQmFzZTY0OiBTdHJpbmdcbiAgXCJcIlwiTm90IHlldCBpbXBsZW1lbnRlZCwgd2lsbCBhbHdheXMgYmUgbnVsbC4gSXMgaW4gdGhlIHNjaGVtYSBzbyB0aGUgYXBwIGNhbiB1c2UgdGhlIFVSTCBpZiBhdmFpbGFibGUsIGZhbGxpbmcgYmFjayB0byBiYXNlNjRcIlwiXCJcbiAgYmVuZWZpY2lhcnlCYW5rTG9nb1VybDogU3RyaW5nXG4gIGJlbmVmaWNpYXJ5QmFua05hbWU6IFN0cmluZ1xuICByb3V0aW5nTnVtYmVyOiBTdHJpbmdcbn1cblxudHlwZSBFeHRyYWN0ZWRCaWxsRmllbGRzIHtcbiAgY29udGFjdDogUGF5bWVudENvbnRhY3RcbiAgY29udGFjdENyZWF0ZWQ6IEJvb2xlYW5cbiAgZHVlQW1vdW50Q2VudHM6IEludFxuICBkdWVBdDogVGltZVxuICBleHRlcm5hbEludm9pY2VOdW1iZXI6IFN0cmluZ1xuICBwYXltZW50SW5zdHJ1bWVudDogUGF5bWVudEluc3RydW1lbnRcbiAgcGF5bWVudFNlbmRBdDogVGltZVxuICB0cmFuc2ZlckRlc2NyaXB0aW9uOiBTdHJpbmdcbn1cblxudHlwZSBDcmVhdGVWaXJ0dWFsQ2FyZFBheWxvYWQge1xuICBjYXJkOiBDYXJkXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBHZW5lcmF0ZVJlY2VpdmFibGVzUGF5b3V0UmVwb3J0UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcGF5b3V0UmVwb3J0VXJpOiBTdHJpbmchXG59XG5cbmVudW0gUGF5bWVudFJhaWwge1xuICBBQ0hcbiAgQ0hFUVVFXG4gIFdJUkVcbn1cblxuXCJcIlwiSW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXIncyB0b3AgY2F0ZWdvcnkgYm9udXMgaW4gYSBnaXZlbiBwZXJpb2QuXCJcIlwiXG50eXBlIFJld2FyZHNUb3BDYXRlZ29yeUJvbnVzSW5mbyB7XG4gIFwiXCJcIldoZXRoZXIgdGhlIGN1c3RvbWVyIGlzIHF1YWxpZmllZCBmb3IgdGhlIGJvbnVzIGluIHRoZSBnaXZlbiBwZXJpb2QuXCJcIlwiXG4gIGhhc1F1YWxpZmllZDogQm9vbGVhbiFcbiAgXCJcIlwiV2hldGhlciB0aGUgY3VzdG9tZXIgaXMgaW4gYSByZXdhcmRzIHByb2dyYW0gdGhhdCBoYXMgYSBtdWx0aXBsaWVyIGZvciB0aGUgdG9wIGNhdGVnb3J5LlwiXCJcIlxuICBpc0VsaWdpYmxlOiBCb29sZWFuIVxuICBcIlwiXCJJZiB0aGUgY3VzdG9tZXIgaXMgbm90IHF1YWxpZmllZCBmb3IgdGhlIGJvbnVzLCB3aHkuXCJcIlwiXG4gIG5vdFF1YWxpZmllZFJlYXNvbjogW1Jld2FyZHNUb3BDYXRlZ29yeU5vdEVuYWJsZWRSZWFzb25dXG4gIFwiXCJcIklmIGVsaWdpYmxlLCB0aGUgdG9wIGNhdGVnb3J5IGluIHRoZSBnaXZlbiBwZXJpb2QuXCJcIlwiXG4gIHRvcENhdGVnb3J5OiBSZXdhcmRzVG9wQ2F0ZWdvcnlcbiAgXCJcIlwiVGhlIG51bWJlciBvZiBwb2ludHMgd2UgaGF2ZSBncmFudGVkIHRoZSBjdXN0b21lciBkdWUgdG8gdGhlIHRvcCBjYXRlZ29yeSBtdWx0aXBsaWVyIGluIHRoZSBnaXZlbiBwZXJpb29kLlwiXCJcIlxuICB0b3RhbEJvbnVzQXdhcmRlZENlbnRpcG9pbnRzOiBJbnQhXG4gIFwiXCJcIldoZXRoZXIgdGhlIGN1c3RvbWVyIGhhcyByZWNlaXZlZCBhbnkgYm9udXMgaW4gdGhlIGdpdmVuIHBlcmlvZC5cIlwiXCJcbiAgd2FzQm9udXNBd2FyZGVkOiBCb29sZWFuIVxufVxuXG50eXBlIEludGVncmF0aW9uUnVsZUV2YWx1YXRpb24gaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIGtleTogU3RyaW5nXG4gIHJ1bGU6IEludGVncmF0aW9uUnVsZVxuICB2YWx1ZTogU3RyaW5nXG59XG5cbnR5cGUgSW50ZWdyYXRpb25TZXR0aW5ncyB7XG4gIGJhdGNoU2V0dGluZ3M6IEJhdGNoU2V0dGluZ3NcbiAgYmlsbHNFbmFibGVkOiBCb29sZWFuXG4gIGV4cGVuc2VzRW5hYmxlZDogQm9vbGVhblxuICBuZXRzdWl0ZVN1YnNpZGlhcnk6IE5ldHN1aXRlU3Vic2lkaWFyeVxuICBcIlwiXCJBdXRvIHN5bmMgcmVpbWJ1cnNlbWVudCBkYXRhIHRvIG5ldHN1aXRlXCJcIlwiXG4gIHJlaW1idXJzZW1lbnRzRW5hYmxlZDogQm9vbGVhblxuICBzeW5jRGF0ZVJhbmdlRW5kOiBUaW1lXG4gIHN5bmNEYXRlUmFuZ2VTdGFydDogVGltZVxuICBzeW5jRnJvbTogVGltZVxuICB2ZXJzaW9uOiBJbnRcbn1cblxuZW51bSBSZWZlcnJhbFN0YXR1cyB7XG4gIENPTVBMRVRFRFxuICBJTlZJVEVfU0VOVFxuICBQRU5ESU5HX0lOVklURVxuICBTSUdORURfVVBcbn1cblxudHlwZSBEZXBvc2l0c1BheW1lbnRFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogRGVwb3NpdHNQYXltZW50XG59XG5cbmlucHV0IEFjY2VwdENyZWRpdE1hcmtldGluZ09mZmVySW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIG9mZmVySWQ6IElEIVxufVxuXG50eXBlIENvbXBsZXRlUGVuZGluZ1JlY29yZEFwcHJvdmFsUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcGF5bWVudENvbnRleHQ6IERlcG9zaXRzUGF5bWVudCFcbiAgcGVuZGluZ1JlY29yZEFwcHJvdmFsOiBQZW5kaW5nUmVjb3JkQXBwcm92YWwhXG59XG5cbmVudW0gRXhwZW5zZXNJdGVtRXZlbnRBY3Rpb24ge1xuICBDT01NRU5UXG4gIERJU01JU1NcbiAgRkxBR1xuICBPUEVOXG4gIFJFVklFV1xufVxuXG5cIlwiXCJUaGUgaW5zdGFudCBwYXlvdXRzIGFkdmFuY2UgKG9uZSBhZHZhbmNlIGlzIG9uZSBgb2ZmZXJzX2dyb3VwYClcIlwiXCJcbnR5cGUgUmVjZWl2YWJsZXNPZmZlcnNPZmZlcnNHcm91cCBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaW1lc3RhbXAgd2hlbiB0aGlzIGFkdmFuY2Ugd2FzIGFjY2VwdGVkXCJcIlwiXG4gIGFjY2VwdGVkQXQ6IFRpbWVcbiAgXCJcIlwiV2hldGhlciB0aGlzIG9mZmVycyBncm91cCB3YXMgYXV0byBhZHZhbmNlZFwiXCJcIlxuICBhdXRvQWR2YW5jZWQ6IEJvb2xlYW5cbiAgXCJcIlwiVGhlIGNvbGxlY3Rpb24gaW5mb3JtYXRpb24gYXNzb2NpYXRlZCB3aXRoIHRoaXMgYWR2YW5jZS4gVGhpcyBmaWVsZCBpcyB2ZXJ5IGV4cGVuc2l2ZSB0byByZXNvbHZlLCBzbyBpdCBzaG91bGQgbm90IHVzZWQgd2hlbiBnZXR0aW5nIGJhdGNoZXMgb2YgT2ZmZXJzR3JvdXBzXCJcIlwiXG4gIGNvbGxlY3Rpb25JbmZvOiBSZWNlaXZhYmxlc09mZmVyc09mZmVyc0dyb3VwQ29sbGVjdGlvbkluZm9cbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlRoZSBsaXN0IG9mIG9mZmVycyB0aGF0IGFyZSBwYXJ0IG9mIHRoaXMgb2ZmZXJzIGdyb3VwXCJcIlwiXG4gIG9mZmVyczogW1JlY2VpdmFibGVzT2ZmZXJzT2ZmZXJdXG4gIFwiXCJcIldoZXRoZXIgdGhlIGN1c3RvbWVyIG9wdGVkIHRvIHBheSBmZWUgd2l0aCByZXdhcmRzIHBvaW50cyBhdCB0aGUgdGltZSBvZiBhY2NlcHRhbmNlXCJcIlwiXG4gIHBheUZlZVdpdGhSZXdhcmRzOiBCb29sZWFuXG4gIFwiXCJcIlRpbWVzdGFtcCBvZiB3aGVuIHRoZSBvZmZlciB3YXMgc2V0dGxlZFwiXCJcIlxuICBzZXR0bGVkQXQ6IFRpbWVcbiAgXCJcIlwiVGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSBvZmZlcnMgZ3JvdXAgKGVudW0pXCJcIlwiXG4gIHN0YXR1czogUmVjZWl2YWJsZXNPZmZlcnNPZmZlcnNHcm91cFN0YXR1cyFcbiAgXCJcIlwiVG90YWwgYWR2YW5jZSBhbW91bnQgdGhhdCB0aGUgY3VzdG9tZXIgYWNjZXB0ZWRcIlwiXCJcbiAgdG90YWxBZHZhbmNlQW1vdW50OiBGaW5hbmNpYWxBc3NldFxuICBcIlwiXCJUb3RhbCBmZWUgYW1vdW50IHRoYXQgdGhlIGN1c3RvbWVyIHdpbGwgYmUgY2hhcmdlZFwiXCJcIlxuICB0b3RhbEZlZUFtb3VudDogRmluYW5jaWFsQXNzZXRcbiAgXCJcIlwiVG90YWwgZmVlIGNvc3QgaW4gY2VudGlwb2ludHMgaWYgdGhlIGN1c3RvbWVyIG9wdGVkIHRvIHBheSB0aGUgZmVlIHdpdGggcmV3YXJkcyBwb2ludHNcIlwiXCJcbiAgdG90YWxGZWVDZW50aXBvaW50c0Nvc3Q6IEludFxufVxuXG5cIlwiXCJcbkF0b21pYyBlbGVtZW50IG9mIGEgUmVxdWVzdCBmb3IgaW5mb3JtYXRpb24sXG5kZWZpbmVzIGEgdHlwZSBvZiBkb2N1bWVudCAvIGluZm9ybWF0aW9uIHRoYXQgaXMgbmVlZGVkXG5cIlwiXCJcbnR5cGUgUmZpSXRlbSB7XG4gIFwiXCJcIktleS1WYWx1ZSBTdHJ1Y3Qgb2YgZXh0cmEgbWV0YWRhdGEgZGVzY3JpYmluZyB0aGUgaXRlbVwiXCJcIlxuICBkZXRhaWxzOiBTdHJpbmdcbiAgXCJcIlwiU3BlY2lmaWVzIHdoYXQgZG9jdW1lbnQgLyBpbmZvcm1hdGlvbiBpcyBiZWluZyByZXF1ZXN0ZVwiXCJcIlxuICBuYW1lOiBTdHJpbmchXG4gIFwiXCJcIlJlc3BvbnNlIEl0ZW0gcHJvdmlkaW5nIGluZm9ybWF0aW9uIGZvciB0aGlzIHNwZWNpZmljIFJGSSBJdGVtXCJcIlwiXG4gIHJlc3BvbnNlSXRlbTogUmZpUmVzcG9uc2VJdGVtXG59XG5cbnR5cGUgV2l0aGRyYXdGdW5kc1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHBheW1lbnQ6IERlcG9zaXRzUGF5bWVudCFcbn1cblxudHlwZSBSZXdhcmRzUmVkZW1wdGlvblByb2dyYW0gaW1wbGVtZW50cyBOb2RlIHtcbiAgZGVzY3JpcHRpb246IFN0cmluZyFcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIG5hbWU6IFN0cmluZyFcbiAgcmV3YXJkc1JlZGVtcHRpb25PZmZlcnMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCwgdHlwZTogW1N0cmluZ10pOiBSZXdhcmRzUmVkZW1wdGlvbk9mZmVyQ29ubmVjdGlvblxufVxuXG5lbnVtIFJlY2VpdmFibGVzT2ZmZXJzT2ZmZXJTdGF0dXMge1xuICBDUkVBVEVEXG4gIElOVkFMSURcbiAgTk9OX1BFUkZPUk1BTlRcbiAgUEVORElOR1xuICBTRVRUTEVEXG59XG5cbmlucHV0IEVkaXRQYXltZW50SW5wdXQge1xuICBhbW91bnQ6IEludCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBjb25zdW1lclNldHRpbmdzOiBUcmFuc2FjdGlvbkNvbnN1bWVyU2V0dGluZ3NcbiAgY29udGFjdElkOiBJRFxuICBjb250YWN0VmVyc2lvbjogSW50XG4gIFwiXCJcIlVzZSBjb250YWN0IGlkIGluc3RlYWRcIlwiXCJcbiAgY291bnRlcnBhcnR5SWQ6IElEXG4gIGRlcG9zaXRzQWNjb3VudElkOiBJRCFcbiAgZW5kc0F0OiBUaW1lXG4gIGVuZHNPbjogRGF0ZVxuICBleHRlcm5hbE1lbW86IFN0cmluZ1xuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nIVxuICBtb250aGx5U2NoZWR1bGU6IE1vbnRobHlTY2hlZHVsZVxuICBwYXltZW50SWQ6IElEIVxuICBwYXltZW50SW5zdHJ1bWVudElkOiBJRFxuICBwYXltZW50SW5zdHJ1bWVudFZlcnNpb246IEludFxuICBzZW5kQXQ6IFRpbWVcbiAgc2VuZE9uOiBEYXRlXG4gIHRvdGFsTnVtYmVyT2ZQYXltZW50czogSW50XG4gIHdlZWtseVNjaGVkdWxlOiBXZWVrbHlTY2hlZHVsZVxufVxuXG5pbnB1dCBTdXNwZW5kQ2FyZElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpZDogSUQhXG4gIHN1c3BlbmREZXNjcmlwdGlvbjogU3RyaW5nXG4gIHN1c3BlbmRSZWFzb246IFRlcm1pbmF0aW9uUmVhc29uXG59XG5cbnVuaW9uIENhc2hSZWN1cnJpbmdTY2hlZHVsZUR1cmF0aW9uID0gQ2FzaFJlY3VycmluZ1NjaGVkdWxlRHVyYXRpb25XaXRoRW5kc0F0IHwgQ2FzaFJlY3VycmluZ1NjaGVkdWxlRHVyYXRpb25XaXRoVG90YWxDb3VudFxuXG5cIlwiXCJDb25uZWN0aW9uIE5vZGUgVHlwZSBNb3N0IFJlY2VudCBUcmFuc2FjdGlvbnMgVGlsZVwiXCJcIlxudHlwZSBDYXJkT3ZlcnZpZXdJbnNpZ2h0c1RpbGVDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtDYXJkT3ZlcnZpZXdJbnNpZ2h0c1RpbGVFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbnR5cGUgQ3JlZGl0TWFya2V0aW5nT2ZmZXIgaW1wbGVtZW50cyBOb2RlIHtcbiAgZXhwaXJlc0F0OiBUaW1lXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBpbnNlcnRlZEF0OiBUaW1lIVxuICBsaW1pdDogSW50XG4gIHN0YXR1czogQ3JlZGl0TWFya2V0aW5nT2ZmZXJTdGF0dXMhXG4gIHR5cGU6IENyZWRpdE1hcmtldGluZ09mZmVyVHlwZSFcbn1cblxudHlwZSBDb2JyYW5kaW5nIHtcbiAgZW5hYmxlZDogQm9vbGVhblxuICBmdWxsTmFtZTogU3RyaW5nXG4gIG5hbWU6IFN0cmluZ1xufVxuXG50eXBlIENhcmQgaW1wbGVtZW50cyBOb2RlIEBrZXkoZmllbGRzOiBcImlkXCIpIHtcbiAgY3VzdG9tZXJVc2VySWQ6IElEXG4gIHJlcGxhY2VkQnk6IFJlcGxhY2VkQnlSZWNvcmRcbiAgZXhwaXJhdGlvbjogU3RyaW5nXG4gIGluc3RydW1lbnRUeXBlOiBTdHJpbmdcbiAgc29mdEV4cGlyYXRpb246IFNvZnRFeHBpcmF0aW9uU3VtbWFyeVxuICBza2lwVXNlckxpbWl0OiBCb29sZWFuIEBkZXByZWNhdGVkKHJlYXNvbjogXCJVc2UgaXNfcHJlYXBwcm92ZWQgaW5zdGVhZFwiKVxuICBcIlwiXCJUaGUgZXhwaXJhdGlvbiBkYXRlIGRlcml2ZWQgZnJvbSB0aGUgY2FyZCBleHBpcmF0aW9uLiBDYXJkcyBhbHdheXMgZXhwaXJlIG9uIHRoZSBmaXJzdCBkYXkgb2YgdGhlIG1vbnRoIGZvbGxvd2luZyB0aGUgZXhwaXJhdGlvbiBtb250aFwiXCJcIlxuICBleHBpcmVzQXQ6IFRpbWVcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIG5ldHdvcms6IFN0cmluZ1xuICB1dGlsaXphdGlvbjogRmxvYXRcbiAgaXNzdWVkQXQ6IFRpbWVcbiAgY3Z2OiBTdHJpbmdcbiAgXCJcIlwiTmV0IGFtb3VudCBzcGVudCBieSBjYXJkIHRoaXMgbW9udGhcIlwiXCJcbiAgYW1vdW50U3BlbnQodGltZVdpbmRvd0RheXM6IEludCEpOiBJbnQgQGRlcHJlY2F0ZWQocmVhc29uOiBcIlVzZSBhbW91bnRfc3BlbnRfY3VycmVudF9tb250aCBpbnN0ZWFkXCIpXG4gIHN0YXR1czogU3RyaW5nXG4gIGZpcnN0NjogU3RyaW5nXG4gIGlzUHJlYXBwcm92ZWQ6IEJvb2xlYW5cbiAgc3RhdHVzVmlldzogU3RhdHVzVmlld1xuICBwYW46IFN0cmluZ1xuICBob2xkZXJOYW1lOiBTdHJpbmdcbiAgcmVjdXJyaW5nTWVyY2hhbnRzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBQZXJNZXJjaGFudFN0YXRzQ29ubmVjdGlvblxuICBmdWxmaWxsbWVudFN0YXR1czogU3RyaW5nXG4gIHNoaXBwaW5nQWRkcmVzczogU2hpcHBpbmdBZGRyZXNzXG4gIFwiXCJcIlRoZSBjYXJkIHBpbiBsYXN0IHVwZGF0ZWQgdGltZVwiXCJcIlxuICBwaW5VcGRhdGVkQXQ6IFRpbWVcbiAgYmlsbGluZ0FkZHJlc3M6IEFkZHJlc3NcbiAgaXNSb2xlTG9ja2VkOiBCb29sZWFuXG4gIHVzYWdlOiBJbnRcbiAgcmVwbGFjZXMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IFJlcGxhY2VzUmVjb3JkQ29ubmVjdGlvblxuICBwcm92aWRlckNhcmRQcm9kdWN0SWQ6IFN0cmluZ1xuICB0ZXJtaW5hdGlvblJlYXNvbjogVGVybWluYXRpb25SZWFzb25cbiAgXCJcIlwiTmV0IGFtb3VudCBzcGVudCBieSBjYXJkIGFsbCB0aW1lXCJcIlwiXG4gIGFtb3VudFNwZW50QWxsVGltZTogSW50XG4gIHVzZXI6IFVzZXJcbiAgZGlzcGxheU5hbWU6IFN0cmluZ1xuICBhcHBsaWNhYmxlTGltaXQ6IENhcmRMaW1pdFN1bW1hcnlcbiAgbGltaXQ6IENhcmRMaW1pdFN1bW1hcnlcbiAgXCJcIlwiQ2FyZCBzaGlwbWVudCBkZXRhaWxzXCJcIlwiXG4gIHNoaXBtZW50RGV0YWlsczogQ2FyZFNoaXBtZW50RGV0YWlsc1xuICBjb21wYW55TmFtZTogU3RyaW5nXG4gIFwiXCJcIlRoZSBiYW5rIGlzc3VlclwiXCJcIlxuICBpc3N1ZXI6IElzc3VlclxuICB0eXBlOiBTdHJpbmdcbiAgXCJcIlwiTmV0IGFtb3VudCBzcGVudCBieSBjYXJkIHRoaXMgbW9udGhcIlwiXCJcbiAgYW1vdW50U3BlbnRDdXJyZW50TW9udGg6IEludFxuICBpc0FkbWluTG9ja2VkOiBCb29sZWFuXG4gIHRyYW5zYWN0aW9ucyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogVHJhbnNhY3Rpb25Db25uZWN0aW9uXG4gIGV4cGVuc2VzQ2FyZE1ldGFkYXRhOiBFeHBlbnNlc0NhcmRNZXRhZGF0YVxuICBsYXN0NDogU3RyaW5nXG59XG5cbnR5cGUgRGVwb3NpdHNBY2NvdW50RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IERlcG9zaXRzQWNjb3VudFxufVxuXG5pbnB1dCBEZWxldGVVc2VySW52aXRlSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbn1cblxuZW51bSBIcmlzU3RhdHVzIHtcbiAgRElTQUJMRURcbiAgRU5BQkxFRFxuICBVTkxJTktFRFxufVxuXG50eXBlIENvbGxlY3Rpb24ge1xuICB0eXBlOiBTdHJpbmdcbn1cblxudHlwZSBJbmR1c3RyeVNlYXJjaFJlc3VsdEVudHJ5Q29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbSW5kdXN0cnlTZWFyY2hSZXN1bHRFbnRyeUVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxuaW5wdXQgQ2FyZFBheW1lbnRGb3J3YXJkZXJDb250YWN0SW5wdXQge1xuICBlbWFpbDogU3RyaW5nXG4gIGZpcnN0TmFtZTogU3RyaW5nXG4gIGxhc3ROYW1lOiBTdHJpbmdcbiAgcGhvbmVOdW1iZXI6IFN0cmluZ1xufVxuXG5pbnB1dCBBY3RpdmF0ZUludGVncmF0aW9uSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbn1cblxudHlwZSBJbnZvaWNpbmdJbnZvaWNlQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbSW52b2ljaW5nSW52b2ljZUVkZ2VdXG4gIFwiXCJcIk5leHQgb2Zmc2V0LiBJZiBuZXh0X29mZnNldCA8IHRvdGFsX2NvdW50LCB0aGVyZSBhcmUgYWRkaXRpb25hbCByZXN1bHRzIHRvIHF1ZXJ5LlwiXCJcIlxuICBuZXh0T2Zmc2V0OiBJbnQhXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgXCJcIlwiVG90YWwgY291bnQgb2YgaW52b2ljZXMuXCJcIlwiXG4gIHRvdGFsQ291bnQ6IEludCFcbn1cblxudHlwZSBHZXRPckNyZWF0ZVBheW1lbnRNZXRob2RQYXlsb2FkIHtcbiAgY2FyZElkOiBJRCFcbn1cblxudHlwZSBFeHBlbnNlc1NldHRpbmdDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtFeHBlbnNlc1NldHRpbmdFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cblwiXCJcIkRlZmF1bHQgc2V0IG9mIGludGVncmF0aW9uIGZpZWxkIHR5cGVzXCJcIlwiXG5lbnVtIEludGVncmF0aW9uRmllbGRUeXBlIHtcbiAgQ09EQVRfVFJBQ0tJTkdfQ0FURUdPUllcbiAgTkVUU1VJVEVfQ0xBU1NcbiAgTkVUU1VJVEVfQ1VTVE9NXG4gIE5FVFNVSVRFX0RFUEFSVE1FTlRcbiAgTkVUU1VJVEVfTE9DQVRJT05cbiAgTkVUU1VJVEVfVkVORE9SXG4gIFFVSUNLQk9PS1NfQ0xBU1NcbiAgUVVJQ0tCT09LU19DVVNUT01FUlxuICBRVUlDS0JPT0tTX0xPQ0FUSU9OXG4gIFhFUk9fVFJBQ0tJTkdfQ0FURUdPUllcbn1cblxuXCJcIlwiVGhlIG1ldGFkYXRhIGZvciBhIGhpZ2ggc3BlbmQgdHlwZVwiXCJcIlxudHlwZSBJbnNpZ2h0TWV0YWRhdGFIaWdoU3BlbmQge1xuICBcIlwiXCJUaGUgYXZlcmFnZSBhbW91bnRcIlwiXCJcbiAgYXZlcmFnZTogRmxvYXQhXG4gIFwiXCJcIldoYXQgZG9lcyBzcGVuZCBjb21wYXJlIGFnYWluc3QgLSBlZy4gY29tcGFueSwgZGVwYXJ0bWVudCBhbmQgZXRjXCJcIlwiXG4gIGNvbXBhcmVBZ2FpbnN0OiBTdHJpbmchXG4gIFwiXCJcIlRoZSByZWxldmFudCBlbnRyaWVzIHRoYXQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgc3BlbmQgYWxlcnRcIlwiXCJcbiAgaGlnaFNwZW5kUmVsZXZhbnRFbnRyaWVzOiBbU3RhdGVtZW50RW50cnldXG4gIFwiXCJcIlRoZSBtZWRpYW4gYW1vdW50XCJcIlwiXG4gIG1lZGlhbjogRmxvYXQhXG4gIFwiXCJcIlRoZSBwMjUgcGVyY2VudGlsZVwiXCJcIlxuICBwMjU6IEZsb2F0IVxuICBcIlwiXCJUaGUgcDc1IHBlcmNlbnRpbGVcIlwiXCJcbiAgcDc1OiBGbG9hdCFcbiAgXCJcIlwiVGhlIHBlcmNlbnRpbGUgcmFua1wiXCJcIlxuICBwZXJjZW50aWxlUmFuazogRmxvYXQhXG4gIFwiXCJcIlRoZSB0aHJlc2hvbGQgdGhhdCB0cmlnZ2VycyB0aGlzIGFsZXJ0XCJcIlwiXG4gIHRocmVzaG9sZDogRmxvYXQhXG4gIFwiXCJcIlRoZSB0b3RhbCBhbW91bnQgb24gdGhlIHBvc3RlZCBkYXRlXCJcIlwiXG4gIHRvdGFsQW1vdW50UG9zdGVkRGF0ZTogSW50IVxufVxuXG5pbnB1dCBDYW5jZWxDYXNoVHJhbnNhY3Rpb25JbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaWQ6IElEIVxufVxuXG50eXBlIFJld2FyZHNDYW1wYWlnbkVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBSZXdhcmRzQ2FtcGFpZ25cbn1cblxuZXh0ZW5kIHR5cGUgRXhwZW5zZSBAa2V5KGZpZWxkczogXCJpZFwiKSB7XG4gIFwiXCJcIlRoZSBjYWxjdWxhdGVkIGludGVncmF0aW9uIGxlbnMgZmllbGQgZm9yIHRoaXMgZXhwZW5zZVwiXCJcIlxuICBleHBlbnNlTGVucyhcbiAgICBcIlwiXCJGYWNldCB0eXBlIGZpbHRlclwiXCJcIlxuICAgIGZhY2V0VHlwZTogRmFjZXRUeXBlXG4gICAgaW50ZWdyYXRpb25JZDogSUQhXG4gICAgXCJcIlwiUnVsZSBJRCB0byBiZSBvbWl0dGVkIHdoZSBjb21wdXRpbmcgZXhwZW5zZSBsZW5zLlwiXCJcIlxuICAgIG9taXRSdWxlSWQ6IElEXG4gICAgXCJcIlwiVW5zYXZlZCBydWxlIGJvZHlcIlwiXCJcbiAgICBydWxlQm9keTogSnNvblxuICAgIFwiXCJcIlJ1bGUgSURzIGZpbHRlclwiXCJcIlxuICAgIHJ1bGVJZHM6IFtJRF1cbiAgKTogRXhwZW5zZUxlbnNcbiAgaWQ6IElEISBAZXh0ZXJuYWxcbiAgXCJcIlwiVGhlIHJlY2VpcHRzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGV4cGVuc2VcIlwiXCJcbiAgcmVjZWlwdHMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IFJlY2VpcHRDb25uZWN0aW9uXG59XG5cbnR5cGUgRXhwZW5zZXNGbGFnRXZlbnQgaW1wbGVtZW50cyBOb2RlIHtcbiAgYWN0aW9uOiBFeHBlbnNlc0ZsYWdFdmVudEFjdGlvblxuICBkZXNjcmlwdGlvbjogU3RyaW5nXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBpbnNlcnRlZEF0OiBUaW1lXG59XG5cbmVudW0gSm91cm5hbE9yaWdpbmF0b3JUeXBlIHtcbiAgQklMTElOR19QQVlNRU5UX0lOVEVOVF9BTExPQ0FUSU9OXG4gIENPTExFQ1RfQ09MTEVDVElPTlxuICBQUkVTRU5UX1RSQU5TQUNUSU9OX09QRVJBVElPTlxuICBQUkVTRU5UX1RSQU5TQUNUSU9OX09QRVJBVElPTl9TUExJVF9JVEVNXG4gIFJFQ0VJVkFCTEVTX09GRkVSXG4gIFJFQ0VJVkFCTEVTX09GRkVSX0ZFRVxuICBSRVdBUkRTX1JFREVNUFRJT05fSU5TVEFOQ0Vcbn1cblxuaW5wdXQgUmVmZXJVc2VySW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHRhcmdldEVtYWlsOiBTdHJpbmchXG59XG5cbnR5cGUgVXBkYXRlSW50ZWdyYXRpb25TeW5jU2V0dGluZ3NQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpbnRlZ3JhdGlvbjogSW50ZWdyYXRpb25cbn1cblxudHlwZSBEZXBvc2l0c1RyYW5zYWN0aW9uIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBzbmFwc2hvdCBvZiB0aGUgYmFsYW5jZSBhY3Jvc3MgYWxsIG9mIHRoZSBjdXN0b21lcidzIGRlcG9zaXRzIGFjY291bnRzIGF0IHRoZSB0aW1lIHRoaXMgdHJhbnNhY3Rpb24gd2FzIGFwcGxpZWQuXCJcIlwiXG4gIGFnZ3JlZ2F0ZVNuYXBzaG90QmFsYW5jZTogSW50XG4gIGFtb3VudDogSW50IVxuICBiaWxsOiBCaWxsXG4gIGNhbmNlbGxhdGlvbkluaXRpYXRlZEJ5VXNlcjogVXNlclxuICBcIlwiXCJFbmNvZGVkIENhc2hUcmFuc2FjdGlvbiBJRFwiXCJcIlxuICBjYXNoVHJhbnNhY3Rpb25JZDogSUQhXG4gIGNvdW50ZXJwYXJ0eU5hbWU6IFN0cmluZ1xuICBcIlwiXCJTb3VyY2UgZGVwb3NpdHMgYWNjb3VudFwiXCJcIlxuICBkZXBvc2l0c0FjY291bnQ6IERlcG9zaXRzQWNjb3VudFxuICBcIlwiXCJFbmNvZGVkIHNvdXJjZSBkZXBvc2l0cyBhY2NvdW50IElEXCJcIlwiXG4gIGRlcG9zaXRzQWNjb3VudElkOiBJRCFcbiAgZGVwb3NpdHNQYXltZW50OiBEZXBvc2l0c1BheW1lbnRcbiAgZGVwb3NpdHNUcmFjZUlkOiBTdHJpbmchXG4gIGRldGFpbHM6IERlcG9zaXRzVHJhbnNhY3Rpb25EZXRhaWxzIVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgaXNDYW5jZWxsYWJsZTogQm9vbGVhbiFcbiAgbWVtbzogU3RyaW5nXG4gIHBvc3RlZEF0OiBUaW1lIVxuICByZWN1cnJpbmdQYXltZW50SWQ6IElEXG4gIHNldHRsZWRBdDogVGltZVxuICBzbmFwc2hvdEJhbGFuY2U6IEludFxuICBzdGF0dXM6IFN0YXR1cyFcbiAgdHlwZTogRGVwb3NpdHNUcmFuc2FjdGlvblR5cGUhXG59XG5cbnR5cGUgQ2FzaFRyYW5zYWN0aW9uQXBwcm92YWwge1xuICBkZWNpZGVkQnlVc2VyOiBVc2VyXG4gIGRlY2lzaW9uOiBDYXNoVHJhbnNhY3Rpb25BcHByb3ZhbERlY2lzaW9uIVxuICBcIlwiXCJBbnkgbm90ZXMgdGhlIGFkbWluIHdhbnRzIHRvIGZpbGwgaW4gYSBmcmVlIGZvcm0gZmllbGQgd2hlbiBwcm9jZXNzaW5nIGEgZHJhZnQgcGF5bWVudC5cIlwiXCJcbiAgZGVjaXNpb25Ob3RlczogU3RyaW5nXG4gIGRlY2lzaW9uUmVhc29uOiBDYXNoVHJhbnNhY3Rpb25BcHByb3ZhbERlY2lzaW9uUmVhc29uXG4gIHRyYW5zYWN0aW9uSWQ6IFN0cmluZ1xufVxuXG5lbnVtIENvbnRhY3RUeXBlIHtcbiAgSU5WQUxJRFxuICBJTlZPSUNFUlxuICBQQVlFUlxufVxuXG5lbnVtIE9yZGVyVHlwZSB7XG4gIEFTQ1xuICBERVNDXG59XG5cbnR5cGUgQ3JlYXRlTG9jYXRpb25QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBsb2NhdGlvbjogTG9jYXRpb24hXG59XG5cbmVudW0gRG9jdW1lbnRPY3JTdGF0dXMge1xuICBcIlwiXCJUaGUgZG9jdW1lbnQgaGFzIGZpbmlzaGVkIHByb2Nlc3NpbmcsIGFuZCB0aGUgcmVzdWx0cyBhcmUgYXZhaWxhYmxlLlwiXCJcIlxuICBDT01QTEVURURcbiAgXCJcIlwiVGhlIGRvY3VtZW50IGlzIHN0aWxsIGJlaW5nIHByb2Nlc3NlZC5cIlwiXCJcbiAgUEVORElOR1xufVxuXG5pbnB1dCBVcGRhdGVEZXBvc2l0c0FjY291bnRJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGVwb3NpdHNBY2NvdW50SWQ6IElEIVxuICBuaWNrbmFtZTogU3RyaW5nIVxufVxuXG50eXBlIEZlZHdpcmVQYXJ0aWNpcGFudCBpbXBsZW1lbnRzIE5vZGUge1xuICBjaGFuZ2VEYXRlOiBTdHJpbmdcbiAgY3VzdG9tZXJDaXR5OiBTdHJpbmchXG4gIFwiXCJcIlRoZSBpbnN0aXR1dGlvbidzIGxvZ28gYXMgYSBiYXNlNjQgUE5HLCBpZiBhdmFpbGFibGVcIlwiXCJcbiAgY3VzdG9tZXJMb2dvQmFzZTY0OiBTdHJpbmdcbiAgY3VzdG9tZXJOYW1lOiBTdHJpbmchXG4gIGN1c3RvbWVyU3RhdGU6IFN0cmluZyFcbiAgZnVuZHNFbGlnaWJpbGl0eTogU3RyaW5nIVxuICBmdW5kc1NldHRsZW1lbnRPbmx5U3RhdHVzOiBTdHJpbmdcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIHJvdXRpbmdOdW1iZXI6IFN0cmluZyFcbiAgc2VjdXJpdGllc0VsaWdpYmlsaXR5OiBTdHJpbmchXG4gIHRlbGVncmFwaGljTmFtZTogU3RyaW5nIVxufVxuXG5cIlwiXCJQYWdpbmF0ZWQgcmVmZXJyYWwgcmVjb3Jkc1wiXCJcIlxudHlwZSBSZWZlcnJhbFJlY29yZHNQYWdpbmF0ZWQgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIm5leHQgcGFnZSB0b2tlblwiXCJcIlxuICBuZXh0UGFnZVRva2VuOiBTdHJpbmdcbiAgXCJcIlwibGlzdCBvZiByZWZlcnJhbCByZWNvcmRzXCJcIlwiXG4gIHJlZmVycmFsUmVjb3JkczogW1JlZmVycmFsUmVjb3JkXVxufVxuXG5pbnB1dCBDcmVhdGVGaWxlVXBsb2FkVXJsSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgQmlsbFN5bmNFcnJvckVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBCaWxsU3luY0Vycm9yXG59XG5cbnR5cGUgQ3JlYXRlTWVyY2hhbnREaXNwdXRlUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdHJhbnNhY3Rpb25zOiBbVHJhbnNhY3Rpb24hXSFcbn1cblxudHlwZSBFeHBvcnQgaW1wbGVtZW50cyBOb2RlIHtcbiAgZXJyb3JNZXNzYWdlOiBTdHJpbmdcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIGluc2VydGVkQXQ6IFRpbWUhXG4gIHN0YXR1czogU3RyaW5nIVxufVxuXG50eXBlIENhc2hSZWN1cnJpbmdTY2hlZHVsZVdpdGhUaW1lbGluZXMge1xuICBcIlwiXCJUaGUgcmVjdXJyaW5nIHNjaGVkdWxlIGRlZmluaXRpb25cIlwiXCJcbiAgcmVjdXJyaW5nU2NoZWR1bGU6IENhc2hSZWN1cnJpbmdTY2hlZHVsZSFcbiAgXCJcIlwiVGltZWxpbmVzIGZvciBmdXR1cmUgc2NoZWR1bGVkIHRyYW5zYWN0aW9ucyB0aGF0IHdpbGwgYmUgbWFkZSBieSB0aGlzIHJlY3VycmluZyBzY2hlZHVsZVwiXCJcIlxuICB0aW1lbGluZXM6IFtDYXNoVHJhbnNhY3Rpb25UaW1lbGluZSFdIVxufVxuXG5lbnVtIFBheXJvbGxTb3VyY2Uge1xuICBDQVNIXG4gIEZJTkFOQ0lBTFNcbiAgVVNFUlxufVxuXG50eXBlIFVzZXJDYXRlZ29yeUVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBVc2VyQ2F0ZWdvcnlcbn1cblxuXCJcIlwiXG5TcGxpdCBpdGVtcyBjb3JyZXNwb25kaW5nIHRvIGEgdHJhbnNhY3Rpb24gb3BlcmF0aW9uLlxuXG5UaGVyZSBtYXkgYmUgbXVsdGlwbGUgc3BsaXQgaXRlbXMgaWYsIGZvciBleGFtcGxlLCB0aGUgdHJhbnNhY3Rpb25cbmlzIGZ1bmRlZCBieSBtb3JlIHRoYW4gb25lIHNvdXJjZSAoUmV2ZW51ZSBBY2Nlc3MgcHJvamVjdCkuXG5cIlwiXCJcbnR5cGUgVHJhbnNhY3Rpb25PcGVyYXRpb25TcGxpdEl0ZW0gaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiQW1vdW50IChpbiBjZW50cykgZm9yIHRoaXMgc3BsaXQgaXRlbS5cIlwiXCJcbiAgYW1vdW50Q2VudHM6IEludFxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiUGF5b3V0IHVzZWQgdG8gZnVuZCB0aGlzIHNwbGl0IGl0ZW0gKHJldmVudWUgYWNjZXNzKVwiXCJcIlxuICByZWNlaXZhYmxlc09mZmVyc1BheW91dDogUmVjZWl2YWJsZXNPZmZlcnNQYXlvdXRcbn1cblxudHlwZSBDYW5PZmZib2FyZFJlc3BvbnNlIHtcbiAgZW5hYmxlZDogQm9vbGVhbiFcbiAgaXNzdWVzOiBbRGVwb3NpdHNDbG9zZUFjY291bnRJc3N1ZSFdIVxufVxuXG5cIlwiXCJwYXltZW50IHNvdXJjZSBtYXBwaW5nIGZvciB0aGUgYWNjb3VudFwiXCJcIlxudHlwZSBSZWltYnVyc2VtZW50UGF5bWVudFNvdXJjZSB7XG4gIGZ1bmRpbmdTb3VyY2U6IEZ1bmRpbmdTb3VyY2VcbiAgdXBkYXRlZEJ5OiBTdHJpbmdcbn1cblxudHlwZSBTdW1tYXJ5IHtcbiAgbnVtVmFsaWRNZXRhbDogSW50XG4gIG51bVZhbGlkUGh5c2ljYWw6IEludFxuICBudW1WYWxpZFZpcnR1YWw6IEludFxuICBudW1XYWl0aW5nQWN0aXZhdGlvbjogSW50XG59XG5cblwiXCJcIkJvb2xlYW5zIGV4cHJlc3Npbmcgd2hldGhlciBuYXYgaXRlbXMgc2hvdyBmb3IgdGhlIGN1cnJlbnQgdXNlclwiXCJcIlxudHlwZSBOYXZpZ2F0aW9uIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBzbGljZSBvZiB0aGUgbmF2aWdhdGlvbiBxdWVyeSBvd25lZCBieSBjYXJkXCJcIlwiXG4gIGNhcmQ6IENhcmROYXZpZ2F0aW9uXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxufVxuXG5lbnVtIERlcG9zaXRzQWNjb3VudHNQcmlvcml0eSB7XG4gIElOVkFMSURcbiAgTk9OX1BSSU1BUllcbiAgUFJJTUFSWVxufVxuXG50eXBlIFJld2FyZHNUb3BDYXRlZ29yeUVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBSZXdhcmRzVG9wQ2F0ZWdvcnlcbn1cblxudHlwZSBVbmRlcndyaXRpbmdBbmFseXNpcyBpbXBsZW1lbnRzIE5vZGUge1xuICBmbGFncyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogVW5kZXJ3cml0aW5nQW5hbHlzaXNGbGFnQ29ubmVjdGlvblxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbn1cblxudHlwZSBSZXBsYWNlQ2FyZFdpdGhQaHlzaWNhbFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHJlcGxhY2VkQ2FyZDogQ2FyZFxuICByZXBsYWNlbWVudENhcmQ6IENhcmRcbn1cblxuXCJcIlwiQ2FyZCBzaGlwbWVudCBkZXRhaWxzXCJcIlwiXG50eXBlIENhcmRTaGlwbWVudERldGFpbHMge1xuICBcIlwiXCJFc3RpbWF0ZWQgZGVsaXZlcnkgZGF0ZVwiXCJcIlxuICBlc3RpbWF0ZWREZWxpdmVyeUF0OiBUaW1lIVxufVxuXG51bmlvbiBBcHByb3ZhbHNSZXF1ZXN0TWV0YWRhdGEgPSBBcHByb3ZhbHNSZXF1ZXN0TW9udGhseUxpbWl0T3ZlcnJpZGUgfCBBcHByb3ZhbHNSZXF1ZXN0UHJlYXBwcm92ZWRDYXJkIHwgQXBwcm92YWxzUmVxdWVzdFJlaW1idXJzZW1lbnRcblxudW5pb24gTm90aWZpY2F0aW9uVGlsZSA9IEluc3VmZmljaWVudEZ1bmRzVGlsZSB8IExpbWl0VXRpbGl6YXRpb25UaWxlIHwgU3RhdGVtZW50VXBsb2FkUmVxdWVzdFRpbGVcblxudHlwZSBQcm9jZXNzSW52b2ljZVBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGV4dHJhY3RlZEJpbGxGaWVsZHM6IEV4dHJhY3RlZEJpbGxGaWVsZHMhXG59XG5cbnR5cGUgUmV3YXJkc0FjY3J1YWxFbnRyeSBpbXBsZW1lbnRzIE5vZGUge1xuICBhbW91bnQ6IEludCFcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIHJld2FyZHNUcmlnZ2VyOiBSZXdhcmRzVHJpZ2dlclxufVxuXG50eXBlIFN5bmNJbnRlZ3JhdGlvblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGludGVncmF0aW9uOiBJbnRlZ3JhdGlvblxufVxuXG5lbnVtIEZpbmFuY2lhbFByb2R1Y3RUeXBlIHtcbiAgRUNPTU1FUkNFXG4gIExJRkVTQ0lFTkNFU1xuICBTVEFSVFVQXG59XG5cbmlucHV0IFN1Ym1pdEVhcmx5QWNjZXNzRmVhdHVyZVN1Z2dlc3Rpb25JbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZmVhdHVyZVN1Z2dlc3Rpb25UZXh0OiBTdHJpbmchXG59XG5cbmVudW0gU2VlbkZsYWdLZXkge1xuICBCSUxMU19PTkJPQVJESU5HX0ZJUlNUX0JJTExfQ1JFQVRFRFxuICBPTkJPQVJESU5HX01FRElVTV9SSVNLX1RJRVJfTlVER0VfTU9EQUxfU0VFTlxuICBTUEVORF9SRVBPUlRTX0lOVEVHUkFUSU9OX1VQU0VMTF9ESVNNSVNTRURcbiAgQ09MVU1OX01JR1JBVElPTl9XQUxLVEhST1VHSF9TVEFSVEVEXG4gIFNQRU5EX1BSRU1JVU1fU0VUVElOR1NfU0VFTlxuICBDQVNIX1BBWUNIRVhfUEFZUk9MTF9TRVRVUF9TRUVOXG4gIEVOR0FHRU1FTlRfSE9NRV9TRVRVUF9RVUlDS0JPT0tTX1RBU0tfRElTTUlTU0VEXG4gIFNQRU5EX1JFUVVFU1RTX1NFVFVQX0JBTk5FUl9SRUlNQlVSU0VNRU5UU19TRUVOXG4gIENBU0hfSU5URUdSQVRJT05TX0FOTk9VTkNFTUVOVF9JTlRFUkFDVEVEXG4gIEVOR0FHRU1FTlRfSE9NRV9DUkVBVEVfRVhQRU5TRV9QT0xJQ1lfVEFTS19ESVNNSVNTRURcbiAgU1BFTkRfU0VUVVBfTU9EQUxfU0VFTlxuICBTUEVORF9QUkVNSVVNX0ZPUl9BTExfTU9EQUxfU0VFTlxuICBDQVJEX1BSRUFQUFJPVkVEX0NBUkRfUkVRVUVTVF9BUFBST1ZFX01PREFMX1NFRU5cbiAgT05CT0FSRElOR19NRURJVU1fUklTS19USUVSX09VVENPTUVfTU9EQUxfU0VFTlxuICBQUklNSVRJVkVTX09OQk9BUkRJTkdfSU5URVJBQ1RFRFxuICBSRVdBUkRTX09WRVJWSUVXX1RBQl9JTlRFUkFDVEVEXG4gIEFQUF9TQU5DVElPTlNfUE9TU0lCTFlfSU1QQUNURURfQkFOTkVSX0RJU01JU1NFRFxuICBDQVNIX01VTFRJUExFX0FDQ09VTlRTX1RPT0xUSVBfU0VFTlxuICBTUEVORF9SRVFVRVNUU19BTk5PVU5DRU1FTlRfSU5URVJBQ1RFRFxuICBCSUxMU19VU0VSX0FDQ0VTU19UT09MVElQX0RJU01JU1NFRFxuICBDQVNIX0ZESUNfTU1GX0FMTE9DQVRJT05fTU9EQUxfSU5URVJBQ1RFRFxuICBFTkdBR0VNRU5UX1JPTEVfTkFNRV9CQU5ORVJfU0VFTlxuICBDQVNIX0FEUF9QQVlST0xMX1NFVFVQX1NFRU5cbiAgQ09MVU1OX01JR1JBVElPTl9XQUxLVEhST1VHSF9GSU5JU0hFRFxuICBDQVBJVEFMX0lOU1RBTlRfUEFZT1VUU19UQUJfSU5URVJBQ1RFRFxuICBDQVNIX1JJUFBMSU5HX1BBWVJPTExfU0VUVVBfU0VFTlxuICBCSUxMU19QUkVNSVVNX0dSQU5ERkFUSEVSX0JBTk5FUl9DTE9TRURcbiAgU1BFTkRfUkVRVUVTVFNfUFJFTUlVTV9HUkFOREZBVEhFUl9CQU5ORVJfQ0xPU0VEXG4gIEVOR0FHRU1FTlRfUTRfMjFfUExBVEZPUk1fQUdSRUVNRU5UX1VQREFURURfTU9EQUxfU0VFTlxuICBDQVJEX0VYUElSSU5HX1BIWVNJQ0FMX0NBUkRfTU9EQUxfRElTTUlTU0VEXG4gIEVOR0FHRU1FTlRfVVNFUl9ST0xFX05BTUVfQkFOTkVSX1NFRU5cbiAgQklMTFNfSU5URUdSQVRJT05TX1FCT19BQ0NPVU5UX1NFVF9VUF9CQU5ORVJfRElTTUlTU0VEXG4gIENBU0hfVkVORE9SU19CVUxLX1VQTE9BRF9UT09MVElQX0lOVEVSQUNURURcbiAgQ0FTSF9JTlNJR0hUU19UT09MVElQX0RJU01JU1NFRFxuICBDQVNIX0FDQ09VTlRfQ0xPU0VEX0JBTk5FUl9ESVNNSVNTRURcbiAgU1BFTkRfUkVWSUVXX0VYUEVOU0VTX1RBQl9JTlRFUkFDVEVEXG4gIFJJU0tfUEVSSU9ESUNfUkVWSUVXX0JMT0NLSU5HX0VYUEVSSUVOQ0VfU0VFTlxuICBDQVNIX1dFTENPTUVfTU9EQUxfU0VFTlxuICBFTkdBR0VNRU5UX1E0XzIxX1BMQVRGT1JNX0FHUkVFTUVOVF9VUERBVEVEX01PREFMX0lOVEVSQUNURURcbiAgUFJPRFVDVF9MT0dfVVBEQVRFX1NFRU5cbiAgQ0FQSVRBTF9JTlNUQU5UX1JFVkVOVUVfQU5OT1VOQ0VNRU5UX1NFRU5cbiAgTU9CSUxFX0RPV05MT0FEX1VQU0VMTF9NT0RBTF9TRUVOXG4gIEJJTExTX0RSQUdfQU5EX0RST1BfVE9PTFRJUF9ESVNNSVNTRURcbiAgQ0FSRF9CQU5LX0NPTk5FQ1RJT05TX1NFVFRJTkdfVEFCX1NFRU5cbiAgQ0FTSF9QQVlBQkxFU19UQUJfSU5URVJBQ1RFRFxuICBCSUxMU19JTlRFR1JBVElPTlNfQklMTF9TWU5DX1NFVF9VUF9CQU5ORVJfRElTTUlTU0VEXG4gIFBSSU1JVElWRVNfT05CT0FSRElOR19DT01QTEVURURcbiAgQ0FTSF9RVUlDS0JPT0tTX1BBWVJPTExfU0VUVVBfU0VFTlxuICBVTkRFUldSSVRJTkdfQ1JFRElUX0pPVVJORVlfTElOS19DTElDS0VEXG4gIENBU0hfR1VTVE9fUEFZUk9MTF9TRVRVUF9TRUVOXG4gIEVYUEVOU0VTX1RPT0xLSVRfVEFCX0lOVEVSQUNURURcbiAgQ0FQSVRBTF9JTlNUQU5UX1JFVkVOVUVfU1VNTUFSWV9TVEFUU19IT1dfSVRfV09SS1NfRElTTUlTU0VEXG4gIFNQRU5EX0RJU01JU1NfQ09ORklSTUFUSU9OX01PREFMX0hJREVcbiAgUkVXQVJEU19SRUZFUlJBTFNfV0VMQ09NRV9NT0RBTF9TRUVOXG4gIENBU0hfVFJBTlNBQ1RJT05TX1RPVVJfUFJPTVBUX0lOVEVSQUNURURcbiAgU1BFTkRfQUREX1RPX1NMQUNLX0NMT1NFRFxuICBDQVJEX1BSRUFQUFJPVkVEX0NBUkRfUkVRVUVTVF9ERU5ZX01PREFMX1NFRU5cbiAgQ09MVU1OX01JR1JBVElPTl9CQU5ORVJfRElTTUlTU0VEXG4gIENBU0hfRkJPX01PREFMX0lOVEVSQUNURURcbiAgQklMTFNfT05CT0FSRElOR19NT0RBTF9TRUVOXG4gIFNQRU5EX1JFUVVFU1RTX1NFVFVQX0JBTk5FUl9DQVJEX1JFUVVFU1RTX1NFRU5cbiAgQ0FTSF9JTlRMX1dJUkVfQkFOS19JTkZPX0NIQU5HRURfVE9fSlBNX0lOVEVSQUNURURcbiAgQ0FTSF9WRU5ET1JTX1RBQl9JTlRFUkFDVEVEXG4gIENBU0hfSU5UTF9XSVJFX0FTS19VUERBVEVfSlBNX0NPVU5UUllfQ09ORklHX0lOVEVSQUNURURcbiAgU1BFTkRfUFJFTUlVTV9GT1JfQUxMX1RPT0xUSVBfRElTTUlTU0VEXG4gIENBU0hfSU5TSUdIVFNfU0NFTkFSSU9fUExBTk5JTkdfU0hPV05cbiAgVU5ERVJXUklUSU5HX0NSRURJVF9VUFNFTExfQU5OT1VOQ0VNRU5UX0lOVEVSQUNURURcbiAgQ0FTSF9WRU5ET1JTX0FOTk9VTkNFTUVOVF9JTlRFUkFDVEVEXG4gIENBU0hfRlRVRV9UT1VSX0NPTVBMRVRFRFxuICBDQVNIX0lOU0lHSFRTX0NTQVRfVEFLRU5cbiAgQ0FTSF9NVUxUSVBMRV9BQ0NPVU5UU19JTlRST19TRUVOXG4gIFNQRU5EX1JFUVVFU1RTX1RBQl9JTlRFUkFDVEVEXG4gIENBU0hfSU5TSUdIVFNfU0NFTkFSSU9fUExBTk5JTkdfRVZFTlRTX0NMSUNLRURcbiAgQklMTFNfVEFCX0lOVEVSQUNURURcbiAgQ0FTSF9UUklORVRfUEFZUk9MTF9TRVRVUF9TRUVOXG4gIEJJTExTX0dMT0JBTF9PTkJPQVJESU5HX01PREFMX1NFRU5cbiAgU1BFTkRfQUxFUlRTX09OQk9BUkRJTkdfU0VFTlxuICBDQVNIX0lOU0lHSFRTX1NFRU5cbiAgU1BFTkRfTVVMVElQTEFZRVJfSU5UUk9fTU9EQUxfQ09NUExFVEVEXG4gIEVOR0FHRU1FTlRfSE9NRV9FTkFCTEVfU1BFTkRfUkVRVUVTVFNfVEFTS19ESVNNSVNTRURcbiAgQklMTFNfT05CT0FSRElOR19UT09MVElQX0RJU01JU1NFRFxuICBTUEVORF9SRVZJRVdfUFJFTUlVTV9HUkFOREZBVEhFUl9CQU5ORVJfQ0xPU0VEXG59XG5cblwiXCJcIlxuQWdncmVnYXRlZCBzdW1tYXJ5IGRhdGEgZm9yIGEgbGlzdCBvZiByZWNlaXZhYmxlc19vZmZlcnNfcGF5bWVudF9pbnRlbnQgYWxsb2NhdGlvbnMuXG5XaGVuIHBhZ2luYXRpbmcsIHRoZSBkYXRhIHNob3VsZCByZWZsZWN0IEFMTCBwYXltZW50cywgbm90IGp1c3QgdGhlIG9uZXMgYmVpbmcgZmV0Y2hlZCBpbiB0aGUgY3VycmVudCBwYWdlLlxuXCJcIlwiXG50eXBlIFJlY2VpdmFibGVzT2ZmZXJzUGF5bWVudEludGVudEFsbG9jYXRpb25TdW1tYXJ5IHtcbiAgXCJcIlwiVG90YWwgYWxsb2NhdGlvbiB0b3dhcmRzIENhcmQgY2xlYXJpbmdzXCJcIlwiXG4gIHRvdGFsQ2FyZEFsbG9jYXRpb246IEZpbmFuY2lhbEFzc2V0IVxuICBcIlwiXCJUb3RhbCBhbGxvY2F0aW9uIHRvd2FyZHMgQ2FzaCBBZHZhbmNlcyAoZXhjbHVkaW5nIGZlZSlcIlwiXCJcbiAgdG90YWxDYXNoQWR2YW5jZUFsbG9jYXRpb246IEZpbmFuY2lhbEFzc2V0IVxuICBcIlwiXCJUb3RhbCBhbGxvY2F0aW9uIHRvd2FyZHMgQ2FzaCBBZHZhbmNlIEZlZXMgKENhc2ggQnJlYWtkb3duICsgQ2VudGlwb2ludHMgQnJlYWtkb3duIGluICQkKVwiXCJcIlxuICB0b3RhbENhc2hBZHZhbmNlRmVlQWxsb2NhdGlvbjogRmluYW5jaWFsQXNzZXQhXG4gIFwiXCJcIlRoZSBDYXNoL0FDSCBhbW91bnQgdGhhdCBwYXlzIG9mIHRoZSBUb3RhbCBDYXNoIEFkdmFuY2UgRmVlIEFsbG9jYXRpb25cIlwiXCJcbiAgdG90YWxDYXNoQWR2YW5jZUZlZUFsbG9jYXRpb25DYXNoQnJlYWtkb3duOiBGaW5hbmNpYWxBc3NldCFcbiAgXCJcIlwiVGhlIG51bWJlciBvZiBSZXdhcmRzIFBvaW50cyB0aGF0IHBheXMgb2ZmIHRoZSBUb3RhbCBDYXNoIEFkdmFuY2UgRmVlIEFsbG9jYXRpb25cIlwiXCJcbiAgdG90YWxDYXNoQWR2YW5jZUZlZUFsbG9jYXRpb25Qb2ludHNCcmVha2Rvd246IEludCFcbn1cblxudHlwZSBDcmVhdGVDYXJkVHJhbnNhY3Rpb25JbnNpZ2h0RXZlbnRQYXlsb2FkIHtcbiAgY2FyZFRyYW5zYWN0aW9uSW5zaWdodDogQ2FyZFRyYW5zYWN0aW9uSW5zaWdodFxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbmVudW0gSHJpc1N5bmNTdGF0dXMge1xuICBET05FXG4gIEZBSUxFRFxuICBQVUxMRURfRlJPTV9IUklTXG4gIFBVTExJTkdfRlJPTV9IUklTXG4gIFNZTkNJTkdcbiAgV0FJVElOR1xufVxuXG50eXBlIFJld2FyZHNUb3BDYXRlZ29yeUNvbm5lY3Rpb24ge1xuICBlZGdlczogW1Jld2FyZHNUb3BDYXRlZ29yeUVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxuaW5wdXQgQ29tcGxldGVQYXltZW50QXBwcm92YWxJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGVjaXNpb246IFBheW1lbnRBcHByb3ZhbERlY2lzaW9uIVxuICBkZWNpc2lvbk5vdGVzOiBTdHJpbmdcbiAgZGVjaXNpb25SZWFzb246IFBheW1lbnRBcHByb3ZhbERlY2lzaW9uUmVhc29uXG4gIHBheW1lbnRJZDogSUQhXG59XG5cblwiXCJcIkEgY3ljbGUgcmVvY2N1cnJpbmcgZXZlcnkgbW9udGggb24gdGhlIHNhbWUgZGF5IG9mIHRoZSBtb250aC5cIlwiXCJcbnR5cGUgTW9udGhseUNhcmRTdGF0ZW1lbnRQb2xpY3lDeWNsZSB7XG4gIFwiXCJcIlRoZSBkYXkgb2YgdGhlIG1vbnRoLlwiXCJcIlxuICBkYXlPZk1vbnRoOiBJbnRcbn1cblxudHlwZSBFeHRlcm5hbEludGVncmF0aW9uRmllbGRDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtFeHRlcm5hbEludGVncmF0aW9uRmllbGRFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbmlucHV0IFRvZ2dsZVJ1bGVJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgXCJcIlwiSW50ZWdyYXRpb24gcnVsZSBpZCBmb3IgdGhlIHRvZ2dsZWQgcnVsZVwiXCJcIlxuICBpbnRlZ3JhdGlvblJ1bGVJZDogSUQhXG4gIFwiXCJcIlNvdXJjZSBvYmplY3QgaWQgZm9yIHRoZSB0b2dnbGVkIHJ1bGVcIlwiXCJcbiAgc291cmNlT2JqZWN0SWQ6IElEIVxufVxuXG5pbnB1dCBDcmVhdGVNb250aGx5VXNlckxpbWl0SW5jcmVhc2VJbnB1dCB7XG4gIGFtb3VudDogSW50IVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGN1c3RvbWVyVXNlcklkOiBJRCFcbiAgZW5kc0F0OiBUaW1lIVxufVxuXG50eXBlIFBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmdDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtQb3NpdGl2ZVBheUFjY291bnRTZXR0aW5nRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxuICB0b3RhbENvdW50OiBJbnQhXG59XG5cbnVuaW9uIEluY2VudGl2ZVBsYWNlbWVudFZpZXdEYXRhID0gSW5jZW50aXZlUGxhY2VtZW50Vmlld0RhdGFCYW5uZXIgfCBJbmNlbnRpdmVQbGFjZW1lbnRWaWV3RGF0YUNhc2hBZGRGdW5kc0Zsb3dCYW5uZXIgfCBJbmNlbnRpdmVQbGFjZW1lbnRWaWV3RGF0YUNhc2hCYWxhbmNlVG9vbHRpcCB8IEluY2VudGl2ZVBsYWNlbWVudFZpZXdEYXRhUmV3YXJkc1BhZ2VDaGVja2JveCB8IEluY2VudGl2ZVBsYWNlbWVudFZpZXdEYXRhUmV3YXJkc1BhZ2VTY2FsZSB8IEluY2VudGl2ZVBsYWNlbWVudFZpZXdEYXRhUmV3YXJkc1BhZ2VUaHJlc2hvbGRcblxuZW51bSBDYXJkUmVwbGFjZW1lbnRSZWFzb24ge1xuICBEQU1BR0VEXG4gIEVYUElSQVRJT05cbiAgRlJBVURcbiAgSU5URVJOQUxcbiAgSU5WQUxJRFxuICBMT1NUXG4gIE9USEVSXG59XG5cbmlucHV0IFByb2Nlc3NJbnZvaWNlSW5wdXQge1xuICBhc3NldElkOiBJRCFcbiAgYmlsbElkOiBJRFxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgUmV3YXJkc0NhbXBhaWduQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbUmV3YXJkc0NhbXBhaWduRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG5lbnVtIERlcG9zaXRzQWNjb3VudFN0YXR1c1JlYXNvbiB7XG4gIEFVVE9NQVRFRF9PRkZCT0FSRElOR1xuICBGUkFVRFxuICBNQU5VQUxfT0ZGQk9BUkRJTkdcbiAgUEVORElOR19WRVJJRklDQVRJT05cbiAgUkVPUEVOX1JFVFVSTl9GVU5EU1xuICBUT1NfVklPTEFUSU9OXG4gIFVTRVJfSU5JVElBVEVEXG59XG5cbnR5cGUgVXBkYXRlRGVwb3NpdHNBY2NvdW50UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGVwb3NpdHNBY2NvdW50OiBEZXBvc2l0c0FjY291bnQhXG59XG5cbnNjYWxhciBEYXRlXG5cbnR5cGUgTW9udGhseVVzZXJMaW1pdE92ZXJyaWRlIHtcbiAgYW1vdW50OiBJbnRcbiAgZW5kc0F0OiBUaW1lXG59XG5cbnR5cGUgQ2FzaFJlY3VycmluZ1NjaGVkdWxlIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlxuICBUaGUgZHVyYXRpb24gb2YgdGhlIHJlY3VycmluZyBzY2hlZHVsZVxuICBcbiAgZW5kc19hdFxuICBLZWVwIGNyZWF0aW5nIHRyYW5zYWN0aW9ucyB1bnRpbCB0aGUgYGVuZHNfYXRgIGRhdGVcbiAgXG4gIHRvdGFsX2NvdW50XG4gIEtlZXAgY3JlYXRpbmcgdHJhbnNhY3Rpb25zIHVudGlsIGB0b3RhbF9jb3VudGAgdHJhbnNhY3Rpb25zIGhhdmUgYmVlbiBzY2hlZHVsZWQuXG4gIFdlIG1ha2UgdGhpcyBkaXN0aW5jdGlvbiBiZWNhdXNlIHRyYW5zYWN0aW9ucyBjYW4gYmUgY2FuY2VsbGVkIHdoaWNoIHN0aWxsIGNvdW50IHRvd2FyZHMgdGhlIGB0b3RhbF9jb3VudGAgYW1vdW50XG4gIFwiXCJcIlxuICBkdXJhdGlvbjogQ2FzaFJlY3VycmluZ1NjaGVkdWxlRHVyYXRpb25cbiAgXCJcIlwiQSBodW1hbiByZWFkYWJsZSBzdHJpbmcgZGVzY3JpYmluZyB3aGVuIHRoZSBzY2hlZHVsZSB3aWxsIGVuZC5cIlwiXCJcbiAgZHVyYXRpb25EZXNjcmlwdGlvbjogU3RyaW5nIVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiVGhlIHR5cGUgb2YgcmVjdXJyaW5nIHNjaGVkdWxlLCBkZWZpbmluZyB0aGUgcnVsZXMgZm9yIHRyYW5zYWN0aW9uIHNjaGVkdWxpbmdcIlwiXCJcbiAgdHlwZTogQ2FzaFJlY3VycmluZ1NjaGVkdWxlVHlwZSFcbiAgXCJcIlwiQSBodW1hbiByZWFkYWJsZSBzdHJpbmcgZGVzY3JpYmluZyB0aGUgY2FkZW5jZSBvZiB0aGUgc2NoZWR1bGUuXCJcIlwiXG4gIHR5cGVEZXNjcmlwdGlvbjogU3RyaW5nIVxufVxuXG50eXBlIERhdGVIaXN0b2dyYW1BZ2dyZWdhdGlvbkZpZWxkIHtcbiAgY291bnQ6IEludCFcbiAgZGF0ZTogSW50IVxuICBzdW06IEZsb2F0XG59XG5cbnR5cGUgUHJvY2Vzc1BhZ2VWaWV3UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgc3VjY2VzczogQm9vbGVhblxufVxuXG50eXBlIENvdW50cnlBZGRyZXNzTWV0YWRhdGEge1xuICBcIlwiXCJUaGUgcmVndWxhciBleHByZXNzaW9uIGNvcnJlc3BvbmRpbmcgdG8gYWxsIHBvIGJveCBmb3JtYXRzIGluIHRoZSBjb3VudHJ5XCJcIlwiXG4gIHBvQm94UmVnZXg6IFN0cmluZ1xuICBcIlwiXCJUaGUgcmVndWxhciBleHByZXNzaW9uIGNvcnJlc3BvbmRpbmcgdG8gYWxsIHBvc3RhbCBjb2RlcyBpbiB0aGUgY291bnRyeVwiXCJcIlxuICBwb3N0YWxDb2RlUmVnZXg6IFN0cmluZ1xuICBcIlwiXCJUaGUgdGVybSB1c2VkIHRvIGRlc2NyaWJlIHRoZSBjb3VudHJ5J3Mgc3VicmVnaW9ucyAoZXguIHN0YXRlLCBwcm92aW5jZSwgZXRjLilcIlwiXCJcbiAgc3VicmVnaW9uTGFiZWw6IFN0cmluZyFcbiAgXCJcIlwiVGhlIGxpc3Qgb2YgcHJvdmluY2VzL3N0YXRlc1wiXCJcIlxuICBzdWJyZWdpb25zOiBbU3VicmVnaW9uIV1cbn1cblxudHlwZSBQcm9ncmFtTWVtYmVyc2hpcCBpbXBsZW1lbnRzIE5vZGUge1xuICBmaXJzdE5hbWU6IFN0cmluZ1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgbGFzdE5hbWU6IFN0cmluZ1xuICBsb3lhbHR5UHJvZ3JhbTogTG95YWx0eVByb2dyYW1cbiAgbWVtYmVyc2hpcElkOiBTdHJpbmdcbn1cblxudHlwZSBOZXRzdWl0ZURlcGFydG1lbnQge1xuICBpc0luYWN0aXZlOiBCb29sZWFuXG4gIG5hbWU6IFN0cmluZ1xufVxuXG50eXBlIENhcmRDb2xsZWN0aW9uRGV0YWlscyB7XG4gIGNvbGxlY3Rpb25BdHRlbXB0OiBDb2xsZWN0aW9uQXR0ZW1wdCFcbiAgY29sbGVjdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgU2V0UmVjZWl2YWJsZXNPZmZlcnNTZWxsZXJBY2NvdW50Q29uZmlybWVkUGF5b3V0c1JvdXRlZFRvQnJleFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHNlbGxlckFjY291bnQ6IFJlY2VpdmFibGVzT2ZmZXJzU2VsbGVyQWNjb3VudFxufVxuXG5pbnB1dCBDcmVhdGVQcmVtaXVtU2V0dGluZ0V2ZW50SW5wdXQge1xuICBhY3Rpb246IFByZW1pdW1TZXR0aW5nRXZlbnRBY3Rpb24hXG4gIGNhbXBhaWduOiBTdHJpbmdcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBwcmljaW5nU2NoZW1lOiBQcmVtaXVtU2V0dGluZ1ByaWNpbmdTY2hlbWUhXG59XG5cblwiXCJcIkEgaW50ZWdyYXRpb24gZmllbGQgaXMgYSBtYXBwaW5nIGZyb20gYW4gaW50ZWdyYXRpb24gZmllbGQgdG8gYW4gaW50ZWdyYXRpb24gZW50aXR5LlwiXCJcIlxudHlwZSBJbnRlZ3JhdGlvbkZpZWxkIGltcGxlbWVudHMgTm9kZSB7XG4gIGV4dGVybmFsSW50ZWdyYXRpb25FbnRpdHk6IEV4dGVybmFsSW50ZWdyYXRpb25FbnRpdHlcbiAgZXh0ZXJuYWxJbnRlZ3JhdGlvbkZpZWxkOiBFeHRlcm5hbEludGVncmF0aW9uRmllbGRcbiAgZmllbGRJZDogU3RyaW5nXG4gIGZpZWxkVmFsdWU6IFN0cmluZ1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbn1cblxudHlwZSBBcHByb3ZhbHNSZXZpZXcgaW1wbGVtZW50cyBOb2RlIHtcbiAgYXNzaWduZWVzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBBcHByb3ZhbHNSZXZpZXdBc3NpZ25lZUNvbm5lY3Rpb25cbiAgZGVzY3JpcHRpb246IFN0cmluZ1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgaW5zZXJ0ZWRBdDogVGltZVxuICByZXF1ZXN0OiBBcHByb3ZhbHNSZXF1ZXN0XG4gIHJldmlld2VkQXQ6IFRpbWVcbiAgcmV2aWV3ZWRCeTogQXBwcm92YWxzVXNlclxuICBzdGF0dXM6IEFwcHJvdmFsc1Jldmlld1N0YXR1c1xufVxuXG50eXBlIFN1YnJlZ2lvbiB7XG4gIFwiXCJcIklTTyAzMTY2LTEgYWxwaGEtMiByZXByZXNlbnRhdGlvbiBvZiBhIHByb3ZpbmNlL3N0YXRlIChleC4gJ0FMJyBmb3IgQWxhYmFtYSlcIlwiXCJcbiAgYWxwaGEyOiBTdHJpbmchXG4gIFwiXCJcIk5hbWUgb2YgdGhlIHByb3ZpbmNlL3N0YXRlXCJcIlwiXG4gIG5hbWU6IFN0cmluZyFcbn1cblxuZW51bSBDYXNoSW50ZW5zaXZlTWF4Q2FzaEhhbmRsZWQge1xuICBJTlZBTElEXG4gIExFU1NfVEhBTl8xMDAwS1xuICBMRVNTX1RIQU5fMjAwMEtcbiAgTEVTU19USEFOXzUwMEtcbiAgTU9SRV9USEFOXzIwMDBLXG4gIE5PX0NBU0hcbn1cblxuZW51bSBTdGF0dXNSZWFzb24ge1xuICBBQ0NPVU5UX0NMT1NFRFxuICBBQ0NPVU5UX05PVF9GT1VORFxuICBBQ0hfREVCSVRfQ0FQQUJJTElUWV9SRVZPS0VEXG4gIEFETUlOX0RFTklFRF9BUFBST1ZBTFxuICBCTE9DS0VEX0JZX1BPU0lUSVZFX1BBWVxuICBDVVNUT01FUl9FRElURURcbiAgRkFJTEVEX1ZFUklGSUNBVElPTlxuICBJTlNVRkZJQ0lFTlRfRlVORFNcbiAgTUlTU0VEX1NFTkRfT05cbiAgVVNFUl9DQU5DRUxMRURcbn1cblxuXCJcIlwiXG5SZXByZXNlbnRzIGFuIHVwZGF0ZWQgbW9kZWwgZm9yIHBheXJvbGwgcHJvdmlkZXIgc3VwcG9ydGVkIGJ5IHRoZSBwYXlyb2xsIHYyIHNlcnZpY2UgbWlncmF0aW9uLiBXaGVuIHRoZSBtaWdyYXRpb24gaXMgY29tcGxldGUsIHRoZSBvcmlnaW5hbFxucGF5cm9sbF9wcm92aWRlciBvYmplY3Qgd2lsbCBiZSBkZXByZWNhdGVkIGFuZCByZW1vdmVkXG5cIlwiXCJcbnR5cGUgUGF5cm9sbFByb3ZpZGVyVjIge1xuICBcIlwiXCJcbiAgVGhlIGFjY291bnQgaWQgb2YgdGhlIGZ1bmRpbmcgc291cmNlIGZvciBwYXlyb2xsLlxuICBUaGVyZSBhcmUgdGhyZWUgb3B0aW9uczogYSBCcmV4IGRlcG9zaXRzIGFjY291bnQsIGEgY29uZmlybWVkIGV4dGVybmFsIGluc3RpdHV0aW9uLCBvciBhIGRldGVjdGVkIGZpbmFuY2lhbCBhY2NvdW50XG4gIFwiXCJcIlxuICBmdW5kaW5nU291cmNlOiBQYXlyb2xsUHJvdmlkZXJGdW5kaW5nU291cmNlIVxuICBcIlwiXCJSZXByZXNlbnRzIGEgc2luZ2xlIGludGVncmF0aW9uIHdpdGggdGhlIHBheXJvbGwgcHJvdmlkZXJcIlwiXCJcbiAgaW50ZWdyYXRpb246IFBheXJvbGxQcm92aWRlckludGVncmF0aW9uXG4gIFwiXCJcIkEgdHlwZS1zYWZlIGVudW0gdG8gcmVwcmVzZW50IGEgcGF5cm9sbCBwcm92aWRlclwiXCJcIlxuICB0eXBlOiBQYXlyb2xsUHJvdmlkZXJUeXBlIVxufVxuXG50eXBlIExpbWl0UHJldmlldyB7XG4gIGFtb3VudDogSW50IVxuICBjYXJkQWNjb3VudFR5cGU6IENhcmRBY2NvdW50VHlwZSFcbiAgaXNNYXhMaW1pdDogQm9vbGVhbiFcbn1cblxudHlwZSBBY2hSZWNlaXZpbmdNZXRob2Qge1xuICBhY2NvdW50TnVtYmVyOiBTdHJpbmdcbiAgYmVuZWZpY2lhcnlOYW1lOiBTdHJpbmdcbiAgcm91dGluZ051bWJlcjogU3RyaW5nXG59XG5cbnR5cGUgSW5jZW50aXZlUGxhY2VtZW50Vmlld0RhdGFFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogSW5jZW50aXZlUGxhY2VtZW50Vmlld0RhdGFcbn1cblxuaW5wdXQgRXhwZW5zZXNSdWxlSW5wdXQge1xuICBpZDogSURcbiAgbWF0Y2hlckpzb246IFN0cmluZyFcbiAgbmFtZTogU3RyaW5nIVxuICBzdGF0dXM6IEV4cGVuc2VzUnVsZVN0YXR1c1xuICB0eXBlOiBFeHBlbnNlc1J1bGVUeXBlXG59XG5cbnR5cGUgRWRpdEludm9pY2VQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpbnZvaWNlOiBJbnZvaWNpbmdJbnZvaWNlXG59XG5cbmlucHV0IEFkZEZzcEJvb2trZWVwZXJJbnB1dCB7XG4gIGJvb2trZWVwZXJBY2NvdW50SWQ6IFN0cmluZyFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIENhcmRUcmFuc2FjdGlvbkluc2lnaHRDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtDYXJkVHJhbnNhY3Rpb25JbnNpZ2h0RWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxuICBcIlwiXCJUaGUgdG90YWwgbnVtYmVyIG9mIHNwZW5kIGFsZXJ0c1wiXCJcIlxuICB0b3RhbENvdW50KGN1c3RvbWVyVXNlcklkczogW0lEXSwgZGVwYXJ0bWVudElkczogW0lEXSwgZnJvbURhdGU6IFRpbWUsIGluc2lnaHRUeXBlczogW0NhcmRUcmFuc2FjdGlvbnNJbnNpZ2h0VHlwZV0sIG1lcmNoYW50SWRzOiBbSURdLCBzZWFyY2hUZXh0OiBTdHJpbmcsIHN0YXR1czogSW5zaWdodFN0YXR1cywgdG9EYXRlOiBUaW1lKTogSW50IVxuICBcIlwiXCJUaGUgdG90YWwgc3BlbmQgYW1vdW50IGZvciB0aGUgYWxlcnRcIlwiXCJcbiAgdG90YWxTcGVuZEFtb3VudChjdXN0b21lclVzZXJJZHM6IFtJRF0sIGRlcGFydG1lbnRJZHM6IFtJRF0sIGZyb21EYXRlOiBUaW1lLCBpbnNpZ2h0VHlwZXM6IFtDYXJkVHJhbnNhY3Rpb25zSW5zaWdodFR5cGVdLCBtZXJjaGFudElkczogW0lEXSwgc2VhcmNoVGV4dDogU3RyaW5nLCBzdGF0dXM6IEluc2lnaHRTdGF0dXMsIHRvRGF0ZTogVGltZSk6IEludCFcbn1cblxuZW51bSBQYXlyb2xsUHJvdmlkZXJJbnRlZ3JhdGlvblN0YXR1cyB7XG4gIENPTk5FQ1RFRFxuICBESVNDT05ORUNURURcbiAgSU5WQUxJRFxuICBQUk9DRVNTSU5HXG59XG5cbnR5cGUgUmV3YXJkc1RyaWdnZXJDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtSZXdhcmRzVHJpZ2dlckVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxuaW5wdXQgQ3JlYXRlTWlsZXNUcmFuc2ZlcklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBsb3lhbHR5UHJvZ3JhbUlkOiBTdHJpbmchXG4gIG1pbGVzQW1vdW50OiBJbnQhXG4gIHBvaW50c0Ftb3VudDogSW50IVxuICBwcm9ncmFtTWVtYmVyc2hpcDogUHJvZ3JhbU1lbWJlcnNoaXBQYXlsb2FkIVxuICByZWRlbXB0aW9uT2ZmZXJJZDogU3RyaW5nIVxuICB0b0N1c3RvbWVyVXNlcklkOiBTdHJpbmchXG59XG5cbnR5cGUgQ2FyZE92ZXJ2aWV3SW5zaWdodHNUaWxlRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIFwiXCJcIk1vc3QgUmVjZW50IFRyYW5zYWN0aW9ucyBUaWxlIE5vZGVcIlwiXCJcbiAgbm9kZTogQ2FyZE92ZXJ2aWV3SW5zaWdodHNUaWxlXG59XG5cbnR5cGUgQ2FzaFRyYW5zYWN0aW9uSW50cmFDdWFjY0Jvb2tUcmFuc2ZlckRldGFpbHMge1xuICBcIlwiXCJUaGUgc2VuZGVyIGFjY291bnRcIlwiXCJcbiAgc291cmNlRGVwb3NpdHNBY2NvdW50OiBEZXBvc2l0c0FjY291bnRcbiAgXCJcIlwiVGhlIHJlY2lwaWVudCBhY2NvdW50XCJcIlwiXG4gIHRhcmdldERlcG9zaXRzQWNjb3VudDogRGVwb3NpdHNBY2NvdW50XG59XG5cbmlucHV0IERlbGV0ZVJlY2VpcHRJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaWQ6IElEIVxufVxuXG50eXBlIENoYW5uZWwgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbnMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IE5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNvbm5lY3Rpb25cbiAgb3B0aW9uczogQ2hhbm5lbE9wdGlvbnNcbiAgc3RhdHVzOiBDaGFubmVsU3RhdHVzXG59XG5cbmVudW0gSW5jZW50aXZlUGxhY2VtZW50Vmlld0RhdGFTdGF0dXMge1xuICBBQ1RJVkVcbiAgQ09NUExFVEVEXG4gIEVYUElSRURcbiAgSU5WQUxJRFxuICBQRU5ESU5HXG59XG5cbmlucHV0IEFjY2VwdERldkFjY2Vzc0FncmVlbWVudElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIENyZWF0ZUNhcmRUcmFuc2FjdGlvbkluc2lnaHRNdXRpbmdQb2xpY3lQYXlsb2FkIHtcbiAgY2FyZFRyYW5zYWN0aW9uSW5zaWdodE11dGluZ1BvbGljaWVzOiBbQ2FyZFRyYW5zYWN0aW9uSW5zaWdodE11dGluZ1BvbGljeV1cbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5pbnB1dCBVcGRhdGVBcHByb3ZhbHNSZXZpZXdzSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgcmVxdWVzdFNuYXBzaG90czogW0FwcHJvdmFsc1JlcXVlc3RJbnB1dF1cbiAgcmV2aWV3SWRzOiBbSUQhXSFcbiAgc3RhdHVzOiBBcHByb3ZhbHNSZXZpZXdTdGF0dXMhXG59XG5cbnR5cGUgUGF5bWVudEVhcmx5QXV0aEJhbGFuY2VEZWNyZWFzZUNvbW1pdG1lbnQgaW1wbGVtZW50cyBOb2RlIHtcbiAgZXhwaXJlc0F0OiBUaW1lIVxuICBmdW5kaW5nU291cmNlQ29tbWl0bWVudHM6IFtQYXltZW50RnVuZGluZ1NvdXJjZUJhbGFuY2VEZWNyZWFzZUNvbW1pdG1lbnQhXSFcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG59XG5cbnR5cGUgUnVsZUNvbm5lY3Rpb24ge1xuICBlZGdlczogW1J1bGVFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbnR5cGUgQ3JlYXRlRGVwYXJ0bWVudFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRlcGFydG1lbnQ6IERlcGFydG1lbnQhXG59XG5cbnR5cGUgSW52b2ljaW5nSW52b2ljZUVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBJbnZvaWNpbmdJbnZvaWNlXG59XG5cbnR5cGUgTm90aWZ5QWxsVXNlcnNBcHByb3ZhbHNFbmFibGVkUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBTZXRSZWNlaXZhYmxlc09mZmVyc1NlbGxlckFjY291bnRIYXNTZWVuRmFpbGluZ0NoZWNrc0Vycm9yQmFubmVyUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgc2VsbGVyQWNjb3VudDogUmVjZWl2YWJsZXNPZmZlcnNTZWxsZXJBY2NvdW50XG59XG5cblwiXCJcIkFwcGxpY2F0aW9ucyB3aGljaCBiZWxvbmcgdG8gYSBzcGVjaWZpYyB1c2VyLCByYXRoZXIgdGhhbiBhbiBhY2NvdW50XCJcIlwiXG5lbnVtIFVzZXJPbmJvYXJkaW5nQmx1ZXByaW50VHlwZSB7XG4gIFwiXCJcIkFwcGxpY2F0aW9ucyB0byBjaGFuZ2UgdGhlIHVzZXIncyBjYXNoIHJvbGVcIlwiXCJcbiAgQ0hBTkdFX1JPTEVcbiAgXCJcIlwiT25ib2FyZGluZyBmbG93cyB0byBzZXQgdXAgYSB1c2VyJ3MgYWNjb3VudFwiXCJcIlxuICBVU0VSX1NFVFVQXG59XG5cbnR5cGUgQWNjZXB0TXVsdGlwbGVSZWNlaXZhYmxlc09mZmVyc0dyb3Vwc1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIG9mZmVyc0dyb3VwczogW1JlY2VpdmFibGVzT2ZmZXJzT2ZmZXJzR3JvdXAhXSFcbn1cblxudHlwZSBTdGF0ZW1lbnRVcGxvYWRSZXF1ZXN0VGlsZSBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJTdGF0ZW1lbnQgdXBsb2FkIHJlcXVlc3QgZHVlIGRhdGUgaW4gVVRDIHRpbWUuXCJcIlwiXG4gIGR1ZURhdGU6IFRpbWUhXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxufVxuXG5pbnB1dCBHZXRSZmlJbnB1dCB7XG4gIHR5cGU6IEdldFJmaUlucHV0VHlwZSFcbiAgdmFsdWU6IFN0cmluZyFcbn1cblxudHlwZSBDYXNoVHJhbnNhY3Rpb25JbnRlcm5hdGlvbmFsV2lyZVJldHVybkRldGFpbHMge1xuICBcIlwiXCJEZXRhaWxzIGZyb20gdGhlIHRyYW5zYWN0aW9uIHRoaXMgcmV0dXJuIHdhcyBmb3JcIlwiXCJcbiAgb3JpZ2luYWxEZXRhaWxzOiBDYXNoVHJhbnNhY3Rpb25JbnRlcm5hdGlvbmFsV2lyZURldGFpbHMhXG4gIFwiXCJcIlRoZSByZWFzb24gd2h5IHRoZSBvcmlnaW5hbCB0cmFuc2FjdGlvbiB3YXMgcmV0dXJuZWRcIlwiXCJcbiAgcmV0dXJuUmVhc29uOiBDYXNoVHJhbnNhY3Rpb25XaXJlUmV0dXJuUmVhc29uIVxufVxuXG50eXBlIERlbGV0ZVVzZXJJbnZpdGVQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIENyZWF0ZUNhc2hXaXJlRGV0YWlsc1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHJlcG9ydDogUmVwb3J0IVxufVxuXG50eXBlIEN1cnJlbnRCYWxhbmNlUGF5bWVudERldGFpbHMge1xuICBcIlwiXCJTdW0gb2YgYWxsIHBvc3RlZCBiYWxhbmNlIGFmZmVjdGluZyBlbnRyaWVzIGZvciB0aGUgY3VzdG9tZXIgbWludXMgdGhlIGFtb3VudCBhbHJlYWR5IHJlcXVlc3RlZC5cIlwiXCJcbiAgYmFsYW5jZVVzZENlbnRzOiBJbnQhXG4gIFwiXCJcIlRpbWUgdGhpcyBwYXltZW50IHdpbGwgYmUgcHJvY2Vzc2VkXCJcIlwiXG4gIHByb2Nlc3NpbmdUaW1lOiBUaW1lIVxufVxuXG50eXBlIENEYVBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIG9uYm9hcmRpbmdBcHBsaWNhdGlvbjogT25ib2FyZGluZ0FwcGxpY2F0aW9uIVxufVxuXG5cIlwiXCJVbmV4cG9ydGVkIGV4cGVuc2UgY291bnQuXCJcIlwiXG50eXBlIFVuZXhwb3J0ZWRFeHBlbnNlQ291bnQge1xuICBcIlwiXCJUaGUgcmVzdWx0IGluIGludGVnZXIuXCJcIlwiXG4gIGNvdW50OiBJbnRcbn1cblxuaW5wdXQgRWZ0UmVjZWl2aW5nTWV0aG9kSW5wdXQge1xuICBhY2NvdW50TnVtYmVyOiBTdHJpbmdcbiAgYmVuZWZpY2lhcnlOYW1lOiBTdHJpbmdcbiAgcm91dGluZ051bWJlcjogU3RyaW5nXG59XG5cbmlucHV0IFJlZGVlbUZvckJhbGFuY2VJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZXhwZWN0ZWRCYWxhbmNlQW1vdW50Q2VudHM6IEludCFcbiAgaWRlbXBvdGVuY3lLZXk6IFN0cmluZyFcbiAgcG9pbnRzVG9SZWRlZW06IEludCFcbiAgcmVkZW1wdGlvbk9mZmVySWQ6IElEIVxuICB0YXJnZXREZXBvc2l0c0FjY291bnRJZDogSUQhXG59XG5cbnR5cGUgSW52b2ljaW5nSW52b2ljZSBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJDcmVhdG9yIG9mIHRoZSBpbnZvaWNlLlwiXCJcIlxuICBjcmVhdGVkQnk6IFN0cmluZyFcbiAgXCJcIlwiRGlzY291bnQgYW1vdW50IG9mIHRoZSBpbnZvaWNlLiBJZiBhbnksIHRoaXMgaXMgYXBwbGllZCB0byBzdWJ0b3RhbCB0byBjYWxjdWxhdGUgdGhlIHRvdGFsX2Ftb3VudC5cIlwiXCJcbiAgZGlzY291bnRBbW91bnQ6IEZpbmFuY2lhbEFzc2V0XG4gIFwiXCJcIkRpc2NvdW50IHBlcmNlbnQgb2YgdGhlIGludm9pY2UuIElmIGFueSwgdGhpcyBpcyBhcHBsaWVkIHRvIHN1YnRvdGFsIHRvIGNhbGN1bGF0ZSB0aGUgdG90YWxfYW1vdW50LiBcIlwiXCJcbiAgZGlzY291bnRQZXJjZW50OiBGbG9hdFxuICBcIlwiXCJEdWUgZGF0ZSBvZiB0aGUgaW52b2ljZVwiXCJcIlxuICBkdWVEYXRlOiBEYXRlXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJJZGVtcG90ZW5jeSBrZXkuXCJcIlwiXG4gIGlkZW1wb3RlbmN5S2V5OiBTdHJpbmchXG4gIFwiXCJcIlRoZSBpbnZvaWNlIG51bWJlci5cIlwiXCJcbiAgaW52b2ljZU51bWJlcjogU3RyaW5nIVxuICBcIlwiXCJUaGUgaW52b2ljaW5nIGFjY291bnQgSUQgb2YgdGhlIGludm9pY2UuXCJcIlwiXG4gIGludm9pY2luZ0FjY291bnRJZDogU3RyaW5nIVxuICBcIlwiXCJJc3N1ZWQgZGF0ZSBvZiB0aGUgaW52b2ljZVwiXCJcIlxuICBpc3N1ZWREYXRlOiBEYXRlXG4gIFwiXCJcIkludm9pY2UgbGluZSBpdGVtcy5cIlwiXCJcbiAgbGluZUl0ZW1zOiBbSW52b2ljZUxpbmVJdGVtXVxuICBcIlwiXCJUaGUgbWVtbyBvZiB0aGUgaW52b2ljZS5cIlwiXCJcbiAgbWVtbzogU3RyaW5nXG4gIFwiXCJcIlBheWVyIGNvbnRhY3RcIlwiXCJcbiAgcGF5ZXI6IEludm9pY2luZ0NvbnRhY3RcbiAgXCJcIlwiVGhlIHBheW1lbnQgdGVybXMgb2YgdGhlIGludm9pY2UuXCJcIlwiXG4gIHBheW1lbnRUZXJtczogU3RyaW5nXG4gIFwiXCJcIlRoZSBzdGF0dXMgb2YgdGhlIGludm9pY2UuXCJcIlwiXG4gIHN0YXR1czogSW52b2ljZVN0YXR1cyFcbiAgXCJcIlwiQSBsaXN0IG9mIHN0YXR1cyBjaGFuZ2UgbG9ncy5cIlwiXCJcbiAgc3RhdHVzTG9nczogW0ludm9pY2VTdGF0dXNMb2ddXG4gIFwiXCJcIlN1YnRvdGFsIG9mIHRoZSBpbnZvaWNlLiBUaGlzIGlzIHRoZSBhbW91bnQgYmVmb3JlIGFueSBkaXNjb3VudCBpcyBhcHBsaWVkLlwiXCJcIlxuICBzdWJ0b3RhbDogRmluYW5jaWFsQXNzZXRcbiAgXCJcIlwiSW52b2ljZSB0ZW1wbGF0ZS5cIlwiXCJcbiAgdGVtcGxhdGU6IEludm9pY2VUZW1wbGF0ZVxuICBcIlwiXCJUaGUgdGl0bGUgb2YgdGhlIGludm9pY2UuXCJcIlwiXG4gIHRpdGxlOiBTdHJpbmdcbiAgXCJcIlwiVGhlIHRvdGFsIGFtb3VudCBvZiB0aGUgaW52b2ljZS4gVGhpcyBpcyB0aGUgZmluYWwgYW1vdW50IGFmdGVyIGFueSBkaXNjb3VudCBpcyBhcHBsaWVkLlwiXCJcIlxuICB0b3RhbEFtb3VudDogRmluYW5jaWFsQXNzZXRcbiAgXCJcIlwiTGFzdCB1cGRhdG9yIG9mIHRoZSBpbnZvaWNlLlwiXCJcIlxuICB1cGRhdGVkQnk6IFN0cmluZyFcbn1cblxudHlwZSBPcHRJbnRvSW5jZW50aXZlQ2FtcGFpZ25QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIEZpbmFuY2lhbFNvdXJjZUVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBGaW5hbmNpYWxTb3VyY2Vcbn1cblxudHlwZSBQdWxsRGF0YUFzeW5jUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdXBkYXRlZFNvdXJjZTogRmluYW5jaWFsU291cmNlXG59XG5cbmVudW0gRXhwZW5zZXNSdWxlU3RhdHVzIHtcbiAgQUNUSVZFXG4gIERJU0FCTEVEXG59XG5cblwiXCJcIlJlcHJlc2VudGluZyB0aGUgZGVmYXVsdCBlcnAgY2F0ZWdvcnkgZm9yIGEgZ2l2ZW4gY29udGFjdCBhbmQgaW50ZWdyYXRpb25cIlwiXCJcbnR5cGUgQ29udGFjdERlZmF1bHRFcnBDYXRlZ29yeSB7XG4gIFwiXCJcIkludGVncmF0aW9uIHRoYXQgdGhlIGVudHJ5IGlzIGZvclwiXCJcIlxuICBpbnRlZ3JhdGlvbjogSW50ZWdyYXRpb24hXG4gIFwiXCJcIlVzZXIgY2F0ZWdvcnkgdGhlIGVudHJ5IGlzIGZvclwiXCJcIlxuICB1c2VyQ2F0ZWdvcnk6IFVzZXJDYXRlZ29yeSFcbn1cblxudHlwZSBSZWZ1bmRUcmFuc2FjdGlvblBheWxvYWQge1xuICByZWRlbXB0aW9uUmF0ZTogRmxvYXQhXG59XG5cbnR5cGUgQ3JlYXRlRXhwZW5zZXNJdGVtRXZlbnRQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBleHBlbnNlc0l0ZW1FdmVudDogRXhwZW5zZXNJdGVtRXZlbnRcbn1cblxudHlwZSBEZXBvc2l0c0FjY291bnQgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiV2hldGhlciBmdW5kcyBjYW4gYmUgd2l0aGRyYXduIGR1cmluZyB0aGUgYWNjb3VudCBjbG9zdXJlIHByb2Nlc3NcIlwiXCJcbiAgY2FuV2l0aGRyYXdGdW5kczogQ2FuV2l0aGRyYXdGdW5kc1Jlc3BvbnNlXG4gIG5hbWU6IFN0cmluZyFcbiAgYmFsYW5jZTogSW50IVxuICBcIlwiXCJEZXByZWNhdGVkLiBVc2UgY2FzaFRyYW5zYWN0aW9ucygpIGZpZWxkIGluc3RlYWQuXCJcIlwiXG4gIHBheW1lbnRzKGFmdGVyOiBTdHJpbmcsIGFzc29jaWF0aW9uQ3JpdGVyaWE6IEFzc29jaWF0aW9uQ3JpdGVyaWEsIGJlZm9yZTogU3RyaW5nLCBlbmRUaW1lOiBUaW1lLCBmaXJzdDogSW50LCBsYXN0OiBJbnQsIG9ubHlTaG93UmVjdXJyaW5nUGF5bWVudHM6IEJvb2xlYW4sIHN0YXJ0VGltZTogVGltZSwgc3RhdHVzOiBEZXBvc2l0c1BheW1lbnRTdGF0dXMsIHN0YXR1c2VzOiBbRGVwb3NpdHNQYXltZW50U3RhdHVzIV0pOiBEZXBvc2l0c1BheW1lbnRDb25uZWN0aW9uXG4gIGJhbGFuY2VJbih0aW1lV2luZG93RGF5czogSW50ISk6IEludCEgQGRlcHJlY2F0ZWQocmVhc29uOiBcIlRoaXMgaXMgc3RpbGwgYmVpbmcgY2FsbGVkIGJ1dCBub3QgdXNlZCBmdW5jdGlvbmFsbHlcIilcbiAgcGF5cm9sbFByb3ZpZGVyOiBQYXlyb2xsUHJvdmlkZXJcbiAgcmVzdHJpY3RBY2hEZWJpdHM6IEJvb2xlYW4hXG4gIFwiXCJcIldoZXRoZXIgdGhpcyBhY2NvdW50IGNhbiBlbnRlciB0aGUgdXNlci1pbml0aWF0ZWQgb2ZmYm9hcmRpbmcgcHJvY2Vzc1wiXCJcIlxuICBjYW5PZmZib2FyZDogQ2FuT2ZmYm9hcmRSZXNwb25zZSFcbiAgXCJcIlwiVGhlIGFjY291bnQgbnVtYmVyLCB0aGlzIHdpbGwgYmUgbnVsbCBmb3IgcmVzdHJpY3RlZCBhY2NvdW50c1wiXCJcIlxuICBhY2NvdW50TnVtYmVyOiBTdHJpbmdcbiAgXCJcIlwiV2hldGhlciB0aGUgYWNjb3VudCBoYXMgYSBicmV4IG9yaWdpbmF0ZWQgYWNoIGRlYml0XCJcIlwiXG4gIGhhc0JyZXhPcmlnaW5hdGVkQWNoRGViaXQ6IEJvb2xlYW4hXG4gIFwiXCJcIlRoZSBjb2xvciB0aGF0IHdpbGwgYmUgYXNzb2NpYXRlZCB3aXRoIHRoZSBhY2NvdW50IGluIHRoZSBVSVwiXCJcIlxuICBkaXNwbGF5Q29sb3I6IERlcG9zaXRzQWNjb3VudHNEaXNwbGF5Q29sb3IhXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJXaGV0aGVyIHRoZSBhY2NvdW50IGhhcyBhIHNldHRsZWQgZXh0ZXJuYWwgcGF5bWVudFwiXCJcIlxuICBoYXNTZXR0bGVkRXh0ZXJuYWxQYXltZW50OiBCb29sZWFuIVxuICBcIlwiXCJXaGV0aGVyIHRoZSBhY2NvdW50IHVzZXMgSlBNIGZvciBpbnRlcm5hdGlvbmFsIHdpcmVzXCJcIlwiXG4gIHVzZXNKcG1Gb3JJbnRlcm5hdGlvbmFsV2lyZXM6IEJvb2xlYW4hXG4gIGFjaERlYml0TGltaXRzOiBBY2hEZWJpdExpbWl0cyFcbiAgYmFsYW5jZUJyZWFrZG93bjogQmFsYW5jZUJyZWFrZG93blxuICBpbnZlc3RtZW50UG9saWN5QnJlYWtkb3duOiBJbnZlc3RtZW50UG9saWN5QnJlYWtkb3duIVxuICBcIlwiXCJMaXN0IG9mIGFsbCB0cmFuc2FjdGlvbiB0eXBlcyBldmVyIHJlY29yZGVkIGluIHRoaXMgYWNjb3VudFwiXCJcIlxuICB2aXNpYmxlVHJhbnNhY3Rpb25UeXBlczogW0RlcG9zaXRzVHJhbnNhY3Rpb25UeXBlIV0hXG4gIHN0YXRlbWVudHMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGVuZFRpbWU6IFRpbWUsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCwgc3RhcnRUaW1lOiBUaW1lKTogRGVwb3NpdHNTdGF0ZW1lbnRDb25uZWN0aW9uXG4gIHN0YXR1czogRGVwb3NpdHNBY2NvdW50U3RhdHVzIVxuICBjb25zdGFudHM6IENvbnN0YW50cyFcbiAgXCJcIlwiV2hldGhlciB0aGUgYWNjb3VudCBoYXMgYWNjZXNzIHRvIHRoZSBpbnRlcm5hdGlvbmFsIHdpcmVzIGZlYXR1cmVcIlwiXCJcbiAgY2FuU2VuZEludGVybmF0aW9uYWxXaXJlczogQm9vbGVhbiFcbiAgXCJcIlwiTmlja25hbWUgc3BlY2lmaWVkIGJ5IHVzZXIgZm9yIHRoZSBhY2NvdW50XCJcIlwiXG4gIG5pY2tuYW1lOiBTdHJpbmchXG4gIFwiXCJcIlRoaXMgaXMgZXF1aXZhbGVudCB0byBjYW5fYWRkX2Z1bmRzXCJcIlwiXG4gIGNhblNlZUNhc2hBY2NvdW50RGV0YWlsczogQm9vbGVhbiFcbiAgXCJcIlwiVGhlIHdpdGhkcmF3YWwgb2YgdGhlIGFjY291bnQncyBiYWxhbmNlIGluaXRpYXRlZCBkdXJpbmcgdGhlIGFjY291bnQgY2xvc3VyZSBwcm9jZXNzXCJcIlwiXG4gIG9mZmJvYXJkaW5nV2l0aGRyYXdhbDogRGVwb3NpdHNQYXltZW50XG4gIGJhbGFuY2VPdXQodGltZVdpbmRvd0RheXM6IEludCEpOiBJbnQhIEBkZXByZWNhdGVkKHJlYXNvbjogXCJUaGlzIGlzIHN0aWxsIGJlaW5nIGNhbGxlZCBidXQgbm90IHVzZWQgZnVuY3Rpb25hbGx5XCIpXG4gIFwiXCJcIlRoZSB3aXRoZHJhd2FsIHN0YXR1cyBvZiBhIHBvc3NpYmxlIG9mZmJvYXJkaW5nIHByb2Nlc3MuIFJldHVybnMgbnVsbCBpZiBhY2NvdW50IGlzIG5vdCBiZWluZyBvZmZib2FyZGVkXCJcIlwiXG4gIHdpdGhkcmF3YWxTdGF0dXM6IERlcG9zaXRzQWNjb3VudHNXaXRoZHJhd2FsU3RhdHVzXG4gIFwiXCJcIldoZXRoZXIgdGhlIGFjY291bnQgaGFzIGFjY2VzcyB0byB0aGUgYWRkIGZ1bmRzIGZlYXR1cmVcIlwiXCJcbiAgY2FuQWRkRnVuZHM6IEJvb2xlYW4hXG4gIGNoZXF1ZURlcG9zaXRMaW1pdHM6IENoZXF1ZURlcG9zaXRMaW1pdHMhXG4gIGFjdGl2YXRlZEF0OiBUaW1lXG4gIGNvdW50ZXJwYXJ0aWVzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBDb3VudGVycGFydHlDb25uZWN0aW9uXG4gIFwiXCJcIlRvdGFsIGFtb3VudCB0aGF0IHRoZSBhY2NvdW50IGhhcyBlYXJuZWQgZnJvbSBkaXZpZGVuZCBwYXlvdXRzXCJcIlwiXG4gIHRvdGFsSW50ZXJlc3RZaWVsZDogSW50IVxuICBpbnRlcmVzdEVhcm5lZCh0aW1lV2luZG93RGF5czogSW50ISk6IEludCEgQGRlcHJlY2F0ZWQocmVhc29uOiBcIlRoaXMgaXMgc3RpbGwgYmVpbmcgY2FsbGVkIGJ1dCBub3QgdXNlZCBmdW5jdGlvbmFsbHlcIilcbiAgXCJcIlwiXG4gIENhc2ggdHJhbnNhY3Rpb25zIGJlbG9uZ2luZyB0byB0aGUgZGVwb3NpdHMgYWNjb3VudC4gU3RhdHVzZXMgaXMgdGhlXG4gIG9ubHkgcmVxdWlyZWQgZmlsdGVyLiBTdXBwb3J0cyBmaXJzdDogYW5kIGFmdGVyOiBjdXJzb3IgYmFzZWQgcGFnaW5hdGlvbi5cbiAgXCJcIlwiXG4gIGNhc2hUcmFuc2FjdGlvbnMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGVuZEluaXRpYXRlZEF0OiBUaW1lLCBlbmRQcm9jZXNzZWRBdDogVGltZSwgZW5kU2NoZWR1bGVkU2VuZEF0OiBUaW1lLCBmaXJzdDogSW50LCBpc1JlY3VycmluZzogQm9vbGVhbiwgbGFzdDogSW50LCBtYXhBbW91bnRVc2RDZW50czogSW50LCBtaW5BbW91bnRVc2RDZW50czogSW50LCBvcmRlckJ5OiBbQ2FzaFRyYW5zYWN0aW9uT3JkZXJCeSFdLCBvcmlnaW46IENhc2hUcmFuc2FjdGlvbk9yaWdpbiwgcGF5bWVudE1ldGhvZDogQ2FzaFRyYW5zYWN0aW9uUGF5bWVudE1ldGhvZCwgcmVjdXJyaW5nU2NoZWR1bGVJZDogSUQsIHNlYXJjaFF1ZXJ5OiBTdHJpbmcsIHN0YXJ0SW5pdGlhdGVkQXQ6IFRpbWUsIHN0YXJ0UHJvY2Vzc2VkQXQ6IFRpbWUsIHN0YXJ0U2NoZWR1bGVkU2VuZEF0OiBUaW1lLCBzdGF0dXNlczogW0Nhc2hUcmFuc2FjdGlvblN0YXR1cyFdISwgdHJhbnNhY3Rpb25UeXBlczogW0Nhc2hUcmFuc2FjdGlvblR5cGUhXSk6IENhc2hUcmFuc2FjdGlvbkNvbm5lY3Rpb25cbiAgXCJcIlwiV2hldGhlciB0aGlzIGFjY291bnQgaXMgcHJpbWFyeSBvciBub25fcHJpbWFyeVwiXCJcIlxuICBwcmlvcml0eTogRGVwb3NpdHNBY2NvdW50c1ByaW9yaXR5IVxuICBcIlwiXCJXaGV0aGVyIHRoZSBhY2NvdW50IGhhcyBhY2Nlc3MgdG8gb3V0Z29pbmcgYWNoIGRlYml0c1wiXCJcIlxuICBjYW5BY2hEZWJpdDogQm9vbGVhbiFcbiAgXCJcIlwiTGVuZGluZ0NsdWIgbWlncmF0aW9uIHN0YXR1cyBmb3IgYWNjb3VudFwiXCJcIlxuICBtaWdyYXRpb25TdGF0dXM6IEFjY291bnRNaWdyYXRpb25TdGF0dXNcbiAgXCJcIlwiV2hldGhlciB0aGUgYWNjb3VudCBpcyBhbGxvd2VkIHRvIHNlbmQgb3V0Z29pbmcgQUNIL1dpcmUvQ2hlcXVlXCJcIlwiXG4gIGNhblNlbmRQYXltZW50OiBCb29sZWFuIVxuICBcIlwiXCJXaGV0aGVyIHRoZSBhY2NvdW50IGlzIHN1YmplY3QgdG8gQUNIIHBheW91dCBkZWxheVwiXCJcIlxuICBoYXNBY2hQYXlvdXREZWxheTogQm9vbGVhbiFcbiAgXCJcIlwiV2hldGhlciB0aGUgYWNjb3VudCBpcyBhbGxvd2VkIHRvIGFwcGx5IGZvciBJbnN0YW50IFBheW91dHNcIlwiXCJcbiAgY2FuQXBwbHlGb3JJbnN0YW50UGF5b3V0czogQm9vbGVhbiFcbiAgdHJhbnNhY3Rpb25zKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBlbmRUaW1lOiBUaW1lLCBmaXJzdDogSW50LCBsYXN0OiBJbnQsIG9yaWdpbjogT3JpZ2luLCBwYXltZW50TWV0aG9kOiBNZXRob2QsIHJlY3VycmluZ1BheW1lbnRJZDogSUQsIHN0YXJ0VGltZTogVGltZSwgc3RhdHVzOiBTdGF0dXMpOiBEZXBvc2l0c1RyYW5zYWN0aW9uQ29ubmVjdGlvblxuICBcIlwiXCJBY2NvdW50J3Mgc3RhdHVzIHJlYXNvbiAob3B0aW9uYWwpXCJcIlwiXG4gIHN0YXR1c1JlYXNvbjogRGVwb3NpdHNBY2NvdW50U3RhdHVzUmVhc29uXG4gIFwiXCJcIkRlcHJlY2F0ZWQuIFVzZSBjYXNoVHJhbnNhY3Rpb25zKCkgZmllbGQgaW5zdGVhZC5cIlwiXCJcbiAgc2VhcmNoRGVwb3NpdHNUcmFuc2FjdGlvbnMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGVuZFRpbWU6IFRpbWUsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCwgcXVlcnk6IFN0cmluZywgcmVjdXJyaW5nUGF5bWVudElkOiBJRCwgc3RhcnRUaW1lOiBUaW1lLCBzdGF0dXM6IFN0YXR1cyk6IERlcG9zaXRzVHJhbnNhY3Rpb25Db25uZWN0aW9uXG4gIFwiXCJcIldoZXRoZXIgcG9pbnRzIHNob3VsZCBiZSBhdXRvbWF0aWNhbGx5IHdpdGhkcmF3biBkdXJpbmcgdGhlIGFjY291bnQgY2xvc3VyZSBwcm9jZXNzXCJcIlwiXG4gIHNob3VsZFdpdGhkcmF3UG9pbnRzOiBTaG91bGRXaXRoZHJhd1BvaW50c1Jlc3BvbnNlXG4gIHJvdXRpbmdOdW1iZXI6IFN0cmluZyFcbiAgaW50ZXJuYXRpb25hbENvdW50cmllc1RyYW5zYWN0ZWRXaXRoOiBbU3RyaW5nIV0hXG59XG5cbmlucHV0IENhbmNlbENvbGxlY3Rpb25JbnRlbnRpb25JbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaWQ6IElEIVxufVxuXG50eXBlIEludGVybmFsRW50aXR5U3luY0Vycm9yRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IEludGVybmFsRW50aXR5U3luY0Vycm9yXG59XG5cbnVuaW9uIFJld2FyZHNSZWRlbXB0aW9uT2ZmZXJQYXlsb2FkID0gQXNjZW5kYVRyYW5zZmVyUGF5bG9hZCB8IENhc2hCYWxhbmNlUGF5bG9hZCB8IEluc3RhbnRQYXlvdXRzRmVlUGF5bG9hZCB8IElzc3VlclRyYW5zYWN0aW9uUGF5bG9hZCB8IFJlZnVuZFRyYW5zYWN0aW9uUGF5bG9hZFxuXG5pbnB1dCBVcGRhdGVJbnN0aXR1dGlvbkxvZ2luSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGZpbmFuY2lhbFNvdXJjZUlkOiBJRCFcbn1cblxuaW5wdXQgQ3JlYXRlU3RhdGVtZW50RW50cmllc1NlYXJjaFJlcG9ydElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJUaW1lIGluIHVzZXIncyB0aW1lem9uZSB0aGF0IHJlcG9ydCBpcyBnZW5lcmF0ZWRcIlwiXCJcbiAgZGlzcGxheVRpbWU6IFRpbWUhXG4gIGZvcm1hdDogUmVwb3J0Rm9ybWF0IVxuICBzdGF0ZW1lbnRFbnRyaWVzRmlsdGVyczogSnNvbiFcbiAgdHlwZTogUmVwb3J0VHlwZVxufVxuXG50eXBlIENyZWF0ZU1vbnRobHlVc2VyTGltaXRJbmNyZWFzZVBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIG1vbnRobHlVc2VyTGltaXRJbmZvOiBNb250aGx5VXNlckxpbWl0SW5mb1xufVxuXG5lbnVtIEZhY2V0VHlwZSB7XG4gIENPTkZMSUNUSU5HXG4gIENVU1RPTVxuICBJTlZBTElEXG4gIE1FUkNIQU5UXG4gIE9WRVJSSURFXG59XG5cbnVuaW9uIEFnZ3JlZ2F0aW9uUmVzdWx0ID0gRGF0ZUhpc3RvZ3JhbUFnZ3JlZ2F0aW9uUmVzdWx0IHwgR3JvdXBBZ2dyZWdhdGlvblJlc3VsdCB8IFN1bUFnZ3JlZ2F0aW9uUmVzdWx0XG5cbmlucHV0IEZpbmlzaENoYW5uZWxWZXJpZmljYXRpb25JbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaWQ6IElEIVxuICB2ZXJpZmljYXRpb25Ub2tlbjogU3RyaW5nIVxufVxuXG5pbnB1dCBEaXNhYmxlUmVpbWJ1cnNlbWVudHNJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaWQ6IElEIVxufVxuXG5cIlwiXCJBZmZpbGlhdGUgYm9udXNcIlwiXCJcbnR5cGUgQWZmaWxpYXRlQm9udXMgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiYm9udXMgYW1vdW50IGluIGNlbnRpLXBvaW50cyBpZiB1c2VyIGNvbXBsZXRlcyBib251c1wiXCJcIlxuICBib251c0Ftb3VudENlbnRpcG9pbnRzOiBJbnQhXG4gIFwiXCJcImhvdyBtdWNoIHRoZSBjdXN0b21lciBoYXMgY3VycmVudGx5IHNwZW50IChjZW50cylcIlwiXCJcbiAgY3VycmVudFByb2dyZXNzOiBJbnQhXG4gIFwiXCJcIndoZW4gdGhlIGJvbnVzIGV4cGlyZXNcIlwiXCJcbiAgZXhwaXJlc0F0OiBUaW1lXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJ3aGVuIHRoZSBib251cyB3YXMgcGF5ZWQgb3V0XCJcIlwiXG4gIHBheWVkT3V0QXQ6IFRpbWVcbiAgXCJcIlwiaG93IG11Y2ggdGhlIGN1c3RvbWVyIGhhcyB0byBzcGVuZCB0byBlYXJuIHRoZSBib251cyAoY2VudHMpXCJcIlwiXG4gIHBheW91dFRocmVzaG9sZDogSW50IVxuICBcIlwiXCJTdGF0dXMgb2YgYWZmaWxpYXRlIGJvbnVzXCJcIlwiXG4gIHN0YXR1czogQWZmaWxpYXRlQm9udXNTdGF0dXMhXG4gIFwiXCJcInVzZXIgZGVzY3JpcHRpb25cIlwiXCJcbiAgdXNlckRlc2NyaXB0aW9uOiBTdHJpbmchXG59XG5cbmVudW0gUGF5bWVudEFwcHJvdmFsRGVjaXNpb24ge1xuICBBUFBST1ZFRFxuICBDQU5DRUxMRURcbiAgREVOSUVEXG4gIFBFTkRJTkdcbn1cblxuaW5wdXQgVXBkYXRlUG9zaXRpdmVQYXlBY2NvdW50U2V0dGluZ0lucHV0IHtcbiAgYWNoQ29tcGFueUlkOiBTdHJpbmdcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpZDogSUQhXG4gIG5hbWU6IFN0cmluZ1xuICBzdGF0dXM6IFBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmdTdGF0dXNcbn1cblxuaW5wdXQgQ3JlYXRlQXBwcm92YWxzUG9saWNpZXNJbnB1dCB7XG4gIGFwcHJvdmFsc1Byb2R1Y3RQb2xpY2llczogW0FwcHJvdmFsc1Byb2R1Y3RQb2xpY3khXVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgV2lyZUJhbmsge1xuICBiZW5lZmljaWFyeUFjY291bnROdW1iZXI6IFN0cmluZyFcbiAgYmVuZWZpY2lhcnlBY2NvdW50VHlwZTogU3RyaW5nIVxuICBiZW5lZmljaWFyeUNpdHk6IFN0cmluZyFcbiAgYmVuZWZpY2lhcnlOYW1lOiBTdHJpbmchXG4gIGJlbmVmaWNpYXJ5U3RhdGU6IFN0cmluZyFcbiAgYmVuZWZpY2lhcnlTdHJlZXQ6IFN0cmluZyFcbiAgYmVuZWZpY2lhcnlTdWl0ZTogU3RyaW5nIVxuICBiZW5lZmljaWFyeVppcDogU3RyaW5nIVxuICBjaXR5OiBTdHJpbmchXG4gIG5hbWU6IFN0cmluZyFcbiAgc3RhdGU6IFN0cmluZyFcbiAgc3RyZWV0OiBTdHJpbmchXG4gIHN1aXRlOiBTdHJpbmchXG4gIHN3aWZ0Q29kZTogU3RyaW5nIVxuICB6aXA6IFN0cmluZyFcbn1cblxuaW5wdXQgQXBwcm92YWxzUnVsZUdyb3VwSW5wdXQge1xuICBpc0RlZmF1bHQ6IEJvb2xlYW5cbiAgbWF0Y2hlcnM6IFtBcHByb3ZhbHNSdWxlR3JvdXBNYXRjaGVySW5wdXQhXSFcbiAgcm91dGluZ1J1bGVzOiBbQXBwcm92YWxzUm91dGluZ1J1bGVJbnB1dCFdIVxufVxuXG50eXBlIFVwZGF0ZUV4cGVuc2VzU2V0dGluZ0F1dG9EaXNtaXNzTWF0Y2hlckpzb25QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBleHBlbnNlc1NldHRpbmc6IEV4cGVuc2VzU2V0dGluZ1xufVxuXG5pbnB1dCBTdWJzaWRpYXJ5SW5wdXQge1xuICBuYW1lOiBTdHJpbmchXG4gIHZlbmRvckludGVybmFsSWQ6IFN0cmluZyFcbn1cblxudHlwZSBEaXNhYmxlVXNlclBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHVzZXI6IFVzZXJcbn1cblxuZW51bSBEZXBvc2l0c0FjY291bnRTdGF0dXMge1xuICBBQ1RJVkVcbiAgQ0xPU0VEXG4gIFJFSkVDVEVEXG4gIFJFU1RSSUNURURcbiAgU1VTUEVOREVEXG59XG5cbnR5cGUgRGl2aWRlbmREZXRhaWxzIHtcbiAgZm9yRmluYW5jaWFsSW5zdHJ1bWVudDogRmluYW5jaWFsSW5zdHJ1bWVudFxuICBwYWlkT246IFRpbWVcbn1cblxudHlwZSBGaW5hbmNpYWxTb3VyY2UgaW1wbGVtZW50cyBOb2RlIHtcbiAgYWNjb3VudHMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IEZpbmFuY2lhbEFjY291bnRDb25uZWN0aW9uXG4gIGZpeFJlcXVpcmVkOiBCb29sZWFuIVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgaW5zdGl0dXRpb246IEZpbmFuY2lhbEluc3RpdHV0aW9uXG4gIGxhc3RTeW5jVGltZTogVGltZVxuICBwYXlsb2FkOiBGaW5hbmNpYWxTb3VyY2VQYXlsb2FkIVxuICBzdGF0dXM6IEZpbmFuY2lhbFNvdXJjZVN0YXR1cyFcbiAgdmVuZG9yOiBGaW5hbmNpYWxzVmVuZG9yIVxufVxuXG50eXBlIEJpbGxpbmdQYXltZW50Q29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbQmlsbGluZ1BheW1lbnRFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbnVuaW9uIEluaXRpYXRlZEJ5ID0gQXV0b0luaXRpYXRlZCB8IEN1c3RvbWVySW5pdGlhdGVkIHwgSW50ZXJuYWxJbml0aWF0ZWRcblxudHlwZSBOb3RpZmljYXRpb25UaWxlRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIFwiXCJcIk5vdGlmaWNhdGlvbiBUaWxlIE5vZGVcIlwiXCJcbiAgbm9kZTogTm90aWZpY2F0aW9uVGlsZVxufVxuXG50eXBlIENyZWF0ZVByZW1pdW1TZXR0aW5nRXZlbnRQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBwcmVtaXVtU2V0dGluZzogUHJlbWl1bVNldHRpbmdcbn1cblxudHlwZSBDcmVkaXRMaW1pdEVkdWNhdGlvblRpbGUgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiQ3VzdG9tZXIncyBnbG9iYWwgbGltaXQgYW5kIGJhbGFuY2UgY29uc3VtcHRpb25cIlwiXCJcbiAgYmFsYW5jZVN1bW1hcnk6IEFjY291bnRCYWxhbmNlU3VtbWFyeSFcbiAgXCJcIlwiQ3JlZGl0IExpbWl0IEZhY3RvcnMgQ29ubmVjdGlvblwiXCJcIlxuICBjcmVkaXRMaW1pdEZhY3RvclRpbGVzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBDcmVkaXRMaW1pdEZhY3RvclRpbGVDb25uZWN0aW9uXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxufVxuXG5pbnB1dCBBZHZhbmNlVG9OZXh0U3RlcElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBjb21wbGV0ZWRPZmZlclN0ZXA6IE9mZmVyU2V0dXBTdGVwVHlwZSFcbiAgb2ZmZXJUeXBlOiBPZmZlclR5cGUhXG59XG5cbnR5cGUgRmluYW5jaWFsSW5zdGl0dXRpb24gaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIGltYWdlVXJsczogRmluYW5jaWFsSW5zdGl0dXRpb25JbWFnZVVybHNcbiAgbG9naW5GaWVsZHM6IFtGaW5hbmNpYWxMb2dpbkZpZWxkXVxuICBsb2dpbkluc3RydWN0aW9uczogU3RyaW5nXG4gIG5hbWU6IFN0cmluZ1xuICBvcmRlcjogSW50XG4gIHN0YXR1czogRmluYW5jaWFsSW5zdGl0dXRpb25TdGF0dXNcbiAgdmVuZG9yc01hcHBpbmc6IFtWZW5kb3JJbnN0aXR1dGlvbl1cbiAgd2Vic2l0ZTogU3RyaW5nXG59XG5cbnVuaW9uIENhcmRTdGF0ZW1lbnRQb2xpY3lDeWNsZSA9IEJpd2Vla2x5Q2FyZFN0YXRlbWVudFBvbGljeUN5Y2xlIHwgRXZlcnlORGF5c0NhcmRTdGF0ZW1lbnRQb2xpY3lDeWNsZSB8IE1vbnRobHlDYXJkU3RhdGVtZW50UG9saWN5Q3ljbGUgfCBTZW1pTW9udGhseUNhcmRTdGF0ZW1lbnRQb2xpY3lDeWNsZSB8IFNlbWlXZWVrbHlDYXJkU3RhdGVtZW50UG9saWN5Q3ljbGUgfCBXZWVrbHlDYXJkU3RhdGVtZW50UG9saWN5Q3ljbGVcblxuXCJcIlwiSW50YWNjdCBHTCBhY2NvdW50IHNldHRpbmdzXCJcIlwiXG50eXBlIEludGFjY3RDYXRlZ29yaWVzIHtcbiAgXCJcIlwiRGVmYXVsdCBhY2NvdW50cyBwYXlhYmxlIEdMIGFjY291bnRcIlwiXCJcbiAgYWNjb3VudHNQYXlhYmxlVXNlckNhdGVnb3J5OiBVc2VyQ2F0ZWdvcnlcbiAgXCJcIlwiRGVmYXVsdCBjb2xsZWN0aW9ucyBHTCBhY2NvdW50XCJcIlwiXG4gIGNvbGxlY3Rpb25UYXJnZXRVc2VyQ2F0ZWdvcnk6IFVzZXJDYXRlZ29yeVxuICBcIlwiXCJEZWZhdWx0IHJld2FyZHMgR0wgYWNjb3VudFwiXCJcIlxuICByZXdhcmRzSW5jb21lVXNlckNhdGVnb3J5OiBVc2VyQ2F0ZWdvcnlcbn1cblxuaW5wdXQgUmVjb3JkTWFya2V0aW5nUmV3aW5kV2F0Y2hJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgeWVhcjogTWFya2V0aW5nUmV3aW5kWWVhciFcbn1cblxuXCJcIlwiQ29uZmlndXJhdGlvbiBmb3Igc3RhdGVtZW50IGluZm9ybXRhdGlvbiByZXF1ZXN0c1wiXCJcIlxudHlwZSBGaW5hbmNpYWxJbmZvcm1hdGlvblJlcXVlc3RDb25maWdTdGF0ZW1lbnQgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlRoZSBtb250aCBvZiB0aGUgcmVxdWVzdGVkIHN0YXRlbWVudFwiXCJcIlxuICByZXF1ZXN0ZWRNb250aDogSW50IVxuICBcIlwiXCJUaGUgeWVhciBvZiB0aGUgcmVxdWVzdGVkIHN0YXRlbWVudFwiXCJcIlxuICByZXF1ZXN0ZWRZZWFyOiBJbnQhXG59XG5cbnR5cGUgQ3JlYXRlRmluYW5jaWFsQmFua1N0YXRlbWVudEZvck5ld0FjY291bnRQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5pbnB1dCBVcGRhdGVDYXJkRGlzcGxheU5hbWVJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGlzcGxheU5hbWU6IFN0cmluZyFcbiAgaWQ6IElEIVxufVxuXG50eXBlIFdpcmVEZXRhaWxzIHtcbiAgXCJcIlwiRm9yIGEgcmV0dXJuZWQgd2lyZSwgdGhpcyBpcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBvcmlnaW5hbCB3aXJlIGFtb3VudCB2cyB3aGF0IHdhcyBhY3R1YWxseSByZXR1cm5lZCBiYWNrIGR1ZSB0byB0aGUgYmVuZWZpY2lhcnkgYmFuayB0YWtpbmcgYSBmZWUuXCJcIlwiXG4gIGFtb3VudERyaWZ0VXNkQ2VudHM6IEludFxuICBcIlwiXCJUaGUgc2VuZGluZyBiYW5rJ3MgcmVmZXJlbmNlIG51bWJlciBmb3IgdGhpcyB3aXJlIChGMjAgb2YgdGhlIE1UMTAzKVwiXCJcIlxuICBiYW5rUmVmZXJlbmNlTnVtYmVyOiBTdHJpbmdcbiAgY291bnRlcnBhcnR5OiBDb3VudGVycGFydHkhXG4gIGVuZFRvRW5kSWQ6IFN0cmluZ1xuICBlc3RpbWF0ZWRPbjogVGltZSFcbiAgZXN0aW1hdGVkT25MYXRlc3Q6IFRpbWVcbiAgZmVkUmVmZXJlbmNlTnVtYmVyOiBTdHJpbmdcbiAgaW1hZDogU3RyaW5nXG4gIGluaXRpYXRvckN1c3RvbWVyVXNlcjogVXNlclxuICBtZXRob2Q6IE1ldGhvZCFcbiAgbXQxMDM6IFN0cmluZ1xuICBvbWFkOiBTdHJpbmdcbiAgb3JpZ2luOiBPcmlnaW4hXG4gIHRyYW5zZmVyRGVzY3JpcHRpb246IFN0cmluZ1xufVxuXG5cIlwiXCJBIHNuYXBzaG90IG9mIGFuIGFjY291bnQgYXZhaWxhYmxlIGJhbGFuY2UgYXQgYSBwb2ludCBpbiB0aW1lXCJcIlwiXG50eXBlIEluc2lnaHRzQXZhaWxhYmxlQmFsYW5jZVNuYXBzaG90IHtcbiAgXCJcIlwiQXZhaWxhYmxlIHNuYXBzaG90IHZhbHVlXCJcIlwiXG4gIGFtb3VudFVzZENlbnRzOiBMb25nIVxuICBcIlwiXCJUaW1lc3RhbXAgb2YgdGhlIHNuYXBzaG90IHZhbHVlXCJcIlwiXG4gIHRpbWVzdGFtcDogVGltZSFcbn1cblxuXCJcIlwiVmlldyBkYXRhIGZvciBjYXNoIGJhbGFuY2UgdG9vbHRpcFwiXCJcIlxudHlwZSBJbmNlbnRpdmVQbGFjZW1lbnRWaWV3RGF0YUNhc2hCYWxhbmNlVG9vbHRpcCB7XG4gIFwiXCJcIk1lc3NhZ2UgdG8gZGlzcGxheSBpbiBob3ZlciBzdGF0ZSBvZiB0b29sdGlwXCJcIlwiXG4gIG1lc3NhZ2U6IFN0cmluZyFcbiAgXCJcIlwiUGxhY2VtZW50XCJcIlwiXG4gIHBsYWNlbWVudDogSW5jZW50aXZlUGxhY2VtZW50IVxufVxuXG5lbnVtIFByb21vdGlvbnNDYXRlZ29yeSB7XG4gIFBST0RVQ1RfQU5OT1VOQ0VNRU5UXG4gIFBST0RVQ1RfVE9VUlxuICBSRUNPTU1FTkRFRF9GRUFUVVJFXG59XG5cbnR5cGUgTG95YWx0eVByb2dyYW1Db25maWcge1xuICBhbGxpYW5jZTogTG95YWx0eVByb2dyYW1BbGxpYW5jZSFcbiAgbWVtYmVyc2hpcElkUmVnZXg6IFN0cmluZyFcbiAgbWluaW11bU1pbGVzOiBJbnQhXG59XG5cbmVudW0gUGF5bWVudFN0YXR1cyB7XG4gIEZBSUxFRFxuICBQUk9DRVNTSU5HXG4gIFJFVkVSU0VEXG4gIFNDSEVEVUxFRFxuICBTVUNDRVNTRlVMXG59XG5cbnVuaW9uIENsb3NpbmdTdHJhdGVneSA9IEJpd2Vla2x5Q2xvc2luZ1N0cmF0ZWd5IHwgRXZlcnlORGF5c0Nsb3NpbmdTdHJhdGVneSB8IE1vbnRobHlDbG9zaW5nU3RyYXRlZ3kgfCBTZW1pTW9udGhseUNsb3NpbmdTdHJhdGVneSB8IFNlbWlXZWVrbHlDbG9zaW5nU3RyYXRlZ3kgfCBXZWVrbHlDbG9zaW5nU3RyYXRlZ3lcblxuaW5wdXQgQ3JlYXRlUG9zaXRpdmVQYXlBY2NvdW50U2V0dGluZ0lucHV0IHtcbiAgYWNoQ29tcGFueUlkOiBTdHJpbmchXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgbmFtZTogU3RyaW5nIVxuICBzdGF0dXM6IFBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmdTdGF0dXMhXG59XG5cbmVudW0gT25ib2FyZGluZ0luZm9ybWF0aW9uUmVxdWVzdFR5cGUge1xuICBFWFRSQVxuICBJTklUSUFMXG59XG5cblwiXCJcIlRoZSBpbmRpdmlkdWFsIHVzZXIgdHlwZVwiXCJcIlxudHlwZSBVc2VyVHlwZUluZGl2aWR1YWwgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlRoZSBhcHByb3ZhbCB1c2VyXCJcIlwiXG4gIHVzZXI6IEFwcHJvdmFsc1VzZXIhXG59XG5cbmlucHV0IERlbGV0ZUhyaXNDb25uZWN0aW9uSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIFwiXCJcIlRoZSBjb25uZWN0aW9uIGlkXCJcIlwiXG4gIGlkOiBJRCFcbn1cblxuZW51bSBDYXJkUGF5bWVudEZvcndhcmRlckRvY3VtZW50U3RhdHVzIHtcbiAgREVMRVRFRFxuICBJTlZBTElEXG4gIFJFUVVFU1RFRFxuICBTVUJNSVRURURcbn1cblxudHlwZSBGaW5hbmNpYWxCYW5rU3RhdGVtZW50RG9jdW1lbnRDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtGaW5hbmNpYWxCYW5rU3RhdGVtZW50RG9jdW1lbnRFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbnR5cGUgQWNoUmV0dXJuRGV0YWlscyB7XG4gIGNvdW50ZXJwYXJ0eTogQ291bnRlcnBhcnR5IVxuICBpbml0aWF0b3JDdXN0b21lclVzZXI6IFVzZXJcbiAgbWV0aG9kOiBNZXRob2QhXG4gIG9yaWdpbjogT3JpZ2luIVxuICByZXR1cm5SZWFzb246IFJldHVyblJlYXNvbiFcbn1cblxudHlwZSBGaW5hbmNpYWxCYWxhbmNlIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRpbWUgb2YgYmFsYW5jZVwiXCJcIlxuICBhY2NydWFsVGltZTogVGltZSFcbiAgXCJcIlwiQW1vdW50IG9mIGJhbGFuY2UgaW4gY2VudHNcIlwiXCJcbiAgYW1vdW50OiBJbnQhXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxufVxuXG5cIlwiXCJEZWZhdWx0IGdlbmVyaWMgaGlzdG9yeSBlbnRyeSBwYXlsb2FkXCJcIlwiXG50eXBlIFJld2FyZHNIaXN0b3J5RW50cnlQYXlsb2FkR2VuZXJpYyB7XG4gIFwiXCJcIkRpcmVjdCBqc29uIGZyb20gcmV3YXJkcyBzZXJ2aWNlXCJcIlwiXG4gIHBheWxvYWQ6IEpzb25cbn1cblxudHlwZSBFeHRlcm5hbEludGVncmF0aW9uRmllbGRFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogRXh0ZXJuYWxJbnRlZ3JhdGlvbkZpZWxkXG59XG5cbnR5cGUgQ2FyZEVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBDYXJkXG59XG5cbmlucHV0IENyZWF0ZUV4cGVuc2VzSXRlbUV2ZW50SW5wdXQge1xuICBhY3Rpb246IEV4cGVuc2VzSXRlbUV2ZW50QWN0aW9uIVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgaXRlbUlkOiBJRCFcbn1cblxudHlwZSBDcmVhdGVEZXBvc2l0c0FwcGxpY2F0aW9uUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgb25ib2FyZGluZ0FwcGxpY2F0aW9uOiBPbmJvYXJkaW5nQXBwbGljYXRpb24hXG59XG5cblwiXCJcIkEgcmVxdWVzdCBmb3IgdGhlIHVzZXIgdG8gc3VibWl0IGZpbmFuY2lhbCBkb2N1bWVudHMgc3VjaCBhcyBzdGF0ZW1lbnRzXCJcIlwiXG50eXBlIEZpbmFuY2lhbEluZm9ybWF0aW9uUmVxdWVzdCBpbXBsZW1lbnRzIE5vZGUge1xuICBjb25maWc6IEZpbmFuY2lhbEluZm9ybWF0aW9uUmVxdWVzdENvbmZpZyFcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIHN0YXR1czogRmluYW5jaWFsSW5mb3JtYXRpb25SZXF1ZXN0U3RhdHVzIVxufVxuXG5lbnVtIFVuZGVyd3JpdGluZ0FjY291bnRTdGF0dXMge1xuICBBUFBST1ZFRFxuICBQRU5ESU5HXG4gIFBST1ZJU0lPTkFMTFlfQVBQUk9WRURcbiAgUkVKRUNURURcbn1cblxudHlwZSBSZXdhcmRzUG9pbnRzSGlzdG9yeUVudHJ5RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IFJld2FyZHNQb2ludHNIaXN0b3J5RW50cnlcbn1cblxudHlwZSBDcmVhdGVBcHByb3ZhbHNQb2xpY2llc1BheWxvYWQge1xuICBhcHByb3ZhbHNQb2xpY2llczogW0FwcHJvdmFsc1BvbGljeSFdXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBEaXNjb25uZWN0RnNwQW5kQ2xpZW50UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuZW51bSBPcmlnaW4ge1xuICBCUkVYXG4gIEVYVEVSTkFMXG59XG5cbnR5cGUgU2F2ZU9uYm9hcmRpbmdJbmZvcm1hdGlvblJlcXVlc3RQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpbmZvcm1hdGlvblJlcXVlc3Q6IE9uYm9hcmRpbmdJbmZvcm1hdGlvblJlcXVlc3QhXG59XG5cbmlucHV0IEFjaFBheW1lbnRJbnN0cnVtZW50RmluZElucHV0IHtcbiAgYWNjb3VudE51bWJlcjogU3RyaW5nIVxuICByb3V0aW5nTnVtYmVyOiBTdHJpbmchXG59XG5cbnR5cGUgQ29sbGVjdGlvbkF0dGVtcHRFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogQ29sbGVjdGlvbkF0dGVtcHRcbn1cblxuaW5wdXQgQ3JlYXRlVmlydHVhbENhcmRJbnB1dCB7XG4gIGJ1ZGdldElkOiBJRFxuICBjYXJkTGltaXQ6IENhcmRMaW1pdFxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGN1c3RvbWVyVXNlcklkOiBJRFxuICBkZWZhdWx0TWVtbzogU3RyaW5nXG4gIGRpc3BsYXlOYW1lOiBTdHJpbmdcbiAgaG9sZGVyTmFtZTogU3RyaW5nIVxuICBpc0J1ZGdldENhcmQ6IEJvb2xlYW5cbiAgaXNQcmVhcHByb3ZlZDogQm9vbGVhblxuICBzb2Z0RXhwaXJlc0F0OiBUaW1lXG59XG5cbnR5cGUgTmV0c3VpdGVTdWJzaWRpYXJ5IHtcbiAgbmFtZTogU3RyaW5nIVxuICB2ZW5kb3JJbnRlcm5hbElkOiBTdHJpbmchXG59XG5cbnR5cGUgTWVyY2hhbnQgaW1wbGVtZW50cyBOb2RlIEBrZXkoZmllbGRzOiBcImlkXCIpIHtcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIG1lcmNoYW50Q2F0ZWdvcnk6IE1lcmNoYW50Q2F0ZWdvcnlcbiAgbWVyY2hhbnRJY29uOiBNZXJjaGFudEljb25cbiAgbmFtZTogU3RyaW5nXG4gIHN0YXR1czogU3RyaW5nXG4gIHdlYnNpdGU6IFN0cmluZ1xufVxuXG5pbnB1dCBBcHByb3ZhbHNSZXF1ZXN0TW9udGhseUxpbWl0T3ZlcnJpZGVJbnB1dCB7XG4gIGFtb3VudDogSW50IVxuICBlbmRzQXQ6IFRpbWUhXG59XG5cbnR5cGUgQ2FzaFRyYW5zYWN0aW9uRmJvVHJhbnNmZXJEZXRhaWxzIHtcbiAgXCJcIlwiRkJPIGFjY291bnQgdHlwZVwiXCJcIlxuICBmYm9BY2NvdW50TmFtZTogU3RyaW5nXG59XG5cbmVudW0gSW52b2ljaW5nQWNjb3VudFN0YXR1cyB7XG4gIEFDVElWRVxuICBERUFDVElWQVRFRFxuICBJTlZBTElEXG4gIFNVU1BFTkRFRFxufVxuXG50eXBlIEV4cGVuc2VzU2V0dGluZyBpbXBsZW1lbnRzIE5vZGUge1xuICBhdXRvRGlzbWlzc01hdGNoZXJKc29uOiBTdHJpbmdcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIGluc2VydGVkQXQ6IFRpbWVcbiAgcnVsZXMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IEV4cGVuc2VzUnVsZUNvbm5lY3Rpb25cbiAgc3RhdHVzOiBFeHBlbnNlc1NldHRpbmdTdGF0dXNcbn1cblxuaW5wdXQgQ29ubmVjdENyZWRlbnRpYWxJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaWQ6IElEIVxuICByZWRpcmVjdFVybDogU3RyaW5nIVxufVxuXG5pbnB1dCBEZWxldGVQb3NpdGl2ZVBheUFjY291bnRTZXR0aW5nSW5wdXQge1xuICBhY2hDb21wYW55SWQ6IElEIVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgQ29sbGVjdGlvbkludGVudGlvbkNvbm5lY3Rpb24ge1xuICBlZGdlczogW0NvbGxlY3Rpb25JbnRlbnRpb25FZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbnVuaW9uIFJld2FyZHNCb251cyA9IEFmZmlsaWF0ZUJvbnVzIHwgQ2FzaEFjdGl2YXRpb25TcGVuZEJvbnVzIHwgQ2FzaExpbmtlZEFjY291bnRCb251cyB8IEluY2VudGl2ZVBsYWNlbWVudFZpZXdEYXRhQmFubmVyIHwgSW5jZW50aXZlUGxhY2VtZW50Vmlld0RhdGFSZXdhcmRzUGFnZUNoZWNrYm94IHwgSW5jZW50aXZlUGxhY2VtZW50Vmlld0RhdGFSZXdhcmRzUGFnZVNjYWxlIHwgSW5jZW50aXZlUGxhY2VtZW50Vmlld0RhdGFSZXdhcmRzUGFnZVRocmVzaG9sZFxuXG50eXBlIE1pbGVzVHJhbnNmZXIgaW1wbGVtZW50cyBOb2RlIHtcbiAgZmFpbHVyZVJlYXNvbnM6IFtNaWxlc1RyYW5zZmVyRmFpbHVyZVJlYXNvbl1cbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIGluaXRpYXRlZEJ5VXNlcjogVXNlclxuICBpbnNlcnRlZEF0OiBUaW1lXG4gIGxveWFsdHlQcm9ncmFtOiBMb3lhbHR5UHJvZ3JhbVxuICBtaWxlc0Ftb3VudDogSW50XG4gIHBvaW50c0Ftb3VudDogSW50XG4gIHByb2dyYW1NZW1iZXJzaGlwOiBQcm9ncmFtTWVtYmVyc2hpcFxuICByZWZlcmVuY2VJZDogU3RyaW5nIVxuICBzdGF0dXM6IE1pbGVzVHJhbnNmZXJTdGF0dXNcbiAgdG9Vc2VyOiBVc2VyXG59XG5cbmlucHV0IENyZWF0ZUNvbnRhY3RJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZW1haWw6IFN0cmluZ1xuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nIVxuICBuYW1lOiBTdHJpbmchXG4gIHBheWVlVHlwZTogUGF5ZWVUeXBlID0gVkVORE9SXG4gIHBob25lTnVtYmVyOiBTdHJpbmdcbn1cblxudHlwZSBPbmJvYXJkaW5nQXBwbGljYXRpb24gaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIGJsdWVwcmludCB0aGF0IHRoaXMgYXBwbGljYXRpb24gd2lsbCBmb2xsb3dcIlwiXCJcbiAgYmx1ZXByaW50OiBPbmJvYXJkaW5nQmx1ZXByaW50IVxuICBcIlwiXCJUaGUgYXBwbGljYXRpb24gY3JlYXRvciwgbnVsbCB3aGVuIGFwcGxpY2FudCBpcyBub3QgYW4gYWRtaW5cIlwiXCJcbiAgY3JlYXRlZEJ5VXNlcjogVXNlclxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiSW5mb3JtYXRpb24gcmVxdWVzdHMgdG8gYmUgY29tcGxldGVkIGJ5IHRoZSBhcHBsaWNhbnRcIlwiXCJcbiAgaW5mb3JtYXRpb25SZXF1ZXN0cyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogT25ib2FyZGluZ0luZm9ybWF0aW9uUmVxdWVzdENvbm5lY3Rpb25cbiAgXCJcIlwiVGhlIHRvdGFsIG51bWJlciBvZiBpbmZvcm1hdGlvbiByZXF1ZXN0c1wiXCJcIlxuICBpbmZvcm1hdGlvblJlcXVlc3RzQ291bnQ6IEludCFcbiAgXCJcIlwidGhlIHRpbWVzdGFtcCBvZiB3aGVuIHRoaXMgYXBwbGljYXRpb24gaXMgaW5zZXJ0ZWQgaW50byBEQlwiXCJcIlxuICBpbnNlcnRlZEF0OiBUaW1lXG4gIFwiXCJcIkZvciByaXNrIGV2YWx1YXRpb24gYXBwbGljYXRpb25zIHRoaXMgd2lsbCBiZSB0cnVlIHdoZW4gcmVhZHlfZm9yX3Jldmlld19hdCBpcyBub3QgZW1wdHlcIlwiXCJcbiAgaXNFdmlkZW5jZVJlc3VibWlzc2lvbjogQm9vbGVhblxuICBcIlwiXCJGbGFnIHRoYXQgc2F5cyBpZiB0aGUgYXBwbGljYXRpb24gaXMgc3VibWl0dGVkIG9yIG5vdFwiXCJcIlxuICBpc1N1Ym1pdHRlZDogQm9vbGVhbiFcbiAgXCJcIlwiRXh0cmEgc3RhdGUgdmFsdWVzIGZvciBhbiBhcHBsaWNhdGlvbiwgZm9yIHByb2R1Y3QgYXBwbGljYXRpb25zIHRoaXMgY29udGFpbnMgY2FzaC9jYXJkIG91dGNvbWVzXCJcIlwiXG4gIHN0YXRlOiBPbmJvYXJkaW5nQXBwbGljYXRpb25TdGF0ZSFcbiAgXCJcIlwiVGhlIHN0YXR1cyBvZiB0aGUgYXBwbGljYXRpb25cIlwiXCJcbiAgc3RhdHVzOiBPbmJvYXJkaW5nQXBwbGljYXRpb25TdGF0dXMhXG4gIFwiXCJcInRoZSBzdWJtaXR0ZWQgdGltZXN0YW1wXCJcIlwiXG4gIHN1Ym1pdHRlZEF0OiBUaW1lXG59XG5cblwiXCJcIkNhcmQgT3ZlcnZpZXcgUGFnZVwiXCJcIlxudHlwZSBDYXJkT3ZlcnZpZXdQYWdlIHtcbiAgXCJcIlwiQ2FyZCBPdmVydmlldyBJbnNpZ2h0cyBUaWxlcyBDb25uZWN0aW9uXCJcIlwiXG4gIGNhcmRPdmVydmlld0luc2lnaHRzVGlsZXMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IENhcmRPdmVydmlld0luc2lnaHRzVGlsZUNvbm5lY3Rpb25cbiAgXCJcIlwiQ2FyZCBPdmVydmlldyBTdW1tYXJ5IFRpbGVzIENvbm5lY3Rpb25cIlwiXCJcbiAgY2FyZE92ZXJ2aWV3U3VtbWFyeVRpbGVzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBDYXJkT3ZlcnZpZXdTdW1tYXJ5VGlsZUNvbm5lY3Rpb25cbiAgXCJcIlwiRWR1Y2F0aW9uIENvbm5lY3Rpb25cIlwiXCJcbiAgZWR1Y2F0aW9uVGlsZXMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IEVkdWNhdGlvblRpbGVDb25uZWN0aW9uXG4gIFwiXCJcIk5vdGlmaWNhdGlvbnMgQ29ubmVjdGlvblwiXCJcIlxuICBub3RpZmljYXRpb25UaWxlcyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogTm90aWZpY2F0aW9uVGlsZUNvbm5lY3Rpb25cbn1cblxudHlwZSBDb250YWN0QWRkcmVzcyB7XG4gIFwiXCJcIkFkZHJlc3MgMVwiXCJcIlxuICBhZGRyZXNzMTogU3RyaW5nIVxuICBcIlwiXCJBZGRyZXNzIDJcIlwiXCJcbiAgYWRkcmVzczI6IFN0cmluZ1xuICBcIlwiXCJDaXR5XCJcIlwiXG4gIGNpdHk6IFN0cmluZyFcbiAgXCJcIlwiQ291bnRyeVwiXCJcIlxuICBjb3VudHJ5OiBTdHJpbmchXG4gIFwiXCJcIkZpcnN0IG5hbWVcIlwiXCJcbiAgZmlyc3ROYW1lOiBTdHJpbmchXG4gIFwiXCJcIkxhc3QgbmFtZVwiXCJcIlxuICBsYXN0TmFtZTogU3RyaW5nIVxuICBcIlwiXCJTdGF0ZVwiXCJcIlxuICBzdGF0ZTogU3RyaW5nIVxuICBcIlwiXCJaaXAgY29kZVwiXCJcIlxuICB6aXA6IFN0cmluZyFcbn1cblxuZW51bSBJbnN0cnVtZW50Q29kZSB7XG4gIE5BU0RBUV9EQUdYWFxuICBOQVNEQVFfREdDWFhcbiAgTkFTREFRX0RHVlhYXG4gIE5BU0RBUV9EUEdYWFxuICBOQVNEQVFfR0dCWFhcbiAgTkFTREFRX0dHRFhYXG4gIE5BU0RBUV9HR1NYWFxuICBOQVNEQVFfR1NCWFhcbiAgVVNEXG59XG5cblwiXCJcIkNvbm5lY3Rpb24gTm9kZSBUeXBlIENhcmQgT3ZlcnZpZXcgU3VtbWFyeSBUaWxlXCJcIlwiXG50eXBlIENhcmRPdmVydmlld1N1bW1hcnlUaWxlQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbQ2FyZE92ZXJ2aWV3U3VtbWFyeVRpbGVFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbmVudW0gT2ZmZXJUeXBlIHtcbiAgQ0FTSF9GT1JXQVJEXG4gIFNCMzBcbiAgU0RDXG4gIFVOS05PV05cbn1cblxuXCJcIlwiYWNjb3VudC1sZXZlbCBzcGVuZCBhbGVydHMgY29uZmlnXCJcIlwiXG50eXBlIFNwZW5kQWxlcnRzQ29uZmlndXJhdGlvbkRldGFpbHMge1xuICBcIlwiXCJhbGwgbXV0aW5nIGNvbmZpZ3VyYXRpb25zIGZvciB0aGlzIGFjY291bnRcIlwiXCJcbiAgYWxlcnRUeXBlTXV0aW5nQ29uZmlndXJhdGlvbnM6IFtBbGVydFR5cGVNdXRpbmdDb25maWd1cmF0aW9ucyFdIVxuICBcIlwiXCJhbGVydHMgZW5hYmxlZCBmb3IgdGhpcyBhY2NvdW50XCJcIlwiXG4gIGVuYWJsZWRBbGVydFR5cGVzOiBbU3BlbmRBbGVydFR5cGUhXSFcbiAgXCJcIlwidXNlcnMgbXV0ZWQgZnJvbSBhbGwgYWxlcnRzXCJcIlwiXG4gIHVuaXZlcnNhbGx5TXV0ZWRVc2VySWRzOiBbSUQhXSFcbn1cblxudHlwZSBDaGFuZ2VJbnZlc3RtZW50UG9saWN5UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuaW5wdXQgRGlzY29ubmVjdEFwaUNsaWVudElucHV0IHtcbiAgY2xpZW50SWQ6IFN0cmluZyFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIFJlY3VycmluZ1J1bGVzIHtcbiAgZW5kczogU3RyaW5nIVxuICBob3dPZnRlbjogU3RyaW5nIVxufVxuXG5cIlwiXCJDYXNoIEFjdGl2YXRpb24gU3BlbmQgQm9udXNcIlwiXCJcbnR5cGUgQ2FzaEFjdGl2YXRpb25TcGVuZEJvbnVzIHtcbiAgYW1vdW50U3BlbnRSZXF1aXJlZFVzZENlbnRzOiBJbnQhXG4gIGFtb3VudFNwZW50VXNkQ2VudHM6IEludCFcbiAgY29tcGxldGVkQXQ6IFRpbWVcbiAgZXhwaXJlc0F0OiBUaW1lXG4gIHJld2FyZEFtb3VudDogSW50IVxuICBzdGF0dXM6IENhc2hCb251c1N0YXR1cyFcbn1cblxudHlwZSBEaXNtaXNzQ2FyZEZyYXVkQWxlcnRzUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZnJhdWRBbGVydHM6IFtGcmF1ZEFsZXJ0IV0hXG59XG5cbmlucHV0IENyZWF0ZU9yVXBkYXRlUGF5bWVudElucHV0IHtcbiAgYW1vdW50OiBGaW5hbmNpYWxBc3NldElucHV0XG4gIGNhcmRJZDogSURcbiAgZGVzY3JpcHRpb246IFN0cmluZ1xuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nIVxuICBpbnZvaWNlOiBDYXJkUGF5bWVudEZvcndhcmRlckludm9pY2VJbnB1dFxuICBwYXltZW50SWQ6IElEXG4gIHJlY2lwaWVudDogQ2FyZFBheW1lbnRGb3J3YXJkZXJSZWNpcGllbnRJbnB1dFxufVxuXG5cIlwiXCI2NEJpdCBpbnRlZ2VyXCJcIlwiXG5zY2FsYXIgTG9uZ1xuXG50eXBlIEV4cGVuc2VzSXRlbUVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBFeHBlbnNlc0l0ZW1cbn1cblxudHlwZSBDYXJkTGltaXRTdW1tYXJ5IHtcbiAgYW1vdW50OiBJbnQhXG4gIGZyZXF1ZW5jeTogQ2FyZExpbWl0RnJlcXVlbmN5IVxufVxuXG50eXBlIFNldFVzZXJSb2xlUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdXNlcjogVXNlclxufVxuXG50eXBlIFVwZGF0ZUxvY2F0aW9uUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgbG9jYXRpb246IExvY2F0aW9uIVxufVxuXG5pbnB1dCBTaGlwcGluZ0FkZHJlc3NJbnB1dCB7XG4gIGFkZHJlc3M6IEFkZHJlc3NJbnB1dCFcbiAgZmlyc3ROYW1lOiBTdHJpbmchXG4gIGxhc3ROYW1lOiBTdHJpbmchXG59XG5cbnR5cGUgQ3JlZGVudGlhbFN1Y2Nlc3NSZXN1bHQge1xuICBjcmVkZW50aWFsOiBDcmVkZW50aWFsXG59XG5cbmVudW0gSW5zaWdodFN0YXR1cyB7XG4gIEFSQ0hJVkVEXG4gIEZPUl9SRVZJRVdcbiAgSU5WQUxJRFxufVxuXG5cIlwiXCJUaGUgaW5kaXZpZHVhbCByb3V0aW5nIHJ1bGVcIlwiXCJcbnR5cGUgQXBwcm92YWxzUm91dGluZ1J1bGVJbmRpdmlkdWFscyBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiQSBsaXN0IG9mIGFsbG93ZWQgYXBwcm92ZXIgaWRzXCJcIlwiXG4gIHN0YXRpY0FsbG93ZWRBcHByb3ZlclVzZXJJZHM6IFtJRCFdIVxufVxuXG5pbnB1dCBMZWdhbEFncmVlbWVudFJlZmVyZW5jZSB7XG4gIG5hbWU6IFN0cmluZyFcbiAgdmVyc2lvbjogU3RyaW5nIVxufVxuXG51bmlvbiBSZWNlaXZpbmdNZXRob2QgPSBBY2hSZWNlaXZpbmdNZXRob2QgfCBDaGVja1JlY2VpdmluZ01ldGhvZCB8IEVmdFJlY2VpdmluZ01ldGhvZCB8IFdpcmVSZWNlaXZpbmdNZXRob2RcblxudHlwZSBDYXNoVHJhbnNhY3Rpb25PdXRnb2luZ0NoZXF1ZURldGFpbHMge1xuICBcIlwiXCJUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50XCJcIlwiXG4gIGFkZHJlc3M6IEFkZHJlc3NcbiAgXCJcIlwiVGhlIG1lbW8gZm91bmQgb24gdGhlIHBoeXNpY2FsIGNoZXF1ZVwiXCJcIlxuICBjaGVxdWVNZW1vOiBTdHJpbmdcbiAgXCJcIlwiVGhlIGNoZXF1ZSBudW1iZXIgZm91bmQgb24gdGhlIHBoeXNpY2FsIGNoZXF1ZVwiXCJcIlxuICBjaGVxdWVOdW1iZXI6IEludFxuICBcIlwiXCJUaGUgZW1haWwgb2YgdGhlIHJlY2lwaWVudFwiXCJcIlxuICBlbWFpbDogU3RyaW5nXG4gIFwiXCJcIkV4cGVjdGVkIGRlbGl2ZXJ5IGRhdGUgcHJvdmlkZWQgZnJvbSBvdXIgM3JkIHBhcnR5IHZlbmRvciB0aGF0IHNlbmRzIHRoZSBwaHlzaWNhbCBjaGVxdWVzXCJcIlwiXG4gIGV4cGVjdGVkRGVsaXZlcnlEYXRlOiBEYXRlXG4gIFwiXCJcIldoZW4gdGhlIHBoeXNpY2FsIGNoZXF1ZSB3YXMgbWFpbGVkIGF0IGJ5IG91ciAzcmQgcGFydHkgdmVuZG9yXCJcIlwiXG4gIG1haWxlZEF0OiBUaW1lXG4gIFwiXCJcIlRoZSBuYW1lIG9mIHRoZSByZWNpcGllbnQuIFRoaXMgZmllbGQgaXMgdXNlZCwgZm9yIGV4YW1wbGUsIHdoZW4gc2VuZGluZyBhIGNoZXF1ZVwiXCJcIlxuICByZWNpcGllbnROYW1lOiBTdHJpbmdcbn1cblxuZW51bSBCYW5rQWNjb3VudFR5cGUge1xuICBDSEVDS0lOR1xuICBTQVZJTkdTXG59XG5cbmlucHV0IFVwZGF0ZVVzZXJJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGVwYXJ0bWVudElkOiBJRFxuICBmaXJzdE5hbWU6IFN0cmluZ1xuICBpZDogSUQhXG4gIGxhc3ROYW1lOiBTdHJpbmdcbiAgbG9jYXRpb25JZDogSURcbn1cblxuXCJcIlwiQSBjeWNsZSByZW9jY3VycmluZyB0d2ljZSBhIHdlZWsgb24gdHdvIHBhcnRpY3VsYXIgZGF5cy5cIlwiXCJcbnR5cGUgU2VtaVdlZWtseUNhcmRTdGF0ZW1lbnRQb2xpY3lDeWNsZSB7XG4gIFwiXCJcIlRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXCJcIlwiXG4gIGZpcnN0RGF5OiBJbnRcbiAgXCJcIlwiVGhlIHNlY29uZCBkYXkgb2YgdGhlIHdlZWsuXCJcIlwiXG4gIHNlY29uZERheTogSW50XG59XG5cbmlucHV0IENyZWF0ZVJlaW1idXJzZW1lbnRJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcmVpbWJ1cnNlbWVudE1ldGFkYXRhOiBSZWltYnVyc2VtZW50TWV0YWRhdGFJbnB1dCFcbn1cblxuZW51bSBFYXJseUFjY2Vzc0ZlYXR1cmVNZWRpYUFzc2V0VHlwZSB7XG4gIElNQUdFXG4gIFZJREVPXG59XG5cbmVudW0gQ2FzaFRyYW5zYWN0aW9uU3RhdHVzIHtcbiAgQVBQUk9WQUxfUkVRVUlSRURcbiAgREVMRVRFRFxuICBEUkFGVFxuICBGQUlMRURcbiAgSU5WQUxJRFxuICBQUk9DRVNTRURcbiAgUFJPQ0VTU0lOR1xuICBTQ0hFRFVMRURcbn1cblxudHlwZSBDcmVhdGVQdXNoQ2hhbm5lbFBheWxvYWQge1xuICBjaGFubmVsOiBDaGFubmVsIVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgV2lyZVJlY2VpdmluZ01ldGhvZCB7XG4gIGFjY291bnROdW1iZXI6IFN0cmluZ1xuICBiZW5lZmljaWFyeU5hbWU6IFN0cmluZ1xuICBjb3VudHJ5OiBTdHJpbmdcbiAgcm91dGluZ051bWJlcjogU3RyaW5nXG59XG5cbmVudW0gVHlwZSB7XG4gIENIRUNLSU5HXG4gIFNBVklOR1Ncbn1cblxuaW5wdXQgVHVybk9uU2VlbkZsYWdJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgXCJcIlwiVGFyZ2V0IGZsYWcgYnkga2V5XCJcIlwiXG4gIGtleTogU2VlbkZsYWdLZXkhXG59XG5cbnR5cGUgUmVjb3JkTWFya2V0aW5nUmV3aW5kV2F0Y2hQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB2aWRlbzogTWFya2V0aW5nUmV3aW5kVmlkZW9cbn1cblxuZW51bSBCaWxsaW5nUGF5bWVudEludGVudFNvdXJjZVR5cGUge1xuICBDT0xMRUNUX0ZVTkRJTkdfU09VUkNFXG4gIERFUE9TSVRTX0FDQ09VTlRcbiAgT0ZGTElORVxuICBQQVlFRV9ESVJFQ1RPUllfUEFZTUVOVF9JTlNUUlVNRU5UXG4gIFJFV0FSRFNfUkVERU1QVElPTlxufVxuXG5lbnVtIE9yZGVyQnkge1xuICBBU0NcbiAgREVTQ1xuICBJTlZBTElEXG59XG5cbmlucHV0IENyZWF0ZUVtYWlsQ2hhbm5lbElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBlbWFpbDogRW1haWwhXG59XG5cbnR5cGUgQ3JlYXRlQXV0b0FkZEZ1bmRzUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcGF5bWVudDogRGVwb3NpdHNQYXltZW50IVxufVxuXG5cIlwiXCJUaGUgbWFuYWdlciB1c2VyIHR5cGVcIlwiXCJcbnR5cGUgVXNlclR5cGVNYW5hZ2VyIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBmYWxsYmFjayB1c2VyIGlkIHdoZW4gdGhlIHJlcXVlc3QgaW5pdGlhdG9yIGRvZXMgbm90IGhhdmUgYSBtYW5hZ2VyXCJcIlwiXG4gIGZhbGxiYWNrVXNlcjogQXBwcm92YWxzVXNlciFcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG59XG5cbmlucHV0IENyZWF0ZUZ1bmRpbmdTb3VyY2VJbnB1dCB7XG4gIGJhbmtBY2NvdW50U291cmNlOiBCYW5rQWNjb3VudFNvdXJjZUlucHV0IVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkZW1wb3RlbmN5S2V5OiBTdHJpbmchXG4gIHByaW9yaXR5OiBGdW5kaW5nU291cmNlUHJpb3JpdHlcbiAgdHlwZTogU3RyaW5nIVxufVxuXG5pbnB1dCBBcHByb3ZhbHNQb2xpY3lEZXRhaWxzSW5wdXQge1xuICBydWxlR3JvdXBzOiBbQXBwcm92YWxzUnVsZUdyb3VwSW5wdXQhXSFcbiAgdmVyc2lvbjogSW50IVxufVxuXG5pbnB1dCBDcmVhdGVMb2NhdGlvbklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZXNjcmlwdGlvbjogU3RyaW5nXG4gIG5hbWU6IFN0cmluZyFcbn1cblxuaW5wdXQgVXBkYXRlUGxhaWRMaW5rVG9rZW5JbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZmluYW5jaWFsU291cmNlSWQ6IElEIVxuICByZWRpcmVjdFVyaTogU3RyaW5nXG59XG5cbnR5cGUgUmV3YXJkc0JvbnVzQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbUmV3YXJkc0JvbnVzRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG5pbnB1dCBBZG1pblVwZGF0ZUFwcHJvdmFsc1Jldmlld3NJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGVzY3JpcHRpb246IFN0cmluZ1xuICByZXF1ZXN0U25hcHNob3RzOiBbQXBwcm92YWxzUmVxdWVzdElucHV0XVxuICByZXZpZXdJZHM6IFtJRCFdIVxuICBzdGF0dXM6IEFwcHJvdmFsc1Jldmlld1N0YXR1cyFcbn1cblxudHlwZSBQYXltZW50RnVuZGluZ1NvdXJjZUJhbGFuY2VEZWNyZWFzZUNvbW1pdG1lbnQge1xuICBjb2xsZWN0RnVuZGluZ1NvdXJjZUlkOiBJRCFcbiAgZnVuZGluZ1NvdXJjZTogRnVuZGluZ1NvdXJjZSFcbiAgbWF4QmFsYW5jZURlY3JlYXNlQW1vdW50OiBGaW5hbmNpYWxBc3NldCFcbn1cblxudHlwZSBVcGRhdGVBcHByb3ZhbHNSZXZpZXdQYXlsb2FkIHtcbiAgYXBwcm92YWxzUmV2aWV3OiBBcHByb3ZhbHNSZXZpZXdcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5cIlwiXCJUaGUgcGF5b3V0IGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVjZWl2YWJsZXMgb2ZmZXJzIHNlcnZpY2UgKGkuZS4sIGByb2RldGxwb19gKS5cIlwiXCJcbnR5cGUgUmVjZWl2YWJsZXNPZmZlcnNQYXlvdXQgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiXG4gIFRoZSBsaXN0IG9mIGFjY2VwdGVkIG9mZmVycyB0aGF0IGFyZSBsaW5rZWQgdG8gdGhpcyBwYXlvdXQuIFRoaXMgaW5jbHVkZXMgYm90aFxuICBjYXNoIGFkdmFuY2VzLCBhcyB3ZWxsIGFzIG9mZmVycyBhY2NlcHRlZCBhcyBwYXJ0IG9mIHRyYW5zYWN0aW9uIGNsZWFyaW5nc1xuICBcIlwiXCJcbiAgYWNjZXB0ZWRPZmZlcnM6IFtSZWNlaXZhYmxlc09mZmVyc09mZmVyXVxuICBcIlwiXCJUb3RhbCBvZiBjYXNoIGFkdmFuY2VzIG1hZGUgb24gb2ZmZXJzIGJhc2VkIG9uIHRoaXMgcGF5b3V0IHNvIGZhclwiXCJcIlxuICBhY2NlcHRlZE9mZmVyc0Nhc2hBZHZhbmNlZEFtb3VudDogRmluYW5jaWFsQXNzZXRcbiAgXCJcIlwiVG90YWwgZmVlIGFtb3VudCBmb3Igb2ZmZXJzIGJhc2VkIG9uIHRoaXMgcGF5b3V0IHNvIGZhclwiXCJcIlxuICBhY2NlcHRlZE9mZmVyc0Nhc2hGZWVBbW91bnQ6IEZpbmFuY2lhbEFzc2V0XG4gIFwiXCJcIlRoZSBjdXJyZW50IGFjdGl2ZSBpbnN0YW50IHBheW91dCAoZ2VuZXJhdGVkKSBvZmZlciBhc3NvY2lhdGVkIHdpdGggdGhpcyBwYXlvdXRcIlwiXCJcbiAgYWN0aXZlT2ZmZXI6IFJlY2VpdmFibGVzT2ZmZXJzT2ZmZXJcbiAgXCJcIlwiVGhlIGN1cnJlbnQga25vd24gYW1vdW50IG9mIHRoZSBwYXlvdXQuIFRoaXMgbWF5IGNoYW5nZSBmb3Igb3BlbiBwYXlvdXRzIGFzIHNhbGVzIGFjY3VtdWxhdGUuXCJcIlwiXG4gIGFtb3VudDogRmluYW5jaWFsQXNzZXRcbiAgXCJcIlwiU3VtIG9mIGJhbGFuY2VzIGFjcm9zcyBhbGwgb2ZmZXJzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHBheW91dCB0aGF0IGJhY2sgY2FyZCB0cmFuc2FjdGlvbnNcIlwiXCJcbiAgY2FyZEJhbGFuY2U6IEZpbmFuY2lhbEFzc2V0XG4gIFwiXCJcIlN1bSBvZiBhY2NlcHRlZCBvZmZlciBhbW91bnRzIGFjcm9zcyBhbGwgb2ZmZXJzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHBheW91dCB0aGF0IGJhY2sgY2FyZCB0cmFuc2FjdGlvbnNcIlwiXCJcbiAgY2FyZFNwZW5kOiBGaW5hbmNpYWxBc3NldFxuICBcIlwiXCJKb3VybmFsRW50cmllcyB0byBkaXNwbGF5IFJldmVudWUgQWNjZXNzIENhcmQgdHJhbnNhY3Rpb25zIGFzc29jaWF0ZWQgd2l0aCB0aGUgcGF5b3V0XCJcIlwiXG4gIGNhcmRUcmFuc2FjdGlvbkpvdXJuYWxFbnRyaWVzKGxpbWl0OiBJbnQhKTogW0pvdXJuYWxFbnRyeV0hXG4gIFwiXCJcIlRoZSBhY3R1YWwgb3IgZXhwZWN0ZWQgYXJyaXZhbCBkYXRlIGZvciB0aGUgcGF5b3V0XCJcIlwiXG4gIGV4cGVjdGVkVHJhbnNmZXJBcnJpdmFsQXQ6IFRpbWVcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlRoZSBsaXN0IG9mIHBheW1lbnQgaW50ZW50cyByZXByZXNlbnRpbmcgY29sbGVjdGlvbnMgb24gb2ZmZXJzIGxpbmtlZCB0byB0aGlzIHBheW91dFwiXCJcIlxuICBwYXltZW50SW50ZW50cyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogUmVjZWl2YWJsZXNPZmZlcnNQYXltZW50SW50ZW50Q29ubmVjdGlvblxuICBcIlwiXCJUaGUgdmVuZG9yIG9yIHNhbGVzIHBsYXRmb3JtLCBpLmUuLCBBbWF6b24sIFNob3BpZnksIGV0Yy5cIlwiXCJcbiAgdmVuZG9yOiBSZWNlaXZhYmxlc09mZmVyc1ZlbmRvciFcbiAgXCJcIlwiVGhlIGlkIG9mIHRoZSBwYXlvdXQgb24gdGhlIHZlbmRvciAoc2FsZXMgcGxhdGZvcm0sIGkuZS4sIEFtYXpvbiwgU2hvcGlmeSwgZXRjLilcIlwiXCJcbiAgdmVuZG9yUGF5b3V0SWQ6IFN0cmluZyFcbn1cblxuXCJcIlwiVGhlIGluZm9ybWF0aW9uIGFib3V0IGFuIGF0dGVtcHQgdG8gbWFrZSBhIHBheW1lbnRcIlwiXCJcbnR5cGUgQmlsbGluZ1BheW1lbnQgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIGFtb3VudCBvZiB0aGlzIHBheW1lbnQgdGhhdCBoYXMgYmVlbiBjb2xsZWN0ZWRcIlwiXCJcbiAgY29sbGVjdGVkQW1vdW50OiBGaW5hbmNpYWxBc3NldCFcbiAgXCJcIlwiVGhlIHRpbWUgYXQgd2hpY2ggdGhlIHBheW1lbnQgbW9zdCByZWNlbnRseSBjb21wbGV0ZWRcIlwiXCJcbiAgY29sbGVjdGVkQXQ6IFRpbWVcbiAgXCJcIlwiVGhlIGN1c3RvbWVyIGFjY291bnQgaWQgb2YgdGhpcyBwYXltZW50XCJcIlwiXG4gIGN1c3RvbWVyQWNjb3VudElkOiBTdHJpbmchXG4gIFwiXCJcIlRoZSBjYXVzZSBvZiBmYWlsdXJlXCJcIlwiXG4gIGZhaWx1cmVUeXBlOiBTdHJpbmdcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlRoZSB0aW1lIGF0IHdoaWNoIHRoZSBwYXltZW50IHdhcyBpbml0aWF0ZWRcIlwiXCJcbiAgaW5pdGlhdGVkQXQ6IFRpbWVcbiAgXCJcIlwiVGhlIGRldGFpbHMgb2Ygd2hvL3doYXQgaW5pdGlhdGVkIHRoZSBwYXltZW50XCJcIlwiXG4gIGluaXRpYXRlZEJ5OiBJbml0aWF0ZWRCeSFcbiAgXCJcIlwiVGhlIGJhY2tlbmQgZGF0YSBtb2RlbCBpZCBvZiB0aGlzIGJpbGxpbmcgcGF5bWVudFwiXCJcIlxuICByYXdJZDogU3RyaW5nIVxuICBcIlwiXCJUaGUgYW1vdW50IGZvciB3aGljaCB0aGlzIHBheW1lbnQgd2FzIHJlcXVlc3RlZFwiXCJcIlxuICByZXF1ZXN0ZWRBbW91bnQ6IEZpbmFuY2lhbEFzc2V0IVxuICBcIlwiXCJUaGUgYW1vdW50IG9mIHRoaXMgcGF5bWVudCB0aGF0IGhhcyBiZWVuIHJldmVyc2VkXCJcIlwiXG4gIHJldmVyc2VkQW1vdW50OiBGaW5hbmNpYWxBc3NldCFcbiAgXCJcIlwiVGhlIHRpbWUgdGhlIHBheW1lbnQgd2FzIHNjaGVkdWxlZCBmb3JcIlwiXCJcbiAgc2NoZWR1bGVkRm9yOiBUaW1lIVxuICBcIlwiXCJUaGUgZGV0YWlscyBhYm91dCB0aGUgc291cmNlIG9mIHRoaXMgcGF5bWVudFwiXCJcIlxuICBzb3VyY2U6IEJpbGxpbmdQYXltZW50U291cmNlIVxuICBcIlwiXCJUaGUgbGlmZSBjeWNsZSBzdGF0dXMgb2YgdGhpcyBwYXltZW50XCJcIlwiXG4gIHN0YXR1czogUGF5bWVudFN0YXR1cyFcbn1cblxuaW5wdXQgQ29ubmVjdFdlYXZDcmVkZW50aWFsSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGZldGNoUG9saWN5OiBTdHJpbmdcbiAgaWQ6IElEIVxuICBwbGF0Zm9ybTogV2VhdlNhbGVzUGxhdGZvcm0hXG4gIHJlZGlyZWN0VXJsOiBTdHJpbmchXG4gIHNob3BpZnlTdG9yZTogU3RyaW5nXG59XG5cbnR5cGUgV2Vla2x5Q2xvc2luZ1N0cmF0ZWd5IHtcbiAgZGF5T2ZXZWVrOiBJbnRcbn1cblxudHlwZSBVcGRhdGVVc2VyRW1haWxQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB1c2VyOiBVc2VyIVxufVxuXG50eXBlIENyZWRlbnRpYWxXZWF2UGF5bG9hZCB7XG4gIHBsYXRmb3JtOiBXZWF2U2FsZXNQbGF0Zm9ybSFcbiAgc2hvcGlmeVN0b3JlOiBTdHJpbmdcbiAgdmVuZG9ySWQ6IFN0cmluZ1xufVxuXG5cIlwiXCJWaWV3IGRhdGEgZm9yIHJld2FyZHMgcGFnZSBjaGVja2JveFwiXCJcIlxudHlwZSBJbmNlbnRpdmVQbGFjZW1lbnRWaWV3RGF0YVJld2FyZHNQYWdlQ2hlY2tib3gge1xuICBcIlwiXCJCb251cyBpZiBhY2hpZXZlZCAoY2VudHMpXCJcIlwiXG4gIGJvbnVzOiBJbnQhXG4gIFwiXCJcIkRlc2NyaXB0aW9uIG9mIGJvbnVzIChwb3RlbnRpYWxseSB0byBwdXQgaW4gbW9kYWwpXCJcIlwiXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmchXG4gIFwiXCJcIlRpbWUgd2hlbiB0aGUgdXNlciB3YXMgcGFpZCB0aGUgcG9pbnRzLCBudWxsIGlmIHRoZXkgaGF2ZW4ndCBiZWVuIHBhaWRcIlwiXCJcbiAgcGF5ZWRPdXRBdDogVGltZVxuICBcIlwiXCJQbGFjZW1lbnRcIlwiXCJcbiAgcGxhY2VtZW50OiBJbmNlbnRpdmVQbGFjZW1lbnQhXG4gIFwiXCJcIlNob3J0IGRlc2NyaXB0aW9uIChxdWljayBzdW1tYXJ5KVwiXCJcIlxuICBzaG9ydERlc2NyaXB0aW9uOiBTdHJpbmchXG4gIFwiXCJcIlN0YXR1c1wiXCJcIlxuICBzdGF0dXM6IEluY2VudGl2ZVBsYWNlbWVudFZpZXdEYXRhU3RhdHVzXG4gIFwiXCJcInN0ZXBzIHRoYXQgYXJlIHN1cHBvc2VkIHRvIGJlIGNvbXBsZXRlZCBmb3IgdGhpcyByZXdhcmRcIlwiXCJcbiAgc3RlcHM6IFtSZXdhcmRzUGFnZUNoZWNrYm94U3RlcCFdIVxuICBcIlwiXCJUaXRsZVwiXCJcIlxuICB0aXRsZTogU3RyaW5nIVxufVxuXG5pbnB1dCBDcmVhdGVNZXJjaGFudERpc3B1dGVJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZXZpZGVuY2VBc3NldElkczogW0lEIV1cbiAgZXhwZWN0ZWRBbW91bnQ6IEludFxuICByZWFzb246IFN0cmluZyFcbiAgcmVsYXRlZFRyYW5zYWN0aW9uSWRzOiBbSUQhXVxuICB0cmFuc2FjdGlvbklkczogW0lEIV0hXG59XG5cbnR5cGUgRXh0ZXJuYWxseU9yaWdpbmF0ZWRDaGVxdWVEZXRhaWxzIHtcbiAgYmFja0ltYWdlU3JjOiBTdHJpbmdcbiAgY2hlcXVlTWVtbzogU3RyaW5nXG4gIGZyb250SW1hZ2VTcmM6IFN0cmluZ1xuICBpbml0aWF0b3JDdXN0b21lclVzZXI6IFVzZXJcbiAgcmV0dXJuUmVhc29uOiBSZXR1cm5SZWFzb25cbiAgc2VuZGVyTmFtZTogU3RyaW5nXG4gIHR5cGU6IFR4VHlwZVxufVxuXG5pbnB1dCBGaW5hbmNpYWxBc3NldElucHV0IHtcbiAgXCJcIlwiVGhlIGluc3RydW1lbnQgY29kZSAodXNkLCBldGMuKS4gQ3VycmVudGx5LCBvbmx5IHVzZCBpcyBzdXBwb3J0ZWQuXCJcIlwiXG4gIGluc3RydW1lbnRDb2RlOiBGaW5hbmNpYWxJbnN0cnVtZW50Q29kZSA9IFVTRFxuICBcIlwiXCJUaGUgYW1vdW50IGluIGNlbnRzXCJcIlwiXG4gIHF1YW50aXR5Q2VudHM6IEludFxufVxuXG51bmlvbiBJbnNpZ2h0TWV0YWRhdGEgPSBJbnNpZ2h0TWV0YWRhdGFEdXBsaWNhdGVTdWJzY3JpcHRpb25zIHwgSW5zaWdodE1ldGFkYXRhSGlnaFNwZW5kIHwgSW5zaWdodE1ldGFkYXRhU2Fhc0luY3JlYXNlIHwgSW5zaWdodE1ldGFkYXRhU3BlbmRJbmNyZWFzZVxuXG5pbnB1dCBVcGRhdGVUcmFuc2FjdGlvbkNhdGVnb3J5SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHRyYW5zYWN0aW9uSWQ6IElEIVxuICB1c2VyQ2F0ZWdvcnlJZDogU3RyaW5nIVxufVxuXG5lbnVtIFNvcnRDb2x1bW4ge1xuICBBTU9VTlRcbiAgREVQQVJUTUVOVFxuICBJTlZBTElEXG4gIE1FUkNIQU5UX0NBVEVHT1JZXG4gIE1FUkNIQU5UX05BTUVcbiAgUE9TVEVEX0FUXG4gIFVTRVJfTkFNRVxufVxuXG50eXBlIENoYW5uZWxDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtDaGFubmVsRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG5pbnB1dCBDcmVhdGVQaHlzaWNhbENhcmRJbnB1dCB7XG4gIGJ1ZGdldElkOiBJRFxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGN1c3RvbWVyVXNlcklkOiBJRFxuICBkZWZhdWx0TWVtbzogU3RyaW5nXG4gIGRpc3BsYXlOYW1lOiBTdHJpbmdcbiAgaG9sZGVyTmFtZTogU3RyaW5nIVxuICBzaGlwcGluZ0FkZHJlc3M6IEFkZHJlc3NJbnB1dCFcbn1cblxuaW5wdXQgQ29ubmVjdFNob3BpZnlDcmVkZW50aWFsSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbiAgcmVkaXJlY3RVcmw6IFN0cmluZyFcbiAgc2hvcE5hbWU6IFN0cmluZyFcbn1cblxudHlwZSBEZXBvc2l0c01vbnRobHlTY2hlZHVsZSB7XG4gIGRheU9jY3VycmVuY2U6IEludFxuICBkYXlPZk1vbnRoOiBJbnRcbiAgZGF5T2ZXZWVrOiBCdXNpbmVzc0RheXNcbiAgbk1vbnRoczogSW50IVxuICB3ZWVrT2ZNb250aDogSW50XG59XG5cbmVudW0gQmlsbGFibGVTdGF0dXMge1xuICBCSUxMQUJMRVxuICBIQVNfQkVFTl9CSUxMRURcbiAgTk9UX0JJTExBQkxFXG59XG5cbmVudW0gUmVjZWl2YWJsZXNPZmZlcnNPZmZlcnNHcm91cFN0YXR1cyB7XG4gIEFDQ0VQVEVEXG4gIEFEVkFOQ0VEXG4gIElOVkFMSURcbiAgTElBQklMSVRJRVNfVFJBQ0tFRFxuICBQUkVQQVJFRFxuICBTRVRUTEVEXG59XG5cbnR5cGUgSW50ZWdyYXRpb25FcnJvckRldGFpbHMgaW1wbGVtZW50cyBOb2RlIHtcbiAgY291bnQ6IEludCFcbiAgZXJyb3JNZXNzYWdlOiBTdHJpbmdcbiAgZXJyb3JTdWJ0eXBlOiBTdHJpbmdcbiAgZXJyb3JUeXBlOiBTdHJpbmchXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBtYXhQb3N0ZWRBdDogVGltZVxuICBtaW5Qb3N0ZWRBdDogVGltZVxufVxuXG5lbnVtIElzc3VlciB7XG4gIEVNSUdSQU5UXG4gIEZJRlRIX1RISVJEXG4gIElOVkFMSURcbiAgU1VUVE9OXG59XG5cbmlucHV0IFNhdmVPbmJvYXJkaW5nSW5mb3JtYXRpb25SZXF1ZXN0SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRhdGE6IEpzb25cbiAgaWQ6IElEIVxufVxuXG50eXBlIEFjY291bnQgaW1wbGVtZW50cyBOb2RlIEBrZXkoZmllbGRzOiBcImlkXCIpIHtcbiAgZXN0aW1hdGVkVXBjb21pbmdEdWVBbW91bnRzKG51bURheXM6IEludCEpOiBbVXBjb21pbmdEdWVBbW91bnRdXG4gIFwiXCJcIlRoaXMgaXMgYWN0dWFsbHkgdGhlIGVuYWJsZWQgZnVuZGluZyBzb3VyY2VzLCBwbGVhc2UgdXNlIGVuYWJsZWRfZnVuZGluZ19zb3VyY2VzIGZpZWxkXCJcIlwiXG4gIGZ1bmRpbmdTb3VyY2VzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBGdW5kaW5nU291cmNlQ29ubmVjdGlvblxuICBcIlwiXCJcbiAgRHVwbGljYXRlZCBmcm9tIGRlcG9zaXRzIGFjY291bnQgbGV2ZWwuIFJldHJpZXZlcyBtYXRjaGluZyBwYXltZW50c1xuICBmb3IgYSBnaXZlbiBjdXN0b21lciBhY2NvdW50XG4gIFwiXCJcIlxuICBwYXltZW50cyhhZnRlcjogU3RyaW5nLCBhc3NvY2lhdGlvbkNyaXRlcmlhOiBBc3NvY2lhdGlvbkNyaXRlcmlhLCBiZWZvcmU6IFN0cmluZywgZGVwb3NpdHNBY2NvdW50SWQ6IElELCBlbmRUaW1lOiBUaW1lLCBmaXJzdDogSW50LCBsYXN0OiBJbnQsIG9ubHlTaG93UmVjdXJyaW5nUGF5bWVudHM6IEJvb2xlYW4sIHN0YXJ0VGltZTogVGltZSwgc3RhdHVzOiBEZXBvc2l0c1BheW1lbnRTdGF0dXMsIHN0YXR1c2VzOiBbRGVwb3NpdHNQYXltZW50U3RhdHVzIV0pOiBEZXBvc2l0c1BheW1lbnRDb25uZWN0aW9uXG4gIFwiXCJcIkFtb3VudCB3ZSdyZSBjdXJyZW50bHkgdHJ5aW5nIHRvIGNvbGxlY3QgZm9yIHRoaXMgY3VzdG9tZXJcIlwiXCJcbiAgc2NoZWR1bGVkQ29sbGVjdGlvbkFtb3VudDogSW50XG4gIGN1cnJlbnRCaWxsaW5nUGVyaW9kOiBCaWxsaW5nUGVyaW9kXG4gIFwiXCJcIkJpbGwgUGF5J3MgdW5pcXVlIGVtYWlsIGZvciBpbnZvaWNlIHByb2Nlc3NpbmdcIlwiXCJcbiAgYmlsbEZvcndhcmRpbmdFbWFpbEFkZHJlc3M6IFN0cmluZ1xuICBcIlwiXCJUaGUgam91cm5hbCBhY2NvdW50IGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByaW1hcnkgY2FyZCBsb2FuIGZvciB0aGlzIGN1c3RvbWVyXCJcIlwiXG4gIGNhcmRDdXN0b21lckpvdXJuYWxBY2NvdW50OiBKb3VybmFsQWNjb3VudFxuICBkZXBvc2l0c0FjY291bnRzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBpZDogSUQsIGxhc3Q6IEludCwgc3RhdHVzOiBEZXBvc2l0c0FjY291bnRTdGF0dXMpOiBEZXBvc2l0c0FjY291bnRDb25uZWN0aW9uXG4gIFwiXCJcIlVzZXIncyBpbnRlbnQgZm9yIHNpZ25pbmcgdXAgZm9yIGJyZXhcIlwiXCJcbiAgc2lnbnVwSW50ZW50OiBbU3RyaW5nXVxuICBcIlwiXCJUaGUgZXh0ZXJuYWwgYWNjb3VudHMgdGhlIHVzZXIgaGFkIHdoZW4gdGhleSBzaWduZWQgdXAgKGUuZy4gU2hvcGlmeSwgQW1hem9uLCBldGMpXCJcIlwiXG4gIGV4dGVybmFsQWNjb3VudHM6IFtTdHJpbmddXG4gIHVzZXJzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBVc2VyQ29ubmVjdGlvblxuICBjb21wYW55VHlwZTogQ29tcGFueVR5cGVcbiAgXCJcIlwiVG90YWwgYW1vdW50IG9mIHRyYW5zYWN0aW9ucyBieSBjdXN0b21lciB0aGF0IGhhdmUgaGFkIGF1dGggYnV0IG5vIGNsZWFyaW5nIGV2ZW50XCJcIlwiXG4gIGJhbGFuY2VQZW5kaW5nOiBJbnRcbiAgbGVnYWxOYW1lOiBTdHJpbmdcbiAgXCJcIlwiTnVtYmVyIG9mIHBvaW50cyBhdmFpbGFibGUgdG8gYWNjb3VudFwiXCJcIlxuICBwb2ludHNCYWxhbmNlOiBJbnRcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIklzIGludml0aW5nIHVzZXJzIG9uIHRoZSBhY2NvdW50IGFsbG93ZWRcIlwiXCJcbiAgY2FuSW52aXRlVXNlcnM6IEJvb2xlYW4hXG4gIFwiXCJcIkJpbGxpbmcgcGF5bWVudHMgbWFkZSBieSB0aGlzIGN1c3RvbWVyIGFjY291bnRcIlwiXCJcbiAgYmlsbGluZ1BheW1lbnRzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBjYXJkUGF5bWVudHNPbmx5OiBCb29sZWFuLCBmaXJzdDogSW50LCBmcm9tOiBTdHJpbmcsIGxhc3Q6IEludCwgc2NoZWR1bGVkRm9yT3JkZXI6IE9yZGVyQnksIHN0YXR1czogUGF5bWVudFN0YXR1cywgdG86IFN0cmluZyk6IEJpbGxpbmdQYXltZW50Q29ubmVjdGlvblxuICBcIlwiXCJSZXR1cm5zIHRoZSB0eXBlIG9mIHRoZSBhY2NlcHRlZCBwcm9kdWN0IG9mZmVyIGZvciB0aGlzIGFjY291bnRcIlwiXCJcbiAgYWNjZXB0ZWRQcm9kdWN0T2ZmZXJUeXBlOiBPZmZlclR5cGUhXG4gIGFsbG93VXNlck1hbnVhbFBheW1lbnQ6IEJvb2xlYW5cbiAgXCJcIlwiVG90YWwgYW1vdW50IG9mIG1vbmV5IHRoYXQgY3VzdG9tZXIgb3dlcyBCcmV4LCBpbmNsdWRpbmcgZW50cmllcyB0aGF0IGFyZW4ndCBkdWUgeWV0XCJcIlwiXG4gIGJhbGFuY2VEdWU6IEludFxuICB0YXhwYXllck51bWJlcjogU3RyaW5nXG4gIHN0YXR1czogU3RyaW5nXG4gIGNvbnRhY3RzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQsIHNlYXJjaFF1ZXJ5OiBTdHJpbmcpOiBQYXltZW50Q29udGFjdENvbm5lY3Rpb25cbiAgXCJcIlwiSXMgdGhpcyBhY2NvdW50IGVsaWdpYmxlIHRvIGJlIGNvbnZlcnRlZCB0byB0aGUgc3BlY2lmaWVkIGNhcmQgYWNjb3VudCB0eXBlXCJcIlwiXG4gIGVsaWdpYmxlRm9yQ2FyZEFjY291bnRUeXBlKHRvQ2FyZEFjY291bnRUeXBlOiBDYXJkQWNjb3VudFR5cGUhKTogQWNjb3VudEVsaWdpYmxlRm9yQ2FyZEFjY291bnRUeXBlXG4gIFwiXCJcIlRoZSBkZWZhdWx0IGZ1bmRpbmcgc291cmNlLCB0aGlzIHdpbGwgYmUgdXNlZCBmb3IgYXV0b21hdGljIGNvbGxlY3Rpb25zIGFuZCBzY2hlZHVsZWQgY29sbGVjdGlvbnMgd2hlcmUgbm8gZnVuZGluZyBzb3VyY2UgaXMgZXhwbGljaXRseSByZXF1ZXN0ZWRcIlwiXCJcbiAgZGVmYXVsdEZ1bmRpbmdTb3VyY2U6IEZ1bmRpbmdTb3VyY2VcbiAgXCJcIlwiRGlzYWJsZSB0aGUgY2hhdCB3aGVuIGFjY291bnQgaXMgYmluYXJ5IGZyYXVkdWxlbnRcIlwiXCJcbiAgY2hhdERpc2FibGVkOiBCb29sZWFuXG4gIGVzdGltYXRlZE5leHREdWVBbW91bnQ6IFVwY29taW5nRHVlQW1vdW50XG4gIGludmVzdG1lbnRTb3VyY2U6IEludmVzdG1lbnRTb3VyY2VcbiAgZW1wbG95ZWVDb3VudFJhbmdlOiBFbXBsb3llZUNvdW50UmFuZ2VcbiAgaW5zZXJ0ZWRBdDogVGltZVxuICBmaW5hbmNpYWxTb3VyY2VzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBGaW5hbmNpYWxTb3VyY2VDb25uZWN0aW9uXG4gIFwiXCJcIkhhcyB0aGUgY3VzdG9tZXIgc2VsZWN0ZWQgYSBmdW5kaW5nIHNvdXJjZSBmb3IgYXV0b3BheT9cIlwiXCJcbiAgaGFzQ3VzdG9tZXJTZWxlY3RlZEF1dG9wYXlGdW5kaW5nU291cmNlOiBCb29sZWFuIVxuICBcIlwiXCJBbW91bnQgd2UncmUgY3VycmVudGx5IHRyeWluZyB0byBjb2xsZWN0IGZvciB0aGlzIGN1c3RvbWVyXCJcIlwiXG4gIG91dHN0YW5kaW5nQ29sbGVjdGlvbkFtb3VudDogSW50XG4gIFwiXCJcIlRoZSByaXNrIHRpZXIgb2YgdGhlIGFjY291bnRcIlwiXCJcbiAgcmlza1RpZXI6IFJpc2tUaWVyXG4gIFwiXCJcIkN1c3RvbWVyJ3MgZ2xvYmFsIGxpbWl0IGFuZCBiYWxhbmNlIGNvbnN1bXB0aW9uXCJcIlwiXG4gIGJhbGFuY2VTdW1tYXJ5OiBBY2NvdW50QmFsYW5jZVN1bW1hcnlcbiAgbWF4aW11bVVzZXJJbml0aWF0ZWRQYXltZW50QW1vdW50OiBJbnRcbiAgXCJcIlwiV2FzIHRoZSBhY2NvdW50IHByZXZpb3VzbHkgc3VzcGVuZGVkIGFuZCBpcyBub3cgYWN0aXZlXCJcIlwiXG4gIHN0YXR1c0Zyb21TdXNwZW5kZWRUb0FjdGl2ZTogQm9vbGVhbiFcbiAgdW5kZXJ3cml0aW5nOiBVbmRlcndyaXRpbmdBY2NvdW50XG4gIFwiXCJcIkNvbXBhbnkgbW9udGhseSBzYWxlcyB2b2x1bWUgZnJvbSBzb2Z0IHNpZ251cCBwYXlsb2FkXCJcIlwiXG4gIHNhbGVzVm9sdW1lOiBTdHJpbmdcbiAgXCJcIlwiTG9naWMgdG8gaGFuZGxlIHdoZXRoZXIgd2Ugc2hvdWxkIHB1dCB0aGUgdXNlciBpbiBhIGJsb2NraW5nIHdhaXRsaXN0ZWQgc2NyZWVuXCJcIlwiXG4gIGNhblNlZUFwcGxpY2F0aW9uczogU2hvdWxkU2VlQXBwbGljYXRpb25SZXNwb25zZSFcbiAgY2FyZEFjY291bnRUeXBlOiBDYXJkQWNjb3VudFR5cGVcbiAgXCJcIlwiQW1vdW50IG9mIGFsbCBwZW5kaW5nIGNvbGxlY3Rpb25zIGZvciB0aGlzIGN1c3RvbWVyXCJcIlwiXG4gIHBlbmRpbmdDb2xsZWN0aW9uQW1vdW50OiBJbnRcbiAgXCJcIlwiVGhlIG9uYm9hcmRpbmcgcHJvZHVjdCB0aGUgYWNjb3VudCB3YXMgYXBwcm92ZWQgZm9yXCJcIlwiXG4gIGFwcHJvdmVkQmx1ZXByaW50QXRPbmJvYXJkaW5nOiBTdHJpbmdcbiAgY3VycmVudEJpbGxpbmdEZWxpbnF1ZW5jeTogQmlsbGluZ0RlbGlucXVlbmN5XG4gIHN5c3RlbVNldHRpbmdzOiBBY2NvdW50U3lzdGVtU2V0dGluZ3NcbiAgXCJcIlwiSXMgdGhlIGN1c3RvbWVyJ3MgY2FyZCBqb3VybmFsIGFjY291bnQgb24gQnV5IE5vdyBQYXkgTGF0ZXIgdGVybXNcIlwiXCJcbiAgaXNPbkJucGxUZXJtczogQm9vbGVhblxuICBcIlwiXCJBbW91bnQgb2YgbW9uZXkgYSBjdXN0b21lciBvd2VzLCBtaW51cyB0aGUgZW50cmllcyB0aGF0IGhhdmVuJ3QgYmVjb21lIGR1ZSB5ZXRcIlwiXCJcbiAgY3VycmVudEFtb3VudER1ZTogSW50XG4gIFwiXCJcIlxuICBDYXNoIHRyYW5zYWN0aW9ucyBiZWxvbmdpbmcgdG8gdGhlIGN1c3RvbWVyIGFjY291bnQuIFN0YXR1c2VzIGlzIHRoZVxuICBvbmx5IHJlcXVpcmVkIGZpbHRlci4gU3VwcG9ydHMgZmlyc3Q6IGFuZCBhZnRlcjogY3Vyc29yIGJhc2VkIHBhZ2luYXRpb24uXG4gIFwiXCJcIlxuICBjYXNoVHJhbnNhY3Rpb25zKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBkZXBvc2l0c0FjY291bnRJZDogSUQsIGVuZEluaXRpYXRlZEF0OiBUaW1lLCBlbmRQcm9jZXNzZWRBdDogVGltZSwgZW5kU2NoZWR1bGVkU2VuZEF0OiBUaW1lLCBmaXJzdDogSW50LCBpc1JlY3VycmluZzogQm9vbGVhbiwgbGFzdDogSW50LCBtYXhBbW91bnRVc2RDZW50czogSW50LCBtaW5BbW91bnRVc2RDZW50czogSW50LCBvcmRlckJ5OiBbQ2FzaFRyYW5zYWN0aW9uT3JkZXJCeSFdLCBvcmlnaW46IENhc2hUcmFuc2FjdGlvbk9yaWdpbiwgcGF5bWVudE1ldGhvZDogQ2FzaFRyYW5zYWN0aW9uUGF5bWVudE1ldGhvZCwgcmVjdXJyaW5nU2NoZWR1bGVJZDogSUQsIHNlYXJjaFF1ZXJ5OiBTdHJpbmcsIHN0YXJ0SW5pdGlhdGVkQXQ6IFRpbWUsIHN0YXJ0UHJvY2Vzc2VkQXQ6IFRpbWUsIHN0YXJ0U2NoZWR1bGVkU2VuZEF0OiBUaW1lLCBzdGF0dXNlczogW0Nhc2hUcmFuc2FjdGlvblN0YXR1cyFdISwgdHJhbnNhY3Rpb25UeXBlczogW0Nhc2hUcmFuc2FjdGlvblR5cGUhXSk6IENhc2hUcmFuc2FjdGlvbkNvbm5lY3Rpb25cbiAgXCJcIlwiU3VibWlzc2lvbiB0aW1lIG9mIHRoZSBsYXRlc3QgcHJvZHVjdCBhcHBsaWNhdGlvbiBmb3IgdGhpcyBhY2NvdW50XCJcIlwiXG4gIGxhdGVzdEFwcHJvdmVkUHJvZHVjdEFwcGxpY2F0aW9uU3VibWl0dGVkQXQ6IFRpbWVcbiAgXCJcIlwiQmlsbGluZyBwYXltZW50IGludGVudHMgdGFyZ2V0aW5nIGFjY291bnRzIG93bmVkIGJ5IHRoaXMgY3VzdG9tZXIgYWNjb3VudFwiXCJcIlxuICBiaWxsaW5nUGF5bWVudEludGVudHMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGhhc0NhbkNhc2hBZHZhbmNlVGFyZ2V0OiBCb29sZWFuLCBoYXNSZWNlaXZhYmxlc09mZmVyc1RhcmdldDogQm9vbGVhbiwgbGFzdDogSW50KTogQmlsbGluZ1BheW1lbnRJbnRlbnRDb25uZWN0aW9uXG4gIGNvbGxlY3Rpb25JbnRlbnRpb25zKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBDb2xsZWN0aW9uSW50ZW50aW9uQ29ubmVjdGlvblxuICBwb3NpdGl2ZVBheUFjY291bnRTZXR0aW5ncyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50LCBzdGF0dXM6IFBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmdTdGF0dXMpOiBQb3NpdGl2ZVBheUFjY291bnRTZXR0aW5nQ29ubmVjdGlvblxuICBcIlwiXCJGaW5kIGEgYmlsbGluZyBwYXltZW50IG1hZGUgYnkgdGhpcyBjdXN0b21lciBhY2NvdW50XCJcIlwiXG4gIGJpbGxpbmdQYXltZW50KGlkOiBTdHJpbmchKTogQmlsbGluZ1BheW1lbnRcbiAgXCJcIlwiV2hldGhlciB0aGUgYWNjb3VudCBoYXMgYW55IGNsZWFyZWQgdHJhbnNhY3Rpb25zXCJcIlwiXG4gIGhhc0NsZWFyZWRUcmFuc2FjdGlvbjogQm9vbGVhbiFcbiAgXCJcIlwiUm91bmRlZCBhbW91bnQgb2YgbW9uZXkgdGhhdCBjdXN0b21lciBoYXMgYXZhaWxhYmxlIHRvIHNwZW5kXCJcIlwiXG4gIHJvdW5kZWRSZW1haW5pbmdTcGVuZDogSW50IEBkZXByZWNhdGVkKHJlYXNvbjogXCJVc2UgYmFsYW5jZV9zdW1tYXJ5IGluc3RlYWRcIilcbiAgbGFzdFVzZXJJbml0aWF0ZWRDb2xsZWN0aW9uSW50ZW50aW9uOiBDb2xsZWN0aW9uSW50ZW50aW9uXG4gIGRhdGVFc3RhYmxpc2hlZDogVGltZVxuICBoYXNQcm9kdWN0QXBwbGljYXRpb246IEJvb2xlYW4hXG4gIFwiXCJcIkluaXRpYWwgbWFya2V0IHNlZ21lbnQgZnJvbSBzZWdtZW50YXRpb24gc2VydmljZVwiXCJcIlxuICBpbml0aWFsTWFya2V0U2VnbWVudDogU3RyaW5nXG4gIFwiXCJcIlRoZSBlbmFibGVkIGZ1bmRpbmcgc291cmNlcyBmb3IgdGhpcyBhY2NvdW50XCJcIlwiXG4gIGVuYWJsZWRGdW5kaW5nU291cmNlcyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogRnVuZGluZ1NvdXJjZUNvbm5lY3Rpb25cbiAgXCJcIlwiQmFsYW5jZSBhbmQgZGF0ZSB0byBiZSBjb2xsZWN0ZWQgb25cIlwiXCJcbiAgY3VycmVudEJhbGFuY2VQYXltZW50RGV0YWlsczogQ3VycmVudEJhbGFuY2VQYXltZW50RGV0YWlscyFcbiAgXCJcIlwiQW5zd2VycyB0byB0aGUgYnVzaW5lc3MgbWF0dXJpdHkgcXVlc3Rpb25cIlwiXCJcbiAgbWF0dXJpdHk6IFtTdHJpbmddXG4gIFwiXCJcIlxuICBEdXBsaWNhdGVkIGZyb20gZGVwb3NpdHMgYWNjb3VudCBsZXZlbC4gUmV0cmlldmVzIG1hdGNoaW5nIHRyYW5zYWN0aW9uc1xuICBmb3IgYSBnaXZlbiBjdXN0b21lciBhY2NvdW50XG4gIFwiXCJcIlxuICBzZWFyY2hEZXBvc2l0c1RyYW5zYWN0aW9ucyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZGVwb3NpdHNBY2NvdW50SWQ6IElELCBlbmRUaW1lOiBUaW1lLCBmaXJzdDogSW50LCBsYXN0OiBJbnQsIHF1ZXJ5OiBTdHJpbmcsIHJlY3VycmluZ1BheW1lbnRJZDogSUQsIHN0YXJ0VGltZTogVGltZSwgc3RhdHVzOiBTdGF0dXMpOiBEZXBvc2l0c1RyYW5zYWN0aW9uQ29ubmVjdGlvblxuICBcIlwiXCJSb3VuZGVkIGVzdGltYXRlIG9mIHRoZSBnbG9iYWwgbGltaXQgZm9yIHRoZSBjdXN0b21lclwiXCJcIlxuICByb3VuZGVkR2xvYmFsTGltaXQ6IEludCBAZGVwcmVjYXRlZChyZWFzb246IFwiVXNlIGJhbGFuY2Vfc3VtbWFyeSBpbnN0ZWFkXCIpXG4gIGZpbmFuY2lhbFByb2R1Y3RUeXBlOiBGaW5hbmNpYWxQcm9kdWN0VHlwZVxuICBkYmFOYW1lOiBTdHJpbmdcbiAgXCJcIlwiSXMgdGhlIGFjY291bnQgaW4gJ0tpbGwgWWVsbG93IFRpZXInIGV4cGVyaW1lbnQncyB0cmVhdG1lbnQgZ3JvdXA/XCJcIlwiXG4gIGlzSW5LaWxsWWVsbG93VGllcjogQm9vbGVhblxuICBjb2JyYW5kaW5nOiBDb2JyYW5kaW5nIVxuICBpbmNvcnBvcmF0aW9uU3RhdGU6IFN0cmluZ1xuICBvZmZpY2VBZGRyZXNzOiBBZGRyZXNzXG59XG5cbnR5cGUgVW5kZXJ3cml0aW5nQW5hbHlzaXNGbGFnIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBuYW1lOiBVbmRlcndyaXRpbmdBbmFseXNpc0ZsYWdOYW1lIVxufVxuXG50eXBlIENyZWF0ZU9wZW5pZFNlc3Npb25QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBzZXNzaW9uOiBTZXNzaW9uXG59XG5cbmVudW0gSW5jZW50aXZlUGxhY2VtZW50UmV3YXJkc1BhZ2VDaGVja2JveFZpZXdEYXRhU3RlcFN0YXR1cyB7XG4gIEFDVElWRVxuICBDT01QTEVURURcbiAgRVJST1JcbiAgSU5BQ1RJVkVcbiAgSU5WQUxJRFxufVxuXG5pbnB1dCBUcmFuc2FjdGlvbkNvbnN1bWVyU2V0dGluZ3Mge1xuICBcIlwiXCJUaGUgcmVjaXBpZW50IG5vdGlmaWNhdGlvbiBzZXR0aW5nIHRvIGluZGljYXRlIGF0IHdoYXQgc3RhZ2VzIHdlIHdhbnQgdG8gc2VuZCBvdXQgbm90aWZpY2F0aW9uc1wiXCJcIlxuICByZWNpcGllbnROb3RpZmljYXRpb25TZXR0aW5nOiBOb3RpZmljYXRpb25TZXR0aW5nXG59XG5cbnR5cGUgSW50ZXJuYXRpb25hbFdpcmVJbnB1dEZpZWxkIHtcbiAgZGlzcGxheU5hbWU6IFN0cmluZyFcbiAgZm9yUmVjaXBpZW50VHlwZXM6IFtSZWNpcGllbnRUeXBlIV1cbiAgZm9ybWF0OiBTdHJpbmdcbiAgbWF4TGVuZ3RoOiBJbnQhXG4gIG1pbkxlbmd0aDogSW50IVxuICBuYW1lOiBTdHJpbmchXG4gIHRvb2x0aXA6IFN0cmluZ1xufVxuXG5pbnB1dCBVcGRhdGVBcHByb3ZhbHNSZXF1ZXN0SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgbW9udGhseUxpbWl0T3ZlcnJpZGVNZXRhZGF0YTogQXBwcm92YWxzUmVxdWVzdE1vbnRobHlMaW1pdE92ZXJyaWRlSW5wdXRcbiAgcHJlYXBwcm92ZWRDYXJkTWV0YWRhdGE6IEFwcHJvdmFsc1JlcXVlc3RQcmVhcHByb3ZlZENhcmRJbnB1dFxuICByZXF1ZXN0SWQ6IElEIVxufVxuXG50eXBlIFVwZGF0ZUNhcmRNZXRhZGF0YVBheWxvYWQge1xuICBjYXJkOiBDYXJkIVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgQWNjZXB0Q3JlZGl0TWFya2V0aW5nT2ZmZXJQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBvZmZlcjogQ3JlZGl0TWFya2V0aW5nT2ZmZXJcbiAgcmVzdWx0OiBBY2NlcHRDcmVkaXRNYXJrZXRpbmdPZmZlclJlc3VsdCFcbn1cblxuaW5wdXQgQ3JlYXRlVHJhbnNhY3Rpb25BcHByb3ZlZFN1YnNjcmlwdGlvbklucHV0IHtcbiAgY2hhbm5lbElkOiBJRCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpc1BoeXNpY2FsOiBCb29sZWFuXG59XG5cbmlucHV0IFNlbmRNb2JpbGVDaGVxdWVEZXBvc2l0Tm90aWZpY2F0aW9uSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHBob25lTnVtYmVyOiBTdHJpbmchXG59XG5cbnR5cGUgVXBkYXRlRWFybHlBY2Nlc3NGZWF0dXJlSm9pblN0YXR1c1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGVhcmx5QWNjZXNzRmVhdHVyZTogRWFybHlBY2Nlc3NGZWF0dXJlIVxufVxuXG50eXBlIENoYW5uZWxQdXNoT3B0aW9ucyB7XG4gIGRldmljZUluZm9ybWF0aW9uOiBEZXZpY2VJbmZvcm1hdGlvblxuICBkZXZpY2VUb2tlbjogU3RyaW5nXG4gIHR5cGU6IFB1c2hQcm92aWRlclR5cGVcbn1cblxudHlwZSBPbmJvYXJkaW5nQXBwbGljYXRpb25Db25uZWN0aW9uIHtcbiAgZWRnZXM6IFtPbmJvYXJkaW5nQXBwbGljYXRpb25FZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbnR5cGUgT25ib2FyZGluZ0Zvcm1UZXJtcyB7XG4gIF86IEJvb2xlYW5cbn1cblxudHlwZSBJbnRlcmVzdERldGFpbHMge1xuICBwYWlkT246IFRpbWVcbn1cblxudHlwZSBSZWltYnVyc2VtZW50SXRlbUNvbm5lY3Rpb24ge1xuICBlZGdlczogW1JlaW1idXJzZW1lbnRJdGVtRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxuICB0b3RhbENvdW50OiBJbnQhXG59XG5cbmlucHV0IEludGVybmF0aW9uYWxXaXJlUGF5bWVudEluc3RydW1lbnRGaW5kSW5wdXQge1xuICBpYmFuOiBTdHJpbmchXG4gIHN3aWZ0Q29kZTogU3RyaW5nIVxufVxuXG50eXBlIENyZWF0ZUNyZWRlbnRpYWxQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBjcmVkZW50aWFsOiBDcmVkZW50aWFsXG59XG5cbnR5cGUgQ29ubmVjdFNob3BpZnlDcmVkZW50aWFsUGF5bG9hZCB7XG4gIGF1dGhlbnRpY2F0aW9uUmVzdWx0OiBDcmVkZW50aWFsQXV0aGVudGljYXRpb25SZXN1bHRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIFJlaW1idXJzZW1lbnRJdGVtRXZlbnRFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogUmVpbWJ1cnNlbWVudEl0ZW1FdmVudFxufVxuXG50eXBlIFN0YXRlbWVudEVudHJ5IGltcGxlbWVudHMgTm9kZSB7XG4gIGFjY3J1YWxUaW1lOiBUaW1lXG4gIFwiXCJcIkVudW1lcmF0aW9uIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgYnVzaW5lc3MgYWN0aXZpdHkgdGhhdCB0aGlzIGVudHJ5IHJlcHJlc2VudHNcIlwiXCJcbiAgYWN0aXZpdHlUeXBlOiBTdGF0ZW1lbnRFbnRyeUFjdGl2aXR5VHlwZSFcbiAgYW1vdW50OiBJbnRcbiAgZXhwZW5zZXNJdGVtOiBFeHBlbnNlc0l0ZW1cbiAgZXhwb3J0SXRlbTogRXhwb3J0SXRlbVxuICBleHBvcnRlZEludGVncmF0aW9uRmllbGRzOiBTdGF0ZW1lbnRFbnRyeUludGVncmF0aW9uRmllbGRzXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBpbnRlZ3JhdGlvblN0YXR1czogU3RhdGVtZW50RW50cnlJbnRlZ3JhdGlvblN0YXR1c1xuICBpbnRlZ3JhdGlvblZlbmRvckVudHJ5SWQ6IFN0cmluZ1xuICBpbnRlZ3JhdGlvblZlbmRvckVudHJ5VXJsOiBTdHJpbmdcbiAgbGVuczogU3RhdGVtZW50RW50cnlMZW5zXG4gIG9wZXJhdGlvbjogVHJhbnNhY3Rpb25PcGVyYXRpb25cbiAgb3JpZ2luYXRvcjogU3RhdGVtZW50RW50cnlPcmlnaW5hdG9yXG4gIG9yaWdpbmF0b3JUeXBlOiBTdHJpbmcgQGRlcHJlY2F0ZWQocmVhc29uOiBcIlVzZSBhY3Rpdml0eVR5cGUgaW5zdGVhZFwiKVxuICBwb3N0ZWRBdDogVGltZVxuICBwdXJjaGFzZVRpbWU6IFRpbWVcbiAgcmV3YXJkc1JlZGVtcHRpb25PZmZlcjogUmV3YXJkc09mZmVyXG4gIFwiXCJcIkluZm9ybWF0aW9uIGFib3V0IGhvdyB0aGlzIHN0YXRlbWVudCBlbnRyeSB3YXMgcmVmdW5kZWQsIG9ubHkgbm9uLW51bGwgZm9yIHJlZnVuZGVkIHN0YXRlbWVudCBlbnRyaWVzXCJcIlwiXG4gIHJld2FyZHNSZWZ1bmQ6IFJld2FyZHNSZWZ1bmRcbiAgdHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uXG4gIHVzZXJDYXRlZ29yeTogVXNlckNhdGVnb3J5XG59XG5cbmlucHV0IENyZWF0ZVRyYW5zYWN0aW9uUmVmdXNlZFN1YnNjcmlwdGlvbklucHV0IHtcbiAgY2hhbm5lbElkOiBJRCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5lbnVtIE9uZUJyZXhTZWdtZW50IHtcbiAgT05FX0JSRVhfU0VHTUVOVF9DQVBJVEFMXzFfUE9JTlRfMFxuICBPTkVfQlJFWF9TRUdNRU5UX0lOVkFMSURcbiAgT05FX0JSRVhfU0VHTUVOVF9NSURfTUFSS0VUXG4gIE9ORV9CUkVYX1NFR01FTlRfU01BTExfQlVTSU5FU1NcbiAgT05FX0JSRVhfU0VHTUVOVF9WRU5UVVJFX0JBQ0tFRFxufVxuXG5pbnB1dCBEZWxldGVMb2NhdGlvbklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpZDogSUQhXG59XG5cbnR5cGUgVXBkYXRlRXhwZW5zZXNTZXR0aW5nUnVsZXNQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBleHBlbnNlc1NldHRpbmc6IEV4cGVuc2VzU2V0dGluZ1xufVxuXG5pbnB1dCBDcmVhdGVPcGVuaWRTZXNzaW9uSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHRva2VuOiBTdHJpbmchXG59XG5cbmlucHV0IFNwZW5kQWdncmVnYXRlVGltZVNlcmllc0ZpbHRlcnMge1xuICBjYXJkSWRzOiBbU3RyaW5nXVxuICBkZXBhcnRtZW50SWRzOiBbU3RyaW5nXVxuICBmcm9tOiBUaW1lIVxuICBtZXJjaGFudENhdGVnb3J5SWRzOiBbU3RyaW5nXVxuICBtZXJjaGFudElkczogW1N0cmluZ11cbiAgdG86IFRpbWUhXG4gIHVzZXJDYXRlZ29yeUlkczogW1N0cmluZ11cbiAgdXNlcklkczogW1N0cmluZ11cbn1cblxuaW5wdXQgQ3JlYXRlRGVwYXJ0bWVudElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZXNjcmlwdGlvbjogU3RyaW5nXG4gIG5hbWU6IFN0cmluZyFcbn1cblxudHlwZSBSZXdhcmRzVHJpZ2dlckluc3RhbmNlIGltcGxlbWVudHMgTm9kZSB7XG4gIGV4cGlyZXNBdDogVGltZVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgc3RhdGU6IFJld2FyZHNUcmlnZ2VySW5zdGFuY2VTdGF0ZSFcbiAgc3RhdHVzOiBSZXdhcmRzVHJpZ2dlckluc3RhbmNlU3RhdHVzIVxuICB0cmlnZ2VyZWRBdDogVGltZVxufVxuXG50eXBlIFVwZGF0ZURlcGFydG1lbnRQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZXBhcnRtZW50OiBEZXBhcnRtZW50IVxufVxuXG5cIlwiXCJUaGUgaW5kaXZpZHVhbCByb3V0aW5nIHJ1bGUgdjJcIlwiXCJcbnR5cGUgQXBwcm92YWxzUm91dGluZ1J1bGVJbmRpdmlkdWFsc1YyIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJBIGxpc3Qgb2YgYXBwcm92YWwgdXNlciB0eXBlc1wiXCJcIlxuICB1c2VyVHlwZXM6IFtVc2VyVHlwZSFdIVxufVxuXG50eXBlIENoYW5uZWxTbXNPcHRpb25zIHtcbiAgbnVtYmVyOiBQaG9uZU51bWJlclxufVxuXG5cIlwiXCJRQkQgY3JlZGVudGlhbCBwYXlsb2FkXCJcIlwiXG50eXBlIENyZWRlbnRpYWxRYmRQYXlsb2FkIHtcbiAgXCJcIlwiQ29tcGFueSBJRCBhcyBnZW5lcmF0ZWQgYnkgQ29kYXQgLSBuZWVkZWQgZm9yIFFCRCBjb25uZWN0b3JcIlwiXCJcbiAgY29tcGFueUlkOiBTdHJpbmdcbn1cblxudHlwZSBFYXJseUFjY2Vzc0ZlYXR1cmVNZWRpYUFzc2V0IGltcGxlbWVudHMgTm9kZSB7XG4gIGFzcGVjdFJhdGlvSGVpZ2h0OiBJbnQhXG4gIGFzcGVjdFJhdGlvV2lkdGg6IEludCFcbiAgYXNzZXRUeXBlOiBFYXJseUFjY2Vzc0ZlYXR1cmVNZWRpYUFzc2V0VHlwZSFcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIHVybDogU3RyaW5nIVxufVxuXG50eXBlIE9uYm9hcmRpbmdQYWdlRm9ybSB7XG4gIF86IEJvb2xlYW5cbiAgY29udGVudDogT25ib2FyZGluZ0Zvcm1Kc29uU2NoZW1hIVxufVxuXG5pbnB1dCBSZW1vdmVGc3BCb29ra2VlcGVyVXNlcklucHV0IHtcbiAgYm9va2tlZXBlclVzZXJJZDogU3RyaW5nIVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgRmluaWNpdHlDb25uZWN0R2VuZXJhdGVMaXRlVXJsUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdXJsOiBTdHJpbmchXG59XG5cbnVuaW9uIE9uYm9hcmRpbmdOb25TdWJtaXR0YWJsZVBhZ2UgPSBPbmJvYXJkaW5nUGFnZVBob3RvSWRJbnRyb1xuXG5pbnB1dCBDcmVhdGVOZXRzdWl0ZUNyZWRlbnRpYWxJbnB1dCB7XG4gIGFjY291bnRJZDogU3RyaW5nIVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHRva2VuSWQ6IFN0cmluZyFcbiAgdG9rZW5TZWNyZXQ6IFN0cmluZyFcbn1cblxuaW5wdXQgQ2FuY2VsQXBwcm92YWxzUmVxdWVzdElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICByZXF1ZXN0SWRzOiBbSUQhXVxufVxuXG50eXBlIFBheW1lbnRDb250YWN0IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIkRlZmF1bHQgZXJwIGNhdGVnb3JpZXNcIlwiXCJcbiAgZGVmYXVsdEVycENhdGVnb3JpZXMoXG4gICAgXCJcIlwiT3B0aW9uYWwgZmllbGQgdG8gZmlsdGVyIGRlZmF1bHQgZXJwIGNhdGVnb3JpZXMgYnkgb25seSBhY3RpdmUgaW50ZWdyYXRpb25zXCJcIlwiXG4gICAgb25seUFjdGl2ZUludGVncmF0aW9uczogQm9vbGVhbiA9IGZhbHNlXG4gICk6IFtDb250YWN0RGVmYXVsdEVycENhdGVnb3J5IV1cbiAgZW1haWw6IFN0cmluZ1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgbmFtZTogU3RyaW5nXG4gIHBheW1lbnRJbnN0cnVtZW50czogW1BheW1lbnRJbnN0cnVtZW50IV1cbiAgcGhvbmVOdW1iZXI6IFN0cmluZ1xuICBwcm9jZXNzaW5nQW5kRnV0dXJlUGF5bWVudHMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IERlcG9zaXRzUHJvY2Vzc2luZ0FuZEZ1dHVyZVBheW1lbnREYXRlQ29ubmVjdGlvblxuICB2ZXJzaW9uOiBJbnQhXG59XG5cbnR5cGUgRXhwZW5zaWZ5U2V0dXBJbnN0cnVjdGlvbnMge1xuICBjb3BpbG90RW1haWw6IFN0cmluZ1xufVxuXG5lbnVtIFByb2R1Y3RUeXBlIHtcbiAgQklMTF9QQVlfQlVTSU5FU1NfQVBQUk9WQUxcbiAgSU5WQUxJRFxuICBNT05USExZX0xJTUlUX09WRVJSSURFXG4gIFBSRUFQUFJPVkVEX0NBUkRcbiAgUkVJTUJVUlNFTUVOVFxufVxuXG5pbnB1dCBTdGFydEludGVncmF0aW9uRXhwb3J0SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIFwiXCJcIlRpbWUgaW4gdXNlcidzIHRpbWV6b25lIHRoYXQgcmVwb3J0IGlzIGdlbmVyYXRlZFwiXCJcIlxuICBkaXNwbGF5VGltZTogVGltZSFcbiAgXCJcIlwiRXhwb3J0IFNURXMgYmVmb3JlIHRoaXMgZGF0ZVwiXCJcIlxuICBlbmREYXRlUmFuZ2U6IFRpbWVcbiAgXCJcIlwiVHlwZSBvZiBleHBvcnQgLSAnY3N2JyBvciAnZGlyZWN0J1wiXCJcIlxuICBleHBvcnRUeXBlOiBFeHBvcnRUeXBlIVxuICBpc1ByaW1pdGl2ZTogQm9vbGVhblxuICBcIlwiXCJFeHBvcnQgU1RFcyBhZnRlciB0aGlzIGRhdGVcIlwiXCJcbiAgc3RhcnREYXRlUmFuZ2U6IFRpbWVcbiAgc3RhdGVtZW50RW50cnlUeXBlczogW1N0cmluZ11cbn1cblxuaW5wdXQgVXBkYXRlQXV0b0FkZEZ1bmRzSW5wdXQge1xuICBhbW91bnQ6IEludCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZXBvc2l0c0FjY291bnRJZDogSURcbiAgZW5kc0F0OiBUaW1lXG4gIGZpbmFuY2lhbEFjY291bnRJZDogSUQhXG4gIGlkOiBJRCFcbiAgaWRlbXBvdGVuY3lLZXk6IFN0cmluZyFcbiAgbW9udGhseVNjaGVkdWxlOiBNb250aGx5U2NoZWR1bGVcbiAgc2VuZEF0OiBUaW1lXG4gIHRvdGFsTnVtYmVyT2ZQYXltZW50czogSW50XG4gIHdlZWtseVNjaGVkdWxlOiBXZWVrbHlTY2hlZHVsZVxufVxuXG5lbnVtIEFzc29jaWF0aW9uQ3JpdGVyaWEge1xuICBFWENMVURFX0JJTExfUEFZTUVOVFNcbiAgT05MWV9CSUxMX1BBWU1FTlRTXG59XG5cbmVudW0gUmVjZWl2YWJsZXNPZmZlcnNPZmZlck5vblBlcmZvcm1hbmNlUmVhc29uIHtcbiAgREVMSU5RVUVOVFxuICBFQVJMWV9JTklUSUFURURfUEFZT1VUX0lOU1VGRklDSUVOVFxuICBGQUlMRURfUEFZTUVOVFxuICBGQUlMRURfUEFZT1VUX1NUQVRVU1xuICBJTlZBTElEXG4gIElOVkFMSURfVEFSR0VUX0FDQ09VTlRcbiAgT1ZFUl9BTExPQ0FUSU9OXG4gIFBBWU9VVF9JTlNVRkZJQ0lFTlRcbiAgUEFZT1VUX05PVF9NQVRDSEVEXG4gIFJFVkVSU0VEX1BBWU1FTlRcbiAgUk9VVEVEX0FXQVlfRlJPTV9CUkVYX0NBU0hcbiAgU0VWRVJFRF9JTlRFR1JBVElPTlxuICBTRVZFUkVEX0lOVEVHUkFUSU9OX0FVVE9cbiAgU1BFQ0lBTFxufVxuXG5pbnB1dCBDcmVhdGVSZWNlaXB0SW5wdXQge1xuICBhc3NldElkOiBJRCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB0cmFuc2FjdGlvbklkOiBJRCFcbn1cblxudHlwZSBBcHByb3ZhbHNVbnNhZmVGbGFnIHtcbiAgdmFsdWU6IFN0cmluZ1xufVxuXG5cIlwiXCJcblJlcXVlc3QgZm9yIGluZm9ybWF0aW9uLiBJcyBhIGNvbGxlY3Rpb24gb2YgUmZpIEl0ZW1zICsgYnJvYWRlciBjb250ZXh0IGZvciB0aGUgUmVxdWVzdCxcbnVzZWQgdG8ga2VlcCB0cmFjayBvZiB0aGUgZXhjaGFuZ2Ugb2YgaW5mb3JtYXRpb24gYmV0d2VlbiByZXF1ZXN0ZXIgYW5kIHJlc3BvbmRlclxuXCJcIlwiXG50eXBlIFJmaSBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJTYWxlc2ZvcmNlIElEIGZvciB0aGUgcmVsYXRlZCBDYXNlXCJcIlwiXG4gIGFyZmlDYXNlSWQ6IFN0cmluZ1xuICBcIlwiXCJTYWxlc2ZvcmNlIE51bWJlciBmb3IgdGhlIHJlbGF0ZWQgY2FzZVwiXCJcIlxuICBhcmZpQ2FzZU51bWJlcjogU3RyaW5nXG4gIFwiXCJcIkludGVybmFsIElkIGZvciB0aGUgY3VzdG9tZXIncyBhY2NvdW50IG9uIGFub3RoZXIgc2VydmljZSwgZS5nLiB1bmRhY2NfIGZvciB1bmRlcndyaXRpbmdcIlwiXCJcbiAgYnJleE9iamVjdElkOiBTdHJpbmdcbiAgXCJcIlwiY3VhY2Mgb2YgdGhlIGFjY291bnQgcmVsYXRlZCB0byB0aGlzIFJGSVwiXCJcIlxuICBjdXN0b21lckFjY291bnQ6IEFjY291bnRcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIkxpc3Qgb2YgcmVxdWVzdGVkIGl0ZW1zXCJcIlwiXG4gIGl0ZW1zOiBbUmZpSXRlbV1cbiAgcGFyZW50Q2FzZUlkOiBTdHJpbmdcbiAgXCJcIlwiTWVzc2FnZSBmb3IgdGhlIHJlY2VwaWVudCBwcm92aWRpbmcgY29udGV4dCBmb3IgdGhpcyBSRklcIlwiXCJcbiAgcmVxdWVzdE1lc3NhZ2U6IFN0cmluZ1xuICBcIlwiXCJJbnRlcm5hbCBJZCBmb3IgdGhlIHJlcXVlc3RvciB3aG8gaW5pdGlhdGVkIHRoZSBSRkkgLSBlaXRoZXIgYSB1c2VyIChlLmcgT3BzKSBvciBhIHNlcnZpY2VcIlwiXCJcbiAgcmVxdWVzdG9yOiBTdHJpbmdcbiAgcmVzcG9uc2VzOiBbUmZpUmVzcG9uc2VdXG4gIHN0YXR1czogUmZpU3RhdHVzXG4gIFwiXCJcIlxuICBDdXVzZXIgb2YgdGhlIHByaW1hcnkgcmVjaXBpZW50IG9mIHRoZSBSZXF1ZXN0LFxuICBpLmUuIHRoZSB1c2VyIHdobydzIGV4cGVjdGVkIHRvIHByb3ZpZGUgdGhlIGluZm9ybWF0aW9uLlxuICBcIlwiXCJcbiAgdG9DdXN0b21lclVzZXI6IFVzZXJcbn1cblxudHlwZSBTZXRSZWNlaXZhYmxlc09mZmVyc1NlbGxlckFjY291bnRIYXNTZWVuVHJpYWxBY2Nlc3NDb25maXJtYXRpb25CYW5uZXJQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBzZWxsZXJBY2NvdW50OiBSZWNlaXZhYmxlc09mZmVyc1NlbGxlckFjY291bnRcbn1cblxudHlwZSBQcm9tb3Rpb25zSXRlbSBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaGUgY2F0ZWdvcnkgc2hvd24gYWJvdmUgdGhlIGl0ZW1cIlwiXCJcbiAgY2F0ZWdvcnk6IFByb21vdGlvbnNDYXRlZ29yeSFcbiAgXCJcIlwiQ1RBIG9iamVjdCBmb3IgdGhlIGJ1dHRvblwiXCJcIlxuICBjdGE6IFByb21vdGlvbnNDdGEhXG4gIFwiXCJcIlRoZSBtYWluIHRleHQgZm9yIHRoZSBpdGVtXCJcIlwiXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmchXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJNYWtpbmcgdGhpcyBhbiBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gcG90ZW50aWFsbHkgaGF2ZSBtdWx0aXBsZSB0eXBlcyBvZiBpbWFnZXMgZm9yIGRpZmZlcmVudCBjbGllbnRzXCJcIlwiXG4gIGltYWdlOiBQcm9tb3Rpb25zSW1hZ2UhXG4gIFwiXCJcIkEgbmFtZSBmb3IgdGhlIGl0ZW0gdGhhdCBjYW4gYmUgdXNlZCBmb3IgYW5hbHl0aWNzIGNhbGxzLiBOb3Qgc2hvd24gdG8gdGhlIHVzZXIsIGJ1dCBpcyBodW1hbiByZWFkYWJsZSAodmVyc3VzIHRoZSBlbmNvZGVkIElEIGZpZWxkKVwiXCJcIlxuICBuYW1lOiBTdHJpbmchXG4gIFwiXCJcIkJvb2xlYW4gZm9yIHdoZXRoZXIgdGhlIHVzZXIgY2FuIGNsaWNrICdub3Qgbm93J1wiXCJcIlxuICBza2lwcGFibGU6IEJvb2xlYW5cbiAgXCJcIlwiQ29sb3VyIHNjaGVtZVwiXCJcIlxuICB0aGVtZTogUHJvbW90aW9uc1RoZW1lIVxufVxuXG50eXBlIFN1bUFnZ3JlZ2F0aW9uUmVzdWx0IHtcbiAgbmFtZTogU3RyaW5nIVxuICB2YWx1ZTogRmxvYXQhXG59XG5cbnR5cGUgQ3JlYXRlUGh5c2ljYWxDYXJkUGF5bG9hZCB7XG4gIGNhcmQ6IENhcmRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5lbnVtIExpbWl0VXRpbGl6YXRpb25TdGF0dXMge1xuICBcIlwiXCJCYWxhbmNlIGR1ZSBpcyBleGNlZWQgb2YgdGhlIHRvdGFsIGxpbWl0XCJcIlwiXG4gIEVYQ0VFRF9MSU1JVFxuICBcIlwiXCJCYWxhbmNlIGR1ZSBpcyBhdCBsZWFzdCA4MCUgb2YgdGhlIHRvdGFsIGxpbWl0XCJcIlwiXG4gIE5FQVJfTElNSVRcbiAgXCJcIlwiQmFsYW5jZSBkdWUgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDk1JSBvZiB0b3RhbCBsaW1pdCBvciB0b3RhbCBsaW1pdCAtICQ1MDAwICh3aGljaGV2ZXIgaXMgaGlnaGVyKVwiXCJcIlxuICBSRUFDSEVEX0xJTUlUXG59XG5cblwiXCJcIlJ1bndheSBwcm9qZWN0aW9uIGluZm9ybWF0aW9uXCJcIlwiXG50eXBlIEluc2lnaHRzUnVud2F5SW5zaWdodCB7XG4gIFwiXCJcIkEgcm91Z2ggZXN0aW1hdGUgb2Ygd2hlbiB0aGUgYWNjb3VudCB3aWxsIGJlIG91dCBvZiBjYXNoXCJcIlwiXG4gIGVzdGltYXRlZENhc2hPdXREYXRlOiBEYXRlXG4gIFwiXCJcIlRpbWVzZXJpZXMgb2YgcHJvamVjdGVkIGRhdGEgcmVsYXRlZCB0byBydW53YXlcIlwiXCJcbiAgcHJvamVjdGlvblRpbWVzZXJpZXM6IFtJbnNpZ2h0c1J1bndheVByb2plY3Rpb24hXSFcbiAgXCJcIlwiXG4gIFVzaW5nIHRoZSBidXJuIHJhdGUgcHJvamVjdGlvbiwgZXN0aW1hdGUgd2hlbiB0aGUgY29tcGFueVxuICBtaWdodCBuZWVkIHRvIHJhaXNlIGZ1bmRyYWlzaW5nIG1vbmV5XG4gIFwiXCJcIlxuICBzdWdnZXN0ZWRGdW5kcmFpc2luZ0RhdGU6IERhdGVcbn1cblxuaW5wdXQgRW5hYmxlQmlsbHNJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaWQ6IElEIVxufVxuXG50eXBlIFJlZmVycmFsQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbUmVmZXJyYWxFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbnR5cGUgQ3JlYXRlUGF5ZXJQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBwYXllcjogSW52b2ljaW5nQ29udGFjdFxufVxuXG5lbnVtIE9mZmVyU3RhdGUge1xuICBBQ0NFUFRFRFxuICBERUNJU0lPTlxuICBERUNMSU5FRFxuICBJR05PUkVEXG4gIElORUxJR0lCTEVcbiAgSU5JVElBTElaRURcbiAgUkVKRUNURURcbn1cblxudHlwZSBDcmVhdGVJbnZvaWNlUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaW52b2ljZTogSW52b2ljaW5nSW52b2ljZVxufVxuXG5cIlwiXCJJbmZvcm1hdGlvbiBhYm91dCB0aGUgZGV2ZWxvcGVyIEFQSSB0b2tlblwiXCJcIlxudHlwZSBEZXZlbG9wZXJBcGlUb2tlbiB7XG4gIFwiXCJcIlRpbWUgdGhlIHRva2VuIGlzIGNyZWF0ZWRcIlwiXCJcbiAgY3JlYXRlZEF0OiBUaW1lXG4gIFwiXCJcIklkIG9mIHRoZSB1c2VyIHdobyBjcmVhdGVkIHRoZSB0b2tlblwiXCJcIlxuICBjcmVhdG9yVXNlcklkOiBTdHJpbmchXG4gIFwiXCJcIlZhbHVlIG9mIHRoZSB0b2tlbiwgY2Vuc29yZWQgZm9yIGFjdGl2ZSB0b2tlbnNcIlwiXCJcbiAgZGlzcGxheVRva2VuOiBTdHJpbmchXG4gIFwiXCJcIlByaW1hcnkga2V5IGZvciB0aGUgdG9rZW5cIlwiXCJcbiAgaWQ6IFN0cmluZyFcbiAgXCJcIlwiSHVtYW4tcmVhZGFibGUgbmFtZSBvZiB0aGUgdG9rZW5cIlwiXCJcbiAgbmFtZTogU3RyaW5nIVxuICBcIlwiXCJUaW1lIHRoZSB0b2tlbiBpcyByZXZva2VkXCJcIlwiXG4gIHJldm9rZWRBdDogVGltZVxuICBcIlwiXCJMaXN0IG9mIHNjb3BlcyB0aGUgdG9rZW4gaXMgdmFsaWQgZm9yXCJcIlwiXG4gIHNjb3BlczogW1Njb3BlXVxufVxuXG50eXBlIFVwZGF0ZVRyYW5zYWN0aW9uSW50ZWdyYXRpb25DdXN0b21lclBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvblxufVxuXG5pbnB1dCBJbnRlcm5hdGlvbmFsV2lyZVBheW1lbnRJbnN0cnVtZW50SW5wdXQge1xuICBhZGRyZXNzOiBBZGRyZXNzSW5wdXQhXG4gIGJlbmVmaWNpYXJ5QmFua0FkZHJlc3M6IEFkZHJlc3NJbnB1dFxuICBiZW5lZmljaWFyeUJhbmtJbmZvOiBKc29uXG4gIGJlbmVmaWNpYXJ5QmFua05hbWU6IFN0cmluZ1xuICBpYmFuOiBTdHJpbmchXG4gIHN3aWZ0Q29kZTogU3RyaW5nIVxufVxuXG50eXBlIFNldE1hbmFnZXJQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB1c2VyczogW1VzZXJdXG59XG5cbnVuaW9uIENhcmRPdmVydmlld0luc2lnaHRzVGlsZSA9IE1vc3RSZWNlbnRUcmFuc2FjdGlvbnNUaWxlXG5cbmVudW0gRGF0YUltcG9ydGVyRGF0YVByb3ZpZGVyU3RhdHVzIHtcbiAgQUNUSVZFXG4gIFRFUk1JTkFURURcbn1cblxuaW5wdXQgSXNzdWVDb2xsZWN0aW9uSW5wdXQge1xuICBhbW91bnQ6IEludCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBmdW5kaW5nU291cmNlSWQ6IElEXG4gIHBheW1lbnRFYXJseUF1dGhCYWxhbmNlRGVjcmVhc2VDb21taXRtZW50SWQ6IElEXG59XG5cbnVuaW9uIENyZWRlbnRpYWxBdXRoZW50aWNhdGlvblJlc3VsdCA9IENyZWRlbnRpYWxSZWRpcmVjdFJlc3VsdCB8IENyZWRlbnRpYWxTdWNjZXNzUmVzdWx0XG5cbnR5cGUgQ3JlYXRlUG9zaXRpdmVQYXlBY2NvdW50U2V0dGluZ1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmc6IFBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmchXG59XG5cbnR5cGUgUmV3YXJkc1JlZGVtcHRpb25Qcm9ncmFtQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbUmV3YXJkc1JlZGVtcHRpb25Qcm9ncmFtRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG5lbnVtIEV4cG9ydFR5cGUge1xuICBDU1ZcbiAgRElSRUNUXG59XG5cbnR5cGUgQXBwcm92YWxzUnVsZUdyb3VwIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBpc0RlZmF1bHQ6IEJvb2xlYW5cbiAgbWF0Y2hlcnM6IFtBcHByb3ZhbHNSdWxlR3JvdXBNYXRjaGVyIV0hXG4gIHJvdXRpbmdSdWxlczogW0FwcHJvdmFsc1JvdXRpbmdSdWxlIV0hXG59XG5cbnR5cGUgQ2FzaFRyYW5zYWN0aW9uQWNoUmV0dXJuRGV0YWlscyB7XG4gIFwiXCJcIkRldGFpbHMgZnJvbSB0aGUgdHJhbnNhY3Rpb24gdGhpcyByZXR1cm4gd2FzIGZvclwiXCJcIlxuICBvcmlnaW5hbERldGFpbHM6IENhc2hUcmFuc2FjdGlvbkFjaERldGFpbHMhXG4gIFwiXCJcIlRoZSByZWFzb24gd2h5IHRoZSBvcmlnaW5hbCB0cmFuc2FjdGlvbiB3YXMgcmV0dXJuZWRcIlwiXCJcbiAgcmV0dXJuUmVhc29uOiBDYXNoVHJhbnNhY3Rpb25BY2hSZXR1cm5SZWFzb24hXG59XG5cbmlucHV0IFN1Ym1pdE9uYm9hcmRpbmdBcHBsaWNhdGlvbklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpZDogSUQhXG59XG5cbmlucHV0IEVuYWJsZVJlaW1idXJzZW1lbnRzSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbn1cblxudHlwZSBSZXdhcmRzVHJpZ2dlclB1cmNoYXNlIHtcbiAgYWNjcnVhbFJhdGU6IEZsb2F0IVxuICBleGNsdWRlZFByZXNlbnRNZXJjaGFudENhdGVnb3J5SWRzOiBbU3RyaW5nXVxuICBleGNsdWRlZFByZXNlbnRNZXJjaGFudElkczogW1N0cmluZ11cbiAgaW5jbHVkZWRQcmVzZW50TWVyY2hhbnRDYXRlZ29yeUlkczogW1N0cmluZ11cbiAgaW5jbHVkZWRQcmVzZW50TWVyY2hhbnRJZHM6IFtTdHJpbmddXG59XG5cbmlucHV0IENvbm5lY3RUZWxsZXJJbnN0aXR1dGlvbklucHV0IHtcbiAgXCJcIlwiQWNjZXNzIHRva2VuIHJlcHJlc2VudGluZyBjdXN0b21lciBjb25uZWN0aW9uIChha2EgZW5yb2xsbWVudClcIlwiXCJcbiAgYWNjZXNzVG9rZW46IFN0cmluZyFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJUZWxsZXIgZW5yb2xsbWVudCAoY29ubmVjdGlvbikgSURcIlwiXCJcbiAgZW5yb2xsbWVudElkOiBTdHJpbmchXG4gIFwiXCJcIlRlbGxlcidzIG5hbWUgb2YgdGhlIGluc3RpdHV0aW9uXCJcIlwiXG4gIHRlbGxlckluc3RpdHV0aW9uTmFtZTogU3RyaW5nIVxufVxuXG50eXBlIFBheW1lbnRDb250YWN0RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IFBheW1lbnRDb250YWN0XG59XG5cbnR5cGUgT25ib2FyZGluZ1BhZ2VUZXJtcyB7XG4gIGNhcmQ6IEJvb2xlYW5cbiAgY2FzaDogQm9vbGVhblxuICBjb250ZW50OiBPbmJvYXJkaW5nRm9ybVRlcm1zIVxufVxuXG5pbnB1dCBEZWxldGVDYXJkVHJhbnNhY3Rpb25JbnNpZ2h0TXV0aW5nUG9saWN5SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbn1cblxuaW5wdXQgVXBkYXRlVXNlclBlcm1pc3Npb25JbnB1dCB7XG4gIFwiXCJcInNldHRpbmcgdG8gYWNjZXNzIGNvcnBvcmF0ZSBjYXJkc1wiXCJcIlxuICBjYW5BY2Nlc3NDb3Jwb3JhdGVDYXJkczogQm9vbGVhblxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIFwiXCJcInRoZSBjdXN0b21lcl91c2VyX2lkXCJcIlwiXG4gIGlkOiBJRCFcbn1cblxuaW5wdXQgVXBkYXRlVXNlckVtYWlsSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGVtYWlsOiBTdHJpbmchXG59XG5cbnVuaW9uIEV4dGVybmFsSW50ZWdyYXRpb25FbnRpdHlQYXlsb2FkID0gQ29kYXRUcmFja2luZ0NhdGVnb3J5IHwgTmV0c3VpdGVDbGFzcyB8IE5ldHN1aXRlQ3VzdG9tIHwgTmV0c3VpdGVEZXBhcnRtZW50IHwgTmV0c3VpdGVMb2NhdGlvbiB8IE5ldHN1aXRlVmVuZG9yIHwgUXVpY2tib29rc0NsYXNzIHwgUXVpY2tib29rc0N1c3RvbWVyIHwgUXVpY2tib29rc0xvY2F0aW9uIHwgWGVyb1RyYWNraW5nQ2F0ZWdvcnlcblxuaW5wdXQgU2V0UmVjZWl2YWJsZXNPZmZlcnNTZWxsZXJBY2NvdW50SGFzU2VlblRyaWFsQWNjZXNzQ29uZmlybWF0aW9uQmFubmVySW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHNlbGxlckFjY291bnRJZDogSUQhXG4gIHZhbHVlOiBCb29sZWFuIVxufVxuXG5pbnB1dCBBY2NlcHRPZmZlcklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBvZmZlclR5cGU6IE9mZmVyVHlwZSFcbn1cblxudHlwZSBSZWZyZXNoSW50ZWdyYXRpb25DcmVkZW50aWFsc1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGludGVncmF0aW9uczogW0ludGVncmF0aW9uXVxufVxuXG50eXBlIFNwZW5kQWdncmVnYXRlQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbU3BlbmRBZ2dyZWdhdGVFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG4gIHRvdGFsQ291bnQ6IEludCFcbn1cblxuZW51bSBJbnRlZ3JhdGlvblNjb3BlIHtcbiAgQ09MTEVDVElPTlNcbiAgRVhQRU5TRVNcbiAgUkVXQVJEU19SRURFTVBUSU9OU1xufVxuXG50eXBlIENhbmNlbFBheW1lbnRQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBwYXltZW50OiBEZXBvc2l0c1BheW1lbnQhXG59XG5cbnR5cGUgQ2FyZEFjY2VwdG9yIGltcGxlbWVudHMgTm9kZSB7XG4gIGFkZHJlc3M6IFN0cmluZ1xuICBjYXB0dXJlTWV0aG9kOiBTdHJpbmdcbiAgY2l0eTogU3RyaW5nXG4gIGNvdW50cnk6IFN0cmluZ1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgbWNjOiBTdHJpbmdcbiAgbWlkOiBTdHJpbmdcbiAgbmFtZTogU3RyaW5nXG4gIHN0YXRlOiBTdHJpbmdcbiAgemlwOiBTdHJpbmdcbn1cblxudHlwZSBUdXJuT25TZWVuRmxhZ1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIFwiXCJcIlVwZGF0ZWQgZmxhZ1wiXCJcIlxuICBzZWVuRmxhZzogU2VlbkZsYWdcbn1cblxuaW5wdXQgQXBwcm92YWxzUmVxdWVzdFByZWFwcHJvdmVkQ2FyZElucHV0IHtcbiAgYW1vdW50OiBJbnQhXG4gIGRlZmF1bHRNZW1vOiBTdHJpbmdcbiAgZGlzcGxheU5hbWU6IFN0cmluZyFcbiAgZnJlcXVlbmN5OiBDYXJkTGltaXRGcmVxdWVuY3khXG4gIGludGVncmF0aW9uUnVsZUJvZHk6IFN0cmluZ1xuICBpbnRlZ3JhdGlvblJ1bGVJZDogSURcbiAgc29mdEV4cGlyYXRpb25EYXRlOiBUaW1lXG59XG5cbnR5cGUgQWN0aXZhdGVJbnRlZ3JhdGlvblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGludGVncmF0aW9uOiBJbnRlZ3JhdGlvblxufVxuXG5cIlwiXCJcbkFuIGlucHV0IHVuaW9uIGZvciBmaWx0ZXJpbmcgZmluZF9jb250YWN0XG5Pbmx5IG9uZSBmaWVsZCBpcyBtZWFudCB0byBiZSBzZXQgc2luY2UgR3JhcGhRTCBkb2Vzbid0IHN1cHBvcnQgaW5wdXQgdW5pb25zXG5cIlwiXCJcbmlucHV0IEZpbmRDb250YWN0SWRlbnRpZmllcklucHV0VW5pb24ge1xuICBuYW1lOiBTdHJpbmdcbiAgcGF5bWVudEluc3RydW1lbnRJZDogSURcbiAgcmVjaXBpZW50Q3VzdG9tZXJVc2VySWQ6IElEXG59XG5cbmVudW0gRmluYW5jaWFsU291cmNlU3RhdHVzIHtcbiAgQUNUSVZFXG4gIENPTk5FQ1RJTkdcbiAgRVJST1JcbiAgSU5WQUxJRFxuICBQRU5ESU5HXG4gIFVTRVJfQUNUSU9OXG59XG5cbnR5cGUgSW50ZWdyYXRpb25SdWxlRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IEludGVncmF0aW9uUnVsZVxufVxuXG5pbnB1dCBEZXBvc2l0Q2hlcXVlSW5wdXQge1xuICBhbW91bnQ6IEludCFcbiAgYmFja0ltYWdlQXNzZXRJZDogSUQhXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGVwb3NpdHNBY2NvdW50SWQ6IElEIVxuICBmcm9udEltYWdlQXNzZXRJZDogSUQhXG4gIGlkZW1wb3RlbmN5S2V5OiBTdHJpbmchXG4gIG1lbW86IFN0cmluZ1xuICBzZW5kZXJOYW1lOiBTdHJpbmchXG59XG5cbmlucHV0IFNldFNvZnRFeHBpcmF0aW9uRGF0ZUlucHV0IHtcbiAgY2FyZElkOiBJRCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nIVxuICBzb2Z0RXhwaXJlc0F0OiBUaW1lXG59XG5cbnR5cGUgRGlzcHV0ZVRyYW5zYWN0aW9uIGltcGxlbWVudHMgTm9kZSB7XG4gIGRpc3B1dGU6IERpc3B1dGVcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIHN0YXR1czogRGlzcHV0ZVRyYW5zYWN0aW9uU3RhdHVzIVxufVxuXG50eXBlIEFwcGxpY2F0aW9uU2Vzc2lvbiBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiSWQgb2YgdGhlIHJldHJpZXZlZCBzZXNzaW9uXCJcIlwiXG4gIHNlc3Npb25JZDogU3RyaW5nIVxufVxuXG50eXBlIFBheW1lbnREZXRhaWxzIHtcbiAgXCJcIlwiRm9yIGEgcmV0dXJuZWQgd2lyZSwgdGhpcyBpcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBvcmlnaW5hbCB3aXJlIGFtb3VudCB2cyB3aGF0IHdhcyBhY3R1YWxseSByZXR1cm5lZCBiYWNrIGR1ZSB0byB0aGUgYmVuZWZpY2lhcnkgYmFuayB0YWtpbmcgYSBmZWUuXCJcIlwiXG4gIGFtb3VudERyaWZ0VXNkQ2VudHM6IEludFxuICBcIlwiXCJUaGUgc2VuZGluZyBiYW5rJ3MgcmVmZXJlbmNlIG51bWJlciBmb3IgdGhpcyB3aXJlIChGMjAgb2YgdGhlIE1UMTAzKVwiXCJcIlxuICBiYW5rUmVmZXJlbmNlTnVtYmVyOiBTdHJpbmdcbiAgY291bnRlcnBhcnR5OiBDb3VudGVycGFydHkhXG4gIGVuZFRvRW5kSWQ6IFN0cmluZ1xuICBlc3RpbWF0ZWRPbjogVGltZVxuICBlc3RpbWF0ZWRPbkxhdGVzdDogVGltZVxuICBmZWRSZWZlcmVuY2VOdW1iZXI6IFN0cmluZ1xuICBpbWFkOiBTdHJpbmdcbiAgaW5pdGlhdG9yQ3VzdG9tZXJVc2VyOiBVc2VyXG4gIG1ldGhvZDogTWV0aG9kIVxuICBtdDEwMzogU3RyaW5nXG4gIG9tYWQ6IFN0cmluZ1xuICBvcmlnaW46IE9yaWdpbiFcbiAgcGF5bWVudFJhaWw6IFR4UGF5bWVudFJhaWxcbiAgcmV0dXJuUmVhc29uOiBSZXR1cm5SZWFzb25cbiAgdHJhbnNmZXJEZXNjcmlwdGlvbjogU3RyaW5nXG4gIHR5cGU6IFR4VHlwZVxufVxuXG51bmlvbiBGaW5hbmNpYWxJbmZvcm1hdGlvblJlcXVlc3RDb25maWcgPSBGaW5hbmNpYWxJbmZvcm1hdGlvblJlcXVlc3RDb25maWdTdGF0ZW1lbnRcblxudHlwZSBDcmVkZW50aWFsQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbQ3JlZGVudGlhbEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBFbmFibGVCaWxsc1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGludGVncmF0aW9uOiBJbnRlZ3JhdGlvblxufVxuXG51bmlvbiBDYXNoUmVjdXJyaW5nU2NoZWR1bGVUeXBlID0gQ2FzaFJlY3VycmluZ1NjaGVkdWxlTW9udGhseUJ5RGF5IHwgQ2FzaFJlY3VycmluZ1NjaGVkdWxlTW9udGhseUJ5V2VlayB8IENhc2hSZWN1cnJpbmdTY2hlZHVsZVdlZWtseVxuXG50eXBlIENhcmRDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtDYXJkRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxuICBzdW1tYXJ5OiBTdW1tYXJ5IVxuICB0b3RhbENvdW50OiBJbnQhXG59XG5cbnR5cGUgQ29ubmVjdFdlYXZDcmVkZW50aWFsUGF5bG9hZCB7XG4gIGF1dGhlbnRpY2F0aW9uUmVzdWx0OiBDcmVkZW50aWFsQXV0aGVudGljYXRpb25SZXN1bHRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIFVzZXJDb25uZWN0aW9uIHtcbiAgY291bnQ6IEludCFcbiAgZWRnZXM6IFtVc2VyRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG5pbnB1dCBTZXRSZWNlaXZhYmxlc09mZmVyc09wdGVkT3V0T2ZJbnN0YW50UGF5b3V0c0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB2YWx1ZTogQm9vbGVhbiFcbn1cblxudHlwZSBPbmJvYXJkaW5nUGFnZURTdWl0YWJpbGl0eSB7XG4gIF86IEJvb2xlYW5cbiAgY29udGVudDogT25ib2FyZGluZ0Zvcm1FbXB0eSFcbn1cblxudHlwZSBDYXJkUGF5bWVudEZvcndhcmRlclBheW1lbnRPYmplY3Qge1xuICBhbW91bnQ6IEZpbmFuY2lhbEFzc2V0XG4gIGNhcmRJZDogSURcbiAgY3JlYXRlZEF0OiBEYXRlXG4gIGRlbGl2ZXJ5RGF0ZTogRGF0ZVxuICBkZXNjcmlwdGlvbjogU3RyaW5nXG4gIGRvY3VtZW50czogW0NhcmRQYXltZW50Rm9yd2FyZGVyRG9jdW1lbnRdXG4gIGZlZXM6IEZpbmFuY2lhbEFzc2V0XG4gIGlkZW1wb3RlbmN5S2V5OiBTdHJpbmdcbiAgaW52b2ljZTogQ2FyZFBheW1lbnRGb3J3YXJkZXJJbnZvaWNlXG4gIHBheW1lbnRJZDogSUQhXG4gIHBheW1lbnRTdGF0dXM6IENhcmRQYXltZW50Rm9yd2FyZGVyUGF5bWVudFN0YXR1cyFcbiAgcmVjaXBpZW50OiBDYXJkUGF5bWVudEZvcndhcmRlclJlY2lwaWVudFxufVxuXG5cIlwiXCJkZXByZWNhdGVkXCJcIlwiXG50eXBlIE5ldHN1aXRlQ3VzdG9tIHtcbiAgaXNJbmFjdGl2ZTogQm9vbGVhblxuICBuYW1lOiBTdHJpbmdcbn1cblxuaW5wdXQgSW5wdXRDYXNoVHJhbnNhY3Rpb25Cb29rVHJhbnNmZXJBcmd1bWVudHMge1xuICBcIlwiXCJUaGUgdGFyZ2V0IGNhc2ggYWNjb3VudCB0byBtb3ZlIGZ1bmRzIHRvXCJcIlwiXG4gIHRhcmdldERlcG9zaXRzQWNjb3VudElkOiBJRCFcbn1cblxuaW5wdXQgVXBkYXRlUGF5bWVudEluc3RydW1lbnRJbnB1dCB7XG4gIGFjaFBheW1lbnRJbnN0cnVtZW50OiBBY2hQYXltZW50SW5zdHJ1bWVudElucHV0XG4gIFwiXCJcIlBheW1lbnQgaW5zdHJ1bWVudCdzIGJlbmVmaWNpYXJ5IG5hbWVcIlwiXCJcbiAgYmVuZWZpY2lhcnlOYW1lOiBTdHJpbmdcbiAgY2hlcXVlUGF5bWVudEluc3RydW1lbnQ6IENoZXF1ZVBheW1lbnRJbnN0cnVtZW50SW5wdXRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkb21lc3RpY1dpcmVQYXltZW50SW5zdHJ1bWVudDogRG9tZXN0aWNXaXJlUGF5bWVudEluc3RydW1lbnRJbnB1dFxuICBpZDogSUQhXG4gIGludGVybmF0aW9uYWxXaXJlUGF5bWVudEluc3RydW1lbnQ6IEludGVybmF0aW9uYWxXaXJlUGF5bWVudEluc3RydW1lbnRJbnB1dFxufVxuXG5pbnB1dCBVcGRhdGVDb250YWN0RGVmYXVsdEVycENhdGVnb3J5SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIFwiXCJcIlRoZSBjb250YWN0IGlkXCJcIlwiXG4gIGNvbnRhY3RJZDogSUQhXG4gIFwiXCJcIlRoZSBpbnRlZ3JhdGlvbiBpZFwiXCJcIlxuICBpbnRlZ3JhdGlvbklkOiBJRCFcbiAgXCJcIlwiVGhlIHVzZXIgY2F0ZWdvcnkgaWQuIFNldCB0byBudWxsIHRvIHNldCB0aGUgY29udGFjdCB0byBoYXZlIG5vIGRlZmF1bHQgY2F0ZWdvcnkgb24gdGhlIGdpdmVuIGludGVncmF0aW9uLlwiXCJcIlxuICB1c2VyRXJwQ2F0ZWdvcnlJZDogSURcbn1cblxudHlwZSBMZWdhY3lDYXJkU3RhdGVtZW50UGVyaW9kQm91bmRhcmllcyB7XG4gIGlkOiBJRFxuICBwZXJpb2RFbmREYXRlOiBUaW1lIVxuICBwZXJpb2RTdGFydERhdGU6IFRpbWVcbn1cblxuZW51bSBEZXBvc2l0c0FjY291bnRzV2l0aGRyYXdhbFN0YXR1cyB7XG4gIEFQUFJPVkFMX1JFUVVJUkVEXG4gIEZBSUxFRFxuICBJTlZBTElEXG4gIE5PVF9TVEFSVEVEXG4gIFBST0NFU1NFRFxuICBQUk9DRVNTSU5HXG59XG5cbnR5cGUgU2V0U29mdEV4cGlyYXRpb25EYXRlUGF5bG9hZCB7XG4gIGNhcmQ6IENhcmQhXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuZW51bSBDYXNoVHJhbnNhY3Rpb25BcHByb3ZhbFJlc3VsdCB7XG4gIEFMUkVBRFlfUFJPQ0VTU0VEXG4gIElOVkFMSURcbiAgU1VDQ0VTU0ZVTExZX1VQREFURURcbn1cblxudHlwZSBUcmFuc2FjdGlvbk9wZXJhdGlvbiBpbXBsZW1lbnRzIE5vZGUge1xuICBhY2NydWFsVGltZTogVGltZVxuICBhbW91bnQ6IEludFxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiSW5kaWNhdGVzIGlmIGEgdHJhbnNhY3Rpb24gb3BlcmF0aW9uIGlzIGEgZGlzcHV0ZSBjcmVkaXRcIlwiXCJcbiAgaXNEaXNwdXRlQ3JlZGl0OiBCb29sZWFuIVxuICByZXdhcmRzQWNjcnVhbEVudHJpZXMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IFJld2FyZHNBY2NydWFsRW50cnlDb25uZWN0aW9uXG4gIFwiXCJcIlNwbGl0IGl0ZW1zIGZvciB0aGlzIHRyYW5zYWN0aW9uIG9wZXJhdGlvbi5cIlwiXCJcbiAgc3BsaXRJdGVtczogW1RyYW5zYWN0aW9uT3BlcmF0aW9uU3BsaXRJdGVtIV1cbiAgc3RhdHVzOiBTdHJpbmdcbiAgc3RhdHVzUmVhc29uOiBTdHJpbmdcbiAgc3VidHlwZTogU3RyaW5nXG4gIHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvblxuICB0eXBlOiBTdHJpbmdcbn1cblxudHlwZSBQcmVtaXVtU2V0dGluZ0V2ZW50IGltcGxlbWVudHMgTm9kZSB7XG4gIGFjdGlvbjogUHJlbWl1bVNldHRpbmdFdmVudEFjdGlvbiFcbiAgY2FtcGFpZ246IFN0cmluZ1xuICBkZXNjcmlwdGlvbjogU3RyaW5nXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBwcmVtaXVtU2V0dGluZzogUHJlbWl1bVNldHRpbmdcbiAgcHJpY2luZ1NjaGVtZTogUHJlbWl1bVNldHRpbmdQcmljaW5nU2NoZW1lXG4gIHNvdXJjZTogUHJlbWl1bVNldHRpbmdFdmVudFNvdXJjZSFcbiAgdXNlcjogVXNlclxufVxuXG5cIlwiXCJWaWV3IGRhdGEgZm9yIGluY2VudGl2ZSBiYW5uZXJzXCJcIlwiXG50eXBlIEluY2VudGl2ZVBsYWNlbWVudFZpZXdEYXRhQmFubmVyIHtcbiAgXCJcIlwiVVJMIGZvciBDVEEgKG9ubHkgaWYgbm90IG9wdC1pbilcIlwiXCJcbiAgY3RhVXJsOiBTdHJpbmdcbiAgXCJcIlwiRGVzY3JpcHRpb24gb2YgYmFubmVyXCJcIlwiXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmchXG4gIFwiXCJcIkNUQSB0ZXh0IChvcHRfaW5fY3RhIGlzIGxlZ2FjeSwgc2luY2Ugd2Ugbm93IHN1cHBvcnQgYSBjdGEgdGhhdCBnb2VzIHRvIGEgdXJsKVwiXCJcIlxuICBvcHRJbkN0YTogU3RyaW5nIVxuICBcIlwiXCJQbGFjZW1lbnRcIlwiXCJcbiAgcGxhY2VtZW50OiBJbmNlbnRpdmVQbGFjZW1lbnQhXG4gIFwiXCJcIlRpdGxlIG9mIGJhbm5lclwiXCJcIlxuICB0aXRsZTogU3RyaW5nIVxufVxuXG5lbnVtIFBlcmlvZGljUmV2aWV3U3RhdGUge1xuICBBQ1RJVkVcbiAgQ0FOQ0VMTEVEXG4gIEVSUk9SXG4gIEZBSUxFRFxuICBJTlZBTElEXG4gIE1BTlVBTF9SRVZJRVdcbiAgU1VDQ0VFREVEXG59XG5cbmVudW0gSW52b2ljZVN0YXR1cyB7XG4gIEFVVE9NQVRFRF9NQVRDSF9QQUlEXG4gIEFVVE9NQVRFRF9NQVRDSF9QQVJUSUFMTFlfUEFJRFxuICBBV0FJVElOR19QQVlNRU5UXG4gIERFTEVURURcbiAgRFJBRlRJTkdcbiAgSU5WQUxJRFxuICBQQUlEXG4gIFBBUlRJQUxMWV9QQUlEXG4gIFVOQ09MTEVDVElCTEVcbiAgVk9JREVEXG59XG5cbmVudW0gT25ib2FyZGluZ0FwcGxpY2F0aW9uU3RhdGVSaXNrRXZhbHVhdGlvblZhbHVlIHtcbiAgXCJcIlwiVGhlIGFwcGxpY2F0aW9uIHNlY3Rpb24gd2FzIGFwcHJvdmVkXCJcIlwiXG4gIEFQUFJPVkVEXG4gIFwiXCJcIlRoZSBhcHBsaWNhdGlvbiBzZWN0aW9uIGlzIHByb2Nlc3NpbmcsIGkuZS4gcGVuZGluZyBldmlkZW5jZSBvciBtYW51YWwgcmV2aWV3XCJcIlwiXG4gIFBST0NFU1NJTkdcbiAgXCJcIlwiVGhlIGFwcGxpY2F0aW9uIHNlY3Rpb24gd2FzIHJlamVjdGVkXCJcIlwiXG4gIFJFSkVDVEVEXG59XG5cbmlucHV0IFRyaWdnZXJFcnBGZWVkU3luY0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBlcnBGZWVkSWQ6IElEIVxufVxuXG5pbnB1dCBJbnB1dENhc2hSZWN1cnJpbmdTY2hlZHVsZSB7XG4gIFwiXCJcIklmIGR1cmF0aW9uIGlzIHNldCB0byBOVUxMLCB3ZSB3aWxsIGFzc3VtZSB0aGUgc2NoZWR1bGUgaXMgZm9yIGFuIGluZGVmaW5pdGUgYW1vdW50IG9mIHRpbWVcIlwiXCJcbiAgZHVyYXRpb246IElucHV0Q2FzaFJlY3VycmluZ1NjaGVkdWxlRHVyYXRpb25VbmlvblxuICB0eXBlOiBJbnB1dENhc2hSZWN1cnJpbmdTY2hlZHVsZVR5cGVVbmlvbiFcbn1cblxuZW51bSBQZW5kaW5nUmVjb3JkQXBwcm92YWxEZWNpc2lvblJlYXNvbiB7XG4gIEZSQVVEVUxFTlRcbiAgSU5DT1JSRUNUXG4gIE9USEVSXG4gIFVOQVVUSE9SSVpFRFxufVxuXG50eXBlIEVuYWJsZUV4cGVuc2VzUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaW50ZWdyYXRpb246IEludGVncmF0aW9uXG59XG5cbmlucHV0IFVwZGF0ZUJpbGxJbnB1dCB7XG4gIGF0dGFjaG1lbnRBc3NldElkOiBJRFxuICBjaGVxdWVNZW1vOiBTdHJpbmdcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBjb250YWN0SWQ6IElEXG4gIGNvdW50ZXJwYXJ0eUlkOiBTdHJpbmdcbiAgZGVwb3NpdHNBY2NvdW50SWQ6IElEXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgZHVlQW1vdW50Q2VudHM6IEludFxuICBkdWVBdDogVGltZVxuICBlbmRzQXQ6IFRpbWVcbiAgZXh0ZXJuYWxJbnZvaWNlTnVtYmVyOiBTdHJpbmdcbiAgaWQ6IElEIVxuICBtZXJjaGFudENhdGVnb3J5SWQ6IElEXG4gIG1vbnRobHlTY2hlZHVsZTogTW9udGhseVNjaGVkdWxlXG4gIG5vdGlmeVJlY2lwaWVudDogQm9vbGVhblxuICBwYXltZW50SW5zdHJ1bWVudElkOiBJRFxuICBwYXltZW50U2VuZEF0OiBUaW1lXG4gIHRvdGFsTnVtYmVyT2ZQYXltZW50czogSW50XG4gIHRyYW5zZmVyRGVzY3JpcHRpb246IFN0cmluZ1xuICB1c2VyRXJwQ2F0ZWdvcnlJZDogSURcbiAgd2Vla2x5U2NoZWR1bGU6IFdlZWtseVNjaGVkdWxlXG59XG5cbnR5cGUgUmVwbGFjZXNSZWNvcmRFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogUmVwbGFjZXNSZWNvcmRcbn1cblxuZW51bSBDYXJkVHJhbnNhY3Rpb25JbnNpZ2h0RXZlbnRBY3Rpb24ge1xuICBDT01NRU5UXG4gIERJU01JU1NcbiAgTVVURVxuICBPUEVOXG59XG5cbmVudW0gQ2FyZFBheW1lbnRGb3J3YXJkZXJEb2N1bWVudFR5cGUge1xuICBCRU5FRklDSUFMX09XTkVSXG4gIENBUkRfT1JfQkFOS19TVEFURU1FTlRcbiAgQ0VSVElGSUNBVEVfT0ZfR09PRFNcbiAgRU1QTE9ZRUVfUEFZX09SX0NPTlRSQUNUXG4gIEVTQ1JPV19BR1JFRU1FTlRcbiAgR09WRVJOTUVOVF9JU1NVRURfSURcbiAgSU5WQUxJRFxuICBJTlZPSUNFXG4gIExFQVNFX0FHUkVFTUVOVFxuICBMRUdBTF9BR1JFRU1FTlRcbiAgTk9OX1AyUF9ET0NVTUVOVFxuICBTVVBQTElFUl9JTlZPSUNFX09SX1BVUkNIQVNFX09SREVSXG4gIFc5X0ZPUk1cbn1cblxudHlwZSBBc3NldCBpbXBsZW1lbnRzIE5vZGUge1xuICBkYXRhOiBBc3NldERhdGEhXG4gIGRvd25sb2FkVXJsOiBTdHJpbmdcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIHByZXNpZ25lZERvd25sb2FkVXJsOiBTdHJpbmdcbn1cblxudHlwZSBJbnRlcm5hdGlvbmFsQmFua0luZm9ybWF0aW9uIHtcbiAgYWRkcmVzczogQWRkcmVzcyFcbiAgbmFtZTogU3RyaW5nXG4gIG5hbWVBYmJyZXY6IFN0cmluZ1xuICBwb3NzaWJsZUlzc3VlczogW1N0cmluZyFdIVxufVxuXG50eXBlIEludGVybmF0aW9uYWxXaXJlQ291bnRyeUNvbmZpZyB7XG4gIGFkZHJlc3NSZXF1aXJlc1ppcENvZGU6IEJvb2xlYW4hXG4gIGNvdW50cnlDb2RlQWxwaGEyOiBTdHJpbmchXG4gIGNvdW50cnlOYW1lOiBTdHJpbmchXG4gIGliYW46IEJvb2xlYW4hXG4gIGlucHV0RmllbGRzOiBbSW50ZXJuYXRpb25hbFdpcmVJbnB1dEZpZWxkIV0hXG4gIGlzSGlnaFJpc2s6IEJvb2xlYW4hXG4gIHJlY2lwaWVudFR5cGVzOiBbUmVjaXBpZW50VHlwZSFdXG59XG5cbmlucHV0IENyZWF0ZUNhcmRUcmFuc2FjdGlvbkluc2lnaHRNdXRpbmdQb2xpY3lJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaW5zaWdodFR5cGU6IENhcmRUcmFuc2FjdGlvbnNJbnNpZ2h0VHlwZVxuICBtdXRlQ29sdW1uOiBNdXRlQ29sdW1uXG4gIG11dGVWYWx1ZTogU3RyaW5nXG59XG5cbnR5cGUgRXhwZW5zZXNSdWxlQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbRXhwZW5zZXNSdWxlRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG5pbnB1dCBOb3RpZnlVc2VyT2ZDYXJkUmVxdWVzdElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBjdXN0b21lclVzZXJJZDogSUQhXG59XG5cbnR5cGUgVHJhbnNhY3Rpb25QcmVzZW5jZU5vdGlmaWNhdGlvbkZpbHRlciB7XG4gIGlzUGh5c2ljYWw6IEJvb2xlYW5cbn1cblxuaW5wdXQgQ3JlYXRlTm9uUHJpbWFyeURlcG9zaXRzQWNjb3VudElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkaXNwbGF5Q29sb3I6IERlcG9zaXRzQWNjb3VudHNEaXNwbGF5Q29sb3IhXG4gIGlkZW1wb3RlbmN5S2V5OiBTdHJpbmchXG4gIG5pY2tuYW1lOiBTdHJpbmchXG59XG5cbnR5cGUgRXhwZW5zZXNJdGVtIGltcGxlbWVudHMgTm9kZSB7XG4gIGV4cGVuc2VzRmxhZ3MoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IEV4cGVuc2VzRmxhZ0Nvbm5lY3Rpb25cbiAgZXhwZW5zZXNJdGVtRXZlbnRzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBFeHBlbnNlc0l0ZW1FdmVudENvbm5lY3Rpb25cbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIHN0YXRlbWVudEVudHJ5OiBTdGF0ZW1lbnRFbnRyeVxuICBzdGF0dXM6IEV4cGVuc2VzSXRlbVN0YXR1c1xuICB0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb25cbn1cblxudHlwZSBTZXRBY2NvdW50UmVzdHJpY3RBY2hEZWJpdHNQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICByZXN0cmljdEFjaERlYml0czogQm9vbGVhbiFcbn1cblxuaW5wdXQgRGVsZXRlSW50ZWdyYXRpb25SdWxlSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbn1cblxuXCJcIlwiU2NvcGUgb2JqZWN0XCJcIlwiXG50eXBlIFNjb3BlV3JhcHBlciB7XG4gIFwiXCJcIkFQSSB0aGlzIHNjb3BlIGlzIHVzZWQgZm9yXCJcIlwiXG4gIGFwaTogQXBpIVxuICBcIlwiXCJEZXNjcmlwdGlvbiBvZiB0aGUgc2NvcGVcIlwiXCJcbiAgZGVzY3JpcHRpb246IFN0cmluZ1xuICBcIlwiXCJOYW1lIHNob3duIGluIGRhc2hib2FyZFwiXCJcIlxuICBkaXNwbGF5TmFtZTogU3RyaW5nIVxuICBcIlwiXCJTY29wZSBlbnVtXCJcIlwiXG4gIGVudW06IFNjb3BlIVxuICBcIlwiXCJTY29wZSBzdHJpbmcgdmFsdWUsIHVzZWQgd2hlbiBjcmVhdGluZyB0b2tlbnNcIlwiXCJcbiAgdmFsdWU6IFN0cmluZyFcbn1cblxudHlwZSBDcmVhdGVTdWJzY3JpcHRpb25zUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgbm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uczogW05vdGlmaWNhdGlvblN1YnNjcmlwdGlvbl0hXG59XG5cbmlucHV0IENvbmZpcm1NZmFJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGV2aWNlSWQ6IFN0cmluZyFcbiAgdmVyaWZpY2F0aW9uVG9rZW46IFN0cmluZyFcbn1cblxudHlwZSBGcmF1ZEFsZXJ0RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IEZyYXVkQWxlcnRcbn1cblxuXCJcIlwiQSBwZXJpb2QgZm9yIHdoaWNoIGEgY2FyZCBzdGF0ZW1lbnQgaXMgaXNzdWVkLlwiXCJcIlxudHlwZSBDYXJkU3RhdGVtZW50UGVyaW9kIHtcbiAgXCJcIlwiVGhlIHBlcmlvZCBlbmQgdGltZS5cIlwiXCJcbiAgZW5kVGltZTogVGltZSFcbiAgXCJcIlwiVGhlIHBlcmlvZCBzdGFydCB0aW1lLlwiXCJcIlxuICBzdGFydFRpbWU6IFRpbWUhXG59XG5cbmlucHV0IERvY3VtZW50T2NyVmVyaWZ5RW50aXRpZXNJbnB1dCB7XG4gIFwiXCJcIlRoZSB0eXBlIG9mIGRvY3VtZW50LCBkZXRlcm1pbmVkIGJhc2VkIG9uIHRoZSBPQ1IgcmVzdWx0LlwiXCJcIlxuICBlaW46IFN0cmluZ1xuICBcIlwiXCJUaGUgdHlwZSBvZiBkb2N1bWVudCwgZGV0ZXJtaW5lZCBiYXNlZCBvbiB0aGUgT0NSIHJlc3VsdC5cIlwiXCJcbiAgbmFtZTogU3RyaW5nXG59XG5cbnR5cGUgQnVsa0NyZWF0ZVNwZW5kQWxlcnRFdmVudFBheWxvYWQge1xuICBjYXJkVHJhbnNhY3Rpb25JbnNpZ2h0czogW0NhcmRUcmFuc2FjdGlvbkluc2lnaHQhXVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbmlucHV0IFByb2Nlc3NBY2NvdW50Q2xvc3VyZUlucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBjb3VudGVycGFydHlJZDogSUQhXG59XG5cbnR5cGUgQXBwcm92YWxzUmVxdWVzdE1vbnRobHlMaW1pdE92ZXJyaWRlIHtcbiAgYW1vdW50OiBJbnQhXG4gIGVuZHNBdDogVGltZSFcbn1cblxudHlwZSBJbnZpdGVVc2VyUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdXNlcjogVXNlclxufVxuXG50eXBlIENvbmZpcm1NZmFQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB1c2VyOiBVc2VyIVxufVxuXG5lbnVtIEJhdGNoRW50aXR5IHtcbiAgREVQQVJUTUVOVFxuICBMT0NBVElPTlxuICBVU0VSXG59XG5cbnVuaW9uIFZlbmRvckluc3RpdHV0aW9uTWV0YWRhdGEgPSBGaW5pY2l0eU1ldGFkYXRhXG5cbmVudW0gQ2hlcXVlSW1hZ2VWYWxpZGF0aW9uVHlwZSB7XG4gIEJBQ0tfT05MWVxuICBGUk9OVF9BTkRfQkFDS1xuICBGUk9OVF9PTkxZXG59XG5cbnR5cGUgQ2FzaFRyYW5zYWN0aW9uQnJleE9wZXJhdGlvbmFsVHJhbnNmZXJEZXRhaWxzIHtcbiAgXzogQm9vbGVhblxufVxuXG5cIlwiXCJEZXNjcmliZXMgdGhlIHR5cGUsIHN0YXR1cyBhbmQgYWN0aXZlIHRhc2tzIGZvciBhIHNpbmdsZSBwYXlyb2xsIHByb3ZpZGVyIGludGVncmF0aW9uXCJcIlwiXG50eXBlIFBheXJvbGxQcm92aWRlckludGVncmF0aW9uIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIkluZm8gZm9yIEdVU1RPIGludGVncmF0aW9uc1wiXCJcIlxuICBndXN0b0luZm86IFBheXJvbGxJbnRlZ3JhdGlvbkd1c3RvSW5mb1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiVGhlIHN0YXR1cyBvZiB0aGUgY29ubmVjdGlvbjogcHJvY2Vzc2luZywgY29ubmVjdGVkLCBkaXNjb25uZWN0ZWQsIGludmFsaWRcIlwiXCJcbiAgc3RhdHVzOiBQYXlyb2xsUHJvdmlkZXJJbnRlZ3JhdGlvblN0YXR1cyFcbiAgXCJcIlwiVHlwZSAobWV0aG9kIG9mIGNvbm5lY3Rpb24pIG9mIGludGVncmF0aW9uOiBHdXN0bywgb3IgaW52YWxpZFwiXCJcIlxuICB0eXBlOiBQYXlyb2xsUHJvdmlkZXJJbnRlZ3JhdGlvblR5cGUhXG4gIFwiXCJcIlRpbWVzdGFtcCB3aGVuIHRoZSBpbnRlZ3JhdGlvbiB3YXMgbGFzdCB1cGRhdGVkXCJcIlwiXG4gIHVwZGF0ZWRBdDogVGltZSFcbn1cblxudHlwZSBEZXBvc2l0c1N0YXRlbWVudENvbm5lY3Rpb24ge1xuICBlZGdlczogW0RlcG9zaXRzU3RhdGVtZW50RWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG50eXBlIENyZWF0ZVNtc0NoYW5uZWxQYXlsb2FkIHtcbiAgY2hhbm5lbDogQ2hhbm5lbFxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbmlucHV0IElucHV0VHJhbnNhY3Rpb25BcHByb3ZhbElkZW50aWZpZXJVbmlvbiB7XG4gIFwiXCJcIlRoZSBhcHByb3ZhbCB0b2tlbiBhc3NvY2lhdGVkIHdpdGggdGhlIGFwcHJvdmFsXCJcIlwiXG4gIGFwcHJvdmFsVG9rZW46IFN0cmluZ1xuICBcIlwiXCJUaGUgaWQgb2YgdGhlIHRyYW5zYWN0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgYXBwcm92YWxcIlwiXCJcbiAgaWQ6IElEXG59XG5cbmlucHV0IENhcmRQYXltZW50Rm9yd2FyZGVyUmVjaXBpZW50SW5wdXQge1xuICBiZW5lZmljaWFsT3duZXI6IENhcmRQYXltZW50Rm9yd2FyZGVyQmVuZWZpY2lhbE93bmVySW5wdXRcbiAgYnVzaW5lc3NBZGRyZXNzOiBBZGRyZXNzSW5wdXRcbiAgYnVzaW5lc3NOYW1lOiBTdHJpbmdcbiAgY2F0ZWdvcnlJZDogU3RyaW5nXG4gIGNvbnRhY3Q6IENhcmRQYXltZW50Rm9yd2FyZGVyQ29udGFjdElucHV0XG4gIHJlY2VpdmluZ01ldGhvZDogUmVjZWl2aW5nTWV0aG9kSW5wdXRcbiAgcmVjaXBpZW50SWQ6IElEXG59XG5cbnR5cGUgQ3JlYXRlRmluYW5jaWFsQmFua1N0YXRlbWVudFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgSW50ZWdyYXRpb25Db25uZWN0aW9uIHtcbiAgZWRnZXM6IFtJbnRlZ3JhdGlvbkVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBGYWtlTXV0YXRpb25Eb05vdFVzZVBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbmlucHV0IENoYW5nZUludmVzdG1lbnRQb2xpY3lJbnB1dCB7XG4gIGFtb3VudDogSW50IVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRlcG9zaXRzQWNjb3VudElkOiBJRCFcbiAgaW52ZXN0bWVudFR5cGU6IEludmVzdG1lbnRUeXBlIVxufVxuXG50eXBlIFJlZGVlbUZvckJhbGFuY2VQYXlsb2FkIHtcbiAgYWNjb3VudDogQWNjb3VudCFcbiAgYmFsYW5jZUJyZWFrZG93bjogQmFsYW5jZUJyZWFrZG93blxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHJlZGVlbWVkQmFsYW5jZUFtb3VudENlbnRzOiBJbnQhXG59XG5cblwiXCJcIkFuIGludGVudCB0byBwYXkgYSBiYWxhbmNlIHRvd2FyZHMgb25lIG9yIG1vcmUgdGFyZ2V0IGFjY291bnRzXCJcIlwiXG50eXBlIEJpbGxpbmdQYXltZW50SW50ZW50IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSB0aW1lIGF0IHdoaWNoIHRoZSBwYXltZW50IG1vc3QgcmVjZW50bHkgY29tcGxldGVkXCJcIlwiXG4gIGNvbGxlY3RlZEF0OiBUaW1lXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJUaGUgdGltZSBhdCB3aGljaCB0aGUgcGF5bWVudCB3YXMgaW5pdGlhdGVkXCJcIlwiXG4gIGluaXRpYXRlZEF0OiBUaW1lXG4gIFwiXCJcIkFuIGVudW0gcmVwcmVzZW50YXRpb24gb2YgdGhlIHNvdXJjZSBvZiBmdW5kcyBmb3IgdGhpcyBwYXltZW50XCJcIlwiXG4gIHNvdXJjZVR5cGU6IEJpbGxpbmdQYXltZW50SW50ZW50U291cmNlVHlwZSFcbiAgXCJcIlwiVGhlIGxpZmUgY3ljbGUgc3RhdHVzIG9mIHRoaXMgcGF5bWVudFwiXCJcIlxuICBzdGF0dXM6IEJpbGxpbmdQYXltZW50SW50ZW50U3RhdHVzIVxuICBcIlwiXCJUaGUgYW1vdW50IGZvciB3aGljaCB0aGlzIHBheW1lbnQgd2FzIHJlcXVlc3RlZFwiXCJcIlxuICB0b3RhbFJlcXVlc3RlZEFtb3VudDogRmluYW5jaWFsQXNzZXRcbn1cblxuXCJcIlwiVGhlIHZhbHVlIHR5cGUgd2hlbiBtdXRlX2NvbHVtbiBpcyBzZXQgdG8gbWVyY2hhbnRfaWRcIlwiXCJcbnR5cGUgTXV0ZVZhbHVlRGVwYXJ0bWVudCB7XG4gIFwiXCJcIlRoZSBtZXJjaGFudCB0aGF0IGlzIGJlaW5nIG11dGVkIGZvciB0aGlzIG11dGluZyBwb2xpY3lcIlwiXCJcbiAgZGVwYXJ0bWVudDogRGVwYXJ0bWVudFxufVxuXG5cIlwiXCJDb2xsZWN0ZWQgZGlyZWN0bHkgZnJvbSB0aGUgY3VzdG9tZXIncyBDYXNoIEFjY291bnQsIG1vc3QgbGlrZWx5IGR1ZSB0byBub24tcGVyZm9ybWFuY2VcIlwiXCJcbnR5cGUgUmVjZWl2YWJsZXNPZmZlcnNQYXltZW50SW50ZW50U291cmNlRGVwb3NpdHNBY2NvdW50IHtcbiAgc291cmNlRGVwb3NpdHNBY2NvdW50SWQ6IFN0cmluZyFcbn1cblxudHlwZSBGaW5hbmNpYWxJbnN0aXR1dGlvbkVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBGaW5hbmNpYWxJbnN0aXR1dGlvblxufVxuXG50eXBlIFNpZ251cFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHVzZXI6IFVzZXIhXG59XG5cbnR5cGUgQ2FzaFRyYW5zYWN0aW9uRG9tZXN0aWNXaXJlUmV0dXJuRGV0YWlscyB7XG4gIFwiXCJcIkRldGFpbHMgZnJvbSB0aGUgdHJhbnNhY3Rpb24gdGhpcyByZXR1cm4gd2FzIGZvclwiXCJcIlxuICBvcmlnaW5hbERldGFpbHM6IENhc2hUcmFuc2FjdGlvbkRvbWVzdGljV2lyZURldGFpbHMhXG4gIFwiXCJcIlRoZSByZWFzb24gd2h5IHRoZSBvcmlnaW5hbCB0cmFuc2FjdGlvbiB3YXMgcmV0dXJuZWRcIlwiXCJcbiAgcmV0dXJuUmVhc29uOiBDYXNoVHJhbnNhY3Rpb25XaXJlUmV0dXJuUmVhc29uIVxufVxuXG5pbnB1dCBTZXRSZWNlaXZhYmxlc09mZmVyc1NlbGxlckFjY291bnRDb25maXJtZWRQYXlvdXRzUm91dGVkVG9CcmV4SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHNlbGxlckFjY291bnRJZDogSUQhXG4gIHZhbHVlOiBCb29sZWFuIVxufVxuXG5pbnB1dCBQYWdlVmlldyB7XG4gIFwiXCJcImFub255bW91cyBpZCBnZW5lcmF0ZWQgZnJvbSBjbGllbnQuIHdlIHVzZSBpdCB0byBhc3NvY2lhdGUgd2Vic2l0ZSBwYWdlIHZpZXdzIHRvIGEgYnJleCB1c2VyXCJcIlwiXG4gIGJyZXhMb2dnZWRPdXRJZDogU3RyaW5nXG4gIFwiXCJcInJlZmVycmVyIGZyb20gaHRtbFwiXCJcIlxuICByZWZlcnJlcjogU3RyaW5nXG4gIFwiXCJcInRoaXJkIHBhcnR5IGF0dHJpYnV0aW9uIGRhdGEgd2Ugc3RvcmVkIGluIHRoZSBjb29raWVcIlwiXCJcbiAgdGhpcmRQYXJ0eUF0dHJpYnV0aW9uOiBUaGlyZFBhcnR5QXR0cmlidXRpb25cbiAgXCJcIlwidGl0bGUgZnJvbSBodG1sXCJcIlwiXG4gIHRpdGxlOiBTdHJpbmdcbiAgXCJcIlwiZnVsbCB1cmxcIlwiXCJcbiAgdXJsOiBTdHJpbmchXG4gIFwiXCJcImN1c3RvbWVyIHVzZXIgaWRcIlwiXCJcbiAgdXNlcklkOiBTdHJpbmdcbn1cblxudW5pb24gUmV3YXJkc0hpc3RvcnlFbnRyeVBheWxvYWQgPSBSZXdhcmRzSGlzdG9yeUVudHJ5UGF5bG9hZEdlbmVyaWNcblxuaW5wdXQgQ29tcGxldGVQYXltZW50QXBwcm92YWxXaXRoVG9rZW5JbnB1dCB7XG4gIGFwcHJvdmFsVG9rZW46IFN0cmluZyFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZWNpc2lvbjogUGF5bWVudEFwcHJvdmFsRGVjaXNpb24hXG4gIGRlY2lzaW9uTm90ZXM6IFN0cmluZ1xuICBkZWNpc2lvblJlYXNvbjogUGF5bWVudEFwcHJvdmFsRGVjaXNpb25SZWFzb25cbn1cblxudHlwZSBHZW5lcmF0ZUNhcmRTdGF0ZW1lbnREb2N1bWVudERvd25sb2FkVXJsUGF5bG9hZCB7XG4gIGNhcmRTdGF0ZW1lbnRQZGZEb3dubG9hZFVybDogU3RyaW5nXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuZW51bSBSZmlSZXNwb25zZVN0YXR1cyB7XG4gIFJGSV9SRVNQT05TRV9TVEFUVVNfQVBQUk9WRURcbiAgUkZJX1JFU1BPTlNFX1NUQVRVU19ERU5JRURcbiAgUkZJX1JFU1BPTlNFX1NUQVRVU19JTlZBTElEXG4gIFJGSV9SRVNQT05TRV9TVEFUVVNfUEVORElOR1xufVxuXG50eXBlIFRyaWdnZXJFcnBGZWVkU3luY1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGV4cG9ydEF0dGVtcHRJZDogU3RyaW5nXG59XG5cbnR5cGUgQ2FzaFRyYW5zYWN0aW9uIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBiYWxhbmNlIGFjcm9zcyBhbGwgb2YgdGhlIGN1c3RvbWVyJ3MgZGVwb3NpdHMgYWNjb3VudHMgd2hlbiBmdW5kcyB3ZXJlIG1hZGUgYXZhaWxhYmxlIHRvIHRoZSBhY2NvdW50LlwiXCJcIlxuICBhZ2dyZWdhdGVQcm9jZXNzZWRCYWxhbmNlU25hcHNob3RVc2RDZW50czogSW50XG4gIFwiXCJcIlRoZSBtb25leSBtb3ZlbWVudCBhbW91bnQgdGhpcyB0cmFuc2FjdGlvbiBpcyByZXNwb25zaWJsZSBmb3IuXCJcIlwiXG4gIGFtb3VudFVzZENlbnRzOiBJbnQhXG4gIFwiXCJcIklmIG5vdCBOVUxMLCB0aGUgYmlsbCBhc3NvY2lhdGVkIHdpdGggdGhlIHRyYW5zYWN0aW9uLlwiXCJcIlxuICBiaWxsOiBCaWxsXG4gIFwiXCJcIklmIG5vbi1OVUxMLCB0aGlzIGZpZWxkIGV4cGxhaW5zIHdoeSBhIHRyYW5zYWN0aW9uIHJlYWNoZWQgdGhlIEZBSUxFRCBzdGF0dXNcIlwiXCJcbiAgY2FuY2VsbGF0aW9uUmVhc29uOiBDYXNoVHJhbnNhY3Rpb25DYW5jZWxsYXRpb25SZWFzb25cbiAgXCJcIlwiXG4gIERPIE5PVCBCQVRDSCwgV0lMTCBSRVNVTFQgSU4gQU4gTisxIFFVRVJZLlxuICBJZiBub3QgTlVMTCwgdGhlIGN1c3RvbWVyIHVzZXIgdGhhdCBjYW5jZWxsZWQgdGhlIHRyYW5zYWN0aW9uLlxuICBcIlwiXCJcbiAgY2FuY2VsbGVkQnlVc2VyOiBVc2VyXG4gIFwiXCJcIlxuICBETyBOT1QgQkFUQ0gsIFdJTEwgUkVTVUxUIElOIEFOIE4rMSBRVUVSWS5cbiAgQ291bnRlcnBhcnR5IGluZm9ybWF0aW9uIGZvciBCUkVYLW9yaWdpbmF0ZWQgdHJhbnNhY3Rpb25zLlxuICBcIlwiXCJcbiAgY291bnRlcnBhcnR5RGV0YWlsczogQ2FzaFRyYW5zYWN0aW9uQ291bnRlcnBhcnR5RGV0YWlsc1xuICBcIlwiXCJBIGN1c3RvbWVyIGVkaXRhYmxlIG1lbW8gZm9yIHRoZSB0cmFuc2FjdGlvbiB3aGljaCBpcyBub3QgbWVhbnQgdG8gYmUgcHJvY2Vzc2VkIGluIGFueSB3YXkgb3V0c2lkZSBvZiBhIG5vdGUgZm9yIHRoZSBjdXN0b21lciB0byB2aWV3LlwiXCJcIlxuICBjdXN0b21lck1lbW86IFN0cmluZ1xuICBcIlwiXCJUaGUgZGVwb3NpdHMgYWNjb3VudCBvZiB0aGUgdHJhbnNhY3Rpb25cIlwiXCJcbiAgZGVwb3NpdHNBY2NvdW50OiBEZXBvc2l0c0FjY291bnRcbiAgXCJcIlwiRGV0YWlscyByZWxhdGVkIHdpdGggdGhlIHVuZGVybHlpbmcgdHJhbnNhY3Rpb24gdHlwZS5cIlwiXCJcbiAgZGV0YWlsczogQ2FzaFRyYW5zYWN0aW9uRGV0YWlscyFcbiAgXCJcIlwiXG4gIEEgaHVtYW4tcmVhZGFibGUgbmFtZSBkZXNjcmliaW5nIHRoZSB0cmFuc2FjdGlvblxuICBcbiAgVGhpcyBmaWVsZCBpcyBtYWlubHkgZmlsbGVkIHdpdGggdGhlIGNvdW50ZXJwYXJ0eSBpbmZvcm1hdGlvbiBmb3IgcGF5bWVudCByYWlsIHRyYW5zYWN0aW9ucyBhbmQgc29tZSBzdGFuZGFyZCB0ZXh0IGZvciBvdGhlciB0cmFuc2FjdGlvbiB0eXBlc1xuICBcIlwiXCJcbiAgZGlzcGxheU5hbWU6IFN0cmluZyFcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlxuICBETyBOT1QgQkFUQ0gsIFdJTEwgUkVTVUxUIElOIEFOIE4rMSBRVUVSWS5cbiAgSWYgbm90IE5VTEwsIHRoZSBjdXN0b21lciB1c2VyIHRoYXQgaW5pdGlhdGVkIHRoZSB0cmFuc2FjdGlvbi5cbiAgXCJcIlwiXG4gIGluaXRpYXRlZEJ5VXNlcjogVXNlclxuICBcIlwiXCJcbiAgRE8gTk9UIEJBVENILCBXSUxMIFJFU1VMVCBJTiBBTiBOKzEgUVVFUlkuXG4gIFdoZXRoZXIgdGhlIHRyYW5zYWN0aW9uIGlzIHN0aWxsIGNhbmNlbGxhYmxlLlxuICBOb3RlIHRoYXQgdGhpcyBkb2VzIG5vdCBhcHBseSBhbnkgcGVybWlzc2lvbmluZyBsb2dpYyB0byBkZWNsYXJlIHdoZXRoZXIgdGhlIHVzZXIgY2FuIGNhbmNlbCB0aGUgdHJhbnNhY3Rpb24uXG4gIFwiXCJcIlxuICBpc0NhbmNlbGxhYmxlOiBCb29sZWFuIVxuICBcIlwiXCJJZiB0cnVlLCB0aGUgdHJhbnNhY3Rpb24gb3JpZ2luYXRlZCBmcm9tIGEgcmVjdXJyaW5nIHNjaGVkdWxlLlwiXCJcIlxuICBpc1JlY3VycmluZzogQm9vbGVhblxuICBcIlwiXCJcbiAgSWYgdHJ1ZSwgbm90aWZ5IHRoZSBjb250YWN0IGlmIGFuZCB3aGVuIHRoZSB0cmFuc2FjdGlvbiBtb3ZlcyB0byB0aGUgcHJvY2Vzc2luZyBzdGF0ZS5cbiAgSWdub3JlZCB1bmxlc3MgdGhlIHRyYW5zYWN0aW9uIGlzIGEgY3JlZGl0IHRvIGEgY29udGFjdCB3aXRoIGEgdmFsaWQgZW1haWwuXG4gIFwiXCJcIlxuICBub3RpZnlDb250YWN0UHJvY2Vzc2luZzogQm9vbGVhblxuICBcIlwiXCJcbiAgV2hlcmUgdGhlIHRyYW5zYWN0aW9uIG9yaWdpbmF0ZWQgZnJvbVxuICBcbiAgQlJFWFxuICBUaGUgdHJhbnNhY3Rpb24gd2FzIGluaXRpYXRlZCBhdCBCcmV4XG4gIFxuICBFWFRFUk5BTFxuICBUaGUgdHJhbnNhY3Rpb24gd2FzIGluaXRpYXRlZCBhdCBvdXRzaWRlIG9mIEJyZXhcbiAgXCJcIlwiXG4gIG9yaWdpbjogQ2FzaFRyYW5zYWN0aW9uT3JpZ2luIVxuICBcIlwiXCJUaGUgYWNjb3VudCBiYWxhbmNlIHdoZW4gZnVuZHMgd2VyZSBtYWRlIGF2YWlsYWJsZSB0byB0aGUgYWNjb3VudC5cIlwiXCJcbiAgcHJvY2Vzc2VkQmFsYW5jZVNuYXBzaG90VXNkQ2VudHM6IEludFxuICBcIlwiXCJcbiAgRE8gTk9UIEJBVENILCBXSUxMIFJFU1VMVCBJTiBBTiBOKzEgUVVFUlkuXG4gIElmIG5vdCBOVUxMLCB0aGUgcmVjdXJyaW5nIHNjaGVkdWxlIGZyb20gd2hpY2ggdGhlIHRyYW5zYWN0aW9uIG9yaWdpbmF0ZWQuXG4gIE9wdGlvbmFsbHkgZmV0Y2ggdGhlIHByZWRpY3RlZCB0aW1lbGluZXMgZm9yIHRoZSBuZXh0IGB0aW1lbGluZUNvdW50YCB0cmFuc2FjdGlvbnMgaW4gdGhlIHNjaGVkdWxlLlxuICBcIlwiXCJcbiAgcmVjdXJyaW5nU2NoZWR1bGUodGltZWxpbmVDb3VudDogSW50KTogQ2FzaFJlY3VycmluZ1NjaGVkdWxlV2l0aFRpbWVsaW5lc1xuICBcIlwiXCJcbiAgV2hlcmUgaW4gdGhlIHRyYW5zYWN0aW9uIGxpZmVjeWNsZSB0aGlzIHRyYW5zYWN0aW9uIGlzIGF0XG4gIFxuICBBUFBST1ZBTF9SRVFVSVJFRFxuICBUaGUgdHJhbnNhY3Rpb24gaXMgcGVuZGluZyBhcHByb3ZhbCBmcm9tIGFuIGFkbWluIGluIHRoZSBhY2NvdW50IGJlZm9yZSB3ZSdyZSBhYmxlIHRvIGJlZ2luIHByb2Nlc3Npbmcgb3Igc2NoZWR1bGluZyB0aGUgdHJhbnNhY3Rpb25cbiAgXG4gIFNDSEVEVUxFRFxuICBUaGUgdHJhbnNhY3Rpb24gaXMgc2NoZWR1bGVkIHRvIGJlIGluaXRpYXRlZCBkdXJpbmcgaXRzIHNjaGVkdWxlZF9zZW5kX2F0IHRpbWVcbiAgXG4gIFBST0NFU1NJTkdcbiAgVGhpcyBwaGFzZSBiZWdpbnMgd2hlbiBCcmV4IHN0YXJ0cyB0byBwcm9jZXNzIHRoZSBzZW5kaW5nIG9yIHJlY2VpdmluZyBvZiB0aGlzIHRyYW5zYWN0aW9uIGFuZCBlbmRzIHdoZW4gd2UgZWl0aGVyIFBST0NFU1Mgb3IgRkFJTCB0aGUgdmVyaWZpY2F0aW9uXG4gIFxuICBQUk9DRVNTRURcbiAgVGhlIG1vbmV5IG1vdmVtZW50IGhhcyBiZWVuIGZ1bGx5IGNvbXBsZXRlLCB3aGljaCBjb3VsZCBtZWFuIG1vbmV5IHNlbnQgaGFzIGFycml2ZWQgYXQgdGhlaXIgZGVzdGluYXRpb24gb3IgZnVuZHMgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSBhY2NvdW50XG4gIFxuICBGQUlMRURcbiAgQSBncm91cGluZyBvZiBtdWx0aXBsZSB0ZXJtaW5hbCBzdGF0ZXMgdGhhdCBwcmV2ZW50ZWQgdGhlIHRyYW5zYWN0aW9uIGZyb20gY29tcGxldGluZ1xuICBUaGlzIGluY2x1ZGVzOlxuICAtIEEgdXNlciBjYW5jZWxsZWQgdGhlIHRyYW5zYWN0aW9uXG4gIC0gQW4gYWRtaW4gZGVuaWVkIHRoZSBhcHByb3ZhbFxuICAtIEZhaWx1cmUgdG8gc2VuZC9yZWNlaXZlIHRoZSBmdW5kcyAoZS5nLiBpbnN1ZmZpY2llbnQgZnVuZHMsIHBlcm1pc3Npb25zLCBldGMpXG4gIC0gSW50ZXJuYWwgY2FuY2VsbGF0aW9uIGR1ZSB0byBmcmF1ZFxuICBcIlwiXCJcbiAgc3RhdHVzOiBDYXNoVHJhbnNhY3Rpb25TdGF0dXMhXG4gIFwiXCJcIlRpbWVzdGFtcHMgZm9yIHRoZSBzZXJpZXMgb2YgZXZlbnRzIGEgdHJhbnNhY3Rpb24gaGFzIGdvbmUgdGhyb3VnaFwiXCJcIlxuICB0aW1lbGluZTogQ2FzaFRyYW5zYWN0aW9uVGltZWxpbmUhXG4gIFwiXCJcIlxuICBETyBOT1QgQkFUQ0gsIFdJTEwgUkVTVUxUIElOIEFOIE4rMSBRVUVSWS5cbiAgSWYgbm90IE5VTEwsIHRoZSBhcHByb3ZhbCBhc3NvY2lhdGVkIHdpdGggdGhlIHRyYW5zYWN0aW9uLlxuICBcIlwiXCJcbiAgdHJhbnNhY3Rpb25BcHByb3ZhbDogQ2FzaFRyYW5zYWN0aW9uQXBwcm92YWxcbiAgXCJcIlwiQSBoaWdoLWxldmVsIGJyZWFrZG93biBvZiB0aGUgcG9zc2libGUgdHJhbnNhY3Rpb25zIHdoaWNoIGRvZXMgbm90IGV4YWN0bHkgbWFwIDE6MSB3aXRoIHRoZSBkZXRhaWxzLlwiXCJcIlxuICB0eXBlOiBDYXNoVHJhbnNhY3Rpb25UeXBlIVxufVxuXG50eXBlIFJlaW1idXJzZW1lbnRNZXRhZGF0YSB7XG4gIGFtb3VudDogSW50XG4gIGRlcGFydG1lbnQ6IERlcGFydG1lbnRcbiAgZGVwYXJ0bWVudElkOiBJRFxuICBkZXBhcnRtZW50TmFtZTogU3RyaW5nXG4gIGxvY2F0aW9uOiBMb2NhdGlvblxuICBsb2NhdGlvbklkOiBJRFxuICBsb2NhdGlvbk5hbWU6IFN0cmluZ1xuICBtZW1vOiBTdHJpbmdcbiAgbWVyY2hhbnQ6IE1lcmNoYW50XG4gIG1lcmNoYW50Q2F0ZWdvcnk6IE1lcmNoYW50Q2F0ZWdvcnlcbiAgbWVyY2hhbnRDYXRlZ29yeUlkOiBJRFxuICBtZXJjaGFudElkOiBJRFxuICBtZXJjaGFudE5hbWU6IFN0cmluZ1xuICBuZXRzdWl0ZUNsYXNzOiBFeHRlcm5hbEludGVncmF0aW9uRW50aXR5XG4gIG5ldHN1aXRlQ2xhc3NFeHRlcm5hbEVudGl0eUlkOiBJRFxuICBwdXJjaGFzZURhdGU6IFRpbWVcbiAgcmVjZWlwdEFzc2V0RmlsZUlkOiBJRFxuICB1c2VyQ2F0ZWdvcnk6IFVzZXJDYXRlZ29yeVxuICB1c2VyQ2F0ZWdvcnlJZDogSURcbn1cblxuaW5wdXQgQ3JlYXRlQ2FzaFdpcmVEZXRhaWxzSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRlcG9zaXRzQWNjb3VudElkOiBJRFxuICBkaXNwbGF5VGltZTogVGltZSFcbn1cblxudHlwZSBEb2N1bWVudE9jciBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiVGhlIHByb2Nlc3NlZCByZXN1bHQuIE9ubHkgYXZhaWxhYmxlIHdoZW4gdGhlIGRvY3VtZW50IE9DUiBzdGF0dXMgaXMgQ09NUExFVEVcIlwiXCJcbiAgcmVzdWx0OiBEb2N1bWVudE9jclJlc3VsdFxuICBcIlwiXCJUaGUgT0NSIHN0YXR1cy5cIlwiXCJcbiAgc3RhdHVzOiBEb2N1bWVudE9jclN0YXR1cyFcbn1cblxudW5pb24gTm90aWZpY2F0aW9uRmlsdGVyID0gVHJhbnNhY3Rpb25QcmVzZW5jZU5vdGlmaWNhdGlvbkZpbHRlclxuXG50eXBlIFNldFJlY2VpdmFibGVzT2ZmZXJzT3B0ZWRPdXRPZkluc3RhbnRQYXlvdXRzUGF5bG9hZCB7XG4gIGFjY291bnQ6IFJlY2VpdmFibGVzT2ZmZXJzQWNjb3VudFxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgU2V0TW9udGhseVVzZXJMaW1pdFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHVzZXI6IFVzZXIhXG59XG5cblwiXCJcIkEgY3ljbGUgcmVvY2N1cnJpbmcgZXZlcnkgbW9udGggb24gdGhlIHNhbWUgdHdvIGRheXMgb2YgZXZlcnkgbW9udGguXCJcIlwiXG50eXBlIFNlbWlNb250aGx5Q2FyZFN0YXRlbWVudFBvbGljeUN5Y2xlIHtcbiAgXCJcIlwiVGhlIGZpcnN0IGRheSBvZiB0aGUgbW9udGguXCJcIlwiXG4gIGZpcnN0RGF5OiBJbnRcbiAgXCJcIlwiVGhlIHNlY29uZCBkYXkgb2YgdGhlIG1vbnRoLlwiXCJcIlxuICBzZWNvbmREYXk6IEludFxufVxuXG50eXBlIEV4cGVuc2VzRmxhZ0V2ZW50RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IEV4cGVuc2VzRmxhZ0V2ZW50XG59XG5cbmVudW0gRGVwb3NpdHNDbG9zZUFjY291bnRJc3N1ZSB7XG4gIElOVkFMSURcbiAgTkVHQVRJVkVfQkFMQU5DRVxuICBQUklNQVJZX0NBUkRfRlVORElOR19TT1VSQ0VcbiAgV1JPTkdfREVQT1NJVFNfQUNDT1VOVF9TVEFUVVNcbn1cblxuZW51bSBBY2NvdW50TG9jYXRpb24ge1xuICBET01FU1RJQ1xuICBJTlRFUk5BVElPTkFMXG59XG5cbnR5cGUgVmFsaWRhdGVkVmVuZG9yQ29udGFjdElucHV0Q29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbVmFsaWRhdGVkVmVuZG9yQ29udGFjdElucHV0RWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG5pbnB1dCBTZXRNYW5hZ2VySW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIG1hbmFnZXJJZDogSURcbiAgcmVwb3J0SWRzOiBbSURdIVxufVxuXG50eXBlIFBsYWlkUGF5bG9hZCB7XG4gIHBsYWlkSW5zdGl0dXRpb25JZDogU3RyaW5nIVxufVxuXG5pbnB1dCBGaW5pY2l0eUNvbm5lY3RNaWdyYXRlQWNjb3VudHNJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZmluYW5jaWFsU291cmNlSWQ6IElEIVxufVxuXG50eXBlIEZib1RyYW5zZmVyRGV0YWlscyB7XG4gIGZib0FjY291bnROYW1lOiBTdHJpbmdcbn1cblxudHlwZSBJbmR1c3RyeVNlYXJjaFJlc3VsdEVudHJ5RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IEluZHVzdHJ5U2VhcmNoUmVzdWx0RW50cnlcbn1cblxuXCJcIlwiQW4gYWNjb3VudCB3aGljaCB3ZSByZXF1aXJlIHN0YXRlbWVudCB1cGRhdGUgZnJvbSB0aGUgY3VzdG9tZXJcIlwiXCJcbnR5cGUgRmluYW5jaWFsU3RhdGVtZW50QWNjb3VudCBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaGUgbGFzdCBkaWdpdHMgb2YgdGhlIGJhbmsgYWNjb3VudCBudW1iZXIgZm9yIGRpc3BsYXlcIlwiXCJcbiAgYWNjb3VudE51bWJlckxhc3RGb3VyOiBTdHJpbmdcbiAgXCJcIlwiYWNjb3VudCBudW1iZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBzdGF0ZW1lbnQgYWNjb3VudFwiXCJcIlxuICBiYW5rQWNjb3VudE51bWJlcjogU3RyaW5nXG4gIFwiXCJcIkJhbmsvRmluYW5jaWFsIGluc3RpdHV0aW9uXCJcIlwiXG4gIGJhbmtOYW1lOiBTdHJpbmdcbiAgXCJcIlwiRmluYW5jaWFsIEFjY291bnQgSURcIlwiXCJcbiAgZmluYW5jaWFsQWNjb3VudElkOiBTdHJpbmchXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxufVxuXG50eXBlIENhc2hUcmFuc2FjdGlvbkFwcHJvdmFsQ29udGV4dCB7XG4gIFwiXCJcIkFtb3VudCBpbiBVU0QgY2VudHNcIlwiXCJcbiAgYW1vdW50VXNkQ2VudHM6IEludCFcbiAgXCJcIlwiRW5jb2RlZCBCaWxsIElEXCJcIlwiXG4gIGJpbGxJZDogSURcbiAgY2FuY2VsbGF0aW9uUmVhc29uOiBDYXNoVHJhbnNhY3Rpb25DYW5jZWxsYXRpb25SZWFzb25cbiAgY291bnRlcnBhcnR5TmFtZTogU3RyaW5nIVxuICBleHRlcm5hbE1lbW86IFN0cmluZ1xuICBpbml0aWF0ZWRCeVVzZXJGaXJzdE5hbWU6IFN0cmluZ1xuICBpbml0aWF0ZWRCeVVzZXJMYXN0TmFtZTogU3RyaW5nXG4gIHJvdXRpbmdOdW1iZXI6IFN0cmluZ1xuICB0cmFuc2FjdGlvbklkOiBJRCFcbiAgdHJhbnNhY3Rpb25TdGF0dXM6IENhc2hUcmFuc2FjdGlvblN0YXR1cyFcbiAgdHlwZTogQ2FzaFRyYW5zYWN0aW9uVHlwZSFcbn1cblxudHlwZSBQYXltZW50SW5zdHJ1bWVudCBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJQYXltZW50IGluc3RydW1lbnQncyBiZW5lZmljaWFyeSBuYW1lXCJcIlwiXG4gIGJlbmVmaWNpYXJ5TmFtZTogU3RyaW5nXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBwYXltZW50SW5zdHJ1bWVudFR5cGU6IFBheW1lbnRJbnN0cnVtZW50VHlwZSFcbiAgdmVyc2lvbjogSW50IVxufVxuXG50eXBlIFJlZmVycmFsIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBpbnNlcnRlZEF0OiBUaW1lIVxuICByZWZlcnJlZEVtYWlsOiBTdHJpbmchXG4gIHN0YXR1czogUmVmZXJyYWxTdGF0dXMhXG59XG5cbnR5cGUgUHJlbWl1bVNldHRpbmcgaW1wbGVtZW50cyBOb2RlIHtcbiAgZXZlbnRzOiBbUHJlbWl1bVNldHRpbmdFdmVudF1cbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIGluc2VydGVkQXQ6IFRpbWVcbiAgcHJpY2luZ1NjaGVtZTogUHJlbWl1bVNldHRpbmdQcmljaW5nU2NoZW1lXG4gIHN0YXR1czogUHJlbWl1bVNldHRpbmdTdGF0dXMhXG4gIHN0YXR1c1VwZGF0ZWRBdDogVGltZSFcbn1cblxuZW51bSBDYWxjdWxhdGVDcmVkaXRNYXJrZXRpbmdPZmZlclJlc3VsdFN0YXR1cyB7XG4gIEZBSUxFRF9DUkVESVRfU09GVF9QVUxMXG4gIEZBSUxFRF9TU05fVkVSSUZJQ0FUSU9OXG4gIEZBSUxFRF9VTktOT1dOXG4gIEZBSUxFRF9VU0VSX0lERU5USVRZX1ZFUklGSUNBVElPTlxuICBGUk9aRU5fQ1JFRElUX1BST0ZJTEVcbiAgUkVKRUNURURfQ1JFRElUX1FVQUxJRklDQVRJT05cbiAgU1VDQ0VTU1xufVxuXG50eXBlIEFwcHJvdmFsc1Jldmlld0VkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBBcHByb3ZhbHNSZXZpZXdcbn1cblxuaW5wdXQgVXBkYXRlQ29udGFjdElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBlbWFpbDogU3RyaW5nXG4gIGlkOiBJRCFcbiAgbmFtZTogU3RyaW5nXG4gIHBob25lTnVtYmVyOiBTdHJpbmdcbn1cblxuZW51bSBDYXNoVHJhbnNhY3Rpb25PcmlnaW4ge1xuICBCUkVYXG4gIEVYVEVSTkFMXG4gIElOVkFMSURcbn1cblxudHlwZSBTdXNwZW5kQ2FyZFBheWxvYWQge1xuICBjYXJkOiBDYXJkIVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgQ3JlYXRlQ291bnRlcnBhcnR5UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgY291bnRlcnBhcnR5OiBDb3VudGVycGFydHkhXG59XG5cblwiXCJcIlRoZSBzb3VyY2Ugb2YgZnVuZHMgd2FzIGFuIHVua25vd24gb2ZmbGluZSBzb3VyY2VcIlwiXCJcbnR5cGUgT2ZmbGluZVNvdXJjZSB7XG4gIFwiXCJcIkEgcGxhY2Vob2xkZXIgYWx3YXlzIHRydWUgZmllbGQgdG8gbWFrZSB0aGUgb2JqZWN0IHF1ZXJ5YWJsZVwiXCJcIlxuICBvZmZsaW5lOiBCb29sZWFuXG59XG5cbnR5cGUgQ2FzaFRyYW5zYWN0aW9uSW50ZXJlc3REZXRhaWxzIHtcbiAgXCJcIlwiV2hlbiB0aGUgaW50ZXJlc3QgcGF5b3V0IHdhcyBpbml0aWF0ZWQsIHdoaWNoIGNvdWxkIGRpZmZlciBmcm9tIHRoZSBzZXR0bGVkX2F0IHRpbWVcIlwiXCJcbiAgcGFpZE9uRGF0ZTogRGF0ZVxufVxuXG50eXBlIFJlc2V0QmFja3VwQ29kZXNQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBjb2RlczogW1N0cmluZ10hXG59XG5cbmlucHV0IFVwZGF0ZUVhcmx5QWNjZXNzRmVhdHVyZUpvaW5TdGF0dXNJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZWFybHlBY2Nlc3NGZWF0dXJlSWQ6IElEIVxuICBqb2luU3RhdHVzOiBFYXJseUFjY2Vzc0ZlYXR1cmVKb2luU3RhdHVzIVxufVxuXG5lbnVtIFJld2FyZHNUcmlnZ2VyVHlwZSB7XG4gIENBU0hfQUNUSVZBVElPTl9DQVJEX1NQRU5EX0JPTlVTXG4gIERFUE9TSVRTX1RSQU5TRkVSXG4gIExJTktFRF9BQ0NPVU5UX0JPTlVTXG4gIFBVUkNIQVNFXG4gIFJFRkVSUkVEX0FNT1VOVF9TUEVOVFxuICBSRUZFUlJFUl9BV0FSRFxuICBUT1BfQ0FURUdPUllfTVVMVElQTElFUlxufVxuXG5lbnVtIENhcmRBY2NvdW50VHlwZSB7XG4gIERFUE9TSVRTX0JBQ0tFRFxuICBUUkFESVRJT05BTF9DSEFSR0VcbiAgVFJBTlNBQ1RJT05BTF9GTE9BVFxufVxuXG5pbnB1dCBSZXNldEJhY2t1cENvZGVzSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbmVudW0gQ2FyZFNvcnRDb2x1bW4ge1xuICBESVNQTEFZX05BTUVcbiAgSE9MREVSX05BTUVcbiAgTEFTVF9VU0VEXG4gIExJTUlUXG4gIExPQ0tfREFURVxuICBTVEFUVVNfVklFV1xuICBVU0FHRVxuICBVVElMSVpBVElPTlxufVxuXG50eXBlIFJld2FyZHNUcmlnZ2VyRGVwb3NpdHNUcmFuc2ZlciB7XG4gIF86IEJvb2xlYW5cbn1cblxuZW51bSBCaWxsU29ydE9yZGVyIHtcbiAgQVNDXG4gIERFU0Ncbn1cblxudHlwZSBBZHZhbmNlVG9OZXh0U3RlcFBheWxvYWQge1xuICBhdmFpbGFibGVQcm9kdWN0T2ZmZXJzOiBbUHJvZHVjdE9mZmVyIV0hXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBTZXRSZWNlaXZhYmxlc09mZmVyc0NvbmZpcm1lZFBheW91dHNSb3V0ZWRUb0JyZXhQYXlsb2FkIHtcbiAgYWNjb3VudDogUmVjZWl2YWJsZXNPZmZlcnNBY2NvdW50XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBGaW5pY2l0eVBheWxvYWQge1xuICBuZWVkc01pZ3JhdGlvbjogQm9vbGVhbiFcbn1cblxudHlwZSBQcm9tb3Rpb25zSW1hZ2Uge1xuICBcIlwiXCJMYW5kc2NhcGUgYXNwZWN0IGZvciBkZXNrdG9wIHZpZXdwb3J0c1wiXCJcIlxuICBsYW5kc2NhcGU6IFN0cmluZ1xuICBcIlwiXCJQb3J0cmFpdCBhc3BlY3QgZm9yIG1vYmlsZSB2aWV3cG9ydHNcIlwiXCJcbiAgcG9ydHJhaXQ6IFN0cmluZ1xuICBcIlwiXCJXZWlyZCBjYXNpbmcgYmVjYXVzZSBBYnNpbnRoZSBkb2Vzbid0IGxpa2Ugd29yZHMgdGhhdCBzdGFydCB3aXRoIG51bWJlcnMuIEZ1bGwgaW1hZ2UgVVJMcywgc2luY2Ugd2UgZG9uJ3QgaGF2ZSBhIGdyZWF0IGltYWdlIG1hbmFnZW1lbnQgc3lzdGVtIGZvciB0aGUgZGFzaGJvYXJkIHRoYXQgd291bGQgYWxsb3cgZm9yIGR5bmFtaWMgc2l6aW5nXCJcIlwiXG4gIHVybDF4OiBTdHJpbmdcbiAgXCJcIlwiMlggc2l6ZSBmb3IgcmV0aW5hIGRpc3BsYXlzXCJcIlwiXG4gIHVybDJ4OiBTdHJpbmdcbn1cblxuXCJcIlwiTWlsZXMgdHJhbnNmZXIgc3RhdHVzXCJcIlwiXG5lbnVtIE1pbGVzVHJhbnNmZXJTdGF0dXMge1xuICBGQUlMRURcbiAgUFJPQ0VTU0lOR1xuICBTVUNDRUVERURcbiAgVU5LTk9XTlxufVxuXG5pbnB1dCBNb2RpZnlQcmVhcHByb3ZlZENhcmRTZXR0aW5nc0lucHV0IHtcbiAgY2FyZElkOiBJRCFcbiAgY2FyZExpbWl0OiBDYXJkTGltaXRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZWZhdWx0TWVtbzogU3RyaW5nXG4gIGlkZW1wb3RlbmN5S2V5OiBTdHJpbmchXG4gIHNvZnRFeHBpcmVzQXQ6IFRpbWVcbn1cblxudHlwZSBSZWltYnVyc2VtZW50SXRlbUV2ZW50Q29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbUmVpbWJ1cnNlbWVudEl0ZW1FdmVudEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgdG90YWxDb3VudDogSW50IVxufVxuXG50eXBlIFJlc2V0VXNlclBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHVzZXI6IFVzZXJcbn1cblxudHlwZSBJbnRlcm5hbEVudGl0eVN5bmNFcnJvciBpbXBsZW1lbnRzIE5vZGUge1xuICBiaWxsOiBCaWxsXG4gIGVycm9yTWVzc2FnZTogU3RyaW5nXG4gIGVycm9yVHlwZTogU3RyaW5nXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nXG4gIGluc2VydGVkQXQ6IFRpbWVcbiAgb3BlcmF0aW9uOiBTdHJpbmdcbiAgcmF3UmVzcG9uc2U6IEpzb25cbiAgcmVpbWJ1cnNlbWVudEl0ZW06IFJlaW1idXJzZW1lbnRJdGVtXG4gIHJlcXVlc3RQYXlsb2FkOiBKc29uXG4gIHN0YXR1czogSW50ZXJuYWxFbnRpdHlTeW5jU3RhdHVzIVxuICB1cGRhdGVkQXQ6IFRpbWVcbn1cblxudHlwZSBBcHByb3ZhbHNSZXF1ZXN0UHJlYXBwcm92ZWRDYXJkIHtcbiAgYW1vdW50OiBJbnQhXG4gIGNhcmQ6IENhcmRcbiAgZGVmYXVsdE1lbW86IFN0cmluZ1xuICBkaXNwbGF5TmFtZTogU3RyaW5nIVxuICBmcmVxdWVuY3k6IENhcmRMaW1pdEZyZXF1ZW5jeSFcbiAgaW50ZWdyYXRpb25SdWxlQm9keTogU3RyaW5nXG4gIGludGVncmF0aW9uUnVsZUlkOiBJRFxuICBzb2Z0RXhwaXJhdGlvbkRhdGU6IFRpbWVcbn1cblxudHlwZSBVcGRhdGVUcmFuc2FjdGlvbkJpbGxhYmxlU3RhdHVzUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uXG59XG5cbnVuaW9uIFJlY3VycmluZ1NjaGVkdWxlID0gRGVwb3NpdHNNb250aGx5U2NoZWR1bGUgfCBEZXBvc2l0c1dlZWtseVNjaGVkdWxlXG5cblwiXCJcIlRoZSBzcGVuZCBhbGVydCBldmVudFwiXCJcIlxudHlwZSBDYXJkVHJhbnNhY3Rpb25JbnNpZ2h0RXZlbnQge1xuICBcIlwiXCJUaGUgc3BlbmQgYWxlcnQgZXZlbnQgYWN0aW9uXCJcIlwiXG4gIGFjdGlvbjogQ2FyZFRyYW5zYWN0aW9uSW5zaWdodEV2ZW50QWN0aW9uXG4gIFwiXCJcIlRoZSB0aW1lIHdoZW4gdGhlIGV2ZW50IGlzIGNyZWF0ZWRcIlwiXCJcbiAgY3JlYXRlZEF0OiBUaW1lXG4gIFwiXCJcIlRoZSBjdXN0b21lciB1c2VyIHdobyBjcmVhdGVzIHRoaXMgZXZlbnRcIlwiXCJcbiAgY3VzdG9tZXJVc2VyOiBVc2VyXG4gIFwiXCJcIlRoZSBldmVudCBtZXRhZGF0YVwiXCJcIlxuICBldmVudE1ldGFkYXRhOiBFdmVudE1ldGFkYXRhXG4gIFwiXCJcIlRoZSB0aW1lIHdoZW4gdGhlIGV2ZW50IGlzIHVwZGF0ZWRcIlwiXCJcbiAgdXBkYXRlZEF0OiBUaW1lXG59XG5cbmlucHV0IFNpZ251cElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBlbWFpbDogRW1haWwhXG4gIGluZm86IFNpZ251cEluZm9JbnB1dCFcbiAgcGFzc3dvcmQ6IFN0cmluZyFcbiAgcmVkaXJlY3RVcmw6IFN0cmluZyFcbn1cblxuaW5wdXQgQ3JlYXRlRGVwb3NpdHNBcHBsaWNhdGlvbklucHV0IHtcbiAgXCJcIlwiQ2FuY2VsIGFueSBleGlzdGluZyBhcHBsaWNhdGlvbnMgb2YgdGhlIHNhbWUgYmx1ZXByaW50XCJcIlwiXG4gIGNhbmNlbFByZXZpb3VzQXBwbGljYXRpb246IEJvb2xlYW5cbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJUaGUgc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gb2YgdGhlIGJsdWVwcmludCB0eXBlLiBEZWZhdWx0cyB0byBgZ2VtaW5pYFwiXCJcIlxuICBuYW1lOiBTdHJpbmdcbn1cblxudHlwZSBJc3N1ZXJUcmFuc2FjdGlvblBheWxvYWQge1xuICBleGNoYW5nZVJhdGU6IEZsb2F0IVxufVxuXG50eXBlIFVwZGF0ZVJlaW1idXJzZW1lbnRNZXRhZGF0YVBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHJlaW1idXJzZW1lbnRJdGVtOiBSZWltYnVyc2VtZW50SXRlbSFcbn1cblxuXCJcIlwiQnJleCBzdXBwb3J0ZWQgaW5kdXN0cmllc1wiXCJcIlxudHlwZSBJbmR1c3RyeSBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJOYW1lIGRpc3BsYXllZCBpbiBVSVwiXCJcIlxuICBkaXNwbGF5TmFtZTogU3RyaW5nIVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiTmFtZSB1c2VkIGludGVybmFsbHkgYW5kIHNob3VsZG4ndCBjaGFuZ2VcIlwiXCJcbiAgaW50ZXJuYWxOYW1lOiBTdHJpbmchXG59XG5cbnR5cGUgVXNlckVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBVc2VyXG59XG5cbnR5cGUgUmV3YXJkc1RyaWdnZXJJbnN0YW5jZVN0YXRlUmVmZXJyZWRBbW91bnRTcGVudCB7XG4gIGFtb3VudFNwZW50OiBJbnQhXG4gIHJlZmVycmFsSWQ6IFN0cmluZyFcbn1cblxudHlwZSBGaW5pc2hDaGFubmVsVmVyaWZpY2F0aW9uUGF5bG9hZCB7XG4gIGNoYW5uZWw6IENoYW5uZWxcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5pbnB1dCBEZWxldGVQYXltZW50SW5zdHJ1bWVudElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpZDogSUQhXG59XG5cbmlucHV0IEludml0ZVVzZXJXaXRoTW9udGhseUxpbWl0SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGludml0ZUlkZW1wb3RlbmN5S2V5OiBTdHJpbmdcbiAgbW9udGhseUxpbWl0QW1vdW50OiBJbnRcbiAgdXNlcjogVXNlckludml0ZSFcbn1cblxuZW51bSBTcGVuZEFnZ3JlZ2F0ZVNvcnRLZXkge1xuICBBTU9VTlRcbiAgQ0FSRF9OQU1FXG4gIENBUkRfVFlQRVxuICBERVBBUlRNRU5UX05BTUVcbiAgSU5WQUxJRFxuICBNRVJDSEFOVF9DQVRFR09SWV9OQU1FXG4gIE1FUkNIQU5UX05BTUVcbiAgUEVSSU9EX1BFUkNFTlRfQ0hBTkdFXG4gIFBSRVZJT1VTX1BFUklPRF9BTU9VTlRcbiAgVElNRVxuICBVU0VSX0NBVEVHT1JZX05BTUVcbiAgVVNFUl9OQU1FXG59XG5cblwiXCJcIk1ldGFkYXRhIGZvciBHVVNUTyBpbnRlZ3JhdGlvbnNcIlwiXCJcbnR5cGUgUGF5cm9sbEludGVncmF0aW9uR3VzdG9JbmZvIHtcbiAgXCJcIlwiR3VzdG8gcmVkaXJlY3QgVVJMIGZvciBzaWdudXAgYW5kIHJlY29ubmVjdFwiXCJcIlxuICBhY2NvdW50Q2xhaW1Vcmw6IFN0cmluZ1xufVxuXG50eXBlIFF1aWNrYm9va3NMb2NhdGlvbiB7XG4gIG5hbWU6IFN0cmluZ1xufVxuXG50eXBlIEFjaERldGFpbHMge1xuICBjb3VudGVycGFydHk6IENvdW50ZXJwYXJ0eSFcbiAgZXN0aW1hdGVkT246IFRpbWUhXG4gIGluaXRpYXRvckN1c3RvbWVyVXNlcjogVXNlclxuICBtZXRob2Q6IE1ldGhvZCFcbiAgb3JpZ2luOiBPcmlnaW4hXG4gIHRyYW5zZmVyRGVzY3JpcHRpb246IFN0cmluZ1xufVxuXG5lbnVtIERlcG9zaXRzUm9sZSB7XG4gIEFETUlOXG4gIEJPT0tLRUVQRVJcbiAgVVNFUlxufVxuXG5pbnB1dCBCdWxrRGlzY29ubmVjdEVycEZlZWRzSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIFwiXCJcImxpc3Qgb2YgZXJwIGZlZWQgaWRzIHRvIGRpc2Nvbm5lY3RcIlwiXCJcbiAgZXJwRmVlZElkczogW0lEXVxufVxuXG5pbnB1dCBBY2NvdW50UHJpbmNpcGFsVXNlcklucHV0IHtcbiAgZW1haWw6IFN0cmluZyFcbiAgZmlyc3ROYW1lOiBTdHJpbmchXG4gIGxhc3ROYW1lOiBTdHJpbmchXG4gIHBhc3N3b3JkOiBTdHJpbmchXG59XG5cbnR5cGUgSW50cmFDdXN0b21lckFjY291bnRCb29rVHJhbnNmZXJEZXRhaWxzIHtcbiAgaW5pdGlhdGVkQnlDdXN0b21lclVzZXI6IFVzZXJcbiAgc291cmNlRGVwb3NpdHNBY2NvdW50OiBEZXBvc2l0c0FjY291bnRcbiAgdGFyZ2V0RGVwb3NpdHNBY2NvdW50OiBEZXBvc2l0c0FjY291bnRcbn1cblxuaW5wdXQgU3VibWl0T25ib2FyZGluZ0luZm9ybWF0aW9uUmVxdWVzdElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkYXRhOiBKc29uXG4gIGlkOiBJRCFcbn1cblxuXCJcIlwiVGhlIHZhbHVlIHR5cGUgd2hlbiBtdXRlX2NvbHVtbiBpcyBzZXQgdG8gdXNlcl9pZFwiXCJcIlxudHlwZSBNdXRlVmFsdWVVc2VyIHtcbiAgXCJcIlwiVGhlIHVzZXIgdGhhdCBpcyBiZWluZyBtdXRlZCBmb3IgdGhpcyBtdXRpbmcgcG9saWN5XCJcIlwiXG4gIHVzZXI6IFVzZXJcbn1cblxuZW51bSBQcmVtaXVtU2V0dGluZ1N0YXR1cyB7XG4gIEFDVElWRVxuICBDQU5DRUxMRURcbiAgSU5WQUxJRFxufVxuXG5pbnB1dCBEaXNhYmxlTm9uUHJpbWFyeUZ1bmRpbmdTb3VyY2VzSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGZ1bmRpbmdTb3VyY2VJZHM6IFtTdHJpbmchXSFcbiAgbm90ZXM6IFN0cmluZyFcbiAgcmVhc29uOiBGdW5kaW5nU291cmNlU3RhdHVzQ2hhbmdlUmVhc29uIVxufVxuXG50eXBlIEJlZ2luQ2hhbm5lbFZlcmlmaWNhdGlvblBheWxvYWQge1xuICBjaGFubmVsOiBDaGFubmVsXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBBcHByb3ZhbHNVc2VyIHtcbiAgZGVwYXJ0bWVudDogRGVwYXJ0bWVudFxuICBmaXJzdE5hbWU6IFN0cmluZ1xuICBpZDogSUQhXG4gIGxhc3ROYW1lOiBTdHJpbmdcbiAgbG9jYXRpb246IExvY2F0aW9uXG4gIG1vbnRobHlVc2VyTGltaXRJbmZvOiBNb250aGx5VXNlckxpbWl0SW5mb1xufVxuXG5cIlwiXCJDb2xsZWN0ZWQgZnJvbSBhIENvbGxlY3QgRnVuZGluZyBTb3VyY2UgKGV4dGVybmFsIEFDSClcIlwiXCJcbnR5cGUgUmVjZWl2YWJsZXNPZmZlcnNQYXltZW50SW50ZW50U291cmNlQ29sbGVjdEZ1bmRpbmdTb3VyY2Uge1xuICBpZDogU3RyaW5nIVxufVxuXG50eXBlIFRyYW5zYWN0aW9uQW1vdW50IHtcbiAgXCJcIlwiU3VtIG9mIGFtb3VudHMgb2YgYWxsIHBlbmRpbmcgdHJhbnNhY3Rpb24gb3BlcmF0aW9uIGFtb3VudHMgZm9yIHRoaXMgdHJhbnNhY3Rpb25cIlwiXCJcbiAgcGVuZGluZzogSW50XG59XG5cbmlucHV0IE1hcmtPZmZlclNlZW5JbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgb2ZmZXJUeXBlOiBPZmZlclR5cGUhXG59XG5cbmlucHV0IEdldE9yQ3JlYXRlUGF5bWVudE1ldGhvZElucHV0IHtcbiAgY2FyZElkOiBJRCFcbn1cblxudHlwZSBVcGRhdGVUcmFuc2FjdGlvbkxvY2F0aW9uUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uXG59XG5cblwiXCJcIlRoZSBtZXRhZGF0YSBmb3IgYSBzYWFzIGluY3JlYXNlIHR5cGVcIlwiXCJcbnR5cGUgSW5zaWdodE1ldGFkYXRhU2Fhc0luY3JlYXNlIHtcbiAgXCJcIlwiVGhlIHByZXZpb3VzIGFtb3VudCBiZWZvcmUgdGhlIHNwZW5kIGluY3JlYXNlXCJcIlwiXG4gIHByZXZpb3VzQW1vdW50OiBGbG9hdCFcbiAgXCJcIlwiVGhlIHJlbGV2YW50IGVudHJpZXMgdGhhdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBzcGVuZCBhbGVydFwiXCJcIlxuICBzYWFzSW5jcmVhc2VSZWxldmFudEVudHJpZXM6IFtTdGF0ZW1lbnRFbnRyeV1cbn1cblxudHlwZSBQZXJNZXJjaGFudFN0YXRzQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbUGVyTWVyY2hhbnRTdGF0c0VkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBDcmVhdGVFbWFpbENoYW5uZWxQYXlsb2FkIHtcbiAgY2hhbm5lbDogQ2hhbm5lbFxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbmlucHV0IEFwcHJvdmFsc1J1bGVHcm91cE1hdGNoZXJJbnB1dCB7XG4gIGNvbXBhcmlzb246IFN0cmluZyFcbiAga2V5OiBTdHJpbmchXG4gIHZhbHVlOiBTdHJpbmdcbn1cblxudHlwZSBFbWFpbEFzc2V0Qm9keSB7XG4gIGNvbnRlbnQ6IFN0cmluZ1xuICBjb250ZW50VHlwZTogU3RyaW5nXG59XG5cbnR5cGUgVXBkYXRlUG9zaXRpdmVQYXlBY2NvdW50U2V0dGluZ1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmc6IFBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmchXG59XG5cbnR5cGUgQ2FuY2VsQ29sbGVjdGlvbkludGVudGlvblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGNvbGxlY3Rpb25JbnRlbnRpb246IENvbGxlY3Rpb25JbnRlbnRpb24hXG59XG5cbnR5cGUgWGVyb0NhdGVnb3JpZXMge1xuICBhY2NvdW50c1BheWFibGVVc2VyQ2F0ZWdvcnk6IFVzZXJDYXRlZ29yeVxuICBjb2xsZWN0aW9uVGFyZ2V0VXNlckNhdGVnb3J5OiBVc2VyQ2F0ZWdvcnlcbiAgb3JnYW5pemF0aW9uTmFtZTogU3RyaW5nXG4gIHJld2FyZHNJbmNvbWVVc2VyQ2F0ZWdvcnk6IFVzZXJDYXRlZ29yeVxuICB2ZW5kb3JOYW1lOiBTdHJpbmdcbn1cblxudHlwZSBSZXdhcmRzVHJpZ2dlckxpbmtlZEFjY291bnRCb251cyB7XG4gIGV4cGlyYXRpb25BZnRlckNhc2hBY3RpdmF0aW9uRGF5czogSW50IVxuICByZXdhcmQ6IFJld2FyZHNQb2ludFJld2FyZCFcbn1cblxudHlwZSBTZXNzaW9uIHtcbiAgdG9rZW46IFN0cmluZ1xuICB0b2tlbkJhc2U2NDogU3RyaW5nXG4gIHVzZXJJZDogU3RyaW5nXG59XG5cbmVudW0gRGlzcHV0ZVR5cGUge1xuICBESVNQVVRFX1RZUEVfRlJBVURcbiAgRElTUFVURV9UWVBFX01FUkNIX0RJU1BVVEVcbiAgRElTUFVURV9UWVBFX09USEVSXG4gIERJU1BVVEVfVFlQRV9VTktOT1dOXG59XG5cbmVudW0gSW5jZW50aXZlT3B0T3V0VHlwZSB7XG4gIEdMT0JBTF9QRVJfQUNDT1VOVFxuICBHTE9CQUxfUEVSX1VTRVJcbiAgSU5WQUxJRFxuICBQTEFDRU1FTlRfUEVSX0FDQ09VTlRcbiAgUExBQ0VNRU5UX1BFUl9VU0VSXG59XG5cbmlucHV0IERlbGV0ZUNvbnRhY3RJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaWQ6IElEIVxufVxuXG5lbnVtIEFwcHJvdmFsc1JlcXVlc3RUeXBlIHtcbiAgTU9OVEhMWV9MSU1JVF9PVkVSUklERVxuICBQUkVBUFBST1ZFRF9DQVJEXG4gIFJFSU1CVVJTRU1FTlRcbn1cblxudHlwZSBBZGRGc3BCb29ra2VlcGVyUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcG9saWN5VXJuOiBTdHJpbmdcbn1cblxudHlwZSBDcmVkaXRNYXJrZXRpbmdPZmZlckVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBDcmVkaXRNYXJrZXRpbmdPZmZlclxufVxuXG5pbnB1dCBDcmVhdGVQZXJpb2RpY1Jldmlld0FwcGxpY2F0aW9uSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIFwiXCJcIlRoZSBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmx1ZXByaW50IHR5cGUuIERlZmF1bHRzIHRvIGBwZXJpb2RpY19yZXZpZXdfdjFgXCJcIlwiXG4gIG5hbWU6IFN0cmluZ1xufVxuXG5pbnB1dCBDcmVhdGVBcHByb3ZhbHNQb2xpY3lJbnB1dCB7XG4gIGFwcHJvdmFsc1BvbGljeURldGFpbHM6IEFwcHJvdmFsc1BvbGljeURldGFpbHNJbnB1dFxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHByb2R1Y3RUeXBlOiBQcm9kdWN0VHlwZVxufVxuXG51bmlvbiBDaGFubmVsT3B0aW9ucyA9IENoYW5uZWxFbWFpbE9wdGlvbnMgfCBDaGFubmVsUHVzaE9wdGlvbnMgfCBDaGFubmVsU21zT3B0aW9uc1xuXG50eXBlIFZlcmlmeUFkZHJlc3NSZXNwb25zZSBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiVHJ1ZSBpZiB0aGlzIGFkZHJlc3MgaXMgZGVsaXZlcmFibGVcIlwiXCJcbiAgaXNEZWxpdmVyYWJsZTogQm9vbGVhbiFcbiAgXCJcIlwiVHJ1ZSBpZiB0aGlzIGFkZHJlc3MgaXMgZGVsaXZlcmFibGUgYmFzZWQgb24gTG9iIHJlc3VsdHNcIlwiXCJcbiAgaXNEZWxpdmVyYWJsZVYyOiBCb29sZWFuIVxuICBcIlwiXCJUcnVlIGlmIHRoaXMgYWRkcmVzcyBpcyBhIFBPIGJveCBvciBhIEdlbmVyYWwgRGVsaXZlcnkgYWRkcmVzc1wiXCJcIlxuICBpc1BvQm94OiBCb29sZWFuIVxuICBcIlwiXCJUaGUgc3RhbmRhcmRpemVkIGFkZHJlc3NcIlwiXCJcbiAgc3VnZ2VzdGlvbjogQWRkcmVzcyFcbn1cblxudHlwZSBSZWNlaXZhYmxlc09mZmVyc1BheW91dEVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBSZWNlaXZhYmxlc09mZmVyc1BheW91dFxufVxuXG50eXBlIEZpbmFuY2lhbFN0YXRlbWVudFJlcXVlc3RlZEFjY291bnRDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtGaW5hbmNpYWxTdGF0ZW1lbnRSZXF1ZXN0ZWRBY2NvdW50RWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG50eXBlIFJlZmVycmFsRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IFJlZmVycmFsXG59XG5cbnR5cGUgQmlsbEVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBCaWxsXG59XG5cbnR5cGUgRmluZE9yQ3JlYXRlRXJwRmVlZFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGVycEZlZWQ6IEVycEZlZWRcbiAgZXJyb3JNZXNzYWdlOiBTdHJpbmdcbn1cblxuXCJcIlwiXG5BIHBvbGljeSBmb3IgaXNzdWluZyBjYXJkIHN0YXRlbWVudHMuIENhcmQgc3RhdGVtZW50IHBvbGljaWVzIGFyZSBpbW11dGFibGVcbmFuZCB0aGUgbGF0ZXN0IHBvbGljeSBpcyBhbHdheXMgdGhlIG9uZSBpbiBlZmZlY3QgZm9yIGEgZ2l2ZW4gY3VzdG9tZXIuXG5cIlwiXCJcbnR5cGUgQ2FyZFN0YXRlbWVudFBvbGljeSBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJBIGN5Y2xlIGZvciBpc3N1aW5nIGNhcmQgc3RhdGVtZW50IHBvbGljaWVzLlwiXCJcIlxuICBjeWNsZTogQ2FyZFN0YXRlbWVudFBvbGljeUN5Y2xlXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxufVxuXG50eXBlIFNldFJlY2VpdmFibGVzT2ZmZXJzU2VsZWN0ZWRUcmlhbE9uYm9hcmRpbmdQYXlsb2FkIHtcbiAgYWNjb3VudDogUmVjZWl2YWJsZXNPZmZlcnNBY2NvdW50XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuZW51bSBSZWNpcGllbnRUeXBlIHtcbiAgQlVTSU5FU1NcbiAgSU5ESVZJRFVBTFxufVxuXG50eXBlIFZhbGlkYXRlZFZlbmRvckNvbnRhY3RJbnB1dEVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBWYWxpZGF0ZWRWZW5kb3JDb250YWN0SW5wdXRcbn1cblxuaW5wdXQgQWNoUGF5bWVudEluc3RydW1lbnRJbnB1dCB7XG4gIGFjY291bnRDbGFzczogQmFua0FjY291bnRDbGFzc1xuICBhY2NvdW50TnVtYmVyOiBTdHJpbmchXG4gIGFjY291bnRUeXBlOiBCYW5rQWNjb3VudFR5cGVcbiAgcm91dGluZ051bWJlcjogU3RyaW5nIVxufVxuXG50eXBlIEV4cGVuc2VzSXRlbUV2ZW50Q29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbRXhwZW5zZXNJdGVtRXZlbnRFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbnR5cGUgQml3ZWVrbHlDbG9zaW5nU3RyYXRlZ3kge1xuICBkYXlPZldlZWs6IEludFxufVxuXG50eXBlIFN1Ym1pdE9uYm9hcmRpbmdBcHBsaWNhdGlvblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIG9uYm9hcmRpbmdBcHBsaWNhdGlvbjogT25ib2FyZGluZ0FwcGxpY2F0aW9uIVxufVxuXG50eXBlIFVzZXJDYXRlZ29yeSBpbXBsZW1lbnRzIE5vZGUge1xuICBjYXRlZ29yeTogU3RyaW5nXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIGludGVncmF0aW9uOiBJbnRlZ3JhdGlvblxuICBpc0RlbGV0ZWQ6IEJvb2xlYW5cbiAgaXNEaXNhYmxlZDogQm9vbGVhblxuICBpc0luYWN0aXZlOiBCb29sZWFuXG4gIG1lcmNoYW50Q2F0ZWdvcmllcyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogTWVyY2hhbnRDYXRlZ29yeUNvbm5lY3Rpb25cbiAgbmFtZTogU3RyaW5nXG4gIHBhcmVudFVzZXJDYXRlZ29yeTogVXNlckNhdGVnb3J5XG4gIFwiXCJcIklEIHJlZmVyZW5jZSB0byBwYXJlbnQgVXNlckNhdGVnb3J5XCJcIlwiXG4gIHBhcmVudFVzZXJDYXRlZ29yeUlkOiBJRFxuICB2ZW5kb3JJbnRlcm5hbElkOiBTdHJpbmdcbn1cblxudHlwZSBBcHByb3ZhbHNQb2xpY3lEZXRhaWxzIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBydWxlR3JvdXBzOiBbQXBwcm92YWxzUnVsZUdyb3VwIV0hXG4gIHZlcnNpb246IEludCFcbn1cblxuaW5wdXQgTGVhZEF0dHJpYnV0aW9uTWV0YWRhdGEge1xuICBmYmM6IFN0cmluZ1xuICBmYnA6IFN0cmluZ1xuICBmdWxsVXJsOiBTdHJpbmdcbiAgZ2NsaWQ6IFN0cmluZ1xuICByZWZlcnJhbENvZGU6IFN0cmluZ1xuICBzZWdtZW50QW5vbnltb3VzSWQ6IFN0cmluZ1xufVxuXG5pbnB1dCBVcGRhdGVUcmFuc2FjdGlvbkRlcGFydG1lbnRJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGVwYXJ0bWVudElkOiBTdHJpbmchXG4gIHRyYW5zYWN0aW9uSWQ6IElEIVxufVxuXG50eXBlIFByb3Zpc2lvbkFwcGxlUGF5UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZW5jcnlwdGVkUGFzc0RhdGE6IFN0cmluZyFcbiAgZXBoZW1lcmFsUHVibGljS2V5OiBTdHJpbmchXG4gIG90cDogU3RyaW5nIVxufVxuXG50eXBlIEVycEZlZWQgaW1wbGVtZW50cyBOb2RlIHtcbiAgY3VzdG9tZXJBY2NvdW50SWQ6IFN0cmluZ1xuICBleHBvcnRQaXBlSWQ6IFN0cmluZ1xuICBmaW5hbmNpYWxBY2NvdW50SWQ6IFN0cmluZ1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgbGFzdEV4cG9ydGVkQXQ6IFRpbWVcbiAgc3RhdHVzOiBTdHJpbmdcbiAgc3luY0Zyb206IFRpbWVcbiAgdHlwZTogRXJwVmVuZG9yVHlwZVxufVxuXG5cIlwiXCJUaGUgcmVjZWl2YWJsZXMgb2ZmZXJzIHZlbmRvciAoc2FsZXMgcGxhdGZvcm0sIGkuZS4sIEFtYXpvbiwgU2hvcGlmeSwgZXRjLilcIlwiXCJcbnR5cGUgUmVjZWl2YWJsZXNPZmZlcnNWZW5kb3Ige1xuICBcIlwiXCJFbnVtIG9mIHZlbmRvciB0eXBlIChpLmUuLCBBTUFaT05fTVdTLCBTSE9QSUZZLCBldGMuKVwiXCJcIlxuICB0eXBlOiBSZWNlaXZhYmxlc09mZmVyc1ZlbmRvclR5cGUhXG59XG5cbmVudW0gT25ib2FyZGluZ0FwcGxpY2F0aW9uU3RhdGVQcm9kdWN0VjFWYWx1ZSB7XG4gIFwiXCJcIlRoZSBhcHBsaWNhdGlvbiB3YXMgYXBwcm92ZWQgZm9yIHRoaXMgcHJvZHVjdFwiXCJcIlxuICBBUFBST1ZFRFxuICBcIlwiXCJUaGUgdXNlciBkaWQgbm90IGFwcGx5IGZvciB0aGlzIHByb2R1Y3QgYXMgcGFydCBvZiB0aGVpciBhcHBsaWNhdGlvblwiXCJcIlxuICBOT1RfUkVRVUVTVEVEXG4gIFwiXCJcIkVpdGhlciB0aGUgYXBwbGljYXRpb24gaXMgaW5jb21wbGV0ZSBvciBpdCdzIGJlaW5nIHJldmlld2VkXCJcIlwiXG4gIFBST0NFU1NJTkdcbn1cblxudHlwZSBCaWxsU3luY0Vycm9yQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbQmlsbFN5bmNFcnJvckVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBSdWxlRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IFJ1bGVcbn1cblxudHlwZSBGaW5hbmNpYWxBY2NvdW50Q29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbRmluYW5jaWFsQWNjb3VudEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBVcGRhdGVBcHByb3ZhbHNSZXZpZXdzUGF5bG9hZCB7XG4gIGFwcHJvdmFsc1Jldmlld3M6IFtBcHByb3ZhbHNSZXZpZXchXVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgUHJvZ3JhbU1lbWJlcnNoaXBFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogUHJvZ3JhbU1lbWJlcnNoaXBcbn1cblxudHlwZSBPbmJvYXJkaW5nQXBwbGljYXRpb25TdGF0ZVJpc2tFdmFsdWF0aW9uIHtcbiAgXCJcIlwiVGhlIHN0YXRlIG9mIHRoZSBjb21wbGlhbmNlIHBvcnRpb24gb2YgdGhlIHJpc2sgZXZhbHVhdGlvbiBhcHBsaWNhdGlvblwiXCJcIlxuICBjb21wbGlhbmNlOiBPbmJvYXJkaW5nQXBwbGljYXRpb25TdGF0ZVJpc2tFdmFsdWF0aW9uVmFsdWVcbiAgXCJcIlwiVGhlIHN0YXRlIG9mIHRoZSBmcmF1ZCBwb3J0aW9uIG9mIHRoZSByaXNrIGV2YWx1YXRpb24gYXBwbGljYXRpb25cIlwiXCJcbiAgZnJhdWQ6IE9uYm9hcmRpbmdBcHBsaWNhdGlvblN0YXRlUmlza0V2YWx1YXRpb25WYWx1ZVxuICBcIlwiXCJEYXRlIGJ5IHdoaWNoIGFsbCByZXF1ZXN0cyBtdXN0IGJlIGNvbXBsZXRlZCwgZWxzZSB0aGUgYWNjb3VudCBpcyBvZmZib2FyZGVkXCJcIlwiXG4gIG9mZmJvYXJkRHVlRGF0ZTogVGltZVxuICBcIlwiXCJEYXRlIGJ5IHdoaWNoIGFsbCByZXF1ZXN0cyBtdXN0IGJlIGNvbXBsZXRlZCwgZWxzZSB0aGUgYWNjb3VudCBpcyBzdXNwZW5kZWRcIlwiXCJcbiAgc3VzcGVuZER1ZURhdGU6IFRpbWVcbn1cblxuaW5wdXQgRGlzYWJsZUJpbGxzSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbn1cblxudHlwZSBEZWxldGVDYXJkVHJhbnNhY3Rpb25JbnNpZ2h0TXV0aW5nUG9saWN5UGF5bG9hZCB7XG4gIGNhcmRUcmFuc2FjdGlvbkluc2lnaHRNdXRpbmdQb2xpY3k6IENhcmRUcmFuc2FjdGlvbkluc2lnaHRNdXRpbmdQb2xpY3lcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5lbnVtIENhcmRQYXltZW50RmFpbHVyZVR5cGUge1xuICBBQ0NPVU5UX0NMT1NFRFxuICBBQ0NPVU5UX05PVF9GT1VORFxuICBHRU5FUklDX0ZBSUxVUkVcbiAgSU5TVUZGSUNJRU5UX0ZVTkRTXG4gIE5PVF9BVVRIT1JJWkVEXG4gIE5PVF9TRU5UXG59XG5cbmlucHV0IENyZWF0ZUZpbmFuY2lhbEJhbmtTdGF0ZW1lbnRGb3JOZXdBY2NvdW50SW5wdXQge1xuICBhc3NldElkOiBJRCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5lbnVtIEV4cGVuc2VzSXRlbVN0YXR1cyB7XG4gIERJU01JU1NcbiAgRkxBR0dFRFxuICBSRVNPTFZFRFxufVxuXG5lbnVtIFBsYWlkUHJvZHVjdCB7XG4gIEFVVEhcbiAgQkFMQU5DRVxuICBJTkNPTUVcbiAgSU5WRVNUTUVOVFNcbiAgVFJBTlNBQ1RJT05TXG59XG5cbnR5cGUgQ3JlYXRlRmlsZVVwbG9hZFVybFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHVwbG9hZFJlcXVlc3RJZDogU3RyaW5nXG4gIHVwbG9hZFVybDogU3RyaW5nXG59XG5cbmlucHV0IENvbmZpcm1QYXltZW50RHJhZnRJbnB1dCB7XG4gIHBheW1lbnRJZDogSURcbn1cblxuXCJcIlwiVmlldyBkYXRhIGZvciBjYXNoIGFkZCBmdW5kcyBmbG93IGJhbm5lclwiXCJcIlxudHlwZSBJbmNlbnRpdmVQbGFjZW1lbnRWaWV3RGF0YUNhc2hBZGRGdW5kc0Zsb3dCYW5uZXIge1xuICBcIlwiXCJDVEEgdGV4dCBcIlwiXCJcbiAgY3RhOiBTdHJpbmchXG4gIFwiXCJcIkljb24gdHlwZSBvcHRpb25hbCAtIHBvdGVudGlhbGx5IHVzZWZ1bCBpbiB0aGUgZnV0dXJlXCJcIlwiXG4gIGljb25UeXBlOiBTdHJpbmdcbiAgXCJcIlwiUGxhY2VtZW50XCJcIlwiXG4gIHBsYWNlbWVudDogSW5jZW50aXZlUGxhY2VtZW50IVxuICBcIlwiXCJUaXRsZSBvZiBiYW5uZXJcIlwiXCJcbiAgdGl0bGU6IFN0cmluZyFcbn1cblxudHlwZSBGdW5kaW5nU291cmNlRGF0YSB7XG4gIGFjY291bnROYW1lOiBTdHJpbmdcbiAgYWNjb3VudE51bWJlckxhc3RGb3VyOiBTdHJpbmdcbiAgYWNjb3VudFR5cGU6IFN0cmluZ1xuICByb3V0aW5nTnVtYmVyOiBTdHJpbmdcbn1cblxudHlwZSBVcGRhdGVVc2VyUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdXNlcjogVXNlclxufVxuXG50eXBlIENhc2hUcmFuc2FjdGlvbkRvbWVzdGljV2lyZURldGFpbHMge1xuICBcIlwiXCJDb3VudGVycGFydHkncyBhY2NvdW50IG51bWJlclwiXCJcIlxuICBhY2NvdW50TnVtYmVyOiBTdHJpbmdcbiAgXCJcIlwiVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudFwiXCJcIlxuICBhZGRyZXNzOiBBZGRyZXNzXG4gIFwiXCJcIlRoZSBjb3VudGVycGFydHkncyBiZW5lZmljaWFyeSBiYW5rIGluZm9ybWF0aW9uXCJcIlwiXG4gIGJlbmVmaWNpYXJ5QmFuazogQ2FzaFRyYW5zYWN0aW9uQmVuZWZpY2lhcnlCYW5rXG4gIFwiXCJcIlRoZSBpbnN0aXR1dGlvbidzIGxvZ28gYXMgYSBiYXNlNjQgUE5HLCBpZiBhdmFpbGFibGVcIlwiXCJcbiAgYmVuZWZpY2lhcnlCYW5rTG9nb0Jhc2U2NDogU3RyaW5nXG4gIFwiXCJcIlRoZSBlbWFpbCBvZiB0aGUgcmVjaXBpZW50XCJcIlwiXG4gIGVtYWlsOiBTdHJpbmdcbiAgXCJcIlwiVGhlIGZlZCByZWZlcmVuY2UgbnVtYmVyIHRoYXQgd2UgZ2V0IG9uIEJBSTIgaW5jb21pbmcgd2lyZSBlbnRyaWVzXCJcIlwiXG4gIGZlZFJlZmVyZW5jZU51bWJlcjogU3RyaW5nXG4gIFwiXCJcIlRoZSBJTUFEIGluZGljYXRlcyBhIHVuaXF1ZSBudW1iZXIgdGhhdCBpcyBhc3NpZ25lZCB0byBhIHRyYW5zZmVyIHVwb24gcmVjZWl2aW5nIGF0IHRoZSBzZW5kaW5nIGZpbmFuY2lhbCBpbnN0aXR1dGlvblwiXCJcIlxuICBpbWFkOiBTdHJpbmdcbiAgXCJcIlwiVGhlIE9NQUQgaW5kaWNhdGVzIGEgdW5pcXVlIG51bWJlciBhc3NpZ25lZCB0byBlYWNoIHRyYW5zZmVyIHByb3ZpZGluZyBkZWxpdmVyeS1yZWxhdGVkIGluZm9ybWF0aW9uXCJcIlwiXG4gIG9tYWQ6IFN0cmluZ1xuICBcIlwiXCJXaGV0aGVyIHRoZSB0cmFuc2FjdGlvbiB3YXMgYSBkZWJpdCBvciBjcmVkaXRcIlwiXCJcbiAgcGF5bWVudE1ldGhvZDogQ2FzaFRyYW5zYWN0aW9uUGF5bWVudE1ldGhvZCFcbiAgXCJcIlwiQ291bnRlcnBhcnR5J3Mgcm91dGluZyBudW1iZXJcIlwiXCJcbiAgcm91dGluZ051bWJlcjogU3RyaW5nXG4gIFwiXCJcIlBheW1lbnQgaW5zdHJ1Y3Rpb25zXCJcIlwiXG4gIHRyYW5zZmVyRGVzY3JpcHRpb246IFN0cmluZ1xufVxuXG5pbnB1dCBBY3RpdmF0ZUNhcmRJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgbGFzdDQ6IFN0cmluZyFcbiAgcGluOiBTdHJpbmdcbn1cblxudHlwZSBFbWFpbE1ldGFkYXRhIHtcbiAgZnJvbUVtYWlsQWRkcmVzczogU3RyaW5nIVxufVxuXG5lbnVtIEVhcmx5QWNjZXNzRmVhdHVyZUF2YWlsYWJsZVBsYXRmb3JtIHtcbiAgQU5EUk9JRFxuICBJT1NcbiAgV0VCXG59XG5cbmlucHV0IENvbm5lY3RJbnN0aXR1dGlvbklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpbnN0aXR1dGlvbklkOiBJRCFcbiAgcmVxdWVzdFR5cGU6IEZpbmFuY2lhbHNDb25uZWN0UmVxdWVzdFR5cGVcbn1cblxudW5pb24gU3VnZ2VzdGlvblR5cGUgPSBDYXJkIHwgRGVwYXJ0bWVudCB8IExvY2F0aW9uIHwgTWVyY2hhbnQgfCBNZXJjaGFudENhdGVnb3J5IHwgVXNlciB8IFVzZXJDYXRlZ29yeVxuXG50eXBlIERvY3VtZW50T2NyUGFyc2VkRGV0YWlsc0RldGFpbCBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiVGhlIHZhbHVlIHBhc3NlZCBpbnRvIHRoZSAndmVyaWZ5X2VudGl0aWVzJyBwYXlsb2FkIGF0IHRoZSB0aW1lIG9mIGNyZWF0aW9uIChpZiBhbnkpLlwiXCJcIlxuICBpbnB1dDogU3RyaW5nXG4gIFwiXCJcIlRoZSBleHRyYWN0ZWQgdmFsdWUgZnJvbSB0aGUgZG9jdW1lbnQgKGlmIGFueSkuXCJcIlwiXG4gIHZhbHVlOiBTdHJpbmdcbiAgXCJcIlwiSW5kaWNhdGVzIGlmIHRoZSBpbnB1dCBhbmQgZXh0cmFjdGVkIHZhbHVlIChpZiBvbmUgd2FzIHByb3ZpZGVkKSBtYXRjaC5cIlwiXCJcbiAgdmVyaWZpZWQ6IEJvb2xlYW5cbn1cblxuXCJcIlwiRGVzY3JpYmVzIGFuIEhSSVMgY29ubmVjdGlvbiB3aXRoIHRoZSBocmlzIHZlbmRvclwiXCJcIlxudHlwZSBIcmlzQ29ubmVjdGlvbiBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaGUgSFJJUyB2ZW5kb3IgdGhpcyBjb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkIHcvXCJcIlwiXG4gIGhyaXNBZ2dyZWdhdG9yVmVuZG9yOiBIcmlzQWdncmVnYXRvclZlbmRvclxuICBcIlwiXCJUaGUgc3RhdHVzIG9mIHRoZSB1c2VyJ3MgY29ubmVjdGlvbiB3aXRoIHRoZSBocmlzIHZlbmRvclwiXCJcIlxuICBocmlzU3RhdHVzOiBIcmlzU3RhdHVzXG4gIFwiXCJcIlRoZSBIUklTIHN5c3RlbSB0aGUgdXNlciBpcyBjb25uZWN0aW5nIHRvIHZpYSB0aGlzIGNvbm5lY3Rpb25cIlwiXCJcbiAgaHJpc1N5c3RlbTogSHJpc1N5c3RlbVxuICBcIlwiXCJUaGUgZGlzcGxheSBuYW1lIG9mIHRoZSBIUklTIHN5c3RlbSB0aGUgdXNlciBpcyBjb25uZWN0aW5nIHRvXCJcIlwiXG4gIGhyaXNTeXN0ZW1OYW1lOiBTdHJpbmdcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlRoZSBsYXN0IHRpbWUgdGhhdCB0aGUgaHJpcyBzeW5jIHdpdGggdGhlIHZlbmRvciBhbmQgaW50byBCcmV4IGNvbXBsZXRlZC9mYWlsZWRcIlwiXCJcbiAgbGFzdFN5bmNBdDogVGltZVxuICBcIlwiXCJUaGUgKG1vc3QgcmVjZW50KSBzeW5jaW5nIHN0YXR1cyBvZiB0aGUgY29ubmVjdGlvbiB3aXRoIHRoZSBocmlzIHZlbmRvclwiXCJcIlxuICBzeW5jU3RhdHVzOiBIcmlzU3luY1N0YXR1c1xufVxuXG50eXBlIFBlcmlvZGljUmV2aWV3IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIkR1ZSBkYXRlIGJ5IHdoaWNoIHJldmlldyBzaG91bGQgYmUgY29tcGxldGVkLCBlbHNlIGRhc2hib2FyZCBmb3JjZXMgYSBibG9ja2luZyBleHBlcmllbmNlXCJcIlwiXG4gIGR1ZUF0OiBUaW1lXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJTdGF0ZSBvZiB0aGUgcGVyaW9kaWMgcmV2aWV3IGllLiBhY3RpdmUvc3VjY2VlZGVkIGV0Yy5cIlwiXCJcbiAgc3RhdGU6IFBlcmlvZGljUmV2aWV3U3RhdGVcbn1cblxuXCJcIlwiVmFsaWRhdGlvbiByZXN1bHQgZm9yIGEgY29udGFjdCBpbnB1dFwiXCJcIlxudHlwZSBWZW5kb3JDb250YWN0SW5wdXRWYWxpZGF0aW9uIHtcbiAgXCJcIlwiRmllbGRzIHRoYXQgYXJlIHZhbGlkIG9yIG5vdCAoc3RyaW5nIC0+IGJvb2xlYW4pXCJcIlwiXG4gIGZpZWxkczogSnNvbiFcbiAgXCJcIlwiQm9vbGVhbiB3aGV0aGVyIHRoZSBjb250YWN0IGlucHV0IGlzIGEgZHVwbGljYXRlXCJcIlwiXG4gIGlzRHVwbGljYXRlOiBCb29sZWFuIVxuICBcIlwiXCJCb29sZWFuIHdoZXRoZXIgdGhlIGNvbnRhY3QgaW5wdXQgaXMgdmFsaWRcIlwiXCJcbiAgaXNWYWxpZDogQm9vbGVhbiFcbiAgXCJcIlwiVmFsaWRhdGVkIEFDSCBQYXltZW50IEluc3RydW1lbnRcIlwiXCJcbiAgdmFsaWRhdGVkQWNoUGF5bWVudEluc3RydW1lbnQ6IFZhbGlkYXRlZFBheW1lbnRJbnN0cnVtZW50XG4gIFwiXCJcIlZhbGlkYXRlZCBDaGVxdWUgUGF5bWVudCBJbnN0cnVtZW50XCJcIlwiXG4gIHZhbGlkYXRlZENoZXF1ZVBheW1lbnRJbnN0cnVtZW50OiBWYWxpZGF0ZWRQYXltZW50SW5zdHJ1bWVudFxuICBcIlwiXCJWYWxpZGF0ZWQgRG9tZXN0aWMgV2lyZSBQYXltZW50IEluc3RydW1lbnRcIlwiXCJcbiAgdmFsaWRhdGVkRG9tZXN0aWNXaXJlUGF5bWVudEluc3RydW1lbnQ6IFZhbGlkYXRlZFBheW1lbnRJbnN0cnVtZW50XG4gIFwiXCJcIlZhbGlkYXRlZCBJbnRlcm5hdGlvbmFsIFdpcmUgUGF5bWVudCBJbnN0cnVtZW50XCJcIlwiXG4gIHZhbGlkYXRlZEludGVybmF0aW9uYWxXaXJlUGF5bWVudEluc3RydW1lbnQ6IFZhbGlkYXRlZFBheW1lbnRJbnN0cnVtZW50XG59XG5cblwiXCJcIlRoZSBzcGVuZCBhbGVydFwiXCJcIlxudHlwZSBDYXJkVHJhbnNhY3Rpb25JbnNpZ2h0IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBzcGVuZCBhbGVydCB0eXBlXCJcIlwiXG4gIGFsZXJ0VHlwZTogU3BlbmRBbGVydFR5cGUhXG4gIFwiXCJcIlRoZSBhbW91bnQgb2YgdGhlIHRyYW5zYWN0aW9uXCJcIlwiXG4gIGFtb3VudDogSW50IVxuICBcIlwiXCJUaGUgY2FyZCBpcyB1c2VkIGZvciB0aGlzIHRyYW5zYWN0aW9uL2FsZXJ0XCJcIlwiXG4gIGNhcmQ6IENhcmRcbiAgXCJcIlwiVGhlIGN1c3RvbWVyIGFjY291bnQgZm9yIHRoaXMgYWxlcnRcIlwiXCJcbiAgY3VzdG9tZXJBY2NvdW50OiBBY2NvdW50XG4gIFwiXCJcIlRoZSBjdXN0b21lciB1c2VyIGZvciB0aGlzIGFsZXJ0XCJcIlwiXG4gIGN1c3RvbWVyVXNlcjogVXNlclxuICBcIlwiXCJUaGUgZGVwYXJ0bWVudFwiXCJcIlxuICBkZXBhcnRtZW50OiBEZXBhcnRtZW50XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJBIGxpc3Qgb2YgZXZlbnQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgYWxlcnQuXCJcIlwiXG4gIGluc2lnaHRFdmVudHM6IFtDYXJkVHJhbnNhY3Rpb25JbnNpZ2h0RXZlbnRdXG4gIFwiXCJcIlRoZSBzcGVuZCBhbGVydCBtZXRhZGF0YVwiXCJcIlxuICBpbnNpZ2h0TWV0YWRhdGE6IEluc2lnaHRNZXRhZGF0YVxuICBcIlwiXCJUaGUgc3BlbmQgYWxlcnQgdHlwZSAtIFRoaXMgZmllbGQgd2lsbCBiZSBkZXByZWNhdGVkIGFuZCByZXBsYWNlZCBieSBhbGVydF90eXBlLlwiXCJcIlxuICBpbnNpZ2h0VHlwZTogQ2FyZFRyYW5zYWN0aW9uc0luc2lnaHRUeXBlIVxuICBcIlwiXCJUaGUgbWVyY2hhbnRcIlwiXCJcbiAgbWVyY2hhbnQ6IE1lcmNoYW50XG4gIFwiXCJcIlRoZSBtZXJjaGFudCBjYXRlZ29yeVwiXCJcIlxuICBtZXJjaGFudENhdGVnb3J5OiBTdHJpbmdcbiAgXCJcIlwiVGhlIG1lcmNoYW50IG5hbWVcIlwiXCJcbiAgbWVyY2hhbnROYW1lOiBTdHJpbmchXG4gIFwiXCJcIlRoZSBvcmlnaW5hdG9yIHR5cGVcIlwiXCJcbiAgb3JpZ2luYXRvclR5cGU6IFN0cmluZ1xuICBcIlwiXCJUaGUgdGltZSB3aGVuIHRoaXMgdHJhbnNhY3Rpb24gaXMgcG9zdGVkIGF0XCJcIlwiXG4gIHBvc3RlZEF0OiBUaW1lIVxuICBcIlwiXCJUaGUgc3RhdGVtZW50IGVudHJ5IGJlbG9uZ3MgdG8gdGhpcyBhbGVydFwiXCJcIlxuICBzdGF0ZW1lbnRFbnRyeTogU3RhdGVtZW50RW50cnlcbiAgXCJcIlwiVGhlIHVzZXIgbmFtZVwiXCJcIlxuICB1c2VyTmFtZTogU3RyaW5nIVxufVxuXG5pbnB1dCBGaW5pY2l0eUNvbm5lY3RHZW5lcmF0ZUZpeFVybElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBmaW5hbmNpYWxTb3VyY2VJZDogSUQhXG59XG5cbnR5cGUgTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uIGltcGxlbWVudHMgTm9kZSB7XG4gIGNoYW5uZWw6IENoYW5uZWxcbiAgZmlsdGVyczogW05vdGlmaWNhdGlvbkZpbHRlcl1cbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIG5vdGlmaWNhdGlvblR5cGU6IE5vdGlmaWNhdGlvblR5cGVcbn1cblxudHlwZSBSZWNlaXZhYmxlc09mZmVyc0FjY291bnQgaW1wbGVtZW50cyBOb2RlIHtcbiAgYWNjZXB0ZWRPZmZlcnNHcm91cHMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGlnbm9yZUNhcmRPZmZlcnNHcm91cDogQm9vbGVhbiA9IGZhbHNlLCBsYXN0OiBJbnQpOiBSZWNlaXZhYmxlc09mZmVyc09mZmVyc0dyb3VwQ29ubmVjdGlvblxuICBcIlwiXCJIYXMgdGhlIGN1c3RvbWVyIGZpbmlzaGVkIHRoZWlyIGluc3RhbnQgcGF5b3V0cyBvbmJvYXJkaW5nIGZsb3dcIlwiXCJcbiAgYXBwbGllZEZvckluc3RhbnRQYXlvdXRzOiBCb29sZWFuXG4gIFwiXCJcIlRoZSBzdW1tYXRpb24gb2YgYWxsIGFjdGl2ZSBvZmZlcnMgdGhhdCB0aGUgY3VzdG9tZXIgaGFzIGF2YWlsYWJsZSBhcyBvZiBub3dcIlwiXCJcbiAgY3VtdWxhdGl2ZU9mZmVyOiBSZWNlaXZhYmxlc09mZmVyc0N1bXVsYXRpdmVPZmZlclxuICBcIlwiXCJUaGUgY3VzdG9tZXJfYWNjb3VudF9pZCBmb3IgdGhlIHJlY2VpdmFibGVzIG9mZmVycyBhY2NvdW50XCJcIlwiXG4gIGN1c3RvbWVyQWNjb3VudElkOiBTdHJpbmchXG4gIFwiXCJcIlRoZSB0aW1lc3RhbXAgb2YgdGhlIGVhcmxpZXN0IGZ1dHVyZSBwYXlvdXQgdGhhdCB0aGUgY3VzdG9tZXIgaXMgZXhwZWN0ZWQgdG8gcmVjZWl2ZVwiXCJcIlxuICBlc3RpbWF0ZWROZXh0UGF5b3V0QXQ6IFRpbWVcbiAgXCJcIlwiTGlzdCBvZiBmYWlsaW5nIGNoZWNrcyBmb3IgdHJpYWwvZnVsbCBhY2Nlc3MsIGFzIHdlbGwgYXMgZmFpbGluZyBvbmdvaW5nIG1vbml0b3JpbmcgY2hlY2tzXCJcIlwiXG4gIGZhaWxpbmdDaGVja3M6IFJlY2VpdmFibGVzT2ZmZXJzQWNjb3VudEZhaWxpbmdDaGVja3NcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlRoZSB0aW1lc3RhbXAgd2hlbiB0aGUgY3VzdG9tZXIgZmlyc3QgYWNjZXB0ZWQgdGhlIGluc3RhbnQgcGF5b3V0cyBsZWdhbCBhZ3JlZW1lbnQgKHRlcm1zIGFuZCBjb25kaXRpb25zKVwiXCJcIlxuICBsZWdhbEFncmVlbWVudEFjY2VwdGVkQXQ6IFRpbWVcbiAgXCJcIlwiVGhlIG1ldGFkYXRhIGZvciB0aGUgcmVjZWl2YWJsZXMgb2ZmZXJzIGFjY291bnQgKG5vdCB1c2VyLW1vZGlmaWFibGUpXCJcIlwiXG4gIG1ldGFkYXRhOiBSZWNlaXZhYmxlc09mZmVyc0FjY291bnRNZXRhZGF0YSFcbiAgXCJcIlwiXG4gIFRoZSBsaXN0IG9mIHBheW1lbnQgaW50ZW50cyB0aGF0IHRhcmdldCBSZWNlaXZhYmxlIE9mZmVycyByZWxhdGVkIEpvdXJuYWwgQWNjb3VudHMsIGluY2x1ZGluZyBib3RoIENhcmQgYW5kIENhc2guXG4gIFxuICBOb3RlIHRoYXQgZXZlbiB0aG91Z2ggdGhpcyBpcyBhIGNvbm5lY3Rpb24gZmllbGQsIGl0IERPRVMgTk9UIFNVUFBPUlQgUEFHSU5BVElPTiBZRVQsIG1lYW5pbmcgaXQgY2FuIGJlIHJlYWxseSBzbG93IGFuZCBjYW4gbG9hZCBhIGxvdCBvZiBkYXRhLiBEb1xuICBub3QgdXNlIHBhZ2VJbmZvIHlldC5cbiAgXCJcIlwiXG4gIHBheW1lbnRJbnRlbnRzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBSZWNlaXZhYmxlc09mZmVyc1BheW1lbnRJbnRlbnRDb25uZWN0aW9uXG4gIFwiXCJcIlRoZSB0b3RhbCBwZW5kaW5nIGFtb3VudCBmcm9tIGNhcmQgdHJhbnNhY3Rpb25zIGZ1bmRhYmxlIGJ5IFJlY2VpdmFibGVzIE9mZmVyc1wiXCJcIlxuICBwZW5kaW5nQ2FyZFRyYW5zYWN0aW9uc0Ftb3VudDogRmluYW5jaWFsQXNzZXRcbiAgXCJcIlwiTGlzdCBvZiBzZWxsZXIgYWNjb3VudHMgYXNzb2NpYXRlZCB3aXRoIHRoZSByZWNlaXZhYmxlcyBvZmZlcnMgYWNjb3VudFwiXCJcIlxuICBzZWxsZXJBY2NvdW50czogW1JlY2VpdmFibGVzT2ZmZXJzU2VsbGVyQWNjb3VudCFdIVxuICBcIlwiXCJUaGUgc2V0dGluZ3MgZm9yIHRoZSByZWNlaXZhYmxlcyBvZmZlcnMgYWNjb3VudCAodXNlci1tb2RpZmlhYmxlKVwiXCJcIlxuICBzZXR0aW5nczogUmVjZWl2YWJsZXNPZmZlcnNBY2NvdW50U2V0dGluZ3MhXG4gIFwiXCJcIlRoZSBzdGF0dXMgb2YgdGhlIHJlY2VpdmFibGVzIG9mZmVycyBhY2NvdW50IChlLmcuLCBgQUNUSVZFYCwgYEFDVElWRV9UUklBTGAsIGV0Yy4pXCJcIlwiXG4gIHN0YXR1czogUmVjZWl2YWJsZXNPZmZlcnNBY2NvdW50U3RhdHVzIVxuICBcIlwiXCJUaGUgdGltZXN0YW1wIG9mIHdoZW4gdGhlIGN1c3RvbWVyJ3MgYGFjdGl2ZV90cmlhbGAgYWNjZXNzIGVuZGVkXCJcIlwiXG4gIHRyaWFsRW5kZWRBdDogVGltZVxuICBcIlwiXCJUaGUgdGltZXN0YW1wIG9mIHdoZW4gdGhlIGN1c3RvbWVyJ3MgYGFjdGl2ZV90cmlhbGAgYWNjZXNzIHN0YXJ0ZWRcIlwiXCJcbiAgdHJpYWxTdGFydGVkQXQ6IFRpbWVcbiAgdXBjb21pbmdQYXlvdXRzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBSZWNlaXZhYmxlc09mZmVyc1BheW91dENvbm5lY3Rpb25cbn1cblxudHlwZSBBcHByb3ZhbFBheW1lbnRDb250ZXh0IHtcbiAgYW1vdW50OiBJbnRcbiAgY291bnRlcnBhcnR5TG9jYXRpb246IEFjY291bnRMb2NhdGlvblxuICBjb3VudGVycGFydHlOYW1lOiBTdHJpbmdcbiAgbG9naWNhbElkOiBJRCFcbiAgcGF5bWVudERlc2NyaXB0aW9uOiBTdHJpbmdcbiAgcGF5bWVudEluaXRpYXRvckZpcnN0TmFtZTogU3RyaW5nXG4gIHBheW1lbnRJbml0aWF0b3JMYXN0TmFtZTogU3RyaW5nXG4gIHBheW1lbnRTdGF0dXM6IERlcG9zaXRzUGF5bWVudFN0YXR1c1xuICBwYXltZW50U3RhdHVzUmVhc29uOiBTdGF0dXNSZWFzb25cbiAgcGF5bWVudFR5cGU6IFBheW1lbnRSYWlsXG59XG5cbnR5cGUgQ3JlZGVudGlhbFNob3BpZnlQYXlsb2FkIHtcbiAgc2hvcE5hbWU6IFN0cmluZ1xufVxuXG50eXBlIFVzZXIgaW1wbGVtZW50cyBOb2RlIEBrZXkoZmllbGRzOiBcImlkXCIpIHtcbiAgc2VlbkZsYWdzKGtleXM6IFtTZWVuRmxhZ0tleV0hKTogW1NlZW5GbGFnXVxuICBkZXBhcnRtZW50OiBEZXBhcnRtZW50XG4gIGxhc3ROYW1lOiBTdHJpbmdcbiAgZnJhdWRBbGVydHMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IEZyYXVkQWxlcnRDb25uZWN0aW9uXG4gIFwiXCJcIldoZXRoZXIgdGhlIHVzZXIgaXMgYSBtYW5hZ2VyIG9yIGhhcyBhbnkgZGlyZWN0IHJlcG9ydHNcIlwiXCJcbiAgaXNNYW5hZ2VyOiBCb29sZWFuIVxuICBlbWFpbDogU3RyaW5nXG4gIFwiXCJcIk1vbnRobHkgYnJlYWtkb3duIGZvciBhbW91bnQgc3BlbnQgYnkgdXNlclwiXCJcIlxuICBtb250aGx5U3BlbmRCcmVha2Rvd246IFtNb250aGx5VXNlckJhbGFuY2VdXG4gIGZpcnN0TmFtZTogU3RyaW5nXG4gIHByb2dyYW1NZW1iZXJzaGlwcyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogUHJvZ3JhbU1lbWJlcnNoaXBDb25uZWN0aW9uXG4gIGhhc09uYm9hcmRlZDogQm9vbGVhbiFcbiAgXCJcIlwiVGhlIHVzZXIncyBjdXJyZW50IG1vbnRobHkgdXNlciBsaW1pdCwgb3IgbnVsbCBpZiB0aGVyZSBpcyBubyBsaW1pdFwiXCJcIlxuICBtb250aGx5VXNlckxpbWl0OiBJbnQgQGRlcHJlY2F0ZWQocmVhc29uOiBcIlVzZSBtb250aGx5X3VzZXJfbGltaXRfaW5mbyBpbnN0ZWFkXCIpXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBpc01mYUVuYWJsZWQ6IEJvb2xlYW5cbiAgbW9udGhseVVzZXJMaW1pdEluZm86IE1vbnRobHlVc2VyTGltaXRJbmZvXG4gIHJvbGU6IFN0cmluZ1xuICBoZWxwc2hpZnRBdXRoVG9rZW46IFN0cmluZyFcbiAgZGlzcGxheVJvbGU6IFVzZXJSb2xlVHlwZUlucHV0IVxuICBzc246IFN0cmluZ1xuICBcIlwiXCJOZXQgYW1vdW50IHNwZW50IGJ5IHVzZXIgdGhpcyBtb250aFwiXCJcIlxuICBhbW91bnRTcGVudCh0aW1lV2luZG93RGF5czogSW50ISk6IEludCBAZGVwcmVjYXRlZChyZWFzb246IFwiVXNlIGFtb3VudF9zcGVudF9jdXJyZW50X21vbnRoIGluc3RlYWRcIilcbiAgc3RhdHVzOiBTdHJpbmdcbiAgdGVuYW50QWNjb3VudHM6IFtUZW5hbnRBY2NvdW50UmVzdWx0XVxuICBjaGFubmVscyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogQ2hhbm5lbENvbm5lY3Rpb25cbiAgcnVsZXMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IFJ1bGVDb25uZWN0aW9uIEBkZXByZWNhdGVkKHJlYXNvbjogXCJEbyBub3QgYWNjZXNzIGEgdXNlcidzIHJ1bGVzIGRpcmVjdGx5LiBJbnN0ZWFkIHVzZSBkb21haW4tc3BlY2lmaWMgZmllbGRzIGxpa2UgbW9udGhseV91c2VyX2xpbWl0XCIpXG4gIGluc2VydGVkQXQ6IFRpbWVcbiAgbWZhUHJpbWFyeU1ldGhvZDogTWZhUHJpbWFyeU1ldGhvZFxuICBcIlwiXCJOZXQgYW1vdW50IHNwZW50IGJ5IHVzZXIgdGhpcyBtb250aCBpbmNsdWRpbmcgY2FyZHMgdGhhdCBkbyBub3QgYXBwbHkgdG8gdGhlIHVzZXIgbGltaXRcIlwiXCJcbiAgYW1vdW50U3BlbnRDdXJyZW50TW9udGhBbGxDYXJkczogSW50XG4gIGFkZHJlc3M6IEFkZHJlc3NcbiAgbG9jYXRpb246IExvY2F0aW9uXG4gIFwiXCJcIldoZXRoZXIgdGhlIHVzZXIgaGFzIGFueSB0cmFuc2FjdGlvbnNcIlwiXCJcbiAgaGFzVHJhbnNhY3Rpb246IEJvb2xlYW4hXG4gIGNhcmRzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBpZDogW0lEIV0sIGluc3RydW1lbnRUeXBlOiBJbnN0cnVtZW50VHlwZSwgaXNQcmVhcHByb3ZlZDogQm9vbGVhbiwgbGFzdDogSW50LCBzZWFyY2hRdWVyeTogU3RyaW5nLCBzb3J0Qnk6IENhcmRTb3J0Q29sdW1uLCBzdGF0dXM6IFtTdHJpbmchXSwgc3RhdHVzVmlld3M6IFtTdGF0dXNWaWV3IV0pOiBDYXJkQ29ubmVjdGlvblxuICBpc0luaXRpYWxBcHBsaWNhbnQ6IEJvb2xlYW4hXG4gIGRlcG9zaXRzUm9sZTogRGVwb3NpdHNSb2xlXG4gIG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbnMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IE5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNvbm5lY3Rpb25cbiAgaXNJbnZpdGVkRGVwb3NpdHNBZG1pbjogQm9vbGVhbiFcbiAgXCJcIlwiV2hldGhlciB1c2VyIGhhcyBhY2Nlc3MgdG8gdGhlIHByaW1pdGl2ZXMgZXhwZXJpZW5jZVwiXCJcIlxuICBpc1ByaW1pdGl2ZXM6IEJvb2xlYW5cbiAgXCJcIlwiQWxsIGFjdGl2ZSAobm9uLXRlcm1pbmFsKSBvbmJvYXJkaW5nIGFwcGxpY2F0aW9ucyBiZWxvbmdpbmcgdG8gdGhlIGFwcGxpY2FudC5cIlwiXCJcbiAgbGF0ZXN0T25ib2FyZGluZ0FwcGxpY2F0aW9uKFxuICAgIFwiXCJcIlJldHVybiBvbmx5IGFwcGxpY2F0aW9ucyBvZiB0aGUgZ2l2ZW4gYmx1ZXByaW50IHR5cGVcIlwiXCJcbiAgICB0eXBlOiBVc2VyT25ib2FyZGluZ0JsdWVwcmludFR5cGVcbiAgKTogT25ib2FyZGluZ0FwcGxpY2F0aW9uXG4gIFwiXCJcIldoZXRoZXIgdGhlIHVzZXIgc2hvdWxkIGJlIGluIHRoZSBwcm9kdWN0IG9uYm9hcmRpbmcgZmxvd1wiXCJcIlxuICBtdXN0U2VlUHJvZHVjdE9uYm9hcmRpbmc6IEJvb2xlYW4hXG4gIFwiXCJcIlRoZSB1c2VyJ3MgbWFuYWdlclwiXCJcIlxuICBtYW5hZ2VyOiBVc2VyXG4gIGlzSW52aXRlZERlcG9zaXRzQ2FzaEFuZENhcmRVc2VyOiBCb29sZWFuIVxuICBcIlwiXCJTdWdnZXN0ZWQgc2hpcHBpbmcgYWRkcmVzcyB1c2VkIGZvciBjYXJkIHNoaXBwaW5nXCJcIlwiXG4gIHN1Z2dlc3RlZFNoaXBwaW5nQWRkcmVzczogQWRkcmVzc1xuICBcIlwiXCJXaGV0aGVyIG9yIG5vdCB0aGUgdXNlciBoYXMgYW55IGNvcnBvcmF0ZSBjYXJkcyB0aGF0IGFyZSBub3QgdGVybWluYXRlZFwiXCJcIlxuICBoYXNWYWxpZENvcnBvcmF0ZUNhcmRzOiBCb29sZWFuIVxuICBhY2NvdW50OiBBY2NvdW50XG4gIFwiXCJcIk5ldCBhbW91bnQgc3BlbnQgYnkgdXNlciB0aGlzIG1vbnRoIG9uIGNhcmRzIGZvciB1c2VyIGxpbWl0XCJcIlwiXG4gIGFtb3VudFNwZW50Q3VycmVudE1vbnRoOiBJbnRcbiAgcmVmZXJyYWxDb2RlOiBTdHJpbmdcbiAgYmlydGhEYXRlOiBUaW1lXG4gIFwiXCJcIldoZXRoZXIgb3Igbm90IHVzZXIgaGFzIGFjY2VzcyB0byBjb3Jwb3JhdGUgY2FyZHNcIlwiXCJcbiAgY2FuQWNjZXNzQ29ycG9yYXRlQ2FyZHM6IEJvb2xlYW4hXG59XG5cbmlucHV0IEFkZEZzcEJvb2trZWVwZXJVc2VySW5wdXQge1xuICBib29ra2VlcGVyVXNlcklkOiBTdHJpbmchXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuZW51bSBCaWxsaW5nUGF5bWVudEludGVudFN0YXR1cyB7XG4gIENBTkNFTEVEXG4gIENPTVBMRVRFRFxuICBGQUlMRURcbiAgSU5fUFJPR1JFU1NcbiAgSU5WQUxJRFxuICBQRU5ESU5HXG59XG5cbmlucHV0IENyZWF0ZURvY3VtZW50T2NySW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIFwiXCJcInRoZSBJRCBvZiB0aGUgZmlsZXN0b3JlIGFzc2V0IHRvIGJlIHByb2Nlc3NlZFwiXCJcIlxuICBmaWxlc3RvcmVJZDogSUQhXG4gIFwiXCJcIkVudGl0aWVzIHRvIGJlIG1hdGNoZWQgaW4gdGhlIGRvY3VtZW50XCJcIlwiXG4gIHZlcmlmeUVudGl0aWVzOiBEb2N1bWVudE9jclZlcmlmeUVudGl0aWVzSW5wdXRcbn1cblxudHlwZSBPbmJvYXJkaW5nSW5mb3JtYXRpb25SZXF1ZXN0IGltcGxlbWVudHMgTm9kZSB7XG4gIGFwcGxpY2F0aW9uOiBPbmJvYXJkaW5nQXBwbGljYXRpb24hXG4gIGJlZm9yZVBhZ2VzOiBbT25ib2FyZGluZ05vblN1Ym1pdHRhYmxlUGFnZSFdIVxuICBjYW5SZXN1Ym1pdDogQm9vbGVhbiFcbiAgY29udGVudDogT25ib2FyZGluZ0luZm9ybWF0aW9uUmVxdWVzdENvbnRlbnQhIEBkZXByZWNhdGVkKHJlYXNvbjogXCJVc2UgY29udGVudFBhZ2UuY29udGVudCBpbnN0ZWFkXCIpXG4gIGNvbnRlbnRQYWdlOiBPbmJvYXJkaW5nU3VibWl0dGFibGVQYWdlIVxuICBkYXRhOiBKc29uXG4gIFwiXCJcIlxuICBUaGlzIGZpZWxkIGlzIGEgbWFjaGluZS1yZWFkYmxlIGlkZW50aWZpZXIgb2YgdGhlIGluZm9ybWF0aW9uIHJlcXVlc3QuXG4gIEl0J3MgdXNlZCBieSB0aGUgZnJvbnRlbmQgdG8gbWF0Y2ggdGhlIGZvb3RlciB0byBzaG93IHRvIHRoZSBjdXN0b21lci5cbiAgSXQgd2FzIGFkZGVkIHF1aWNrbHkgYXMgYSBzdG9wLWdhcCBzb2x1dGlvbiwgc28gcGxlYXNlIHVzZSBpdCBjYXJlZnVsbHkuXG4gIFwiXCJcIlxuICBkZXNjcmlwdGlvbjogT25ib2FyZGluZ0luZm9ybWF0aW9uUmVxdWVzdERlc2NyaXB0aW9uIVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgc3RhdHVzOiBPbmJvYXJkaW5nSW5mb3JtYXRpb25SZXF1ZXN0U3RhdHVzIVxuICB0eXBlOiBPbmJvYXJkaW5nSW5mb3JtYXRpb25SZXF1ZXN0VHlwZSFcbn1cblxuaW5wdXQgU2V0UmVjZWl2YWJsZXNPZmZlcnNSZXZlbnVlQWNjZXNzRW5hYmxlZElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB2YWx1ZTogQm9vbGVhbiFcbn1cblxuZW51bSBUZXJtaW5hdGlvblJlYXNvbiB7XG4gIENBUkRfREFNQUdFRFxuICBDQVJEX0xPU1RcbiAgQ0FSRF9OT1RfUkVDRUlWRURcbiAgRE9fTk9UX05FRURfUEhZU0lDQUxfQ0FSRFxuICBET19OT1RfTkVFRF9WSVJUVUFMX0NBUkRcbiAgRlJBVURcbiAgT1RIRVJcbn1cblxudHlwZSBQYXltZW50QXBwcm92ZXIge1xuICBjdXN0b21lclVzZXI6IFVzZXJcbiAgZGVjaXNpb246IFBheW1lbnRBcHByb3ZhbERlY2lzaW9uIVxuICBkZWNpc2lvbk5vdGVzOiBTdHJpbmdcbiAgZGVjaXNpb25SZWFzb246IFBheW1lbnRBcHByb3ZhbERlY2lzaW9uUmVhc29uXG4gIHVwZGF0ZWRBdDogVGltZVxufVxuXG5pbnB1dCBDcmVhdGVTbXNDaGFubmVsSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIG51bWJlcjogUGhvbmVOdW1iZXIhXG59XG5cblwiXCJcIkV4dHJhIHN0YXRlIHZhbHVlcyBmb3IgYW4gYXBwbGljYXRpb24sIGZvciBwcm9kdWN0IGFwcGxpY2F0aW9ucyB0aGlzIGNvbnRhaW5zIGNhc2gvY2FyZCBvdXRjb21lc1wiXCJcIlxudW5pb24gT25ib2FyZGluZ0FwcGxpY2F0aW9uU3RhdGUgPSBPbmJvYXJkaW5nQXBwbGljYXRpb25TdGF0ZUVtcHR5IHwgT25ib2FyZGluZ0FwcGxpY2F0aW9uU3RhdGVQcm9kdWN0VjEgfCBPbmJvYXJkaW5nQXBwbGljYXRpb25TdGF0ZVJpc2tFdmFsdWF0aW9uXG5cbnR5cGUgQmlsbGluZ0RlbGlucXVlbmN5IGltcGxlbWVudHMgTm9kZSB7XG4gIGFzT2Y6IFRpbWVcbiAgY3VzdG9tZXJBY2NvdW50SWQ6IFN0cmluZ1xuICBkYXlzUGFzdER1ZTogSW50XG4gIGR1ZUFtb3VudFVzZENlbnRzOiBJbnRcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG59XG5cblwiXCJcIkRhdGEgcHJvdmlkZXIgYWNjb3VudCBjb25uZWN0ZWQgdG8gYSBzcGVjaWZpYyBjdXN0b21lciBhY2NvdW50XCJcIlwiXG50eXBlIERhdGFJbXBvcnRlckRhdGFQcm92aWRlciB7XG4gIFwiXCJcIlRoZSBjdXN0b21lciBhY2NvdW50IHRoaXMgZGF0YSBwcm92aWRlciBpcyBjb25uZWN0ZWQgdG9cIlwiXCJcbiAgY3VzdG9tZXJBY2NvdW50SWQ6IElEIVxuICBcIlwiXCJUaGUgZGF0YSBwcm92aWRlciBpZFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlRoZSBkYXRhIHByb3ZpZGVyIHN0YXR1c1wiXCJcIlxuICBzdGF0dXM6IERhdGFJbXBvcnRlckRhdGFQcm92aWRlclN0YXR1cyFcbn1cblxuZW51bSBNZXRob2Qge1xuICBDUkVESVRcbiAgREVCSVRcbn1cblxudHlwZSBUb3RhbENhc2hCYWxhbmNlVGlsZSBpbXBsZW1lbnRzIE5vZGUge1xuICBmaW5hbmNpYWxTb3VyY2VzVG9GaXgoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IEZpbmFuY2lhbFNvdXJjZUNvbm5lY3Rpb25cbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIHN0YXRlbWVudFJlcXVlc3RlZEFjY291bnRzRWFybGllc3REdWVBdDogVGltZVxufVxuXG50eXBlIFVuc3VzcGVuZENhcmRQYXlsb2FkIHtcbiAgY2FyZDogQ2FyZCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIEV4cGVuc2VzRmxhZyBpbXBsZW1lbnRzIE5vZGUge1xuICBleHBlbnNlc0ZsYWdFdmVudHMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IEV4cGVuc2VzRmxhZ0V2ZW50Q29ubmVjdGlvblxuICBleHBlbnNlc0l0ZW06IEV4cGVuc2VzSXRlbVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgcnVsZTogRXhwZW5zZXNSdWxlXG4gIHN0YXR1czogRXhwZW5zZXNGbGFnRXZlbnRBY3Rpb25cbn1cblxudHlwZSBVcGRhdGVBdXRvQWRkRnVuZHNQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBwYXltZW50OiBEZXBvc2l0c1BheW1lbnQhXG59XG5cbnR5cGUgVGVuYW50QWNjb3VudFJlc3VsdCB7XG4gIGFjY291bnRJZDogU3RyaW5nIVxuICBuYW1lOiBTdHJpbmchXG59XG5cbmVudW0gT25ib2FyZGluZ0JsdWVwcmludFR5cGUge1xuICBcIlwiXCJBcHBsaWNhdGlvbnMgdG8gY2hhbmdlIHRoZSB1c2VyJ3MgY2FzaCByb2xlXCJcIlwiXG4gIENIQU5HRV9ST0xFXG4gIFwiXCJcIkNhc2ggdXBzZWxsIGFwcGxpY2F0aW9uc1wiXCJcIlxuICBERVBPU0lUU1xuICBcIlwiXCJBcHBsaWNhdGlvbiB0byBjb2xsZWN0L3JldmlldyBhY2NvdW50IGRldGFpbHMgZm9yIHBlcmlvZGljIHJldmlld1wiXCJcIlxuICBQRVJJT0RJQ19SRVZJRVdcbiAgXCJcIlwiTmV0LW5ldyBwcm9kdWN0IGFwcGxpY2F0aW9uc1wiXCJcIlxuICBQUk9EVUNUX1YxXG4gIFwiXCJcIk9uYm9hcmRpbmcgZmxvd3MgdG8gZGV0ZXJtaW5lIGEgY3VzdG9tZXIncyByaXNrIHRpZXJcIlwiXCJcbiAgUklTS19FVkFMVUFUSU9OXG4gIFwiXCJcIk9uYm9hcmRpbmcgZmxvd3MgdG8gc2V0IHVwIGEgdXNlcidzIGFjY291bnRcIlwiXCJcbiAgVVNFUl9TRVRVUFxufVxuXG5cIlwiXCJPYmplY3QgZGVmaW5pbmcgdGhlIHRvdGFsIGFuZCByZW1haW5pbmcgY2hlcXVlIGRlcG9zaXRcIlwiXCJcbnR5cGUgQ2hlcXVlRGVwb3NpdExpbWl0cyB7XG4gIFwiXCJcIlRoZSByZW1haW5pbmcgbGltaXQgYXZhaWxhYmxlIGZvciBtYWtpbmcgY2hlcXVlIGRlcG9zaXRzXCJcIlwiXG4gIGNoZXF1ZURlcG9zaXRSZW1haW5pbmdMaW1pdFVzZENlbnRzOiBJbnQhXG4gIFwiXCJcIlRoZSB0b3RhbCBsaW1pdCBkZWZpbml0ZWQgZm9yIGNoZXF1ZSBkZXBvc2l0c1wiXCJcIlxuICBjaGVxdWVEZXBvc2l0VG90YWxMaW1pdFVzZENlbnRzOiBJbnQhXG59XG5cbnR5cGUgUmV3YXJkc09mZmVyIHtcbiAgcG9pbnRzQ29zdDogSW50IVxuICByZWRlbXB0aW9uT2ZmZXJJZDogU3RyaW5nIVxufVxuXG5pbnB1dCBHZW5lcmF0ZVBsYWlkTGlua1Rva2VuSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIG1pZ3JhdGVGaW5hbmNpYWxTb3VyY2VJZDogSURcbiAgcHJvZHVjdHM6IFtQbGFpZFByb2R1Y3RdXG4gIHJlZGlyZWN0VXJpOiBTdHJpbmdcbn1cblxuZW51bSBSZXdhcmRzSGlzdG9yeUVudHJ5T3JkZXJUeXBlIHtcbiAgQVNDXG4gIERFU0NcbiAgSU5WQUxJRFxufVxuXG5pbnB1dCBEZXZpY2VJbmZvcm1hdGlvbklucHV0IHtcbiAgYWRkaXRpb25hbEluZm9ybWF0aW9uOiBKc29uXG4gIGFwcFZlcnNpb246IFN0cmluZyFcbiAgbW9kZWw6IFN0cmluZyFcbiAgb3M6IFN0cmluZyFcbn1cblxudHlwZSBIZWFydGJlYXRQYXlsb2FkIHtcbiAgXCJcIlwiQWNrbm93bGVkZ2VtZW50IHRoYXQgdGhlIHNlcnZlciBwcm9jZXNzZWQgdGhlIHJlcXVlc3QgY29ycmVjdGx5XCJcIlwiXG4gIGFjazogQm9vbGVhblxufVxuXG50eXBlIFVwZGF0ZVRyYW5zYWN0aW9uTWVtb1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvblxufVxuXG50eXBlIEZpbmFsaXplQ29ubmVjdENyZWRlbnRpYWxQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkYXRhUHJvdmlkZXI6IERhdGFJbXBvcnRlckRhdGFQcm92aWRlclxufVxuXG5cIlwiXCJEZWZhdWx0IG5vbi1pbnRlZ3JhdGlvbiBzcGVjaWZpYyBjcmVkZW50aWFsIHBheWxvYWRcIlwiXCJcbnR5cGUgQ3JlZGVudGlhbFZlbmRvclBheWxvYWQge1xuICBcIlwiXCJJRFwiXCJcIlxuICBpZDogU3RyaW5nXG59XG5cbnR5cGUgQ2FyZFBheW1lbnRGb3J3YXJkZXJSZWNpcGllbnQge1xuICBiZW5lZmljaWFsT3duZXI6IENhcmRQYXltZW50Rm9yd2FyZGVyQmVuZWZpY2lhbE93bmVyXG4gIGJ1c2luZXNzQWRkcmVzczogQWRkcmVzc1xuICBidXNpbmVzc05hbWU6IFN0cmluZ1xuICBjYXRlZ29yeTogQ2FyZFBheW1lbnRGb3J3YXJkZXJDYXRlZ29yeVxuICBjb250YWN0OiBDYXJkUGF5bWVudEZvcndhcmRlckNvbnRhY3RcbiAgcmVjZWl2aW5nTWV0aG9kOiBSZWNlaXZpbmdNZXRob2RcbiAgcmVjaXBpZW50SWQ6IElEXG59XG5cbnR5cGUgU3BlbmRBZ2dyZWdhdGVUaW1lU2VyaWVzRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IFNwZW5kQWdncmVnYXRlVGltZVNlcmllc1xufVxuXG5cIlwiXCJDdXN0b21lciByZWZlcnJhbCBvYmplY3RcIlwiXCJcbnR5cGUgUmVmZXJyYWxSZWNvcmQgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcInJlZmVycmFsIGNyZWF0aW9uIHRpbWVcIlwiXCJcbiAgaW5zZXJ0ZWRBdDogVGltZSFcbiAgXCJcIlwiaWQgb2YgdGhlIHJlZmVycmFsIHJlY29yZFwiXCJcIlxuICByZWZlcnJhbFJlY29yZElkOiBTdHJpbmdcbiAgXCJcIlwicmVmZXJyYWwgc3RhdHVzXCJcIlwiXG4gIHJlZmVycmFsU3RhdHVzOiBSZWZlcnJhbFJlY29yZFN0YXR1cyFcbiAgXCJcIlwidGhlIGVtYWlsIG9mIHRoZSByZWZlcnJlZCB1c2VyXCJcIlwiXG4gIHRhcmdldEVtYWlsOiBTdHJpbmchXG59XG5cblwiXCJcIlJlZmVycmFscyBzdW1tYXJ5IG9iamVjdFwiXCJcIlxudHlwZSBSZWZlcnJhbHNTdW1tYXJ5IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJNb2JpbGUgc3VtbWFyeSB2YWx1ZXNcIlwiXCJcbiAgbW9iaWxlOiBNb2JpbGVSZWZlcnJhbHNTdW1tYXJ5XG59XG5cbmVudW0gQ2FyZExpbWl0RnJlcXVlbmN5IHtcbiAgTU9OVEhMWVxuICBPTkVfVElNRVxuICBRVUFSVEVSTFlcbiAgWUVBUkxZXG59XG5cbnR5cGUgQnVsa0ZpbmRPckNyZWF0ZUVycEZlZWRzUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZXJwRmVlZHM6IFtFcnBGZWVkXVxuICBlcnJvck1lc3NhZ2U6IFN0cmluZ1xufVxuXG5lbnVtIFBheW1lbnRDbGFzcyB7XG4gIElOU1RBTlRcbiAgUkVDVVJSSU5HXG4gIFNDSEVEVUxFRFxufVxuXG50eXBlIFJld2FyZHNUcmlnZ2VySW5zdGFuY2VDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtSZXdhcmRzVHJpZ2dlckluc3RhbmNlRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG50eXBlIEV4cGVuc2VzRmxhZ0Nvbm5lY3Rpb24ge1xuICBlZGdlczogW0V4cGVuc2VzRmxhZ0VkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBBY2NvdW50U3lzdGVtU2V0dGluZ3Mge1xuICBieXBhc3NGaW5hbmNpYWxzU2V0dXA6IEJvb2xlYW5cbiAgbW9udGhseVVzZXJMaW1pdFJvbGxvdXRFbmFibGVkOiBCb29sZWFuXG4gIHNob3dDYXNoVXBzZWxsOiBCb29sZWFuXG59XG5cbnR5cGUgQ3JlYXRlRnVuZGluZ1NvdXJjZVBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGZ1bmRpbmdTb3VyY2U6IEZ1bmRpbmdTb3VyY2UhXG59XG5cbmlucHV0IENhbmNlbFRyYW5zYWN0aW9uSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHRyYW5zYWN0aW9uSWQ6IElEIVxufVxuXG50eXBlIEFwcHJvdmFsc1J1bGVHcm91cE1hdGNoZXIgaW1wbGVtZW50cyBOb2RlIHtcbiAgY29tcGFyaXNvbjogU3RyaW5nIVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAga2V5OiBTdHJpbmchXG4gIHZhbHVlOiBTdHJpbmdcbn1cblxudHlwZSBGaW5hbmNpYWxBY2NvdW50IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIldoZXRoZXIgdGhlIGFjY291bnQgY2FuIG1ha2UgQ2FzaCBvdXRnb2luZyBhY2ggZGViaXRzIG9yIG5vdFwiXCJcIlxuICBhY2hEZWJpdENhcGFiaWxpdHk6IEFjaERlYml0Q2FwYWJpbGl0eSFcbiAgZGVzY3JpcHRpb246IFN0cmluZ1xuICBkZXRhaWxzOiBGaW5hbmNpYWxBY2NvdW50RGV0YWlsc1xuICBcIlwiXCJcbiAgU29mdC1kZWxldGlvbiBvZiBmdW5kaW5nIHJlc291cmNlcyBpcyByZXByZXNlbnRlZCB1c2luZyBhIGRpc2FibGVkIHN0YXR1cy5cbiAgV2UgZG9uJ3Qgd2FudCB0byBleHBvc2UgdGhpcyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIHRvIGNsaWVudHMuIFRoZXJlIGlzIGN1cnJlbnRseVxuICBubyBrbm93biB1c2UgY2FzZSBpbiB0aGUgVUkgZm9yIHNob3dpbmcgYWRkaXRpb25hbCBzdGF0dXMgaW5mb3JtYXRpb24sIGJ1dCB0aGV5XG4gIGNvdWxkIGJlIGluY2x1ZGVkIGhlcmUgYXMgbmVlZGVkLlxuICBcIlwiXCJcbiAgZnVuZGluZ1NvdXJjZTogRnVuZGluZ1NvdXJjZVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgbGF0ZXN0QmFsYW5jZTogRmluYW5jaWFsQmFsYW5jZVxuICBuYW1lOiBTdHJpbmdcbiAgcHJpb3JpdHk6IEZ1bmRpbmdTb3VyY2VQcmlvcml0eVxuICBzb3VyY2U6IEZpbmFuY2lhbFNvdXJjZVxufVxuXG5pbnB1dCBDcmVhdGVSZmlSZXNwb25zZUl0ZW1JbnB1dCB7XG4gIGRvY3VtZW50VG9rZW46IFN0cmluZyFcbn1cblxudHlwZSBTdGF0ZW1lbnRFbnRyeUxlbnMgaW1wbGVtZW50cyBOb2RlIHtcbiAgYmlsbGFibGVTdGF0dXM6IEJpbGxhYmxlU3RhdHVzXG4gIGRpc2FibGVkUnVsZXM6IFtJbnRlZ3JhdGlvblJ1bGVdXG4gIGRpc3BsYXlGaWVsZEVudGl0aWVzOiBbRXh0ZXJuYWxJbnRlZ3JhdGlvbkVudGl0eV1cbiAgZGlzcGxheUZpZWxkczogSnNvblxuICBleHRlcm5hbENsYXNzOiBFeHRlcm5hbEludGVncmF0aW9uRW50aXR5XG4gIGV4dGVybmFsRGVwYXJ0bWVudDogRXh0ZXJuYWxJbnRlZ3JhdGlvbkVudGl0eVxuICBleHRlcm5hbExvY2F0aW9uOiBFeHRlcm5hbEludGVncmF0aW9uRW50aXR5XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJcbiAgUmV0dXJucyB0aGUgY29tcHV0ZWQgaW50ZWdyYXRpb24gZmllbGQgZW50aXRpZXMgZnJvbSBpbnRlZ3JhdGlvbiBydWxlIGVuZ2luZSBmb3IgYSBzdGUuXG4gIFdlIHJldHVybiBhIGxpc3Qgb2YgUEVJRXMgYXMgdGhlIFBFSUYgZGF0YSBleGlzdHMgb24gdGhlIG9iamVjdCBpdHNlbGYgdG8gbWF0Y2ggaW4gdGhlIGZyb250ZW5kLlxuICBcIlwiXCJcbiAgaW50ZWdyYXRpb25GaWVsZEVudGl0aWVzOiBbRXh0ZXJuYWxJbnRlZ3JhdGlvbkVudGl0eV1cbiAgcnVsZUV2YWx1YXRpb25zOiBbSW50ZWdyYXRpb25SdWxlRXZhbHVhdGlvbl1cbiAgc3RlOiBTdGF0ZW1lbnRFbnRyeVxuICB1c2VyQ2F0ZWdvcnk6IFVzZXJDYXRlZ29yeVxufVxuXG5pbnB1dCBHZW5lcmF0ZVJlY2VpdmFibGVzUGF5b3V0UmVwb3J0SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHBheW91dElkOiBJRCFcbn1cblxuZW51bSBEaXNwdXRlU3RhdHVzIHtcbiAgRElTUFVURV9TVEFUVVNfQ0xPU0VEXG4gIERJU1BVVEVfU1RBVFVTX0NPTVBMRVRFXG4gIERJU1BVVEVfU1RBVFVTX0RSQUZUXG4gIERJU1BVVEVfU1RBVFVTX0lOX1BST0dSRVNTXG4gIERJU1BVVEVfU1RBVFVTX01PUkVfSU5GT1JNQVRJT05fTkVFREVEXG4gIERJU1BVVEVfU1RBVFVTX1VOS05PV05cbn1cblxuZW51bSBGdW5kaW5nU291cmNlUHJpb3JpdHkge1xuICBBTFRFUk5BVElWRVxuICBQUklNQVJZXG59XG5cbmlucHV0IFByZXBhcmVNdWx0aUZlZVJlY2VpdmFibGVzT2ZmZXJzRm9yQWNjZXB0YW5jZUlucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZXBvc2l0c0FjY291bnRJZDogSUQhXG4gIG9mZmVySWRzOiBbSUQhXSFcbiAgcmVxdWVzdElkOiBTdHJpbmdcbiAgcmVxdWVzdGVkQWR2YW5jZUFtb3VudDogRmluYW5jaWFsQXNzZXRJbnB1dFxufVxuXG50eXBlIFVwZGF0ZVBsYWlkTGlua1Rva2VuUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgbGlua1Rva2VuOiBTdHJpbmchXG59XG5cbnR5cGUgVW5kZXJ3cml0aW5nQW5hbHlzaXNGbGFnRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IFVuZGVyd3JpdGluZ0FuYWx5c2lzRmxhZ1xufVxuXG50eXBlIENyZWRlbnRpYWwgaW1wbGVtZW50cyBOb2RlIHtcbiAgZXhwaXJhdGlvbkRhdGU6IFRpbWVcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIHBheWxvYWQ6IENyZWRlbnRpYWxQYXlsb2FkXG4gIHB1YmxpY0RhdGE6IEpzb25cbiAgcmVuZXdhbERhdGU6IFRpbWVcbiAgc3RhdHVzOiBTdHJpbmdcbiAgdmVuZG9yOiBTdHJpbmdcbn1cblxudHlwZSBTZXRSZWNlaXZhYmxlc09mZmVyc0ludGVncmF0aW9uRmluYW5jaWFsQWNjb3VudE1hcHBpbmdzUGF5bG9hZCB7XG4gIGFjY291bnQ6IFJlY2VpdmFibGVzT2ZmZXJzQWNjb3VudFxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgTG9jYXRpb24gaW1wbGVtZW50cyBOb2RlIEBrZXkoZmllbGRzOiBcImlkXCIpIHtcbiAgZGVsZXRlZEF0OiBUaW1lXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIG1lbWJlcnNDb3VudDogSW50XG4gIG5hbWU6IFN0cmluZ1xuICB1c2VycyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogVXNlckNvbm5lY3Rpb25cbn1cblxudHlwZSBTZXRBcHByb3ZhbHNVbnNhZmVGbGFnUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdmFsdWU6IFN0cmluZ1xufVxuXG5pbnB1dCBSZWNlaXZpbmdNZXRob2RJbnB1dCB7XG4gIGFjaFJlY2VpdmluZ01ldGhvZDogQWNoUmVjZWl2aW5nTWV0aG9kSW5wdXRcbiAgY2hlY2tSZWNlaXZpbmdNZXRob2Q6IENoZWNrUmVjZWl2aW5nTWV0aG9kSW5wdXRcbiAgZWZ0UmVjZWl2aW5nTWV0aG9kOiBFZnRSZWNlaXZpbmdNZXRob2RJbnB1dFxuICB3aXJlUmVjZWl2aW5nTWV0aG9kOiBXaXJlUmVjZWl2aW5nTWV0aG9kSW5wdXRcbn1cblxuaW5wdXQgSW5wdXRDYXNoVHJhbnNhY3Rpb25DcmVhdGlvbkFyZ3VtZW50VW5pb24ge1xuICBcIlwiXCJQdWxsIGZ1bmRzIHZpYSBBQ0ggZnJvbSBhbiBleHRlcm5hbCBhY2NvdW50IHRvIGEgY2FzaCBhY2NvdW50XCJcIlwiXG4gIGFjaERlYml0OiBJbnB1dENhc2hUcmFuc2FjdGlvbkFjaERlYml0QXJndW1lbnRzXG4gIFwiXCJcIlxuICBNb3ZlIGZ1bmRzIGZyb20gYSBjYXNoIGFjY291bnQgdG8gYW5vdGhlciBjYXNoIGFjY291bnRcbiAgTm90ZTogYm9va190cmFuZmVycyBjYW4gbm90IGJlIHNjaGVkdWxlZCBvciByZXBlYXRlZCBjdXJyZW50bHlcbiAgXCJcIlwiXG4gIGJvb2tUcmFuc2ZlcjogSW5wdXRDYXNoVHJhbnNhY3Rpb25Cb29rVHJhbnNmZXJBcmd1bWVudHNcbiAgXCJcIlwiUHVzaCBmdW5kcyBmcm9tIGEgY2FzaCBhY2NvdW50IHRvIGFuIGV4dGVybmFsIGFjY291bnRcIlwiXCJcbiAgY3JlZGl0OiBJbnB1dENhc2hUcmFuc2FjdGlvbkNyZWRpdEFyZ3VtZW50c1xufVxuXG5cIlwiXCJBIHJ1bGUgZXZhbHVhdGlvbiBpcyBhIGV2YWx1YXRpb24gcmVzdWx0IGZvciBhbiBpbnRlZ3JhdGlvbiBmaWVsZC5cIlwiXCJcbnR5cGUgUnVsZUV2YWx1YXRpb24gaW1wbGVtZW50cyBOb2RlIHtcbiAgYmlsbGFibGVTdGF0dXM6IEJvb2xlYW5cbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIGludGVncmF0aW9uRmllbGQ6IEludGVncmF0aW9uRmllbGRcbiAgaW50ZWdyYXRpb25SdWxlOiBJbnRlZ3JhdGlvblJ1bGVcbiAgcnVsZUlkOiBTdHJpbmdcbiAgdXNlckNhdGVnb3J5SWQ6IFN0cmluZ1xufVxuXG5pbnB1dCBDcmVhdGVJbnRlZ3JhdGlvblJ1bGVJbnB1dCB7XG4gIGJvZHk6IEpzb24hXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaW50ZWdyYXRpb25JZDogSUQhXG4gIG5hbWU6IFN0cmluZ1xuICBwcmlvcml0eTogSW50IVxuICB0eXBlOiBTdHJpbmchXG59XG5cbnR5cGUgVXBkYXRlVHJhbnNhY3Rpb25EZXBhcnRtZW50UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uXG59XG5cbmlucHV0IERpc2Nvbm5lY3RDcmVkZW50aWFsSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbn1cblxuZW51bSBFYXJseUFjY2Vzc0ZlYXR1cmVKb2luU3RhdHVzIHtcbiAgSk9JTkVEXG4gIE5PVF9KT0lORURcbn1cblxudHlwZSBCaWxsaW5nUGF5bWVudEVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBCaWxsaW5nUGF5bWVudFxufVxuXG5pbnB1dCBDb21wbGV0ZU9uYm9hcmRpbmdJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBSZXBsYWNlc1JlY29yZCB7XG4gIGNhcmQ6IENhcmQhXG4gIGluc2VydGVkQXQ6IFRpbWUhXG4gIHJlYXNvbjogQ2FyZFJlcGxhY2VtZW50UmVhc29uIVxufVxuXG5lbnVtIFBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmdTdGF0dXMge1xuICBCTE9DS0VEXG4gIEZBVk9SSVRFXG59XG5cblwiXCJcIlRoZSBzcGVuZCBhbGVydCBtdXRpbmcgcG9saWN5XCJcIlwiXG50eXBlIENhcmRUcmFuc2FjdGlvbkluc2lnaHRNdXRpbmdQb2xpY3kgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIGFsZXJ0IHR5cGVcIlwiXCJcbiAgYWxlcnRUeXBlOiBTcGVuZEFsZXJ0VHlwZSFcbiAgXCJcIlwiVGhlIGN1c3RvbWVyIHVzZXIgd2hvIGNyZWF0ZXMgdGhpcyBtdXRpbmcgcG9saWN5XCJcIlwiXG4gIGNyZWF0ZWRCeVVzZXI6IFVzZXJcbiAgXCJcIlwiVGhlIGN1c3RvbWVyIGFjY291bnRcIlwiXCJcbiAgY3VzdG9tZXJBY2NvdW50OiBBY2NvdW50XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJUaGUgYWxlcnQgdHlwZS4gVGhpcyBmaWVsZCB3aWxsIGJlIGRlcHJlY2F0ZWQgYW5kIHJlcGxhY2VkIGJ5IGFsZXJ0X3R5cGVcIlwiXCJcbiAgaW5zaWdodFR5cGU6IENhcmRUcmFuc2FjdGlvbnNJbnNpZ2h0VHlwZVxuICBcIlwiXCJUaGUgbXV0ZSBjb2x1bW5cIlwiXCJcbiAgbXV0ZUNvbHVtbjogTXV0ZUNvbHVtblxuICBcIlwiXCJUaGUgbXV0ZSB2YWx1ZVwiXCJcIlxuICBtdXRlVmFsdWU6IE11dGVWYWx1ZVR5cGVcbn1cblxudHlwZSBSZXdhcmRzQ2FtcGFpZ24gaW1wbGVtZW50cyBOb2RlIHtcbiAgZGVzY3JpcHRpb246IFN0cmluZyFcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIG5hbWU6IFN0cmluZyFcbiAgcmV3YXJkc1RyaWdnZXJzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBSZXdhcmRzVHJpZ2dlckNvbm5lY3Rpb25cbn1cblxudHlwZSBSZXdhcmRzUmVkZW1wdGlvbk9mZmVyRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IFJld2FyZHNSZWRlbXB0aW9uT2ZmZXJcbn1cblxudHlwZSBPbmJvYXJkaW5nRm9ybUVtcHR5IHtcbiAgXzogQm9vbGVhblxufVxuXG5lbnVtIEhyaXNTeXN0ZW0ge1xuICBBRFBfV09SS0ZPUkNFX05PV1xuICBCQU1CT09IUlxuICBDRVJJRElBTl9EQVlGT1JDRVxuICBDSEFSVEhPUFxuICBGUkVTSFRFQU1cbiAgR1VTVE9cbiAgSElCT0JcbiAgSFJfQ0xPVURcbiAgSFJfUEFSVE5FUlxuICBIVU1BQU5TSU9cbiAgSU5WQUxJRFxuICBKVVNUV09SS1NcbiAgTEFOT1xuICBOQU1FTFlcbiAgTk1CUlNcbiAgUEFZQ0hFWFxuICBQQVlMT0NJVFlcbiAgUEVSU09OSU9cbiAgUklQUExJTkdcbiAgU0FHRV9IUlxuICBTQVBfU1VDQ0VTU0ZBQ1RPUlNcbiAgU0FQTElOR1xuICBTUVVBUkVfUEFZUk9MTFxuICBUUklORVRcbiAgVUtHX1BST1xuICBVS0dfUkVBRFlcbiAgV09SS0RBWVxuICBaRU5FRklUU1xufVxuXG50eXBlIENhc2hCYW5rIHtcbiAgYWNjb3VudFR5cGU6IFN0cmluZyFcbiAgY2l0eTogU3RyaW5nIVxuICBuYW1lOiBTdHJpbmchXG4gIHN0YXRlOiBTdHJpbmchXG4gIHN0cmVldDogU3RyaW5nIVxuICBzdWl0ZTogU3RyaW5nIVxuICB6aXA6IFN0cmluZyFcbn1cblxudHlwZSBMaW1pdFJ1bGVNZXRhZGF0YSB7XG4gIGFtb3VudDogSW50XG4gIHRpbWVXaW5kb3dEYXlzOiBJbnRcbn1cblxuXCJcIlwibXV0aW5nIGNvbmZpZyBmb3IgYW4gaW5kaXZpZHVhbCBjb2x1bW5cIlwiXCJcbmlucHV0IE11dGluZ0NvbmZpZ3VyYXRpb25JbnB1dCB7XG4gIG11dGVDb2x1bW46IE11dGVDb2x1bW4hXG4gIG11dGVWYWx1ZXM6IFtTdHJpbmchXSFcbn1cblxuaW5wdXQgU2V0UmVjZWl2YWJsZXNPZmZlcnNJbnRlZ3JhdGlvbkZpbmFuY2lhbEFjY291bnRNYXBwaW5nc0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB2YWx1ZTogW1JlY2VpdmFibGVzT2ZmZXJzSW50ZWdyYXRpb25GaW5hbmNpYWxBY2NvdW50TWFwcGluZ0lucHV0XSFcbn1cblxuZW51bSBQb3NpdGl2ZVBheVN0YXR1cyB7XG4gIEJMT0NLRURcbiAgRkFWT1JJVEVcbiAgUkVHVUxBUlxufVxuXG50eXBlIEZpbmFuY2lhbFN0YXRlbWVudFJlcXVlc3RlZEFjY291bnRFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogRmluYW5jaWFsU3RhdGVtZW50UmVxdWVzdGVkQWNjb3VudFxufVxuXG50eXBlIFVuZGVyd3JpdGluZ0FjY291bnQgaW1wbGVtZW50cyBOb2RlIHtcbiAgYXBwbGllZEFuYWx5c2lzOiBVbmRlcndyaXRpbmdBbmFseXNpc1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgaXNTdXNwZW5kZWQ6IEJvb2xlYW4hXG4gIHN0YXR1czogVW5kZXJ3cml0aW5nQWNjb3VudFN0YXR1cyFcbiAgc3RhdHVzVjI6IFVuZGVyd3JpdGluZ0FjY291bnRTdGF0dXNWMiFcbn1cblxuaW5wdXQgUmVzZXRVc2VyVXNlcklucHV0IHtcbiAgcGFzc3dvcmQ6IFN0cmluZyFcbn1cblxudHlwZSBDcmVhdGVBc3NldFBheWxvYWQge1xuICBhc3NldDogQXNzZXRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG51bmlvbiBDcmVkaXRMaW1pdEZhY3RvclRpbGUgPSBQYXltZW50SGlzdG9yeVRpbGUgfCBUb3RhbENhc2hCYWxhbmNlVGlsZVxuXG5lbnVtIENhcmRQYXltZW50RmFpbHVyZVR5cGVWMyB7XG4gIEFDQ09VTlRfQ0xPU0VEXG4gIEFDQ09VTlRfTk9UX0ZPVU5EXG4gIEdFTkVSSUNfRkFJTFVSRVxuICBJTlNVRkZJQ0lFTlRfRlVORFNcbiAgTk9OX1RSQU5TQUNUSU9OX0FDQ09VTlRcbiAgTk9UX0FVVEhPUklaRURcbn1cblxudHlwZSBPbmJvYXJkaW5nQmx1ZXByaW50IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJUaGUgc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gb2YgdGhlIGJsdWVwcmludCB0eXBlXCJcIlwiXG4gIG5hbWU6IFN0cmluZyFcbiAgXCJcIlwiRGV0ZXJtaW5lcyB3aGljaCBhcHBsaWNhdGlvbiBoYW5kbGVyIHdpbGwgYmUgdXNlZCB0byBwcm9jZXNzIHRoZSBhcHBsaWNhdGlvblwiXCJcIlxuICB0eXBlOiBPbmJvYXJkaW5nQmx1ZXByaW50VHlwZSFcbn1cblxudHlwZSBFeHBlbnNpZnlDYXRlZ29yaWVzIHtcbiAgdmVuZG9yTmFtZTogU3RyaW5nXG59XG5cbnR5cGUgRXJwRmVlZENvbm5lY3Rpb24ge1xuICBlZGdlczogW0VycEZlZWRFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbnR5cGUgQWRkcmVzcyB7XG4gIGFkZHJlc3MxOiBTdHJpbmdcbiAgYWRkcmVzczI6IFN0cmluZ1xuICBjaXR5OiBTdHJpbmdcbiAgY291bnRyeTogU3RyaW5nXG4gIFwiXCJcIlxuICBPYmplY3QgY29udGFpbmluZyB0aGUgc3RhbmRhcmRpemUgYWxwaGEyLCBhbHBoYTMsIG51bWVyaWMgYW5kIG5hbWUgdmFsdWVzIGZvciB0aGUgYWRkcmVzc1xuICBjb3VudHJ5LiBUaGlzIHdpbGwgYmUgbmlsIGlmIHRoZSBjb3VudHJ5IGlzIG5vdCBhIHZhbGlkIGFscGhhMiBvciBhbHBoYTMgY291bnRyeSBjb2RlLlxuICBcIlwiXCJcbiAgY291bnRyeU1ldGFkYXRhOiBDb3VudHJ5XG4gIHN0YXRlOiBTdHJpbmdcbiAgemlwOiBTdHJpbmdcbn1cblxuXCJcIlwiQSBtZXJnZS1zcGVjaWZpYyBpbnB1dCB0eXBlIHRvIGNyZWF0ZSBhIGNvbm5lY3Rpb25cIlwiXCJcbmlucHV0IE1lcmdlSHJpc0Nvbm5lY3Rpb25JbnB1dCB7XG4gIFwiXCJcIlRoZSBwdWJsaWMgdG9rZW4gbWVyZ2UgcmVxdWlyZXMgdXMgdG8gc2VjdXJlIGEgY29ubmVjdGlvbiB3LyB0aGVtXCJcIlwiXG4gIHB1YmxpY1Rva2VuOiBTdHJpbmchXG59XG5cbmVudW0gTm90aWZpY2F0aW9uU2V0dGluZyB7XG4gIElOVkFMSURcbiAgUFJPQ0VTU0lOR1xuICBQUk9DRVNTSU5HX1BST0NFU1NFRFxufVxuXG5pbnB1dCBBcHByb3ZhbHNVc2VyVHlwZUluZGl2aWR1YWxJbnB1dCB7XG4gIFwiXCJcIlRoZSB1c2VyIGlkLiBUaGUgY2FsbGVyIHNob3VsZCBwYXNzIGluIHRoZSBkaXJlY3QgaWQgaW5zdGVhZCBvZiB0aGUgZW5jb2RlZCBpZFwiXCJcIlxuICB1c2VySWQ6IElEIVxufVxuXG50eXBlIENhc2hUcmFuc2FjdGlvblBheXJvbGxFc3RpbWF0ZURldGFpbHMge1xuICBcIlwiXCJXaGVuIHRoZSBwYXlyb2xsIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGVzdGltYXRlIHdpbGwgZW5kXCJcIlwiXG4gIHBheXJvbGxFbmREYXRlOiBEYXRlIVxuICBcIlwiXCJOYW1lIG9mIHRoZSBwYXlyb2xsIHByb3ZpZGVyIChlLmcuIFwiZ3VzdG9cIikgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZXN0aW1hdGVcIlwiXCJcbiAgcGF5cm9sbFByb3ZpZGVyTmFtZTogU3RyaW5nIVxuICBcIlwiXCJXaGVuIHRoZSBwYXlyb2xsIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGVzdGltYXRlIHN0YXJ0ZWRcIlwiXCJcbiAgcGF5cm9sbFN0YXJ0RGF0ZTogRGF0ZSFcbn1cblxuXCJcIlwiWGVybyBjcmVkZW50aWFsIHBheWxvYWRcIlwiXCJcbnR5cGUgQ3JlZGVudGlhbFhlcm9QYXlsb2FkIHtcbiAgXCJcIlwiQm9vbGVhbiBkZXNjcmliaW5nIHdoZXRoZXIgdGhlIGNyZWRlbnRpYWwgaGFzIHRoZSByZXF1aXJlZCBzY29wZXMgZm9yIGVuYWJsaW5nIGJpbGwgc3luY1wiXCJcIlxuICBoYXNCaWxsU3luY1Njb3BlczogQm9vbGVhblxufVxuXG5lbnVtIFJlY2VpdmFibGVzT2ZmZXJzRmVlUHJvZ3JhbSB7XG4gIERFRkFVTFRcbiAgRlJFRVxuICBJTlZBTElEXG59XG5cbnR5cGUgQ29tcGxldGVQYXltZW50QXBwcm92YWxQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBwYXltZW50QXBwcm92YWw6IFBheW1lbnRBcHByb3ZhbCFcbiAgcGF5bWVudEFwcHJvdmFsUmVzdWx0OiBQYXltZW50QXBwcm92YWxSZXN1bHQhXG4gIHBheW1lbnRDb250ZXh0OiBEZXBvc2l0c1BheW1lbnQhXG59XG5cbnR5cGUgRmluYW5jaWFsSW5mb3JtYXRpb25SZXF1ZXN0RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IEZpbmFuY2lhbEluZm9ybWF0aW9uUmVxdWVzdFxufVxuXG50eXBlIEJ1bGtVc2VySW52aXRlRXJyb3Ige1xuICBlbWFpbDogU3RyaW5nXG4gIGVycm9yOiBTdHJpbmdcbn1cblxudHlwZSBSZXdhcmRzVHJpZ2dlclJlZmVycmVkQW1vdW50U3BlbnQge1xuICByZWZlcnJlZFJld2FyZDogUmV3YXJkc1BvaW50UmV3YXJkIVxuICB0cmlnZ2VyU3BlbmRBbW91bnQ6IEludCFcbn1cblxudHlwZSBSb2xlUnVsZSB7XG4gIGFjdGlvbnM6IFtTdHJpbmddXG4gIHByZWRpY2F0ZXM6IFtSb2xlUnVsZVByZWRpY2F0ZV1cbiAgcmVzb3VyY2VzOiBbU3RyaW5nXVxufVxuXG5lbnVtIE11dGVDb2x1bW4ge1xuICBBTExcbiAgREVQQVJUTUVOVFxuICBERVBBUlRNRU5UX0lEXG4gIElOVkFMSURcbiAgTUVSQ0hBTlRfSURcbiAgVVNFUl9JRFxufVxuXG50eXBlIFJlZnJlc2hGaW5hbmNpYWxTb3VyY2VQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICByZXN1bHQ6IEZpbmFuY2lhbHNTb3VyY2VSZXN1bHRcbn1cblxudHlwZSBFbmFibGVSZWltYnVyc2VtZW50c1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGludGVncmF0aW9uOiBJbnRlZ3JhdGlvblxufVxuXG5cIlwiXCJGaWx0ZXIgZmFjZXQgZm9yIGludGVncmF0aW9uIHJ1bGVzIChvbmx5IHVzZWQgZm9yIHN0YXRlbWVudCBlbnRyaWVzKVwiXCJcIlxudHlwZSBJbnRlZ3JhdGlvblJ1bGVzRmlsdGVyRmFjZXQgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIkEgbGlzdCBvZiBydWxlcyBtYXRjaGVzIHRoaXMgZmlsdGVyIGZhY2V0IHR5cGUgKG9ubHkgcmV0dXJuZWQgYnkgdW5leHBvcnRlZF9zdGF0ZW1lbnRfZW50cnlfZmlsdGVyX2ZhY2V0cylcIlwiXCJcbiAgcnVsZXM6IFtJbnRlZ3JhdGlvblJ1bGVdXG4gIFwiXCJcIkZpbHRlciBmYWNldCB0eXBlXCJcIlwiXG4gIHR5cGU6IEludGVncmF0aW9uUnVsZXNGaWx0ZXJGYWNldFR5cGVcbn1cblxuXCJcIlwiVGhlIGV2ZW50IG1ldGFkYXRhIGZvciBhIGRpc21pc3MgZXZlbnRcIlwiXCJcbnR5cGUgQ2FyZFRyYW5zYWN0aW9uc0luc2lnaHREaXNtaXNzRXZlbnRNZXRhZGF0YSB7XG4gIFwiXCJcIkFkZGl0aW9uYWwgZGVzY3JpcHRpb24gdGhlIHVzZXIgcHJvdmlkZWQgd2hlbiBkaXNtaXNzaW5nIGEgc3BlbmQgYWxlcnRcIlwiXCJcbiAgZGVzY3JpcHRpb246IFN0cmluZ1xuICBcIlwiXCJUaGUgcmVhc29uIHByb3ZpZGVkIGJ5IHRoZSB1c2VyIHdoeSB0aGUgc3BlbmQgYWxlcnQgaXMgZGlzbWlzc2VkXCJcIlwiXG4gIHJlYXNvbjogU3RyaW5nIVxufVxuXG5lbnVtIFVuZGVyd3JpdGluZ0FjY291bnRTdGF0dXNWMiB7XG4gIEFQUFJPVkVEXG4gIExPV19GSURFTElUWV9BUFBST1ZFRFxuICBNSVNTSU5HX0RBVEFfQVBQUk9WRURcbiAgUEVORElOR1xuICBSRUpFQ1RFRFxufVxuXG5lbnVtIFNjb3BlIHtcbiAgQUNDT1VOVFNfQ0FSRF9SRUFET05MWVxuICBBQ0NPVU5UU19DQVNIX1JFQURPTkxZXG4gIENBUkRfTlVNQkVSU19SRUFET05MWVxuICBDQVJEU1xuICBDQVJEU19SRUFET05MWVxuICBDQVNIX0FDQ09VTlRTX1JFQURPTkxZXG4gIENPTVBBTklFU19SRUFET05MWVxuICBERVBBUlRNRU5UU1xuICBERVBBUlRNRU5UU19SRUFET05MWVxuICBJTlZBTElEXG4gIExPQ0FUSU9OU1xuICBMT0NBVElPTlNfUkVBRE9OTFlcbiAgUkVGRVJSQUxTXG4gIFNUQVRFTUVOVFNfQ0FSRF9SRUFET05MWVxuICBTVEFURU1FTlRTX0NBU0hfUkVBRE9OTFlcbiAgVFJBTlNBQ1RJT05TX0NBUkRfUkVBRE9OTFlcbiAgVFJBTlNBQ1RJT05TX0NBU0hfUkVBRE9OTFlcbiAgVFJBTlNGRVJTXG4gIFRSQU5TRkVSU19SRUFET05MWVxuICBVU0VSU1xuICBVU0VSU19SRUFET05MWVxuICBWRU5ET1JTXG4gIFZFTkRPUlNfUkVBRE9OTFlcbn1cblxuaW5wdXQgVXBkYXRlVHJhbnNhY3Rpb25Mb2NhdGlvbklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBsb2NhdGlvbklkOiBTdHJpbmchXG4gIHRyYW5zYWN0aW9uSWQ6IElEIVxufVxuXG50eXBlIFJld2FyZHNSZWRlbXB0aW9uT2ZmZXIgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIG5hbWU6IFN0cmluZyFcbiAgcGF5bG9hZDogUmV3YXJkc1JlZGVtcHRpb25PZmZlclBheWxvYWQhXG4gIHR5cGU6IFJld2FyZHNSZWRlbXB0aW9uQ2xhc3NUeXBlIVxufVxuXG5lbnVtIEZpbmFuY2lhbEFjY291bnRUeXBlIHtcbiAgQ0hFQ0tJTkdcbiAgQ1JFRElUX0NBUkRcbiAgSU5WRVNUTUVOVFxuICBMSU5FX09GX0NSRURJVFxuICBMT0FOXG4gIE1PUlRHQUdFXG4gIFNBVklOR1Ncbn1cblxudHlwZSBSZXBsYWNlRnVuZGluZ1NvdXJjZVBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGZ1bmRpbmdTb3VyY2U6IEZ1bmRpbmdTb3VyY2UhXG59XG5cblwiXCJcIlxuUmVwcmVzZW50cyBhbiBuYW1lZCBib29sZWFuIHVzZWQgdG8gdHJhY2sgZGFzaGJvYXJkIGZsYWcgc3RhdGUsIGFzIGFuIGFsdGVybmF0aXZlXG50byB1c2luZyBsb2NhbHN0b3JhZ2UuXG5cIlwiXCJcbnR5cGUgU2VlbkZsYWcgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlNob3VsZCBrZXlzIGJlIGlnbm9yZWRcIlwiXCJcbiAgaXNEZXByZWNhdGVkOiBCb29sZWFuXG4gIFwiXCJcIk5hbWVkIHdpdGggdGhlIGNvbnZlbnRpb24gW1RlYW1dX1tMb2NhdGlvbl1fW0FjdGlvbl1cIlwiXCJcbiAga2V5OiBTZWVuRmxhZ0tleSFcbiAgXCJcIlwiTGFzdCBzZWVuXCJcIlwiXG4gIGxhc3RTZWVuQXQ6IFRpbWVcbiAgXCJcIlwiT25seSBib29sZWFuIHZhbHVlcyBzdXBwb3J0ZWRcIlwiXCJcbiAgdmFsdWU6IEJvb2xlYW5cbn1cblxuaW5wdXQgQ3JlYXRlRXhwZW5zZXNGbGFnRXZlbnRJbnB1dCB7XG4gIGFjdGlvbjogU3RyaW5nIVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgaXRlbUlkOiBJRCFcbiAgcnVsZUlkOiBJRCFcbn1cblxudHlwZSBFeHBlbnNlc0l0ZW1FdmVudEVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBFeHBlbnNlc0l0ZW1FdmVudFxufVxuXG50eXBlIFVwZGF0ZUNhcmRGcmF1ZEFsZXJ0c1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGZyYXVkQWxlcnRzOiBbRnJhdWRBbGVydCFdIVxufVxuXG50eXBlIENvdW50ZXJwYXJ0eUNvbm5lY3Rpb24ge1xuICBlZGdlczogW0NvdW50ZXJwYXJ0eUVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBHcm91cEFnZ3JlZ2F0aW9uRmllbGQge1xuICBjb3VudDogSW50IVxuICBrZXk6IFN0cmluZyFcbiAgc3VtOiBGbG9hdCFcbn1cblxuZW51bSBDaGFubmVsU3RhdHVzIHtcbiAgRElTQUJMRURcbiAgUEVORElOR19WRVJJRklDQVRJT05cbiAgUkVBRFlcbn1cblxuXCJcIlwiVGhlIG9yaWdpbmFsIGNvbnRhY3QgaW5wdXRcIlwiXCJcbnR5cGUgVmVuZG9yQ29udGFjdElucHV0RGF0YSB7XG4gIFwiXCJcIlZlbmRvcidzIEFDSCBQYXltZW50IEluc3RydW1lbnRcIlwiXCJcbiAgYWNoUGF5bWVudEluc3RydW1lbnQ6IEFjaFBheW1lbnRJbnN0cnVtZW50XG4gIFwiXCJcIlZlbmRvcidzIENoZXF1ZSBQYXltZW50IEluc3RydW1lbnRcIlwiXCJcbiAgY2hlcXVlUGF5bWVudEluc3RydW1lbnQ6IENoZXF1ZVBheW1lbnRJbnN0cnVtZW50XG4gIFwiXCJcIlZlbmRvcidzIERvbWVzdGljIFdpcmUgUGF5bWVudCBJbnN0cnVtZW50XCJcIlwiXG4gIGRvbWVzdGljV2lyZVBheW1lbnRJbnN0cnVtZW50OiBEb21lc3RpY1dpcmVQYXltZW50SW5zdHJ1bWVudFxuICBcIlwiXCJWZW5kb3IncyBlbWFpbFwiXCJcIlxuICBlbWFpbDogU3RyaW5nXG4gIFwiXCJcIkNsaWVudCBnZW5lcmF0ZWQgaWRlbXBvdGVuY3kga2V5XCJcIlwiXG4gIGlkZW1wb3RlbmN5S2V5OiBTdHJpbmchXG4gIFwiXCJcIlZlbmRvcidzIEludGVybmF0aW9uYWwgV2lyZSBQYXltZW50IEluc3RydW1lbnRcIlwiXCJcbiAgaW50ZXJuYXRpb25hbFdpcmVQYXltZW50SW5zdHJ1bWVudDogSW50ZXJuYXRpb25hbFdpcmVQYXltZW50SW5zdHJ1bWVudFxuICBcIlwiXCJOYW1lIG9mIHRoZSB2ZW5kb3IgKG5lZWRzIHRvIGJlIHVuaXF1ZSlcIlwiXCJcbiAgbmFtZTogU3RyaW5nIVxuICBcIlwiXCJWZW5kb3IncyBwaG9uZSBudW1iZXJcIlwiXCJcbiAgcGhvbmVOdW1iZXI6IFN0cmluZ1xufVxuXG5pbnB1dCBDcmVhdGVJbnRlZ3JhdGlvbklucHV0IHtcbiAgYmlsbHNFbmFibGVkOiBCb29sZWFuXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgY3JlZGVudGlhbElkOiBJRCFcbiAgbmV0c3VpdGVTdWJzaWRpYXJ5OiBTdWJzaWRpYXJ5SW5wdXRcbiAgc2NvcGVzOiBbSW50ZWdyYXRpb25TY29wZV0hXG4gIHZlcnNpb246IEludFxufVxuXG5lbnVtIFN5bmNTdGF0dXMge1xuICBFUlJPUlxuICBQRU5ESU5HXG59XG5cbnR5cGUgQ291bnRlcnBhcnR5IGltcGxlbWVudHMgTm9kZSB7XG4gIGFjY291bnROdW1iZXI6IFN0cmluZ1xuICBhY2hDb21wYW55SWQ6IFN0cmluZ1xuICBhZGRyZXNzOiBBZGRyZXNzXG4gIGFwcHJvdmVyVXNlcjogVXNlclxuICBiZW5lZmljaWFyeUJhbmtBZGRyZXNzOiBBZGRyZXNzXG4gIGJlbmVmaWNpYXJ5QmFua0luZm86IEpzb25cbiAgYmVuZWZpY2lhcnlCYW5rTmFtZTogU3RyaW5nXG4gIGNoZXF1ZVJlY2lwaWVudE5hbWU6IFN0cmluZ1xuICBjbGFzczogQ2xhc3NcbiAgZW1haWw6IFN0cmluZ1xuICBmaW5hbmNpYWxBY2NvdW50OiBGaW5hbmNpYWxBY2NvdW50XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBsb2NhdGlvbjogQWNjb3VudExvY2F0aW9uIVxuICBuYW1lOiBTdHJpbmchXG4gIHBheW1lbnRSYWlsOiBQYXltZW50UmFpbCFcbiAgcG9zaXRpdmVQYXlTdGF0dXM6IFBvc2l0aXZlUGF5U3RhdHVzXG4gIFwiXCJcIlxuICBTb21lIGJhbmtzIHJldHVybiBmYWtlL3ZpcnR1YWwgYWNjb3VudCBudW1iZXJzOyB3ZSBjYW4ndCB0ZWxsIGlmIGFjY291bnQgbnVtYmVycyBhcmUgcmVhbCBvciBub3RcbiAgVGhpcyBmaWVsZCBwcm92aWRlcyB0aGUgbGFzdCBjaGFyYWN0ZXJzICh1c3VhbGx5IGZvdXIsIGJ1dCBjYW4gdmFyeSkgb2YgdGhlIHJlYWwgYWNjb3VudCBudW1iZXJcbiAgXCJcIlwiXG4gIHJlYWxBY2NvdW50TnVtYmVyRW5kaW5nQ2hhcnM6IFN0cmluZ1xuICByb3V0aW5nTnVtYmVyOiBTdHJpbmdcbiAgdHlwZTogVHlwZVxufVxuXG50eXBlIEJ1bGtJbnZpdGVVc2Vyc1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHJlc3VsdHM6IFtCdWxrVXNlckludml0ZVJlc3VsdF0hXG59XG5cbnR5cGUgQ2FyZFBheW1lbnRGb3J3YXJkZXJDYXRlZ29yeSB7XG4gIGNhdGVnb3J5SWQ6IElEXG4gIG5hbWU6IFN0cmluZ1xufVxuXG50eXBlIFJlaW1idXJzZW1lbnRJdGVtRXZlbnQgaW1wbGVtZW50cyBOb2RlIHtcbiAgYWN0aW9uOiBSZWltYnVyc2VtZW50QWN0aW9uIVxuICBhcHByb3ZhbFJlcXVlc3RJZDogSURcbiAgY2FzaFRyYW5zYWN0aW9uSWRzOiBJRFxuICBjdXN0b21lckFjY291bnRJZDogSUQhXG4gIGN1c3RvbWVyVXNlcklkOiBJRCFcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIGluc2VydGVkQXQ6IFRpbWUhXG4gIG1vZGlmaWVkQnk6IFN0cmluZyFcbiAgcmVpbWJ1cnNlbWVudEl0ZW1JZDogSUQhXG4gIHJlaW1idXJzZW1lbnRNZXRhZGF0YTogUmVpbWJ1cnNlbWVudE1ldGFkYXRhXG4gIHN0YXRlOiBSZWltYnVyc2VtZW50SXRlbVN0YXRlXG4gIHVwZGF0ZWRBdDogVGltZSFcbn1cblxuaW5wdXQgQXR0cmlidXRpb25NZXRhZGF0YSB7XG4gIGZiYzogU3RyaW5nXG4gIGZicDogU3RyaW5nXG4gIGdjbGlkOiBTdHJpbmdcbn1cblxuZW51bSBPZmZlclNldHVwU3RlcFR5cGUge1xuICBBRERfRlVORFNcbiAgQVVUT1BBWVxuICBSRVZFTlVFX0FDQ0VTU1xufVxuXG5pbnB1dCBGaW5pY2l0eUNvbm5lY3RHZW5lcmF0ZUxpdGVVcmxJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaW5zdGl0dXRpb25JZDogSUQhXG59XG5cbnVuaW9uIERlcG9zaXRzUGF5bWVudERldGFpbHMgPSBBY2hEZXRhaWxzIHwgQnJleE9yaWdpbmF0ZWRDaGVxdWVEZXRhaWxzIHwgRGVwb3NpdHNQYXlyb2xsRXN0aW1hdGVEZXRhaWxzIHwgV2lyZURldGFpbHNcblxudHlwZSBSZXdhcmRzVHJpZ2dlckluc3RhbmNlRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IFJld2FyZHNUcmlnZ2VySW5zdGFuY2Vcbn1cblxudHlwZSBVcGRhdGVUcmFuc2FjdGlvbkNhdGVnb3J5UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uXG59XG5cbmVudW0gUHJvbW90aW9uc1R5cGUge1xuICBUSVBTX0FORF9SRUNTXG59XG5cblwiXCJcIkZTUCBhY2NvdW50IG9iamVjdFwiXCJcIlxudHlwZSBGc3BBY2NvdW50IHtcbiAgXCJcIlwiY3VzdG9tZXIgYWNjb3VudCBpZFwiXCJcIlxuICBjdXN0b21lckFjY291bnRJZDogU3RyaW5nIVxuICBcIlwiXCJhIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBjb21wYW55XCJcIlwiXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgXCJcIlwiYSBsaW5rIHRvIHZpZXcgbW9yZSBkZXRhaWxzIG9mIHRoZSBjb21wYW55XCJcIlwiXG4gIGRldGFpbHNMaW5rOiBTdHJpbmdcbiAgXCJcIlwidGhlIGdyb3VwIHVybiBjcmVhdGVkIGJ5IE1lZHVzYVwiXCJcIlxuICBncm91cFVybjogU3RyaW5nXG4gIFwiXCJcImEgbGluayB0byB0aGUgY29tcGFueSBsb2dvXCJcIlwiXG4gIGxvZ29MaW5rOiBTdHJpbmdcbiAgXCJcIlwiY29tcGFueSBuYW1lXCJcIlwiXG4gIG5hbWU6IFN0cmluZyFcbn1cblxudHlwZSBDYXNoVHJhbnNhY3Rpb25PdXRnb2luZ0NoZXF1ZVJldHVybkRldGFpbHMge1xuICBcIlwiXCJEZXRhaWxzIGZyb20gdGhlIHRyYW5zYWN0aW9uIHRoaXMgcmV0dXJuIHdhcyBmb3JcIlwiXCJcbiAgb3JpZ2luYWxEZXRhaWxzOiBDYXNoVHJhbnNhY3Rpb25PdXRnb2luZ0NoZXF1ZURldGFpbHMhXG4gIFwiXCJcIlRoZSByZWFzb24gd2h5IHRoZSBvcmlnaW5hbCB0cmFuc2FjdGlvbiB3YXMgcmV0dXJuZWRcIlwiXCJcbiAgcmV0dXJuUmVhc29uOiBDYXNoVHJhbnNhY3Rpb25DaGVxdWVSZXR1cm5SZWFzb24hXG59XG5cblwiXCJcIlN1YnNjcmlwdGlvbiBkZXRhaWxzIGZvciBhbiBFUlAgaW50ZWdyYXRpb25cIlwiXCJcbnR5cGUgRXJwU3Vic2NyaXB0aW9uRGV0YWlsIHtcbiAgXCJcIlwiVGhlIG5hbWUgb2YgdGhlIHN1YnNjcmlwdGlvbiBwbGFuXCJcIlwiXG4gIHN1YnNjcmlwdGlvblBsYW5OYW1lOiBTdHJpbmdcbiAgXCJcIlwiVGhlIHN0YXR1cyBvZiB0aGUgc3Vic2NyaXB0aW9uXCJcIlwiXG4gIHN1YnNjcmlwdGlvblN0YXR1czogU3RyaW5nXG4gIFwiXCJcIldoZXRoZXIgdGhlIHN1YnNjcmlwdGlvbiBwbGFuIHN1cHBvcnRzIGJpbGwgc3luY1wiXCJcIlxuICBzdXBwb3J0c0JpbGxTeW5jOiBCb29sZWFuXG59XG5cbnR5cGUgSW5jZW50aXZlUGxhY2VtZW50Vmlld0RhdGFDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtJbmNlbnRpdmVQbGFjZW1lbnRWaWV3RGF0YUVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBWYWxpZGF0ZUNoZXF1ZUltYWdlc1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGVycm9yUmVhc29uOiBTdHJpbmdcbiAgZXJyb3JTZXZlcml0eTogQ2hlcXVlSW1hZ2VWYWxpZGF0aW9uRXJyb3JTZXZlcml0eVxuICBwYXNzZWRWYWxpZGF0aW9uOiBCb29sZWFuIVxufVxuXG5cIlwiXCJNRkEgZGV2aWNlIHR5cGUgc2VsZWN0ZWQgYnkgdXNlciBmb3Igc2V0dGluZyB1cCB0aGUgTUZBIGRldmljZVwiXCJcIlxuZW51bSBNZmFQcmltYXJ5TWV0aG9kIHtcbiAgTUZBX1NNU1xuICBNRkFfVE9UUFxufVxuXG5lbnVtIFBheXJvbGxQcm92aWRlckludGVncmF0aW9uVHlwZSB7XG4gIEdVU1RPXG4gIElOVkFMSURcbn1cblxuaW5wdXQgRGlzYWJsZVVzZXJJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdXNlcklkOiBJRCFcbn1cblxuaW5wdXQgV2Vla2x5U2NoZWR1bGUge1xuICBkYXlPZldlZWs6IEJ1c2luZXNzRGF5cyFcbiAgbldlZWtzOiBJbnQhXG59XG5cbnR5cGUgR3VzdG9QYXlyb2xsSW5mbyB7XG4gIGFjY291bnRDbGFpbVVybDogU3RyaW5nXG59XG5cbnR5cGUgUHJvY2Vzc0ludm9pY2VBbmRDcmVhdGVCaWxsUGF5bG9hZCB7XG4gIGJpbGw6IEJpbGwhXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuXCJcIlwiRGV0YWlscyBhc3NvY2lhdGVkIHdpdGggdGhlIG9mZmVyXCJcIlwiXG50eXBlIFJlY2VpdmFibGVzT2ZmZXJzT2ZmZXJEZXRhaWxzIHtcbiAgXCJcIlwiVGhlIGFkdmFuY2UgcmF0ZSB1c2VkIGZvciBjYWxjdWxhdGluZyB0aGUgb2ZmZXJcIlwiXCJcbiAgYWR2YW5jZVJhdGU6IEZsb2F0XG4gIFwiXCJcIlRoZSBwcmV2aW91c2x5IGFkdmFuY2VkIGFtb3VudCBvbiB0aGUgcGF5b3V0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIG9mZmVyXCJcIlwiXG4gIGFkdmFuY2VkQW1vdW50OiBGaW5hbmNpYWxBc3NldFxuICBcIlwiXCJUaGUgZXN0aW1hdGVkIGxvYW4gcmVwYXltZW50cyBvbiB0aGUgcGF5b3V0IGFzc29jaWF0ZWQgd2l0aCB0aGUgb2ZmZXJcIlwiXCJcbiAgZXN0aW1hdGVkTG9hblJlcGF5bWVudHM6IEZpbmFuY2lhbEFzc2V0XG4gIFwiXCJcIlRoZSBlc3RpbWF0ZWQgdG90YWwgb2YgdGhlIHBheW91dCBhc3NvY2lhdGVkIHdpdGggdGhlIG9mZmVyXCJcIlwiXG4gIGVzdGltYXRlZFBheW91dDogRmluYW5jaWFsQXNzZXRcbiAgXCJcIlwiVGhlIGVzdGltYXRlZCByZXNlcnZlIGFtb3VudCBvbiB0aGUgcGF5b3V0IGFzc29jaWF0ZWQgd2l0aCB0aGUgb2ZmZXJcIlwiXCJcbiAgZXN0aW1hdGVkUmVzZXJ2ZUFtb3VudDogRmluYW5jaWFsQXNzZXRcbiAgXCJcIlwiVGhlIGVzdGltYXRlZCByZXNlcnZlIHBlcmNlbnRhZ2Ugb24gdGhlIHBheW91dCBhc3NvY2lhdGVkIHdpdGggdGhlIG9mZmVyXCJcIlwiXG4gIGVzdGltYXRlZFJlc2VydmVQZXJjZW50YWdlOiBGbG9hdFxuICBcIlwiXCJUaGUgbmV0IHNhbGVzIG9uIHRoZSBwYXlvdXQgYXNzb2NpYXRlZCB3aXRoIHRoZSBvZmZlclwiXCJcIlxuICBwYXlvdXROZXRTYWxlczogRmluYW5jaWFsQXNzZXRcbiAgXCJcIlwiVGhlIHJlc2VydmUgY3JlZGl0IG9uIHRoZSBwYXlvdXQgYXNzb2NpYXRlZCB3aXRoIHRoZSBvZmZlclwiXCJcIlxuICBwYXlvdXRSZXNlcnZlQ3JlZGl0OiBGaW5hbmNpYWxBc3NldFxuICBcIlwiXCJUaGUgcmVzZXJ2ZSBkZWJpdCBvbiB0aGUgcGF5b3V0IGFzc29jaWF0ZWQgd2l0aCB0aGUgb2ZmZXJcIlwiXCJcbiAgcGF5b3V0UmVzZXJ2ZURlYml0OiBGaW5hbmNpYWxBc3NldFxufVxuXG50eXBlIENvbm5lY3RDcmVkZW50aWFsUGF5bG9hZCB7XG4gIGF1dGhlbnRpY2F0aW9uUmVzdWx0OiBDcmVkZW50aWFsQXV0aGVudGljYXRpb25SZXN1bHRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5pbnB1dCBBcHByb3ZhbHNSZXF1ZXN0SW5wdXQge1xuICBjdXN0b21lckFjY291bnRJZDogSURcbiAgY3VzdG9tZXJVc2VySWQ6IElEXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgaWQ6IElEIVxuICBpbnNlcnRlZEF0OiBUaW1lXG4gIG1vbnRobHlMaW1pdE92ZXJyaWRlTWV0YWRhdGE6IEFwcHJvdmFsc1JlcXVlc3RNb250aGx5TGltaXRPdmVycmlkZUlucHV0XG4gIHByZWFwcHJvdmVkQ2FyZE1ldGFkYXRhOiBBcHByb3ZhbHNSZXF1ZXN0UHJlYXBwcm92ZWRDYXJkSW5wdXRcbiAgcmVpbWJ1cnNlbWVudE1ldGFkYXRhOiBBcHByb3ZhbHNSZXF1ZXN0UmVpbWJ1cnNlbWVudElucHV0XG4gIHN0YXR1czogQXBwcm92YWxzUmVxdWVzdFN0YXR1c1xuICB0eXBlOiBBcHByb3ZhbHNSZXF1ZXN0VHlwZSFcbn1cblxuaW5wdXQgVXBkYXRlVHJhbnNhY3Rpb25JbnRlZ3JhdGlvbkN1c3RvbWVySW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGludGVncmF0aW9uQ3VzdG9tZXJJZDogU3RyaW5nIVxuICB0cmFuc2FjdGlvbklkOiBJRCFcbn1cblxuZW51bSBEaXNwdXRlQ2FyZFBvc3Nlc3Npb24ge1xuICBESVNQVVRFX0NBUkRfUE9TU0VTU0lPTl9OT19MT1NUXG4gIERJU1BVVEVfQ0FSRF9QT1NTRVNTSU9OX05PX1NUT0xFTlxuICBESVNQVVRFX0NBUkRfUE9TU0VTU0lPTl9OT19VTktOT1dOXG4gIERJU1BVVEVfQ0FSRF9QT1NTRVNTSU9OX1VOS05PV05cbiAgRElTUFVURV9DQVJEX1BPU1NFU1NJT05fVklSVFVBTF9DQVJEXG4gIERJU1BVVEVfQ0FSRF9QT1NTRVNTSU9OX1lFU1xufVxuXG5lbnVtIEludGVybmFsRW50aXR5U3luY1N0YXR1cyB7XG4gIEVSUk9SXG4gIFBFTkRJTkdcbn1cblxudHlwZSBOb3RpZmljYXRpb25TdWJzY3JpcHRpb25Db25uZWN0aW9uIHtcbiAgZWRnZXM6IFtOb3RpZmljYXRpb25TdWJzY3JpcHRpb25FZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbmlucHV0IENhbmNlbFBheW1lbnRJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGVwb3NpdHNBY2NvdW50SWQ6IElEIVxuICBwYXltZW50SWQ6IElEIVxuICByZWN1cnJpbmdQYXltZW50Q2FuY2VsbGF0aW9uVHlwZTogRGVwb3NpdHNSZWN1cnJpbmdQYXltZW50Q2FuY2VsbGF0aW9uVHlwZVxufVxuXG50eXBlIERlcG9zaXRzU3RhdGVtZW50IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBuYW1lOiBTdHJpbmchXG4gIHBlcmlvZEVuZFRpbWU6IFRpbWUhXG4gIHBlcmlvZFN0YXJ0VGltZTogVGltZSFcbn1cblxudHlwZSBUb2dnbGVSdWxlUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuaW5wdXQgQXBwcm92YWxzVXNlclR5cGVNYW5hZ2VySW5wdXQge1xuICBcIlwiXCJUaGUgZmFsbGJhY2sgdXNlciBpZCB3aGVuIHRoZSByZXF1ZXN0IGluaXRpYXRvciBkb2VzIG5vdCBoYXZlIGEgbWFuYWdlclwiXCJcIlxuICBmYWxsYmFja1VzZXJJZDogSUQhXG59XG5cbnR5cGUgU3RhcnREZXBvc2l0c09mZmJvYXJkaW5nUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGVwb3NpdHNBY2NvdW50OiBEZXBvc2l0c0FjY291bnQhXG59XG5cblwiXCJcIkEgY3ljbGUgcmVvY2N1cnJpbmcgZXZlcnkgTiBkYXlzLlwiXCJcIlxudHlwZSBFdmVyeU5EYXlzQ2FyZFN0YXRlbWVudFBvbGljeUN5Y2xlIHtcbiAgXCJcIlwiVGhlIG51bWJlciBvZiBkYXlzIGEgY3ljbGUgbGFzdHMuXCJcIlwiXG4gIG51bURheXM6IEludFxufVxuXG5pbnB1dCBDYXJkUGF5bWVudEZvcndhcmRlckludm9pY2VJbnB1dCB7XG4gIGludm9pY2VBc3NldElkOiBTdHJpbmdcbiAgaW52b2ljZU51bWJlcjogU3RyaW5nXG59XG5cbnR5cGUgUmV2b2tlRGV2ZWxvcGVyQXBpVG9rZW5QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBzdWNjZXNzOiBCb29sZWFuXG59XG5cbnR5cGUgUHJvbW90aW9uc0N0YSB7XG4gIFwiXCJcIkFuIGVudW0gb2YgYWxsIHBvc3NpYmxlIGFjdGlvbnNcIlwiXCJcbiAgYWN0aW9uOiBQcm9tb3Rpb25zQ3RhQWN0aW9uXG4gIFwiXCJcIkNUQSBidXR0b24gdGV4dC4gVXN1YWxseSB3aWxsIGJlIExlYXJuIE1vcmVcIlwiXCJcbiAgdGV4dDogU3RyaW5nXG59XG5cbmVudW0gUmV3YXJkc1BvaW50c0hpc3RvcnlFbnRyeVR5cGUge1xuICBBQ0NSVUFMXG4gIElOVkFMSURcbiAgUkVERU1QVElPTlxufVxuXG5cIlwiXCJGaWx0ZXIgZmFjZXQgZm9yIGludGVncmF0aW9uIHJ1bGVzIChvbmx5IHVzZWQgZm9yIGV4cGVuc2VzKVwiXCJcIlxudHlwZSBNYXRjaGluZ1J1bGVzRmlsdGVyRmFjZXQgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiRmlsdGVyIGZhY2V0IHR5cGVcIlwiXCJcbiAgZmFjZXRUeXBlOiBGYWNldFR5cGVcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIkEgbGlzdCBvZiBydWxlIElEcyBtYXRjaGVzIHRoaXMgZmlsdGVyIGZhY2V0IHR5cGVcIlwiXCJcbiAgcnVsZUlkczogW1N0cmluZ11cbiAgXCJcIlwiQSBsaXN0IG9mIHJ1bGVzIG1hdGNoZXMgdGhpcyBmaWx0ZXIgZmFjZXQgdHlwZVwiXCJcIlxuICBydWxlczogW0ludGVncmF0aW9uUnVsZV1cbn1cblxuXCJcIlwiUGF5bG9hZCBmb3IgUGVyc29uYSBpbmZvcm1hdGlvbiByZXF1ZXN0XCJcIlwiXG50eXBlIE9uYm9hcmRpbmdGb3JtUGVyc29uYSB7XG4gIFwiXCJcIk5hbWUgb2YgaW5kaXZpZHVhbCBmb3Igd2hvbSBJRCBpcyByZXF1ZXN0ZWRcIlwiXCJcbiAgaW5kaXZpZHVhbDogU3RyaW5nXG4gIFwiXCJcIkluZGljYXRlcyBpZiBpbmRpdmlkdWFsIGlzIHRoZSBhcHBsaWNhbnRcIlwiXCJcbiAgaXNBcHBsaWNhbnQ6IEJvb2xlYW5cbiAgXCJcIlwiTGlzdCBvZiB1c2VyIHJvbGVzIHRvIGlkZW50aWZ5IEJPL0NPIGV0Yy5cIlwiXCJcbiAgcm9sZXM6IFtTdHJpbmddXG4gIFwiXCJcIlRlbXBsYXRlIElEXCJcIlwiXG4gIHRlbXBsYXRlSWQ6IFN0cmluZ1xufVxuXG5lbnVtIFJpc2tUaWVyIHtcbiAgXCJcIlwiSGlnaCByaXNrOiBsaW1pdGVkIGZlYXR1cmUgYWNjZXNzLCBwb3RlbnRpYWxseSBvZmZib2FyZFwiXCJcIlxuICBISUdIXG4gIFwiXCJcIkxvdyByaXNrOiBmdWxsIGZlYXR1cmUgYWNjZXNzXCJcIlwiXG4gIExPV1xuICBcIlwiXCJNZWQgcmlzazogbGltaXRlZCBmZWF0dXJlIGFjY2Vzc1wiXCJcIlxuICBNRURJVU1cbiAgXCJcIlwiUmlzayBldmFsdWF0aW9uIGhhcyBub3QgeWV0IGJlZW4gcGVyZm9ybWVkIG9uIHRoaXMgYWNjb3VudFwiXCJcIlxuICBQRU5ESU5HXG59XG5cbnR5cGUgT25ib2FyZGluZ1BhZ2VEVGVybXMge1xuICBfOiBCb29sZWFuXG4gIGNvbnRlbnQ6IE9uYm9hcmRpbmdGb3JtRW1wdHkhXG59XG5cbmVudW0gUmVjZWl2YWJsZXNPZmZlcnNWZW5kb3JUeXBlIHtcbiAgQU1BWk9OX01XU1xuICBBTUFaT05fU1BcbiAgSU5WQUxJRFxuICBQQVlQQUxcbiAgU0hPUElGWVxuICBTUVVBUkVcbiAgU1RSSVBFXG4gIFdBTE1BUlRcbn1cblxuaW5wdXQgVXNlckNhdGVnb3J5SW5wdXQge1xuICBpZDogSUQhXG4gIGlzRGlzYWJsZWQ6IEJvb2xlYW5cbn1cblxuXCJcIlwiQSBjb250YWN0IGlucHV0IHRvIGJlIHZhbGlkYXRlZCBvciBjcmVhdGVkIChuZWVkcyBhdCBsZWFzdCBvbmUgcGF5bWVudCBpbnN0cnVtZW50IHRvIGJlIHZhbGlkKVwiXCJcIlxuaW5wdXQgVmVuZG9yQ29udGFjdElucHV0IHtcbiAgXCJcIlwiVmVuZG9yJ3MgQUNIIFBheW1lbnQgSW5zdHJ1bWVudFwiXCJcIlxuICBhY2hQYXltZW50SW5zdHJ1bWVudDogQWNoUGF5bWVudEluc3RydW1lbnRJbnB1dFxuICBcIlwiXCJWZW5kb3IncyBDaGVxdWUgUGF5bWVudCBJbnN0cnVtZW50XCJcIlwiXG4gIGNoZXF1ZVBheW1lbnRJbnN0cnVtZW50OiBDaGVxdWVQYXltZW50SW5zdHJ1bWVudElucHV0XG4gIFwiXCJcIlZlbmRvcidzIERvbWVzdGljIFdpcmUgUGF5bWVudCBJbnN0cnVtZW50XCJcIlwiXG4gIGRvbWVzdGljV2lyZVBheW1lbnRJbnN0cnVtZW50OiBEb21lc3RpY1dpcmVQYXltZW50SW5zdHJ1bWVudElucHV0XG4gIFwiXCJcIlZlbmRvcidzIGVtYWlsXCJcIlwiXG4gIGVtYWlsOiBTdHJpbmdcbiAgXCJcIlwiQ2xpZW50IGdlbmVyYXRlZCBpZGVtcG90ZW5jeSBrZXlcIlwiXCJcbiAgaWRlbXBvdGVuY3lLZXk6IFN0cmluZyFcbiAgXCJcIlwiVmVuZG9yJ3MgSW50ZXJuYXRpb25hbCBXaXJlIFBheW1lbnQgSW5zdHJ1bWVudFwiXCJcIlxuICBpbnRlcm5hdGlvbmFsV2lyZVBheW1lbnRJbnN0cnVtZW50OiBJbnRlcm5hdGlvbmFsV2lyZVBheW1lbnRJbnN0cnVtZW50SW5wdXRcbiAgXCJcIlwiTmFtZSBvZiB0aGUgdmVuZG9yIChuZWVkcyB0byBiZSB1bmlxdWUpXCJcIlwiXG4gIG5hbWU6IFN0cmluZyFcbiAgXCJcIlwiVmVuZG9yJ3MgcGhvbmUgbnVtYmVyXCJcIlwiXG4gIHBob25lTnVtYmVyOiBTdHJpbmdcbn1cblxudHlwZSBEYXRlSGlzdG9ncmFtQWdncmVnYXRpb25SZXN1bHQge1xuICBuYW1lOiBTdHJpbmchXG4gIHNlcmllczogW0RhdGVIaXN0b2dyYW1BZ2dyZWdhdGlvbkZpZWxkXSFcbn1cblxudHlwZSBPbmJvYXJkaW5nRm9ybVV3QmFua0Nvbm5lY3Rpb24ge1xuICBfOiBCb29sZWFuXG59XG5cbnR5cGUgUmVjZWl2YWJsZXNPZmZlcnNBZHZhbmNlRGV0YWlscyB7XG4gIHJlc291cmNlSWQ6IFN0cmluZ1xufVxuXG51bmlvbiBNdXRlVmFsdWVUeXBlID0gTXV0ZVZhbHVlRGVwYXJ0bWVudCB8IE11dGVWYWx1ZU1lcmNoYW50IHwgTXV0ZVZhbHVlUmF3IHwgTXV0ZVZhbHVlVXNlclxuXG5pbnB1dCBNYXJrSW52b2ljZUlucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nIVxuICBpbnZvaWNlSWQ6IElEIVxuICBuZXdTdGF0dXM6IEludm9pY2VTdGF0dXMhXG59XG5cbnR5cGUgRXhwb3J0RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IEV4cG9ydFxufVxuXG5pbnB1dCBVcGRhdGVJbnRlZ3JhdGlvbkNyZWRlbnRpYWxJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgXCJcIlwiSUQgb2YgbmV3IGNyZWRlbnRpYWxcIlwiXCJcbiAgY3JlZGVudGlhbElkOiBJRCFcbiAgXCJcIlwiSUQgb2YgaW50ZWdyYXRpb24gd2hvc2UgY3JlZGVudGlhbCBpcyBnZXR0aW5nIGNoYW5nZWRcIlwiXCJcbiAgaW50ZWdyYXRpb25JZDogSUQhXG59XG5cbnR5cGUgTWVyY2hhbnRJY29uIGltcGxlbWVudHMgTm9kZSB7XG4gIGFzc2V0OiBBc3NldFxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbn1cblxudHlwZSBVbmV4cG9ydGVkU3RhdGVtZW50RW50cnlDb3VudCB7XG4gIGNvdW50OiBJbnRcbn1cblxuZW51bSBBY2NlcHRDcmVkaXRNYXJrZXRpbmdPZmZlclJlc3VsdCB7XG4gIEZBSUxFRF9DUkVESVRfSEFSRF9QVUxMXG4gIEZBSUxFRF9VTktOT1dOXG4gIEZBSUxFRF9VU0VSX0lERU5USVRZX1ZFUklGSUNBVElPTlxuICBGUk9aRU5fQ1JFRElUX1BST0ZJTEVcbiAgT0ZGRVJfRVhQSVJFRFxuICBTVUNDRVNTXG59XG5cbmlucHV0IFNldFJlY2VpdmFibGVzT2ZmZXJzQ29uZmlybWVkUGF5b3V0c1JvdXRlZFRvQnJleElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB2YWx1ZTogQm9vbGVhbiFcbn1cblxudHlwZSBDcmVhdGVQYXltZW50RWFybHlBdXRoQmFsYW5jZURlY3JlYXNlQ29tbWl0bWVudFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHBheW1lbnRFYXJseUF1dGhCYWxhbmNlRGVjcmVhc2VDb21taXRtZW50OiBQYXltZW50RWFybHlBdXRoQmFsYW5jZURlY3JlYXNlQ29tbWl0bWVudCFcbn1cblxuXCJcIlwiVGhlIGluZGl2aWR1YWwgcmVzdWx0IGZvciBhbiBpbmR1c3RyeSBzZWFyY2hcIlwiXCJcbnR5cGUgSW5kdXN0cnlTZWFyY2hSZXN1bHRFbnRyeSBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiVGhlIGluZHVzdHJ5IGZvciBlYWNoIHJlc3VsdFwiXCJcIlxuICBpbmR1c3RyeTogSW5kdXN0cnkhXG59XG5cbmVudW0gQ2xhc3Mge1xuICBCVVNJTkVTU1xuICBQRVJTT05BTFxufVxuXG5lbnVtIEZpTmJmaVJlZ2lzdHJhdGlvblN0YXR1cyB7XG4gIEFQUExJRURfQU5EX1JFSkVDVEVEXG4gIEFQUExJRURfQU5EX1dBSVRJTkdfT05fQV9ERUNJU0lPTlxuICBDVVJSRU5UTFlfUkVHSVNURVJFRFxuICBET19OT1RfUExBTl9UT19SRUdJU1RFUlxuICBJTlZBTElEXG4gIFBMQU5fVE9fUkVHSVNURVJcbn1cblxuXCJcIlwiVGhlIGhpZ2ggbGV2ZWwgb2JqZWN0IHJlcHJlc2VudHMgYW4gYXBwcm92YWwgcmVxdWVzdFwiXCJcIlxudHlwZSBBcHByb3ZhbHNSZXF1ZXN0IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBkZXNjcmlwdGlvbiBlbnRlcmVkIGJ5IHRoZSB1c2VyXCJcIlwiXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlRoZSB0aW1lIHdoZW4gdGhpcyByZXF1ZXN0IGlzIGNyZWF0ZWRcIlwiXCJcbiAgaW5zZXJ0ZWRBdDogVGltZVxuICBcIlwiXCJUaGUgcmVxdWVzdCBtZXRhZGF0YVwiXCJcIlxuICByZXF1ZXN0TWV0YWRhdGE6IEFwcHJvdmFsc1JlcXVlc3RNZXRhZGF0YSFcbiAgXCJcIlwiQSBsaXN0IG9mIGFwcHJvdmFsIHN0ZXBzXCJcIlwiXG4gIHJlcXVpcmVkQXBwcm92YWxTdGVwczogW1JlcXVpcmVkQXBwcm92YWxTdGVwXVxuICBcIlwiXCJBIGxpc3Qgb2YgcmV2aWV3IG9iamVjdHMgYXNzb2NpYXRlIHdpdGggdGhpcyByZXF1ZXN0LiBUaGUgcmVzdWx0cyBhcmUgc29ydGVkIGJ5IGluc2VydGVkX2F0IGluIGFzY2VuZGluZyBvcmRlclwiXCJcIlxuICByZXZpZXdzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBBcHByb3ZhbHNSZXZpZXdDb25uZWN0aW9uXG4gIFwiXCJcIlRoZSByZXF1ZXN0IHN0YXR1c1wiXCJcIlxuICBzdGF0dXM6IEFwcHJvdmFsc1JlcXVlc3RTdGF0dXMhXG4gIFwiXCJcIlRoZSByZXF1ZXN0IHR5cGVcIlwiXCJcbiAgdHlwZTogQXBwcm92YWxzUmVxdWVzdFR5cGUhXG4gIFwiXCJcIlRoZSB1c2VyIHdobyBjcmVhdGVzIHRoaXMgcmVxdWVzdFwiXCJcIlxuICB1c2VyOiBBcHByb3ZhbHNVc2VyIVxufVxuXG50eXBlIFVwZGF0ZVBheW1lbnRTb3VyY2VQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5lbnVtIExveWFsdHlQcm9ncmFtQWxsaWFuY2Uge1xuICBFTUlSQVRFU19TS1lXQVJEU1xuICBPTkVfV09STERcbiAgU0tZX1RFQU1cbiAgU1RBUl9BTExJQU5DRVxuICBUUlVFQkxVRVxufVxuXG50eXBlIERlcG9zaXRzQWNjb3VudENvbm5lY3Rpb24ge1xuICBlZGdlczogW0RlcG9zaXRzQWNjb3VudEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBEZXBvc2l0c1Byb2Nlc3NpbmdBbmRGdXR1cmVQYXltZW50RGF0ZSBpbXBsZW1lbnRzIE5vZGUge1xuICBhbW91bnQ6IEludFxuICBlc3RpbWF0ZWRBcnJpdmFsVGltZTogVGltZSFcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIHNlbmRBdDogVGltZSFcbiAgc2VuZE9uOiBEYXRlIVxuICBzdGF0dXM6IERlcG9zaXRzUGF5bWVudFN0YXR1cyFcbn1cblxudHlwZSBDYXJkT3ZlcnZpZXdTdW1tYXJ5VGlsZUVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBcIlwiXCJDYXJkIE92ZXJ2aWV3IFN1bW1hcnkgVGlsZSBOb2RlXCJcIlwiXG4gIG5vZGU6IENhcmRPdmVydmlld1N1bW1hcnlUaWxlXG59XG5cbmVudW0gUmVwb3J0VHlwZSB7XG4gIERfVFxuICBSX1JcbiAgU0VBUkNIXG4gIFdfRFxufVxuXG5cIlwiXCJBIGZhY3RvciB0aGF0IGltcGFjdHMgYSBjcmVkaXQgbGltaXRcIlwiXCJcbnR5cGUgVW5kZXJ3cml0aW5nTGltaXRGYWN0b3IgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIldoZW4gdGhlIHZhbHVlIHdhcyBsYXN0IHVwZGF0ZWRcIlwiXCJcbiAgbGFzdFVwZGF0ZWQ6IFRpbWVcbiAgXCJcIlwiVGhlIHR5cGUgb2YgZmFjdG9yXCJcIlwiXG4gIGxpbWl0RmFjdG9yOiBVbmRlcndyaXRpbmdMaW1pdEZhY3RvclR5cGUhXG4gIFwiXCJcIlRoZSBzY29yZSBvciB2YWx1ZSBvZiB0aGUgZmFjdG9yXCJcIlwiXG4gIHNjb3JlOiBJbnQhXG59XG5cbnR5cGUgQ2FzaFRyYW5zYWN0aW9uUmVjZWl2YWJsZXNPZmZlcnNDb2xsZWN0aW9uRGV0YWlscyB7XG4gIF86IEJvb2xlYW5cbn1cblxuZW51bSBDYXJkUGF5bWVudEZvcndhcmRlclBheW1lbnRTdGF0dXMge1xuICBDT01QTEVURURcbiAgRFJBRlRcbiAgRkFJTEVEXG4gIElOX1RSQU5TSVRcbiAgSU5WQUxJRFxuICBQRU5ESU5HXG4gIFBSRUZMSUdIVF9SRVZJRVdcbiAgUkVGVU5ERURcbiAgUkVKRUNURURcbiAgVU5ERVJfUkVWSUVXXG59XG5cbnR5cGUgVXBkYXRlQ29udGFjdFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGNvbnRhY3Q6IFBheW1lbnRDb250YWN0IVxufVxuXG5lbnVtIFByZW1pdW1TZXR0aW5nRXZlbnRBY3Rpb24ge1xuICBBQ1RJVkFURVxuICBDQU5DRUxcbiAgSU5WQUxJRFxuICBVUERBVEVfUFJJQ0lOR19TQ0hFTUVcbn1cblxudHlwZSBFeHBlbnNlc1J1bGVFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogRXhwZW5zZXNSdWxlXG59XG5cbnVuaW9uIFBheXJvbGxJbmZvID0gR3VzdG9QYXlyb2xsSW5mb1xuXG50eXBlIENyZWRlbnRpYWxBbWF6b25Nd3NQYXlsb2FkIHtcbiAgc2VsbGVySWQ6IFN0cmluZ1xufVxuXG50eXBlIExveWFsdHlQcm9ncmFtRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IExveWFsdHlQcm9ncmFtXG59XG5cbnR5cGUgUmVmdW5kUGF5bWVudFBheWxvYWQge1xuICBwYXltZW50OiBDYXJkUGF5bWVudEZvcndhcmRlclBheW1lbnRPYmplY3QhXG59XG5cbmlucHV0IENhbGN1bGF0ZUNyZWRpdE1hcmtldGluZ09mZmVySW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGNyZWRpdE1hcmtldGluZ09mZmVySWQ6IElEIVxuICBzc25MYXN0Rm91cjogU3RyaW5nIVxufVxuXG50eXBlIFB1c2hNYXJrZXRvTGVhZHNQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBzdWNjZXNzOiBCb29sZWFuXG59XG5cbmlucHV0IEdlbmVyYXRlRGVwb3NpdHNTdGF0ZW1lbnREb2N1bWVudERvd25sb2FkVXJsSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRlcG9zaXRzU3RhdGVtZW50SWQ6IElEIVxufVxuXG50eXBlIFNoaXBwaW5nQWRkcmVzcyB7XG4gIFwiXCJcIkFkZHJlc3MgaW5mbywgcmVxdWlyZWQgZmllbGRcIlwiXCJcbiAgYWRkcmVzczogQWRkcmVzcyFcbiAgXCJcIlwiRmlyc3QgbmFtZSwgcmVxdWlyZWQgZmllbGRcIlwiXCJcbiAgZmlyc3ROYW1lOiBTdHJpbmchXG4gIFwiXCJcIkxhc3QgbmFtZSwgcmVxdWlyZWQgZmllbGRcIlwiXCJcbiAgbGFzdE5hbWU6IFN0cmluZyFcbn1cblxudHlwZSBTZW5kTW9iaWxlQ2hlcXVlRGVwb3NpdE5vdGlmaWNhdGlvblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbmVudW0gUmV3YXJkc01hcmtldHBsYWNlVXBzZWxsIHtcbiAgVVBTRUxMX1NIT1dfQVBQTEVfUkVXQVJEU1xuICBVUFNFTExfVE9fQlJFWDFcbiAgVVBTRUxMX1RPX0NBU0hcbn1cblxudHlwZSBDcmVhdGVBY2NvdW50UGF5bG9hZCB7XG4gIGFjY291bnQ6IEFjY291bnRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG51bmlvbiBPbmJvYXJkaW5nU3VibWl0dGFibGVQYWdlID0gT25ib2FyZGluZ1BhZ2VEU3VpdGFiaWxpdHkgfCBPbmJvYXJkaW5nUGFnZURUZXJtcyB8IE9uYm9hcmRpbmdQYWdlRW1haWxWZXJpZmljYXRpb24gfCBPbmJvYXJkaW5nUGFnZUZvcm0gfCBPbmJvYXJkaW5nUGFnZUZ1bmRpbmdTb3VyY2UgfCBPbmJvYXJkaW5nUGFnZU1mYSB8IE9uYm9hcmRpbmdQYWdlUGVyaW9kaWNSZXZpZXcgfCBPbmJvYXJkaW5nUGFnZVBlcnNvbmEgfCBPbmJvYXJkaW5nUGFnZVRlcm1zIHwgT25ib2FyZGluZ1BhZ2VVd0JhbmtDb25uZWN0aW9uIHwgT25ib2FyZGluZ1BhZ2VVd0Vjb21tZXJjZUNvbm5lY3Rpb25cblxudHlwZSBDYW5jZWxSZWltYnVyc2VtZW50UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcmVpbWJ1cnNlbWVudEl0ZW06IFJlaW1idXJzZW1lbnRJdGVtIVxufVxuXG5cIlwiXCJDb25uZWN0aW9uIE5vZGUgVHlwZSBOb3RpZmljYXRpb24gVGlsZVwiXCJcIlxudHlwZSBOb3RpZmljYXRpb25UaWxlQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbTm90aWZpY2F0aW9uVGlsZUVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBDcmVhdGVIcmlzQ29ubmVjdGlvblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIFwiXCJcIlRoZSBocmlzIGNvbm5lY3Rpb24gcmVzb3VyY2Ugd2UgZXN0YWJsaXNoZWQgd2l0aCB0aGUgaHJpcyB2ZW5kb3JcIlwiXCJcbiAgaHJpc0Nvbm5lY3Rpb246IEhyaXNDb25uZWN0aW9uIVxufVxuXG50eXBlIEdyb3VwQWdncmVnYXRpb25SZXN1bHQge1xuICBuYW1lOiBTdHJpbmchXG4gIHZhbHVlczogW0dyb3VwQWdncmVnYXRpb25GaWVsZF1cbn1cblxuaW5wdXQgU3VibWl0UmVpbWJ1cnNlbWVudElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICByZWltYnVyc2VtZW50SXRlbUlkOiBJRFxuICB1cGRhdGVkUmVpbWJ1cnNlbWVudE1ldGFkYXRhOiBSZWltYnVyc2VtZW50TWV0YWRhdGFJbnB1dFxufVxuXG5cIlwiXCJJbnNpZ2h0cyBxdWVyeSBuYW1lc3BhY2VcIlwiXCJcbnR5cGUgSW5zaWdodHMge1xuICBcIlwiXCJRdWVyeSBmb3IgYXZhaWxhYmxlIGJhbGFuY2Ugc25hcHNob3RzXCJcIlwiXG4gIGF2YWlsYWJsZUJhbGFuY2VTbmFwc2hvdHMoZGVwb3NpdHNBY2NvdW50SWQ6IFN0cmluZywgdGltZXN0YW1wczogW1RpbWUhXSk6IFtJbnNpZ2h0c0F2YWlsYWJsZUJhbGFuY2VTbmFwc2hvdCFdIVxuICBcIlwiXCJRdWVyeSBmb3IgY2FzaCBpbnNpZ2h0IHRyYW5zYWN0aW9uIGFnZ3JlZ2F0ZXMgdGltZSBzZXJpZXMgZGF0YVwiXCJcIlxuICBjYXNoRmxvd0FnZ3JlZ2F0ZVRpbWVTZXJpZXMoZGVwb3NpdHNBY2NvdW50SWQ6IFN0cmluZywgZW5kQXQ6IFRpbWUsIHN0YXJ0QXQ6IFRpbWUhLCB0aW1lQnVja2V0OiBJbnNpZ2h0c1RpbWVVbml0ISwgdGltZUJ1Y2tldFN0cmF0ZWd5OiBUaW1lQnVja2V0U3RyYXRlZ3kpOiBbSW5zaWdodHNBZ2dyZWdhdGVUcmFuc2FjdGlvbiFdIVxuICBcIlwiXCJGZXRjaCBydW53YXkgaW5zaWdodFwiXCJcIlxuICBydW53YXlJbnNpZ2h0KHByb2plY3Rpb25FbmRzQXQ6IERhdGUhLCBwcm9qZWN0aW9uU3RhcnRzQXQ6IERhdGUsIHRpbWVCdWNrZXQ6IEluc2lnaHRzVGltZVVuaXQhLCB0aW1lQnVja2V0U3RyYXRlZ3k6IFRpbWVCdWNrZXRTdHJhdGVneSEpOiBJbnNpZ2h0c1J1bndheUluc2lnaHQhXG59XG5cbmVudW0gU3luY1JlYWR5U3RhdHVzIHtcbiAgSEFTX0NPTkZMSUNUXG4gIElOVkFMSURfRklFTERTXG4gIElOVkFMSURfUkVJTUJVUlNFTUVOVF9BQ0NPVU5UXG4gIFBBWUxPQURfSU5WQUxJRFxuICBSRUFEWV9UT19TWU5DXG59XG5cbnVuaW9uIFNldHVwSW5zdHJ1Y3Rpb25zID0gRXhwZW5zaWZ5U2V0dXBJbnN0cnVjdGlvbnNcblxudHlwZSBCcmV4T3JpZ2luYXRlZENoZXF1ZURldGFpbHMge1xuICBjaGVxdWVNZW1vOiBTdHJpbmdcbiAgY2hlcXVlTnVtYmVyOiBJbnQhXG4gIGNvdW50ZXJwYXJ0eTogQ291bnRlcnBhcnR5IVxuICBleHBlY3RlZERlbGl2ZXJ5RGF0ZTogRGF0ZVxuICBpbml0aWF0b3JDdXN0b21lclVzZXI6IFVzZXJcbiAgcmVjaXBpZW50TmFtZTogU3RyaW5nXG4gIHJldHVyblJlYXNvbjogUmV0dXJuUmVhc29uXG4gIHNlbnRBdDogVGltZVxuICB0eXBlOiBUeFR5cGVcbn1cblxudHlwZSBVcGRhdGVCaWxsUGF5bG9hZCB7XG4gIGJpbGw6IEJpbGxcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIEludm9pY2VTdGF0dXNMb2cge1xuICBcIlwiXCJpbnNlcnRlZF9hdCB0aW1lc3RhbXBcIlwiXCJcbiAgaW5zZXJ0ZWRBdDogVGltZSFcbiAgXCJcIlwiTm90ZSBhYm91dCB0aGlzIGNoYW5nZSBsb2cuXCJcIlwiXG4gIG5vdGU6IFN0cmluZ1xuICBcIlwiXCJJbnZvaWNlIHN0YXR1cy5cIlwiXCJcbiAgc3RhdHVzOiBJbnZvaWNlU3RhdHVzIVxuICBcIlwiXCJVcGRhdGVkIGJ5XCJcIlwiXG4gIHVwZGF0ZWRCeTogU3RyaW5nIVxufVxuXG5lbnVtIEJhdGNoQ2FkZW5jZSB7XG4gIERBSUxZXG4gIE1PTlRITFlcbiAgU0lOR0xFX0VOVFJZXG4gIFdFRUtMWVxufVxuXG50eXBlIERpc2FibGVOb25QcmltYXJ5RnVuZGluZ1NvdXJjZXNQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5lbnVtIE9uYm9hcmRpbmdVbmRlcndyaXRpbmdCYW5rQ29ubmVjdGlvblJlcXVlc3RSZWFzb24ge1xuICBCQU5LX0NPTk5FQ1RJT05fSVNTVUVcbiAgQkFOS19TVEFURU1FTlRfSVNTVUVcbiAgSU5TVUZGSUNJRU5UX0ZVTkRTXG59XG5cbmlucHV0IElucHV0Q2FzaFRyYW5zYWN0aW9uVXBkYXRlQXJndW1lbnRVbmlvbiB7XG4gIGFjaERlYml0OiBJbnB1dENhc2hUcmFuc2FjdGlvbkFjaERlYml0QXJndW1lbnRzXG4gIGNyZWRpdDogSW5wdXRDYXNoVHJhbnNhY3Rpb25DcmVkaXRBcmd1bWVudHNcbn1cblxudHlwZSBSZXdhcmRzQm9udXNFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogUmV3YXJkc0JvbnVzXG59XG5cbnR5cGUgSW5zdWZmaWNpZW50RnVuZHNUaWxlIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlN0YXRlbWVudCBkdWUgZGF0ZSBpbiBVVEMgdGltZS5cIlwiXCJcbiAgZHVlRGF0ZTogVGltZSFcbiAgXCJcIlwiZGVmYXVsdCBmdW5kaW5nIHNvdXJjZSBkYXRhXCJcIlwiXG4gIGZ1bmRpbmdTb3VyY2VEYXRhOiBGdW5kaW5nU291cmNlRGF0YVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiaWYgZGVmYXVsdCBmdW5kaW5nIHNvdXJjZSBpcyB1c2luZyBicmV4IGNhc2hcIlwiXCJcbiAgaXNCcmV4Q2FzaDogQm9vbGVhbiFcbn1cblxudHlwZSBVc2VyQ2F0ZWdvcnlDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtVc2VyQ2F0ZWdvcnlFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbmVudW0gU3BlbmRBZ2dyZWdhdGVUaW1lU2VyaWVzU29ydE9yZGVyIHtcbiAgQVNDXG4gIERFU0NcbiAgSU5WQUxJRFxufVxuXG5pbnB1dCBXaXRoZHJhd0Z1bmRzSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRlcG9zaXRzQWNjb3VudElkOiBJRCFcbiAgZmluYW5jaWFsc0FjY291bnRJZDogSUQhXG4gIGlkZW1wb3RlbmN5S2V5OiBTdHJpbmchXG59XG5cblwiXCJcIkluaXRpYXRlZCBieSBhIEJyZXggY3VzdG9tZXJcIlwiXCJcbnR5cGUgQ3VzdG9tZXJJbml0aWF0ZWQge1xuICBcIlwiXCJUaGUgY3VzdG9tZXIgdXNlclwiXCJcIlxuICB1c2VyOiBVc2VyXG59XG5cbmVudW0gVW5kZXJ3cml0aW5nQW5hbHlzaXNGbGFnTmFtZSB7XG4gIExPV19GSURFTElUWVxufVxuXG5pbnB1dCBTZXRSZWNlaXZhYmxlc09mZmVyc1NlbGVjdGVkVHJpYWxPbmJvYXJkaW5nSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHZhbHVlOiBCb29sZWFuIVxufVxuXG50eXBlIFBheW1lbnRBcHByb3ZhbFJlc3BvbnNlIHtcbiAgcGF5bWVudEFwcHJvdmFsOiBQYXltZW50QXBwcm92YWwhXG4gIHBheW1lbnRBcHByb3ZhbFBheW1lbnRDb250ZXh0OiBQYXltZW50QXBwcm92YWxQYXltZW50Q29udGV4dFxufVxuXG5pbnB1dCBFbmFibGVVc2VySW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHVzZXJJZDogSUQhXG59XG5cbnR5cGUgQ3JlYXRlUGh5c2ljYWxDYXJkVjJQYXlsb2FkIHtcbiAgY2FyZDogQ2FyZFxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbmlucHV0IFByb3Zpc2lvbkFwcGxlUGF5SW5wdXQge1xuICBjYXJkSWQ6IElEIVxuICBjZXJ0aWZpY2F0ZXM6IFtTdHJpbmddXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgbm9uY2U6IFN0cmluZyFcbiAgbm9uY2VTaWduYXR1cmU6IFN0cmluZyFcbn1cblxudHlwZSBQb3NpdGl2ZVBheUFjY291bnRTZXR0aW5nRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IFBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmdcbn1cblxudHlwZSBUb2dnbGVSdWxlRm9yU3RhdGVtZW50RW50cnlQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBzdGF0ZW1lbnRFbnRyeTogU3RhdGVtZW50RW50cnlcbn1cblxuXCJcIlwiXG5Db2xsZWN0ZWQgZnJvbSBhIERlcG9zaXRzIExvY2tlZCBUcmFuc2FjdGlvbi5cbiAgSWYgbGlua2VkIHRvIGEgUGF5b3V0LCB3ZSBpbmNsdWRlIGFkZGl0aW9uYWwgbWV0YWRhdGEgKGlkLCB2ZW5kb3IpXG4gIElmIHRoZSBjb2xsZWN0aW9uIHdhcyBkdWUgdG8gbm9uLXBlZm9ybWFuY2UsIHdlIG1vc3QgbGlrZWx5IGNvbGxlY3RlZCBmb3IgT2ZmZXJzIG5vdCBsaW5rZWQgdG8gdGhlIG1hdGNoZWQgUGF5b3V0LlxuXCJcIlwiXG50eXBlIFJlY2VpdmFibGVzT2ZmZXJzUGF5bWVudEludGVudFNvdXJjZURlcG9zaXRzTG9ja2VkVHJhbnNhY3Rpb24ge1xuICBkZXBvc2l0c1RyYW5zYWN0aW9uSWQ6IFN0cmluZyFcbiAgaXNOb25QZXJmb3JtYW5jZUNvbGxlY3Rpb246IEJvb2xlYW4hXG4gIG1hdGNoZWRQYXlvdXRJZDogSURcbiAgbWF0Y2hlZFBheW91dFZlbmRvcjogUmVjZWl2YWJsZXNPZmZlcnNWZW5kb3JUeXBlXG59XG5cbmlucHV0IENyZWF0ZUJpbGxJbnB1dCB7XG4gIGF0dGFjaG1lbnRBc3NldElkOiBJRFxuICBjaGVxdWVNZW1vOiBTdHJpbmdcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBjb250YWN0SWQ6IElEXG4gIGNvdW50ZXJwYXJ0eUlkOiBTdHJpbmdcbiAgZGVwb3NpdHNBY2NvdW50SWQ6IElEXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgZHVlQW1vdW50Q2VudHM6IEludFxuICBkdWVBdDogVGltZVxuICBlbmRzQXQ6IFRpbWVcbiAgZXh0ZXJuYWxJbnZvaWNlTnVtYmVyOiBTdHJpbmdcbiAgaWRlbXBvdGVuY3lLZXk6IFN0cmluZyFcbiAgbWVyY2hhbnRDYXRlZ29yeUlkOiBJRFxuICBtb250aGx5U2NoZWR1bGU6IE1vbnRobHlTY2hlZHVsZVxuICBub3RpZnlSZWNpcGllbnQ6IEJvb2xlYW5cbiAgcGF5bWVudEluc3RydW1lbnRJZDogSURcbiAgcGF5bWVudFNlbmRBdDogVGltZVxuICB0b3RhbE51bWJlck9mUGF5bWVudHM6IEludFxuICB0cmFuc2ZlckRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgdXNlckVycENhdGVnb3J5SWQ6IElEXG4gIHdlZWtseVNjaGVkdWxlOiBXZWVrbHlTY2hlZHVsZVxufVxuXG50eXBlIENyZWF0ZVRyYW5zYWN0aW9uUmVmdXNlZFN1YnNjcmlwdGlvblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbjogTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uXG59XG5cbmVudW0gQmlsbEludm9pY2VQcm9jZXNzaW5nU3RhdHVzIHtcbiAgQVdBSVRJTkdcbiAgRE9ORVxuICBJTkVMSUdJQkxFXG59XG5cbnR5cGUgUmVzeW5jUmVpbWJ1cnNlbWVudEl0ZW1zUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuXCJcIlwiSW5mb3JtYXRpb24gYWJvdXQgZGV2IGFjY2VzcyBhZ3JlZW1lbnRcIlwiXCJcbnR5cGUgRGV2QWNjZXNzQWdyZWVtZW50IHtcbiAgXCJcIlwiVGltZSBhZ3JlZW1lbnQgd2FzIHNpZ25lZCBhdFwiXCJcIlxuICBzaWduZWRBdDogVGltZVxufVxuXG50eXBlIFJld2FyZHNSZWRlbXB0aW9uUHJvZ3JhbUVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBSZXdhcmRzUmVkZW1wdGlvblByb2dyYW1cbn1cblxuZW51bSBFbXBsb3llZUNvdW50UmFuZ2Uge1xuICBSQU5HRV8xMDFfVE9fNTAwXG4gIFJBTkdFXzFfVE9fNFxuICBSQU5HRV8yMV9UT18xMDBcbiAgUkFOR0VfMjFfVE9fNTBcbiAgUkFOR0VfNTAxX1RPXzI1MDBcbiAgUkFOR0VfNTFfVE9fMTAwXG4gIFJBTkdFXzVfVE9fMjBcbiAgUkFOR0VfTEVTU19USEFOXzIwXG4gIFJBTkdFX01PUkVfVEhBTl8yNTAxXG59XG5cbmVudW0gQWNjb3VudEluY29ycG9yYXRpb25UeXBlSW5wdXQge1xuICBDT1JQT1JBVElPTlxuICBMTENcbiAgT1RIRVJcbiAgUEFSVE5FUlNISVBcbiAgU09MRV9QUk9QUklFVE9SU0hJUFxufVxuXG5lbnVtIEFjdGl2YXRlVXNlckF1dGhUeXBlIHtcbiAgREJfU0VTU0lPTlxuICBKV1Rcbn1cblxudHlwZSBGaW5hbmNpYWxBY2NvdW50RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IEZpbmFuY2lhbEFjY291bnRcbn1cblxuXCJcIlwiQW4gYXVnbWVudGVkIGJpbGxpbmcgcGF5bWVudCBpbnRlbnQgd2l0aCB0aGUgYW1vdW50IG9mIHRoZSBpbnRlbnQgYWxsb2NhdGVkIHRvIHRoZSBwYXJlbnQgbW9kZWwgYW5kIGFkZGl0aW9uYWwgbWV0YWRhdGFcIlwiXCJcbnR5cGUgUmVjZWl2YWJsZXNPZmZlcnNQYXltZW50SW50ZW50IHtcbiAgXCJcIlwiT2YgdGhlIGNvbGxlY3RlZCBhbW91bnQsIGhvdyBtdWNoIGlzIGFsbG9jYXRlZCB0byB0aGUgcGFyZW50IG1vZGVsXCJcIlwiXG4gIGFsbG9jYXRlZENvbGxlY3RlZEFtb3VudDogRmluYW5jaWFsQXNzZXQhXG4gIFwiXCJcIlRpbWUgdGhlIHBheW1lbnQgc2V0dGxlZFwiXCJcIlxuICBjb2xsZWN0ZWRBdDogVGltZSFcbiAgXCJcIlwiVW5pcXVlIElEXCJcIlwiXG4gIGlkOiBTdHJpbmchXG4gIFwiXCJcIlRydWUgaWYgdGhlIFBheW1lbnQgaXMgcGF5aW5nIG9mZiBhIENhcmQgbGlhYmlsaXR5LCBvdGhlcndpc2UgaXRzIHBheWluZyBhIENhc2ggQWR2YW5jZSBvbmUuXCJcIlwiXG4gIGlzRm9yQ2FyZDogQm9vbGVhbiFcbiAgc291cmNlOiBSZWNlaXZhYmxlc09mZmVyc1BheW1lbnRJbnRlbnRTb3VyY2UhXG4gIFwiXCJcIlRvdGFsIGFtb3VudCBjb2xsZWN0ZWQgYXMgcGFydCBvZiB0aGUgcGF5bWVudFwiXCJcIlxuICB0b3RhbENvbGxlY3RlZEFtb3VudDogRmluYW5jaWFsQXNzZXQhXG59XG5cblwiXCJcIlxuUmV0dXJucyB0aW1lbGluZSBlc3RpbWF0ZXMsIGtleWVkIGJ5IHRoZSBkaWZmZXJlbnQgcGF5bWVudF9yYWlscy5cblN1cHBvcnRlZCBwYXltZW50IHJhaWxzIGluY2x1ZGU6IGBhY2hgLCBgaW50ZXJuYXRpb25hbFdpcmVgLCBgZG9tZXN0aWNXaXJlYCwgYGNoZXF1ZWBcbklmIGFuIGVzdGltYXRlIGZvciBhIGdpdmVuIHBheW1lbnQgcmFpbCBpcyBub3Qgc3VwcG9ydGVkLCB0aGUgdmFsdWUgaXMgbnVsbC5cblwiXCJcIlxudHlwZSBQYXltZW50UmFpbFRpbWVsaW5lIHtcbiAgXCJcIlwiXG4gIFRoZSB0cmFuc2FjdGlvbiB0aW1lbGluZSBmb3IgQUNIXG4gIG51bGwgaWYgb3JpZ2luID0gYEVYVEVSTkFMYFxuICBcIlwiXCJcbiAgYWNoOiBDYXNoVHJhbnNhY3Rpb25UaW1lbGluZVxuICBcIlwiXCJcbiAgVGhlIHRyYW5zYWN0aW9uIHRpbWVsaW5lIGZvciBjaGVxdWVcbiAgbnVsbCBpZiBwYXltZW50X21ldGhvZCA9IGBERUJJVGBcbiAgXCJcIlwiXG4gIGNoZXF1ZTogQ2FzaFRyYW5zYWN0aW9uVGltZWxpbmVcbiAgXCJcIlwiXG4gIFRoZSB0cmFuc2FjdGlvbiB0aW1lbGluZSBmb3IgZG9tZXN0aWMgd2lyZVxuICBub24tbnVsbCBvbmx5IGZvciBvcmlnaW4gPSBgQlJFWGAgYW5kIHBheW1lbnRfbWV0aG9kID0gYENSRURJVGBcbiAgXCJcIlwiXG4gIGRvbWVzdGljV2lyZTogQ2FzaFRyYW5zYWN0aW9uVGltZWxpbmVcbiAgXCJcIlwiXG4gIFRoZSB0cmFuc2FjdGlvbiB0aW1lbGluZSBmb3IgaW50ZXJuYXRpb25hbCB3aXJlXG4gIG5vbi1udWxsIG9ubHkgZm9yIG9yaWdpbiA9IGBCUkVYYCBhbmQgcGF5bWVudF9tZXRob2QgPSBgQ1JFRElUYFxuICBcIlwiXCJcbiAgaW50ZXJuYXRpb25hbFdpcmU6IENhc2hUcmFuc2FjdGlvblRpbWVsaW5lXG59XG5cbnR5cGUgTmV0c3VpdGVDbGFzcyB7XG4gIGlzSW5hY3RpdmU6IEJvb2xlYW5cbiAgbmFtZTogU3RyaW5nXG59XG5cbnR5cGUgUmV3YXJkc1BvaW50UmV3YXJkIHtcbiAgYW1vdW50OiBJbnQhXG59XG5cbnR5cGUgRnNwQ2xpZW50QWNjb3VudCB7XG4gIGNvbnRhY3Q6IFN0cmluZ1xuICBjdXN0b21lckFjY291bnRJZDogU3RyaW5nIVxuICBuYW1lOiBTdHJpbmdcbn1cblxudHlwZSBSZWNlaXB0Q29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbUmVjZWlwdEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxuXCJcIlwiVGhlIGhpZ2ggbGV2ZWwgb2JqZWN0IHJlcHJlc2VudHMgYSBtYW5hZ2VyIHJvdXRpbmcgcnVsZVwiXCJcIlxudHlwZSBBcHByb3ZhbHNSb3V0aW5nUnVsZU1hbmFnZXIgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiQSBsaXN0IG9mIGZhbGxiYWNrIHVzZXIgaWRzIHdoZW4gdGhlIHJlcXVlc3QgaW5pdGlhdG9yIGRvZXMgbm90IGhhdmUgYSBtYW5hZ2VyXCJcIlwiXG4gIGZhbGxiYWNrQXBwcm92ZXJVc2VySWRzOiBbU3RyaW5nIV0hXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxufVxuXG50eXBlIEludGVybmFsRW50aXR5U3luY0Vycm9yQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbSW50ZXJuYWxFbnRpdHlTeW5jRXJyb3JFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbmVudW0gQmFua0FnZ3JlZ2F0b3JEZWNpc2lvbiB7XG4gIEZJTklDSVRZX09OTFlcbiAgTEFVTkNIX0RBUktMWVxuICBQTEFJRF9GSVJTVFxufVxuXG5pbnB1dCBEZWxldGVTdWJzY3JpcHRpb25JbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaWQ6IElEIVxufVxuXG5cIlwiXCJUaGUgdHJhbnNhY3Rpb24gY29uc3VtZXIgcmVsYXRlZCBzZXR0aW5nc1wiXCJcIlxudHlwZSBEZXBvc2l0c1RyYW5zYWN0aW9uQ29uc3VtZXJTZXR0aW5ncyB7XG4gIFwiXCJcIlRoZSByZWNpcGllbnQgbm90aWZpY2F0aW9uIHNldHRpbmcgdG8gaW5kaWNhdGUgYXQgd2hhdCBzdGFnZXMgd2Ugd2FudCB0byBzZW5kIG91dCBub3RpZmljYXRpb25zXCJcIlwiXG4gIHJlY2lwaWVudE5vdGlmaWNhdGlvblNldHRpbmc6IE5vdGlmaWNhdGlvblNldHRpbmdcbn1cblxudHlwZSBBcHByb3ZhbHNSZXZpZXdBc3NpZ25lZUNvbm5lY3Rpb24ge1xuICBlZGdlczogW0FwcHJvdmFsc1Jldmlld0Fzc2lnbmVlRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG50eXBlIEludGVncmF0aW9uUnVsZUNvbm5lY3Rpb24ge1xuICBlZGdlczogW0ludGVncmF0aW9uUnVsZUVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxuZW51bSBVbmRlcndyaXRpbmdNb2RlbE5hbWUge1xuICBDQVNIX0JBU0VEXG4gIElORElWSURVQUxfQ1JFRElUX0JBU0VEXG4gIElOVkFMSURcbiAgTUFOVUFMXG4gIE5PTkVcbiAgT05CT0FSRElOR1xuICBSRUdVTEFSX0ZJTkFOQ0lBTFNfQkFTRURfTUlEX01BUktFVFxuICBSRVZFTlVFX0JBU0VEXG59XG5cbnVuaW9uIEFwcHJvdmFsc1JvdXRpbmdSdWxlID0gQXBwcm92YWxzUm91dGluZ1J1bGVJbmRpdmlkdWFscyB8IEFwcHJvdmFsc1JvdXRpbmdSdWxlSW5kaXZpZHVhbHNWMiB8IEFwcHJvdmFsc1JvdXRpbmdSdWxlTWFuYWdlclxuXG5cIlwiXCJMaXN0IG9mIGZhaWxpbmcgY2hlY2tzIGFzc29jaWF0ZWQgd2l0aCBhIHNlbGxlciBhY2NvdW50XCJcIlwiXG50eXBlIFJlY2VpdmFibGVzT2ZmZXJzQWNjb3VudEZhaWxpbmdDaGVja3Mge1xuICBcIlwiXCJMaXN0IG9mIGNoZWNrcyB0aGF0IGFyZSBmYWlsaW5nIGFuZCBhcmUgcmVxdWlyZWQgZm9yIGZ1bGwgYWNjZXNzIChgYWN0aXZlYCBzdGF0dXMpXCJcIlwiXG4gIGZ1bGxBY2Nlc3M6IFtSZWNlaXZhYmxlc09mZmVyc0N1c3RvbWVyQ2hlY2tOYW1lIV1cbiAgXCJcIlwiTGlzdCBvZiBvbmdvaW5nIG1vbml0b3JpbmcgY2hlY2tzIHRoYXQgYXJlIGZhaWxpbmcgYW5kIG1pZ2h0IGJlIHRoZSByZWFzb24gYmVoaW5kIGEgemVybyBvZmZlclwiXCJcIlxuICBvbmdvaW5nOiBbUmVjZWl2YWJsZXNPZmZlcnNDdXN0b21lckNoZWNrTmFtZSFdXG4gIFwiXCJcIkxpc3Qgb2YgY2hlY2tzIHRoYXQgYXJlIGZhaWxpbmcgYW5kIGFyZSByZXF1aXJlZCBmb3IgdHJpYWwgYWNjZXNzIChgYWN0aXZlX3RyaWFsYCBzdGF0dXMpXCJcIlwiXG4gIHRyaWFsQWNjZXNzOiBbUmVjZWl2YWJsZXNPZmZlcnNDdXN0b21lckNoZWNrTmFtZSFdXG59XG5cbnVuaW9uIENhc2hUcmFuc2FjdGlvbkNvdW50ZXJwYXJ0eURldGFpbHMgPSBDYXNoVHJhbnNhY3Rpb25GaW5hbmNpYWxBY2NvdW50IHwgQ2FzaFRyYW5zYWN0aW9uUGF5ZWVcblxuZW51bSBTb2Z0U2lnbnVwQXV0aFR5cGUge1xuICBEQl9TRVNTSU9OXG4gIEpXVFxufVxuXG50eXBlIFRyYW5zYWN0aW9uRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IFRyYW5zYWN0aW9uXG59XG5cbmlucHV0IFJldm9rZURldmVsb3BlckFwaVRva2VuSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBTdHJpbmchXG59XG5cblwiXCJcIlxuT25seSBvbmUgb2YgdGhlc2UgZmllbGRzIHdpbGwgYmUgc2V0LCBlaXRoZXIgaWJhbiBvciBhY2NvdW50TnVtYmVyXG5cbkZvciBpbnRlcm5hdGlvbmFsIHdpcmVzLCBzb21lIGNvdW50cmllcyB1c2UgYW4gSUJBTiBzbyB3ZSdsbCBzZXQgdGhlIGliYW4gZmllbGQuXG5Gb3IgY291bnRyaWVzIHRoYXQgZXhwbGljaXRseSBkb24ndCwgd2UnbGwgc2V0IHRoZSBhY2NvdW50TnVtYmVyIGFzIGEgZmFsbGJhY2suXG5cIlwiXCJcbnR5cGUgQ2FzaFRyYW5zYWN0aW9uSW50ZXJuYXRpb25hbFdpcmVBY2NvdW50SWRlbnRpZmllciB7XG4gIHR5cGU6IENhc2hUcmFuc2FjdGlvbkludGVybmF0aW9uYWxXaXJlQWNjb3VudElkZW50aWZpZXJUeXBlXG4gIHZhbHVlOiBTdHJpbmdcbn1cblxudHlwZSBUcmFuc2FjdGlvbk9wZXJhdGlvbkNvbm5lY3Rpb24ge1xuICBlZGdlczogW1RyYW5zYWN0aW9uT3BlcmF0aW9uRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG5pbnB1dCBTZXRSZWNlaXZhYmxlc09mZmVyc0FjY291bnRPbmJvYXJkaW5nQWN0aW9uSW5wdXQge1xuICBhY3Rpb246IFJlY2VpdmFibGVzT2ZmZXJzQWNjb3VudE9uYm9hcmRpbmdBY3Rpb24hXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuZW51bSBPbmJvYXJkaW5nSW5mb3JtYXRpb25SZXF1ZXN0RGVzY3JpcHRpb24ge1xuICBVTkRFUldSSVRJTkdfQ0FSRF9FQ09NTUVSQ0VfQ09OTkVDVElPTlxuICBQSE9UT19JRF9WRVJJRklDQVRJT05fQ09ORklSTUFUSU9OXG4gIFBST09GX09GX0VJTl9ET0NVTUVOVF9VUExPQURcbiAgUFJPT0ZfT0ZfU1NOX1VQTE9BRFxuICBFSU5fT0NSXG4gIEJVU0lORVNTX0FERFJFU1NcbiAgRUlOX09DUl9WRVJJRklDQVRJT05cbiAgTUZBXG4gIFRFUk1TXG4gIE1GQV9ORVdcbiAgRlVORElOR19TT1VSQ0VfU0VMRUNUSU9OXG4gIFBIT1RPX0lEX1VQTE9BRFxuICBJTkRJVklEVUFMX0NPTlRBQ1RfREVUQUlMU1xuICBJU1NVRV9DQVJEXG4gIFBFUlNPTkFfSURfVkVSSUZJQ0FUSU9OXG4gIFVOREVSV1JJVElOR19DQVJEX0xJTktfQUNDT1VOVFNcbiAgT1RIRVJcbiAgQlVTSU5FU1NfREVUQUlMU19WMlxuICBJTkRJVklEVUFMX0FERFJFU1NcbiAgRk9STV85OTBfRE9DVU1FTlRfVVBMT0FEXG4gIFBFUklPRElDX1JFVklFV1xuICBCVVNJTkVTU19MRUFERVJTSElQX1YyXG4gIFBST0RVQ1RfU1VJVEFCSUxJVFlcbiAgQ09SUE9SQVRFX0FVVEhPUklaQVRJT05fRE9DVU1FTlRfVVBMT0FEXG4gIENFUlRJRklDQVRFX09GX0dPT0RfU1RBTkRJTkdfVVBMT0FEXG4gIEVERF9BVFRFU1RBVElPTl9GSV9OQkZJXG4gIFc5X0FUVEVTVEFUSU9OXG4gIFVOREVSV1JJVElOR19DQVJEX0JBTktfQ09OTkVDVElPTlxuICBCVVNJTkVTU19PV05FUlNISVBcbiAgQlVTSU5FU1NfTEVBREVSU0hJUF9WM1xuICBFTUFJTF9WRVJJRklDQVRJT05cbiAgQlVTSU5FU1NfTEVBREVSU0hJUFxuICBCVVNJTkVTU19BVFRSSUJVVEVTX0NPTkZJUk1BVElPTlxuICBFRERfQVRURVNUQVRJT05fQ0FTSF9JTlRFTlNJVkVcbiAgQlVTSU5FU1NfREVUQUlMU1xuICBVTkRFUldSSVRJTkdfQ0FTSF9CQU5LX0NPTk5FQ1RJT05cbiAgSU5ESVZJRFVBTF9BRERJVElPTkFMX0RFVEFJTFNcbn1cblxuZW51bSBSZWZlcnJhbFJlY29yZFN0YXR1cyB7XG4gIEFQUExJQ0FUSU9OX0FQUFJPVkVEXG4gIENPTVBMRVRFRFxuICBJTlZBTElEXG4gIElOVklURV9TRU5UXG4gIFBFTkRJTkdfSU5WSVRFXG4gIFNJR05FRF9VUFxufVxuXG5lbnVtIERlcG9zaXRzV2l0aGRyYXdGdW5kc0lzc3VlIHtcbiAgQ0FOTk9UX1ZFUklGWV9CQUxBTkNFU1xuICBJTlZBTElEXG4gIE1VTFRJUExFX0RFUE9TSVRTX0FDQ09VTlRTXG4gIE5FR0FUSVZFX0JBTEFOQ0VcbiAgTk9fQVZBSUxBQkxFX0JBTEFOQ0VcbiAgTk9OWkVST19DQVJEX0JBTEFOQ0VcbiAgTk9OWkVST19NTUZfQkFMQU5DRVxuICBQUk9DRVNTSU5HX1RSQU5TQUNUSU9OU1xuICBSRUNFTlRfQUNIX0RFQklUU1xuICBSRUNFTlRfQ0hFUVVFX0RFUE9TSVRTXG4gIFdBSVRJTkdfRk9SX0hPTERfVE9fQ0xFQVJcbiAgV1JPTkdfREVQT1NJVFNfQUNDT1VOVF9TVEFUVVNcbn1cblxudHlwZSBDYXJkU3RhdGVtZW50RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IENhcmRTdGF0ZW1lbnRcbn1cblxuaW5wdXQgVXBkYXRlUGF5bWVudFNvdXJjZUlucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBmdW5kaW5nU291cmNlSWQ6IElEIVxufVxuXG51bmlvbiBGaW5hbmNpYWxzU291cmNlUmVzdWx0ID0gRmluYW5jaWFsU291cmNlXG5cblwiXCJcIlJlcHJlc2VudHMgdGhlIHBheWxvYWQgb2YgYSBTZWxlY3RlZCBUcmlnZ2VyIG9mIHR5cGUgVG9wIENhdGVnb3J5IE11bHRpcGxpZXIuXCJcIlwiXG50eXBlIFJld2FyZHNUcmlnZ2VyVG9wQ2F0ZWdvcnlNdWx0aXBsaWVyIHtcbiAgXCJcIlwiVGhlIG11bHRpcGxpZXIgdG8gYmUgYXBwbGllZCB0byB0aGUgdG9wIGNhdGVnb3J5XCJcIlwiXG4gIGFjY3J1YWxSYXRlOiBGbG9hdCFcbn1cblxudHlwZSBTcGVuZEFnZ3JlZ2F0ZUVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBTcGVuZEFnZ3JlZ2F0ZVxufVxuXG50eXBlIEV4cGVuc2VzSXRlbUV2ZW50IGltcGxlbWVudHMgTm9kZSB7XG4gIGFjdGlvbjogRXhwZW5zZXNJdGVtRXZlbnRBY3Rpb25cbiAgY3VzdG9tZXJVc2VyUm9sZTogU3RyaW5nXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgZXhwZW5zZXNJdGVtOiBFeHBlbnNlc0l0ZW1cbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIGluc2VydGVkQXQ6IFRpbWVcbiAgdXNlcjogVXNlclxufVxuXG5cIlwiXCJUaGUgaGlnaCBsZXZlbCBvYmplY3QgcmVwcmVzZW50cyBhbiBhcHByb3ZhbCBwb2xpY3lcIlwiXCJcbnR5cGUgQXBwcm92YWxzUG9saWN5IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBhcHByb3ZhbHMgcG9saWN5IGRldGFpbHNcIlwiXCJcbiAgZGV0YWlsczogQXBwcm92YWxzUG9saWN5RGV0YWlscyFcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlRoZSBwcm9kdWN0IHR5cGUgb2YgdGhpcyBhcHByb3ZhbHMgcG9saWN5XCJcIlwiXG4gIHByb2R1Y3RUeXBlOiBQcm9kdWN0VHlwZVxufVxuXG5cIlwiXCJDYWxjdWxhdGVkIGludGVncmF0aW9uIGZpZWxkcyB2aWEgaW50ZWdyYXRpb24gcnVsZXMgZW5naW5lXCJcIlwiXG50eXBlIFN0YXRlbWVudEVudHJ5SW50ZWdyYXRpb25GaWVsZHMge1xuICBcIlwiXCJFeHRlcm5hbCBiaWxsYWJsZSBzdGF0dXNcIlwiXCJcbiAgYmlsbGFibGVTdGF0dXM6IEJpbGxhYmxlU3RhdHVzXG4gIFwiXCJcIlFCTyBjbGFzc1wiXCJcIlxuICBjbGFzczogRXh0ZXJuYWxJbnRlZ3JhdGlvbkVudGl0eVxuICBcIlwiXCJRQk8gY3VzdG9tZXJcIlwiXCJcbiAgY3VzdG9tZXI6IEV4dGVybmFsSW50ZWdyYXRpb25FbnRpdHlcbiAgXCJcIlwiTmV0c3VpdGUgZGVwYXJ0bWVudFwiXCJcIlxuICBkZXBhcnRtZW50OiBFeHRlcm5hbEludGVncmF0aW9uRW50aXR5XG4gIFwiXCJcIk5ldHN1aXRlIC8gUUJPIGxvY2F0aW9uXCJcIlwiXG4gIGxvY2F0aW9uOiBFeHRlcm5hbEludGVncmF0aW9uRW50aXR5XG4gIFwiXCJcIlhlcm8gdHJhY2tpbmcgY2F0ZWdvcnlcIlwiXCJcbiAgdHJhY2tpbmdDYXRlZ29yeTE6IEV4dGVybmFsSW50ZWdyYXRpb25FbnRpdHlcbiAgXCJcIlwiWGVybyB0cmFja2luZyBjYXRlZ29yeVwiXCJcIlxuICB0cmFja2luZ0NhdGVnb3J5MjogRXh0ZXJuYWxJbnRlZ3JhdGlvbkVudGl0eVxuICBcIlwiXCJFeHRlcm5hbCBHTCBhY2NvdW50XCJcIlwiXG4gIHVzZXJDYXRlZ29yeTogVXNlckNhdGVnb3J5XG4gIFwiXCJcIk5ldHN1aXRlIHZlbmRvclwiXCJcIlxuICB2ZW5kb3I6IEV4dGVybmFsSW50ZWdyYXRpb25FbnRpdHlcbn1cblxuZW51bSBJbnZlc3RtZW50U291cmNlIHtcbiAgQ1JPV0RTT1VSQ0VEXG4gIEZBTUlMWVxuICBHUkFOVFNcbiAgSU5JVElBTF9DT0lOX09GRkVSSU5HXG4gIFBST0ZFU1NJT05BTF9JTlZFU1RPUlxuICBTRUxGX0ZVTkRFRFxuICBWQ1xufVxuXG50eXBlIENyZWF0ZURvY3VtZW50T2NyUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgXCJcIlwidGhlIElEIG9mIGRvY3VtZW50IE9DUiBwcm9jZXNzLiBUaGlzIGNhbiBiZSB1c2VkIHRvIHF1ZXJ5IGZvciB0aGUgT0NSIHJlc3VsdC5cIlwiXCJcbiAgZG9jdW1lbnRPY3JJZDogSUQhXG59XG5cbnR5cGUgU3RhdGVtZW50RW50cnlMZW5zQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbU3RhdGVtZW50RW50cnlMZW5zRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG50eXBlIFZhbGlkYXRlQWN0aXZhdGlvbiB7XG4gIGFjdGl2ZTogQm9vbGVhbiFcbn1cblxudHlwZSBQZXJNZXJjaGFudFN0YXRzRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IFBlck1lcmNoYW50U3RhdHNcbn1cblxuaW5wdXQgR2VuZXJhdGVDYXJkU3RhdGVtZW50RG9jdW1lbnREb3dubG9hZFVybElucHV0IHtcbiAgY2FyZFN0YXRlbWVudElkOiBJRFxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgQ2FzaFRyYW5zYWN0aW9uQ2FyZENvbGxlY3Rpb25EZXRhaWxzIHtcbiAgY29sbGVjdGlvbkF0dGVtcHQ6IENvbGxlY3Rpb25BdHRlbXB0IVxuICBjb2xsZWN0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBGaW5hbmNpYWxJbmZvcm1hdGlvblJlcXVlc3RDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtGaW5hbmNpYWxJbmZvcm1hdGlvblJlcXVlc3RFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbmVudW0gRGVwb3NpdHNBY2NvdW50Q2xvc3VyZVJlYXNvbiB7XG4gIEJVU0lORVNTX0lTX0NMT1NJTkdcbiAgREVQT1NJVFNfVE9PX1NMT1dcbiAgRk9VTkRfQU5PVEhFUl9CQU5LXG4gIElOVkFMSURcbiAgTElNSVRFRF9TQU1FX0RBWV9CQUxBTkNFXG4gIE1JU1NJTkdfRlVOQ1RJT05BTElUWVxuICBOT1RfRU5PVUdIX1BST0RVQ1RTXG4gIE9USEVSXG4gIFdBTlRFRF8zMF9EQVlfQ0FSRFxuICBXSVRIRFJBV0FMU19UT09fU0xPV1xufVxuXG50eXBlIENyZWF0ZUNhc2hUcmFuc2FjdGlvblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHRyYW5zYWN0aW9uOiBDYXNoVHJhbnNhY3Rpb24hXG59XG5cbnR5cGUgQnJleE9wZXJhdGlvbmFsVHJhbnNmZXJEZXRhaWxzIHtcbiAgXzogQm9vbGVhblxufVxuXG50eXBlIENhc2hUcmFuc2FjdGlvbkJvb2tUcmFuc2ZlckRldGFpbHMge1xuICBcIlwiXCJUaGUgc2VuZGVyIGFjY291bnRcIlwiXCJcbiAgc291cmNlRGVwb3NpdHNBY2NvdW50OiBEZXBvc2l0c0FjY291bnRcbiAgXCJcIlwiVGhlIHJlY2lwaWVudCBhY2NvdW50XCJcIlwiXG4gIHRhcmdldERlcG9zaXRzQWNjb3VudDogRGVwb3NpdHNBY2NvdW50XG59XG5cbnR5cGUgRW5hYmxlVXNlclBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHVzZXI6IFVzZXJcbn1cblxuaW5wdXQgQnVsa0ZpbmRPckNyZWF0ZUVycEZlZWRzSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGVycEZlZWRSZXF1ZXN0czogW0VycEZlZWRJbnB1dF1cbn1cblxudHlwZSBSZmlSZXNwb25zZUl0ZW0ge1xuICBcIlwiXCJUb2tlbiBmb3IgZmlsZXN0b3JlLCByZWZlcmVuY2luZyB0aGUgdXBsb2FkZWQgZmlsZVwiXCJcIlxuICBkb2N1bWVudFRva2VuOiBTdHJpbmdcbiAgc3RhdHVzOiBSZmlSZXNwb25zZVN0YXR1cyFcbiAgXCJcIlwiRGV0YWlscyBvbiB0aGUgY3VycmVudCBzdGF0dXMsIGUuZy4gcmVhc29ucyBmb3IgcmVqZWN0aW5nIGEgcmVzcG9uc2UsIGZpbGxlZCBieSBvcHNcIlwiXCJcbiAgc3RhdHVzTWVzc2FnZTogU3RyaW5nXG59XG5cbnR5cGUgSm91cm5hbEVudHJ5IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBiYWxhbmNlLWFmZmVjdGluZyBhbW91bnQsIGluIFVTRCBjZW50c1wiXCJcIlxuICBhbW91bnRVc2RDZW50czogSW50XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBvcmlnaW5hdG9yOiBKb3VybmFsRW50cnlPcmlnaW5hdG9yXG4gIG9yaWdpbmF0b3JUeXBlOiBKb3VybmFsT3JpZ2luYXRvclR5cGVcbn1cblxudHlwZSBDYXNoVHJhbnNhY3Rpb25JbnRlcm5hdGlvbmFsV2lyZURldGFpbHMge1xuICBcIlwiXCJUaGUgYXNzb2NpYXRlZCBhY2NvdW50IG51bWJlciwgd2hpY2ggY291bGQgYmUgaW4gdGhlIGZvcm0gb2YgYW4gSUJBTiBvciBvdGhlciAoZGVmYXVsdGluZyB0byBhY2NvdW50X251bWJlcilcIlwiXCJcbiAgYWNjb3VudElkZW50aWZpZXI6IENhc2hUcmFuc2FjdGlvbkludGVybmF0aW9uYWxXaXJlQWNjb3VudElkZW50aWZpZXJcbiAgXCJcIlwiVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudFwiXCJcIlxuICBhZGRyZXNzOiBBZGRyZXNzXG4gIFwiXCJcIlRoZSBjb3VudGVycGFydHkncyBiZW5lZmljaWFyeSBiYW5rIGluZm9ybWF0aW9uXCJcIlwiXG4gIGJlbmVmaWNpYXJ5QmFuazogQ2FzaFRyYW5zYWN0aW9uQmVuZWZpY2lhcnlCYW5rXG4gIFwiXCJcIlRoZSAyLWNoYXJhY3RlciBjb3VudHJ5IGNvZGUgdGhlIHdpcmUgd2FzIHNlbnQgdG8gb3IgY2FtZSBmcm9tIChlLmcuIFwiTVhcIiBmb3IgTWV4aWNvKVwiXCJcIlxuICBjb3VudHJ5Q29kZUFscGhhMjogU3RyaW5nXG4gIFwiXCJcIlxuICBDb3VudHJ5IG5hbWUgdGhpcyB3aXJlIHdhcyBzZW50IHRvIG9yIGNhbWUgZnJvbSAoZS5nLiBcIk1leGljb1wiKVxuICBJZiB3ZSBkb24ndCBoYXZlIHRoZSBmdWxsIGNvdW50cnkgbmFtZSwgd2UnbGwgZmFsbCBiYWNrIHRvIHRoZSBjb3VudHJ5X2NvZGVfYWxwaGEyXG4gIFwiXCJcIlxuICBjb3VudHJ5TmFtZTogU3RyaW5nXG4gIFwiXCJcIlRoZSBlbWFpbCBvZiB0aGUgcmVjaXBpZW50XCJcIlwiXG4gIGVtYWlsOiBTdHJpbmdcbiAgXCJcIlwiVGhlIE1UMTAzIGlzIGEgc3RhbmRhcmRpc2VkIFNXSUZUIHBheW1lbnQgbWVzc2FnZSB1c2VkIGFzIHByb29mIG9mIHBheW1lbnQgZm9yIGNyb3NzIGJvcmRlci9pbnRlcm5hdGlvbmFsIHdpcmUgdHJhbnNmZXJzXCJcIlwiXG4gIG10MTAzOiBTdHJpbmdcbiAgXCJcIlwiV2hldGhlciB0aGUgdHJhbnNhY3Rpb24gd2FzIGEgZGViaXQgb3IgY3JlZGl0XCJcIlwiXG4gIHBheW1lbnRNZXRob2Q6IENhc2hUcmFuc2FjdGlvblBheW1lbnRNZXRob2QhXG4gIFwiXCJcIkNvdW50ZXJwYXJ0eSdzIFNXSUZUIGNvZGVcIlwiXCJcbiAgc3dpZnRDb2RlOiBTdHJpbmdcbiAgXCJcIlwiQSBiYW5rLXNwZWNpZmljIHRyYWNraW5nIG51bWJlclwiXCJcIlxuICB0cmFja2luZ051bWJlcjogU3RyaW5nXG4gIFwiXCJcIlBheW1lbnQgaW5zdHJ1Y3Rpb25zXCJcIlwiXG4gIHRyYW5zZmVyRGVzY3JpcHRpb246IFN0cmluZ1xufVxuXG50eXBlIEdsb2JhbExpbWl0UnVsZU1ldGFkYXRhIHtcbiAgYW1vdW50OiBJbnRcbn1cblxudHlwZSBDcmVhdGVBcHByb3ZhbHNQb2xpY3lQYXlsb2FkIHtcbiAgYXBwcm92YWxzUG9saWN5OiBBcHByb3ZhbHNQb2xpY3lcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5cIlwiXCJBbiBhY2NvdW50IHdoaWNoIHdlIHJlcXVpcmUgc3RhdGVtZW50IHVwZGF0ZSBmcm9tIHRoZSBjdXN0b21lclwiXCJcIlxudHlwZSBGaW5hbmNpYWxTdGF0ZW1lbnRSZXF1ZXN0ZWRBY2NvdW50IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBsYXN0IGRpZ2l0cyBvZiB0aGUgYmFuayBhY2NvdW50IG51bWJlciBmb3IgZGlzcGxheVwiXCJcIlxuICBhY2NvdW50TnVtYmVyTGFzdEZvdXI6IFN0cmluZ1xuICBiYW5rQWNjb3VudE51bWJlcjogU3RyaW5nXG4gIFwiXCJcIkJhbmsvRmluYW5jaWFsIGluc3RpdHV0aW9uICYgYWNjb3VudCBudW1iZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBzdGF0ZW1lbnQgYWNjb3VudFwiXCJcIlxuICBiYW5rTmFtZTogU3RyaW5nXG4gIFwiXCJcIkR1ZSBkYXRlIGZvciBhIHN0YXRlbWVudCB1cGRhdGUsIHR5cGljYWxseSBlbmQgb2YgbW9udGhcIlwiXCJcbiAgZHVlRGF0ZTogVGltZSFcbiAgZmluYW5jaWFsQWNjb3VudElkOiBTdHJpbmchXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJUaGUgbW9udGggb2YgdGhlIHJlcXVlc3RlZCBzdGF0ZW1lbnRcIlwiXCJcbiAgcmVxdWVzdGVkTW9udGg6IEludCFcbn1cblxudHlwZSBVcGRhdGVDYXJkUGluUGF5bG9hZCB7XG4gIGNhcmQ6IENhcmQhXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBTZXREZXBvc2l0c1RyYW5zYWN0aW9uUGF5bWVudE1lbW9QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB0cmFuc2FjdGlvbjogRGVwb3NpdHNUcmFuc2FjdGlvbiFcbn1cblxuaW5wdXQgU3RhcnRSZXNldFVzZXJVc2VySW5wdXQge1xuICBlbWFpbDogU3RyaW5nIVxufVxuXG50eXBlIERpc21pc3NQcm9tb3Rpb25QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIFNlbmRCaWxsUGF5bWVudFBheWxvYWQge1xuICBiaWxsOiBCaWxsXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuaW5wdXQgQ3JlYXRlQ291bnRlcnBhcnR5SW5wdXQge1xuICBhY2NvdW50TnVtYmVyOiBTdHJpbmdcbiAgXCJcIlwiYWRkcmVzcyBpcyByZXF1aXJlZCBmb3Igd2lyZSBjb3VudGVycGFydGllcywgZW5mb3JjZWQgYnkgYmFja2VuZCBzZXJ2aWNlXCJcIlwiXG4gIGFkZHJlc3M6IEZsZXhpYmxlQWRkcmVzc0lucHV0XG4gIGFwcHJvdmVySWQ6IElEIVxuICBiZW5lZmljaWFyeUJhbmtBZGRyZXNzOiBGbGV4aWJsZUFkZHJlc3NJbnB1dFxuICBiZW5lZmljaWFyeUJhbmtJbmZvOiBKc29uXG4gIFwiXCJcIkludGVybmF0aW9uYWwgd2lyZSBjb3VudGVycGFydHkgaW5mb3JtYXRpb25cIlwiXCJcbiAgYmVuZWZpY2lhcnlCYW5rTmFtZTogU3RyaW5nXG4gIGNoZXF1ZVJlY2lwaWVudE5hbWU6IFN0cmluZ1xuICBjbGFzczogQ2xhc3NcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZXBvc2l0c0FjY291bnRJZDogSUQhXG4gIGVtYWlsOiBTdHJpbmdcbiAgbG9jYXRpb246IEFjY291bnRMb2NhdGlvbiFcbiAgbmFtZTogU3RyaW5nIVxuICBwYXltZW50UmFpbDogUGF5bWVudFJhaWwhXG4gIHByZXZpb3VzQ291bnRlcnBhcnR5SWQ6IElEXG4gIHJvdXRpbmdOdW1iZXI6IFN0cmluZ1xuICBcIlwiXCJ0eXBlIGFuZCBjbGFzcyBhcmUgcmVxdWlyZWQgZm9yIGFjaCBjb3VudGVycGFydGllcywgZW5mb3JjZSBieSBiYWNrZW5kIHNlcnZpY2VcIlwiXCJcbiAgdHlwZTogVHlwZVxufVxuXG50eXBlIENhbmNlbENhc2hSZWN1cnJpbmdTY2hlZHVsZVBheWxvYWQge1xuICBcIlwiXCJMaXN0IG9mIGNhbmNlbGxlZCB0cmFuc2FjdGlvbnNcIlwiXCJcbiAgY2FuY2VsbGVkVHJhbnNhY3Rpb25zOiBbQ2FzaFRyYW5zYWN0aW9uIV0hXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuaW5wdXQgUmVzeW5jQmlsbHNJbnB1dCB7XG4gIGJpbGxJZHM6IFtJRF0hXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaW50ZWdyYXRpb25JZDogSUQhXG4gIFwiXCJcIldpbGwgZmV0Y2ggYSBuZXcgc3luYyB0b2tlbiBmcm9tIFFCTyBiZWZvcmUgYXR0ZW1wdGluZyBiaWxscyBkYXRhIHN5bmMuIFRoaXMgb3ZlcndyaXRlcyBhbnkgZGF0YSBvbiB0aGUgUUJPIHNpZGUgd2l0aCBCcmV4IGRhdGFcIlwiXCJcbiAgb3ZlcndyaXRlOiBCb29sZWFuXG59XG5cbnR5cGUgQ2FyZFRyYW5zYWN0aW9uSW5zaWdodE11dGluZ1BvbGljeUNvbm5lY3Rpb24ge1xuICBlZGdlczogW0NhcmRUcmFuc2FjdGlvbkluc2lnaHRNdXRpbmdQb2xpY3lFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbnR5cGUgQ2FyZFRyYW5zYWN0aW9uSW5zaWdodE11dGluZ1BvbGljeUVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBDYXJkVHJhbnNhY3Rpb25JbnNpZ2h0TXV0aW5nUG9saWN5XG59XG5cbnR5cGUgQ3JlYXRlRGV2ZWxvcGVyQXBpVG9rZW5QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB0b2tlbjogRGV2ZWxvcGVyQXBpVG9rZW5cbn1cblxudHlwZSBNaWxlc1RyYW5zZmVyRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IE1pbGVzVHJhbnNmZXJcbn1cblxuaW5wdXQgQ3JlYXRlRmluYW5jaWFsQmFua1N0YXRlbWVudElucHV0IHtcbiAgYXNzZXRJZDogSUQhXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZmluYW5jaWFsQWNjb3VudElkOiBJRCFcbn1cblxudHlwZSBTdWJtaXRGaW5hbmNpYWxJbmZvcm1hdGlvblJlcXVlc3RQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpbmZvcm1hdGlvblJlcXVlc3Q6IEZpbmFuY2lhbEluZm9ybWF0aW9uUmVxdWVzdFxufVxuXG50eXBlIENhc2hUcmFuc2FjdGlvbkFwcHJvdmFsUmVzcG9uc2Uge1xuICBjYXNoVHJhbnNhY3Rpb25BcHByb3ZhbDogQ2FzaFRyYW5zYWN0aW9uQXBwcm92YWxcbiAgXCJcIlwiQ29udGV4dHVhbCBpbmZvcm1hdGlvbiBhYm91dCB0cmFuc2FjdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGFwcHJvdmFsXCJcIlwiXG4gIGNhc2hUcmFuc2FjdGlvbkFwcHJvdmFsQ29udGV4dDogQ2FzaFRyYW5zYWN0aW9uQXBwcm92YWxDb250ZXh0XG59XG5cbnR5cGUgRGVwb3NpdHNXZWVrbHlTY2hlZHVsZSB7XG4gIGRheU9mV2VlazogQnVzaW5lc3NEYXlzIVxuICBuV2Vla3M6IEludCFcbn1cblxuc2NhbGFyIFBob25lTnVtYmVyXG5cbnNjYWxhciBKc29uXG5cbmlucHV0IEJlZ2luQ2hhbm5lbFZlcmlmaWNhdGlvbklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpZDogSUQhXG59XG5cbmVudW0gQ2FzaFRyYW5zYWN0aW9uQWNoUmV0dXJuUmVhc29uIHtcbiAgTUFOREFUT1JZX0ZJRUxEX0VSUk9SXG4gIFJFVFVSTl9PRl9JTVBST1BFUl9DUkVESVRfRU5UUllcbiAgRklMRV9SRUNPUkRfRURJVF9DUklURVJJQVxuICBDVVNUT01FUl9BRFZJU0VTX1VOQVVUSE9SSVpFRFxuICBDSEVDS19UUlVOQ0FUSU9OX0VOVFJZX1JFVFVSTlxuICBJTkNPUlJFQ1RMWV9DT0RFRF9PVVRCT1VORF9JTlRFUk5BVElPTkFMX1BBWU1FTlRcbiAgSU1QUk9QRVJfU09VUkNFX0RPQ1VNRU5UXG4gIFJFVFVSTl9PRl9YQ0tfRU5UUllcbiAgRU5UUllfTk9UX1BST0NFU1NFRF9CWV9HQVRFV0FZXG4gIFJFVFVSTl9QRVJfT0RGSV9SRVFVRVNUXG4gIEZPUkVJR05fUkVDRUlWSU5HX0RGSV9VTkFCTEVfVE9fU0VUVExFXG4gIE5PTl9QQVJUSUNJUEFOVF9JTl9JQVRfUFJPR1JBTVxuICBEVVBMSUNBVEVfRU5ST0xMTUVOVFxuICBBRERFTkRBX0VSUk9SXG4gIElOVkFMSURfUkVQUkVTRU5UQVRJVkVfUEFZRUVfSU5ESUNBVE9SXG4gIE5PX0VSUk9SU19GT1VORFxuICBMSU1JVEVEX1BBUlRJQ0lQQVRJT05fREZJXG4gIFJFVFVSTl9OT1RfUkVRVUVTVEVEX0JZX09ERklcbiAgSVRFTV9BTkRfUkNLX0VOVFJZX1BSRVNFTlRFRF9GT1JfUEFZTUVOVFxuICBSRVRVUk5fTk9UX0FfRFVQTElDQVRFXG4gIE1JU1JPVVRFRF9ESVNIT05PUkVEX1JFVFVSTlxuICBJTlZBTElEX0FDQ09VTlRfTlVNQkVSX1NUUlVDVFVSRVxuICBBVVRIT1JJWkFUSU9OX1JFVk9LRURfQllfQ1VTVE9NRVJcbiAgQUNDT1VOVF9GUk9aRU5cbiAgSU1QUk9QRVJfRUZGRUNUSVZFX0VOVFJZX0RBVEVcbiAgRklFTERfRVJST1JTXG4gIFVOVElNRUxZX0RJU0hPTk9SRURfUkVUVVJOXG4gIFRJTUVMWV9PUklHSU5BTF9SRVRVUk5cbiAgUkVUVVJOX09GX0VOUl9FTlRSWV9CWV9GRURFUkFMX0dPVkVSTk1FTlRfQUdFTkNZXG4gIElOVkFMSURfQ09NUEFOWV9JREVOVElGSUNBVElPTlxuICBJTlZBTElEX0RGSV9BQ0NPVU5UX05VTUJFUlxuICBCRU5FRklDSUFSWV9ERUNFQVNFRFxuICBQQVlNRU5UX1NUT1BQRURcbiAgQUNDT1VOVF9TT0xEX1RPX0FOT1RIRVJfREZJXG4gIElBVF9FTlRSWV9DT0RJTkdfRVJST1JcbiAgVU5BVVRIT1JJWkVEX0RFQklUX1RPX0NPTlNVTUVSX0FDQ09VTlRfVVNJTkdfQ09SUE9SQVRFX1NFQ19DT0RFXG4gIE1JU1JPVVRFRF9SRVRVUk5cbiAgSU5TVUZGSUNJRU5UX0ZVTkRTXG4gIENPUlBPUkFURV9DVVNUT01FUl9BRFZJU0VTX05PVF9BVVRIT1JJWkVEXG4gIFBFUk1JU1NJQkxFX1JFVFVSTl9FTlRSWV9OT1RfQUNDRVBURURcbiAgSU5WQUxJRF9DT01QQU5ZX05BTUVcbiAgUk9VVElOR19OVU1CRVJfRVJST1JcbiAgUkVUVVJOX09GX0lNUFJPUEVSX0RFQklUX0VOVFJZXG4gIENPUlJFQ1RFRF9SRVRVUk5cbiAgSU5WQUxJRF9JTkRJVklEVUFMX0lEX05VTUJFUl8yXG4gIFVOVElNRUxZX1JFVFVSTlxuICBJTlZBTElEX0lORElWSURVQUxfSURfTlVNQkVSXG4gIFRSQUNFX05VTUJFUl9FUlJPUlxuICBBQ0NPVU5UX05PVF9GT1VORFxuICBTVE9QX1BBWU1FTlRfT05fSVRFTV9SRUxBVEVEX1RPX1JDS19FTlRSWVxuICBOT05fVFJBTlNBQ1RJT05fQUNDT1VOVFxuICBDUkVESVRfRU5UUllfUkVGVVNFRF9CWV9SRUNFSVZFUlxuICBNQU5VQUxMWV9DQU5DRUxMRURcbiAgUk9VVElOR19OVU1CRVJfQ0hFQ0tfRElHSVRfRVJST1JcbiAgQ1VTVE9NRVJfQURWSVNFU19JTVBST1BFUlxuICBVTktOT1dOXG4gIElOVkFMSURfVFJBTlNBQ1RJT05fQ09ERVxuICBSRVBSRVNFTlRBVElWRV9QQVlFRV9ERUNFQVNFRFxuICBTVEFURV9MQVdfQUZGRUNUSU5HX1JDS19BQ0NFUFRBTkNFXG4gIFBFUk1JU1NJQkxFX1JFVFVSTl9FTlRSWVxuICBJVEVNX1JFTEFURURfVE9fUkNLX0VOVFJZX0lTX0lNUFJPUEVSXG4gIFNUT1BfUEFZTUVOVF9PTl9TT1VSQ0VfRE9DVU1FTlRcbiAgRFVQTElDQVRFX1JFVFVSTlxuICBTT1VSQ0VfRE9DVU1FTlRfUFJFU0VOVEVEX0ZPUl9QQVlNRU5UXG4gIElOVkFMSURfQUNIX1JPVVRJTkdfTlVNQkVSXG4gIFVOQ09MTEVDVEVEX0ZVTkRTXG4gIFJERklfTk9OX1NFVFRMRU1FTlRcbiAgSU5WQUxJRFxuICBBQ0NPVU5UX0NMT1NFRFxuICBEVVBMSUNBVEVfRU5UUllcbiAgUkRGSV9OT1RfUEFSVElDSVBBTlRfSU5fQ0hFQ0tfVFJVTkNBVElPTl9QUk9HUkFNXG4gIElOVkFMSURfSU5ESVZJRFVBTF9OQU1FXG4gIElOVkFMSURfRk9SRUlHTl9SRUNFSVZJTkdfREZJX0lERU5USUZJQ0FUSU9OXG4gIEFNT1VOVF9GSUVMRF9FUlJPUlxufVxuXG50eXBlIERpc3B1dGVUcmFuc2FjdGlvbkNvbm5lY3Rpb24ge1xuICBlZGdlczogW0Rpc3B1dGVUcmFuc2FjdGlvbkVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBTcGVuZEFnZ3JlZ2F0ZSB7XG4gIGFtb3VudDogSW50IVxuICBjYXJkOiBDYXJkXG4gIGRlcGFydG1lbnQ6IERlcGFydG1lbnRcbiAgbWVyY2hhbnQ6IE1lcmNoYW50XG4gIG1lcmNoYW50Q2F0ZWdvcnk6IE1lcmNoYW50Q2F0ZWdvcnlcbiAgcHJldmlvdXNQZXJpb2RBbW91bnQ6IEludCFcbiAgdGltZTogVGltZVxuICB1c2VyOiBVc2VyXG4gIHVzZXJDYXRlZ29yeTogVXNlckNhdGVnb3J5XG59XG5cbmVudW0gQ2FyZFRyYW5zYWN0aW9uc0luc2lnaHRUeXBlIHtcbiAgQ0FSRF9UUkFOU0FDVElPTl9JTlNJR0hUX0FMTFxuICBDQVJEX1RSQU5TQUNUSU9OX0lOU0lHSFRfRU1QVFlcbiAgQ0FSRF9UUkFOU0FDVElPTl9JTlNJR0hUX0VYUEVOU0lWRV9UUkFOU0FDVElPTlxuICBDQVJEX1RSQU5TQUNUSU9OX0lOU0lHSFRfSElHSF9TUEVORF9QRVJfRElFTV9SRVNUQVVSQU5UU1xuICBDQVJEX1RSQU5TQUNUSU9OX0lOU0lHSFRfSElHSF9TUEVORF9QRVJfRElFTV9SSURFU0hBUkVcbiAgQ0FSRF9UUkFOU0FDVElPTl9JTlNJR0hUX05FV19WRU5ET1JfU0FBU1xuICBDQVJEX1RSQU5TQUNUSU9OX0lOU0lHSFRfUkVDVVJSSU5HXG4gIENBUkRfVFJBTlNBQ1RJT05fSU5TSUdIVF9SRUNVUlJJTkdfRFVQTElDQVRFXG4gIENBUkRfVFJBTlNBQ1RJT05fSU5TSUdIVF9TUEVORF9JTkNSRUFTRV9ERVBBUlRNRU5UXG4gIENBUkRfVFJBTlNBQ1RJT05fSU5TSUdIVF9TUEVORF9JTkNSRUFTRV9NRVJDSEFOVFxuICBDQVJEX1RSQU5TQUNUSU9OX0lOU0lHSFRfU1BFTkRfSU5DUkVBU0VfTUVSQ0hBTlRfQ0FURUdPUllcbiAgQ0FSRF9UUkFOU0FDVElPTl9JTlNJR0hUX1NQRU5EX0lOQ1JFQVNFX1JFQ1VSUklOR1xuICBDQVJEX1RSQU5TQUNUSU9OX0lOU0lHSFRfU1BFTkRfSU5DUkVBU0VfVVNFUlxufVxuXG50eXBlIENhcmRQYXltZW50Rm9yd2FyZGVyRG9jdW1lbnQge1xuICBhc3NldElkOiBTdHJpbmdcbiAgZG9jdW1lbnRFeHRlcm5hbElkOiBTdHJpbmdcbiAgcmVxdWVzdElkOiBTdHJpbmdcbiAgc3RhdHVzOiBDYXJkUGF5bWVudEZvcndhcmRlckRvY3VtZW50U3RhdHVzXG4gIHR5cGU6IENhcmRQYXltZW50Rm9yd2FyZGVyRG9jdW1lbnRUeXBlXG59XG5cbmlucHV0IEludm9pY2VMaW5lSXRlbUlucHV0IHtcbiAgXCJcIlwiRGVzY3JpcHRpb24gaXRlbS4gZS5nLiBwcm9kdWN0IC8gc2VydmljZS5cIlwiXCJcbiAgZGVzY3JpcHRpb246IFN0cmluZyFcbiAgXCJcIlwiUXVhbnRpdHkgb2YgdGhlIGRlc2NyaXB0aW9uIGl0ZW0uXCJcIlwiXG4gIHF1YW50aXR5OiBJbnQhXG4gIFwiXCJcIlN1YnRvdGFsIG9mIHRoZSBsaW5lIGl0ZW0uXCJcIlwiXG4gIHN1YnRvdGFsOiBGaW5hbmNpYWxBc3NldElucHV0XG4gIFwiXCJcIlRvdGFsIEFtb3VudCBvZiB0aGUgbGluZSBpdGVtXCJcIlwiXG4gIHRvdGFsQW1vdW50OiBGaW5hbmNpYWxBc3NldElucHV0XG4gIFwiXCJcIlVuaXQgcHJpY2Ugb2YgdGhlIGRlc2NyaXB0aW9uIGl0ZW0uXCJcIlwiXG4gIHVuaXRQcmljZTogRmluYW5jaWFsQXNzZXRJbnB1dCFcbn1cblxudHlwZSBRdWlja2Jvb2tzQ2F0ZWdvcmllcyB7XG4gIGFjY291bnRzUGF5YWJsZVVzZXJDYXRlZ29yeTogVXNlckNhdGVnb3J5XG4gIGNvbGxlY3Rpb25UYXJnZXRVc2VyQ2F0ZWdvcnk6IFVzZXJDYXRlZ29yeVxuICByZXdhcmRzSW5jb21lVXNlckNhdGVnb3J5OiBVc2VyQ2F0ZWdvcnlcbiAgdmVuZG9yTmFtZTogU3RyaW5nXG59XG5cbnR5cGUgTmV0c3VpdGVMb2NhdGlvbiB7XG4gIGlzSW5hY3RpdmU6IEJvb2xlYW5cbiAgbmFtZTogU3RyaW5nXG59XG5cbnR5cGUgVXBkYXRlQWNjb3VudEFkZHJlc3NQYXlsb2FkIHtcbiAgYWNjb3VudDogQWNjb3VudCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5pbnB1dCBDcmVhdGVBdXRvQWRkRnVuZHNJbnB1dCB7XG4gIGFtb3VudDogSW50IVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRlcG9zaXRzQWNjb3VudElkOiBJRFxuICBlbmRzQXQ6IFRpbWVcbiAgZmluYW5jaWFsQWNjb3VudElkOiBJRCFcbiAgaWRlbXBvdGVuY3lLZXk6IFN0cmluZyFcbiAgbW9udGhseVNjaGVkdWxlOiBNb250aGx5U2NoZWR1bGVcbiAgcGF5bWVudENsYXNzOiBQYXltZW50Q2xhc3MhXG4gIHNlbmRBdDogVGltZVxuICB0b3RhbE51bWJlck9mUGF5bWVudHM6IEludFxuICB3ZWVrbHlTY2hlZHVsZTogV2Vla2x5U2NoZWR1bGVcbn1cblxudHlwZSBTZXJ2aWNpbmdQb2xpY3kgaW1wbGVtZW50cyBOb2RlIHtcbiAgY2xvc2luZ1N0cmF0ZWd5OiBDbG9zaW5nU3RyYXRlZ3lcbiAgY29sbGVjdGVkTnVtRGF5c0FmdGVyQ2xvc2U6IEludFxuICBkZWxpbnF1ZW50TnVtRGF5c0FmdGVyQ2xvc2U6IEludFxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbn1cblxuXCJcIlwiQ29ubmVjdGlvbiBOb2RlIFR5cGUgRWR1Y2F0aW9uIFRpbGVcIlwiXCJcbnR5cGUgRWR1Y2F0aW9uVGlsZUNvbm5lY3Rpb24ge1xuICBlZGdlczogW0VkdWNhdGlvblRpbGVFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbmlucHV0IFR1cm5PZmZTZWVuRmxhZ0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJUYXJnZXQgZmxhZyBieSBrZXlcIlwiXCJcbiAga2V5OiBTZWVuRmxhZ0tleSFcbn1cblxudHlwZSBSZXdhcmRzVHJpZ2dlckluc3RhbmNlU3RhdGVFbXB0eSB7XG4gIF86IEJvb2xlYW5cbn1cblxuXCJcIlwiVGhlIGluc3RhbnQgcGF5b3V0IG9mZmVyIG9iamVjdC4gVGhpcyBjYW4gYmUgZWl0aGVyIGEgZ2VuZXJhdGVkIG9yIGFjY2VwdGVkIG9mZmVyXCJcIlwiXG50eXBlIFJlY2VpdmFibGVzT2ZmZXJzT2ZmZXIgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIGFkdmFuY2UgYW1vdW50IHRoYXQgdGhlIGN1c3RvbWVyIGFjY2VwdGVkXCJcIlwiXG4gIGFkdmFuY2VBbW91bnQ6IEZpbmFuY2lhbEFzc2V0XG4gIFwiXCJcIlRoZSBjdXN0b21lcidzIGFjY291bnQgaWRcIlwiXCJcbiAgY3VzdG9tZXJBY2NvdW50SWQ6IFN0cmluZyFcbiAgXCJcIlwiVGhlIGRldGFpbHMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgb2ZmZXJcIlwiXCJcbiAgZGV0YWlsczogUmVjZWl2YWJsZXNPZmZlcnNPZmZlckRldGFpbHNcbiAgXCJcIlwiVGltZXN0YW1wIG9mIHdoZW4gdGhlIG9mZmVyIGV4cGlyZXNcIlwiXCJcbiAgZXhwaXJlc0F0OiBUaW1lXG4gIFwiXCJcIlRoZSBmZWUgYW1vdW50IHRoYXQgdGhlIGN1c3RvbWVyIHdhcyBjaGFyZ2VkIG9uIHRoaXMgb2ZmZXJcIlwiXCJcbiAgZmVlQW1vdW50OiBGaW5hbmNpYWxBc3NldFxuICBcIlwiXCJUaGUgZmVlIHBlcmNlbnRhZ2UgYXBwbGllZCBvbiB0aGUgb2ZmZXJcIlwiXCJcbiAgZmVlUGVyY2VudGFnZTogRmxvYXRcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlRoZSBub24tcGVyZm9ybWFuY2UgcmVhc29uIChlbnVtKSBpZiB0aGUgb2ZmZXIgaXMgbm9uLXBlcmZvcm1hbnRcIlwiXCJcbiAgbm9uUGVyZm9ybWFuY2VSZWFzb246IFJlY2VpdmFibGVzT2ZmZXJzT2ZmZXJOb25QZXJmb3JtYW5jZVJlYXNvblxuICBcIlwiXCJUaGUgb2ZmZXIgYW1vdW50IHRoYXQgdGhlIGN1c3RvbWVyIGNhbiBhY2NlcHRcIlwiXCJcbiAgb2ZmZXJBbW91bnQ6IEZpbmFuY2lhbEFzc2V0XG4gIFwiXCJcIlRpbWVzdGFtcCBvZiB0aGUgb3JpZ2luYWwgZGF0ZSB3ZSBleHBlY3RlZCB0byBjb2xsZWN0IHRoZSBvZmZlclwiXCJcIlxuICBvcmlnaW5hbER1ZURhdGU6IFRpbWVcbiAgXCJcIlwiVGhlIHBheW91dCBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMgb2ZmZXJcIlwiXCJcbiAgcGF5b3V0OiBSZWNlaXZhYmxlc09mZmVyc1BheW91dFxuICBcIlwiXCJUaW1lc3RhbXAgd2hlbiB0aGUgb2ZmZXIgd2FzIGZ1bGx5IHJlcGFpZFwiXCJcIlxuICByZXBhaWRBdDogVGltZVxuICBcIlwiXCJUaGUgY3VycmVudCBzdGF0dXMgb2YgdGhlIG9mZmVyIChlbnVtKVwiXCJcIlxuICBzdGF0dXM6IFJlY2VpdmFibGVzT2ZmZXJzT2ZmZXJTdGF0dXMhXG4gIFwiXCJcIlRoZSB0b3RhbCBleHBvc3VyZSBjYXAgdGhhdCB3YXMgdXNlZCBkdXJpbmcgb2ZmZXIgZ2VuZXJhdGlvblwiXCJcIlxuICB0b3RhbEV4cG9zdXJlQ2FwOiBGaW5hbmNpYWxBc3NldFxuICBcIlwiXCJUaGUgdmVuZG9yIChzYWxlcyBwbGF0Zm9ybSwgaS5lLiwgQW1hem9uLCBTaG9waWZ5LCBldGMuKSBvYmplY3RcIlwiXCJcbiAgdmVuZG9yOiBSZWNlaXZhYmxlc09mZmVyc1ZlbmRvclxufVxuXG50eXBlIEZ1bmRpbmdTb3VyY2VDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtGdW5kaW5nU291cmNlRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG5cIlwiXCJUaGUgYWNjb3VudCBmdW5kaW5nIHNvdXJjZSBmb3IgdGhlIHBheXJvbGwgcHJvdmlkZXJcIlwiXCJcbnR5cGUgUGF5cm9sbFByb3ZpZGVyRnVuZGluZ1NvdXJjZSB7XG4gIFwiXCJcIlxuICBUaGUgYWNjb3VudCBpZCBvZiB0aGUgZnVuZGluZyBzb3VyY2VcbiAgTm90ZTogSWYgYWNjb3VudF9pZCBpcyBtaXNzaW5nLCB3ZSBoYXZlbid0IGtlZXB0IHRyYWNrIG9mIHdoaWNoIGFjY291bnQgaXMgZnVuZGluZyBwYXlyb2xsXG4gIFwiXCJcIlxuICBhY2NvdW50SWQ6IFN0cmluZ1xuICBcIlwiXCJUaGUgdHlwZSBvZiBmdW5kaW5nIHNvdXJjZVwiXCJcIlxuICBhY2NvdW50VHlwZTogUGF5cm9sbFByb3ZpZGVyRnVuZGluZ1NvdXJjZUFjY291bnRUeXBlIVxufVxuXG50eXBlIFJld2FyZHNBY2NydWFsRW50cnlDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtSZXdhcmRzQWNjcnVhbEVudHJ5RWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG5lbnVtIFJld2FyZHNIaXN0b3J5RW50cnlPcmRlckZpZWxkIHtcbiAgQU1PVU5UXG4gIElOU0VSVEVEX0FUXG4gIElOVkFMSURcbn1cblxuaW5wdXQgUHVsbERhdGFBc3luY0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBmaW5hbmNpYWxTb3VyY2VJZDogSUQhXG59XG5cbmlucHV0IFJlc3luY1JlaW1idXJzZW1lbnRJdGVtc0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nIVxuICBpbnRlZ3JhdGlvbklkOiBJRCFcbiAgcmVpbWJ1cnNlbWVudEl0ZW1JZHM6IFtJRF0hXG59XG5cbnR5cGUgSW50ZXJuYXRpb25hbFdpcmVDb25maWcge1xuICBjb3VudHJ5Q29uZmlnczogW0ludGVybmF0aW9uYWxXaXJlQ291bnRyeUNvbmZpZyFdIVxuICBkZXByZWNhdGVkSW5wdXRGaWVsZHM6IFtJbnRlcm5hdGlvbmFsV2lyZUlucHV0RmllbGQhXSFcbiAgaGlnaFJpc2tJbnB1dEZpZWxkczogW0ludGVybmF0aW9uYWxXaXJlSW5wdXRGaWVsZCFdIVxufVxuXG5lbnVtIENhc2hUcmFuc2FjdGlvbkludGVybmF0aW9uYWxXaXJlQWNjb3VudElkZW50aWZpZXJUeXBlIHtcbiAgQUNDT1VOVF9OVU1CRVJcbiAgSUJBTlxufVxuXG50eXBlIENhc2hUcmFuc2FjdGlvbkZpbmFuY2lhbEFjY291bnQge1xuICBcIlwiXCJFeHRlcm5hbCBmaW5hbmNpYWwgYWNjb3VudCBhc3NvY2lhdGVkIHdpdGggdGhpcyBUcmFuc2FjdGlvblwiXCJcIlxuICBmaW5hbmNpYWxBY2NvdW50OiBGaW5hbmNpYWxBY2NvdW50XG59XG5cbnR5cGUgQ291bnRlcnBhcnR5RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IENvdW50ZXJwYXJ0eVxufVxuXG5pbnB1dCBIZWFydGJlYXRJbnB1dCB7XG4gIFwiXCJcIklkIG9mIHRoZSBzZXNzaW9uIHRoYXQgaXMgYmVpbmcgcmVwb3J0ZWRcIlwiXCJcbiAgc2Vzc2lvbklkOiBTdHJpbmdcbn1cblxuaW5wdXQgU2V0UmVjZWl2YWJsZXNPZmZlcnNQYXlGZWVXaXRoUmV3YXJkc0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB2YWx1ZTogQm9vbGVhbiFcbn1cblxudHlwZSBEZXBhcnRtZW50Q29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbRGVwYXJ0bWVudEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxuaW5wdXQgVXBkYXRlSW50ZWdyYXRpb25TeW5jU2V0dGluZ3NJbnB1dCB7XG4gIGJhdGNoQ2FkZW5jZTogQmF0Y2hDYWRlbmNlXG4gIGJhdGNoRW50aXR5OiBCYXRjaEVudGl0eVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbiAgc3luY0Zyb206IFRpbWVcbiAgdmVyc2lvbjogSW50XG59XG5cbnR5cGUgRXJwRmVlZEVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBFcnBGZWVkXG59XG5cbmlucHV0IFJlZnJlc2hJbnRlZ3JhdGlvbkNyZWRlbnRpYWxzSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIFwiXCJcIkZpbHRlciBieSBpbnRlZ3JhdGlvbiBpZFwiXCJcIlxuICBpbnRlZ3JhdGlvbklkOiBJRFxuICBcIlwiXCJGaWx0ZXIgYnkgaW50ZWdyYXRpb24gc3RhdHVzXCJcIlwiXG4gIHN0YXR1czogU3RyaW5nXG59XG5cbnR5cGUgSW50ZWdyYXRpb24gaW1wbGVtZW50cyBOb2RlIHtcbiAgYWNjb3VudENhdGVnb3JpZXM6IEFjY291bnRDYXRlZ29yaWVzXG4gIGNyZWRlbnRpYWw6IENyZWRlbnRpYWxcbiAgXCJcIlwiVmVyc2lvbiBvZiBFUlAgc3Vic2NyaXB0aW9uIHRoZSBpbnRlZ3JhdGlvbiBjb3JyZXNwb25kcyB0by5cIlwiXCJcbiAgZXJwU3Vic2NyaXB0aW9uRGV0YWlsOiBFcnBTdWJzY3JpcHRpb25EZXRhaWxcbiAgZXJyb3JEZXRhaWxzOiBbSW50ZWdyYXRpb25FcnJvckRldGFpbHNdXG4gIGV4cG9ydHMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IEV4cG9ydENvbm5lY3Rpb25cbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIkxpc3Qgb2YgYXZhaWxhYmxlIGludGVncmF0aW9uIGVudGl0aWVzLiBTZWFyY2hhYmxlIGJ5IHByZWZpeCBhbmQgaW50ZWdyYXRpb24gZmllbGRcIlwiXCJcbiAgaW50ZWdyYXRpb25FbnRpdGllcyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZW50aXR5VHlwZTogU3RyaW5nLCBmaWVsZElkOiBTdHJpbmcsIGZpbHRlckRlbGV0ZWQ6IEJvb2xlYW4sIGZpcnN0OiBJbnQsIGxhc3Q6IEludCwgcXVlcnk6IFN0cmluZyk6IEV4dGVybmFsSW50ZWdyYXRpb25FbnRpdHlDb25uZWN0aW9uXG4gIFwiXCJcIkxpc3Qgb2YgYXZhaWxhYmxlIG1hcHBhYmxlIGludGVncmF0aW9uIGZpZWxkcyBmb3IgYW4gaW50ZWdyYXRpb25cIlwiXCJcbiAgaW50ZWdyYXRpb25GaWVsZHMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IEV4dGVybmFsSW50ZWdyYXRpb25GaWVsZENvbm5lY3Rpb25cbiAgaW50ZWdyYXRpb25SdWxlcyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogSW50ZWdyYXRpb25SdWxlQ29ubmVjdGlvblxuICBcIlwiXCJWZXJzaW9uIG9mIFF1aWNrQm9va3MgT25saW5lIHRoYXQgdGhlIGludGVncmF0aW9uIGNvcnJlc3BvbmRzIHRvLlwiXCJcIlxuICBxYm9PZmZlcmluZ1NrdTogU3RyaW5nXG4gIHNjb3BlczogW0ludGVncmF0aW9uU2NvcGVdXG4gIHNldHRpbmdzOiBJbnRlZ3JhdGlvblNldHRpbmdzXG4gIHNldHVwSW5zdHJ1Y3Rpb25zOiBTZXR1cEluc3RydWN0aW9uc1xuICBzdGF0dXM6IFN0cmluZ1xuICBcIlwiXCJDdXJyZW50IHN0YXRlIG9mIHRoZSB1c2VyJ3MgRVJQIHN1YnNjcmlwdGlvbiBzdGF0dXMuXCJcIlwiXG4gIHN1YnNjcmlwdGlvblN0YXR1czogU3RyaW5nXG4gIHVzZXJDYXRlZ29yaWVzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQsIHF1ZXJ5OiBTdHJpbmcpOiBVc2VyQ2F0ZWdvcnlDb25uZWN0aW9uXG4gIHZlbmRvcjogU3RyaW5nXG59XG5cbmlucHV0IEFkbWluVXBkYXRlQXBwcm92YWxzUmV2aWV3SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgcmVxdWVzdFNuYXBzaG90OiBBcHByb3ZhbHNSZXF1ZXN0SW5wdXRcbiAgcmV2aWV3SWQ6IElEIVxuICBzdGF0dXM6IEFwcHJvdmFsc1Jldmlld1N0YXR1cyFcbn1cblxuZW51bSBDYXNoQm9udXNTdGF0dXMge1xuICBBQ1RJVkVcbiAgRVhQSVJFRFxuICBUUklHR0VSRURcbn1cblxudHlwZSBSZXdhcmRzVHJpZ2dlckNhc2hBY3RpdmF0aW9uQ2FyZFNwZW5kQm9udXMge1xuICBhbW91bnRTcGVudFJlcXVpcmVkVXNkQ2VudHM6IEludCFcbiAgZXhwaXJhdGlvbkFmdGVyQ2FzaEFjdGl2YXRpb25EYXlzOiBJbnQhXG4gIHJld2FyZDogUmV3YXJkc1BvaW50UmV3YXJkIVxufVxuXG5lbnVtIERpc3B1dGVUcmFuc2FjdGlvblN0YXR1cyB7XG4gIFRSQU5TQUNUSU9OX1NUQVRVU19DTE9TRURcbiAgVFJBTlNBQ1RJT05fU1RBVFVTX0RSQUZUXG4gIFRSQU5TQUNUSU9OX1NUQVRVU19JTl9QUk9HUkVTU1xuICBUUkFOU0FDVElPTl9TVEFUVVNfUEVORElOR19SRVZJRVdcbiAgVFJBTlNBQ1RJT05fU1RBVFVTX1BFTkRJTkdfV0lUSERSQVdBTFxuICBUUkFOU0FDVElPTl9TVEFUVVNfVU5LTk9XTlxufVxuXG50eXBlIEZpbmFuY2lhbEJhbmtTdGF0ZW1lbnREb2N1bWVudEVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBGaW5hbmNpYWxCYW5rU3RhdGVtZW50RG9jdW1lbnRcbn1cblxuaW5wdXQgVXBkYXRlRXhwZW5zZXNTZXR0aW5nUnVsZXNJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcnVsZXM6IFtFeHBlbnNlc1J1bGVJbnB1dF0hXG4gIHNlbmRFbWFpbFRvRW1wbG95ZWVzOiBCb29sZWFuXG4gIHNldHRpbmdJZDogSUQhXG59XG5cbmVudW0gUmZpU3RhdHVzIHtcbiAgUkZJX1NUQVRVU19DQU5DRUxMRURcbiAgUkZJX1NUQVRVU19JTlZBTElEXG4gIFJGSV9TVEFUVVNfTkVXXG4gIFJGSV9TVEFUVVNfUEVORElOR19DVVNUT01FUlxuICBSRklfU1RBVFVTX1BFTkRJTkdfUkVWSUVXXG4gIFJGSV9TVEFUVVNfUkVTUE9OU0VfQUNDRVBURURcbiAgUkZJX1NUQVRVU19SRVNQT05TRV9QQVJUSUFMTFlfQUNDRVBURURcbiAgUkZJX1NUQVRVU19SRVNQT05TRV9SRUNFSVZFRFxuICBSRklfU1RBVFVTX1JFU1BPTlNFX1JFSkVDVEVEXG59XG5cbnR5cGUgUHJlcGFyZU11bHRpRmVlUmVjZWl2YWJsZXNPZmZlcnNGb3JBY2NlcHRhbmNlUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgb2ZmZXJzR3JvdXBzOiBbUmVjZWl2YWJsZXNPZmZlcnNPZmZlcnNHcm91cCFdIVxufVxuXG50eXBlIERlcG9zaXRzU3RhdGVtZW50RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IERlcG9zaXRzU3RhdGVtZW50XG59XG5cbmVudW0gU3RhdHVzVmlldyB7XG4gIEFDVElWRVxuICBFWFBJUkVEXG4gIExPQ0tFRFxuICBURVJNSU5BVEVEXG4gIFdBSVRJTkdfQUNUSVZBVElPTlxufVxuXG5pbnB1dCBVbnN1c3BlbmRDYXJkSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbn1cblxuZW51bSBGaW5hbmNpYWxzQ29ubmVjdFJlcXVlc3RUeXBlIHtcbiAgRklOSUNJVFlfQ09OTkVDVFxufVxuXG5lbnVtIFR4UGF5bWVudFJhaWwge1xuICBBQ0hcbiAgQ0hFUVVFXG4gIFdJUkVcbn1cblxuZW51bSBBY2hEZWJpdENhcGFiaWxpdHkge1xuICBFTkFCTEVEXG4gIFJFU1RSSUNURURcbiAgUkVWT0tFRFxufVxuXG5pbnB1dCBEaXNtaXNzUHJvbW90aW9uSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHByb21vdGlvbk5hbWU6IFN0cmluZyFcbn1cblxuXCJcIlwiVGhlIHNvdXJjZSBvZiBmdW5kcyB3YXMgYSByZXdhcmRzIHJlZGVtcHRpb25cIlwiXCJcbnR5cGUgUmV3YXJkc1JlZGVtcHRpb25Tb3VyY2Uge1xuICBcIlwiXCJUaGUgbWF4aW11bSBhbW91bnQgb2YgcmV3YXJkcyByZWRlZW1lZFwiXCJcIlxuICBtYXhpbXVtQW1vdW50OiBGaW5hbmNpYWxBc3NldFxuICBcIlwiXCJUaGUgaWQgb2YgdGhlIHJld2FyZHMgcmVkZW1wdGlvblwiXCJcIlxuICByZXdhcmRzUmVkZW1wdGlvbkluc3RhbmNlSWQ6IFN0cmluZyFcbn1cblxuZW51bSBDYXNoVHJhbnNhY3Rpb25DYW5jZWxsYXRpb25SZWFzb24ge1xuICBBQ0NPVU5UX0NMT1NFRFxuICBBQ0NPVU5UX05PVF9GT1VORFxuICBBQ0hfREVCSVRfQ0FQQUJJTElUWV9SRVZPS0VEXG4gIEFQUFJPVkFMX0RFTklFRFxuICBCTE9DS0VEX0JZX1BPU0lUSVZFX1BBWVxuICBDVVNUT01FUl9FRElURURcbiAgRkFJTEVEX1ZFUklGSUNBVElPTlxuICBJTlNVRkZJQ0lFTlRfRlVORFNcbiAgSU5WQUxJRFxuICBNSVNTRURfU0VORF9PTlxuICBVU0VSX0NBTkNFTExFRFxufVxuXG50eXBlIEFjY2VwdERldkFjY2Vzc0FncmVlbWVudFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHN1Y2Nlc3M6IEJvb2xlYW5cbn1cblxuaW5wdXQgVXBkYXRlQ2FyZE1ldGFkYXRhSW5wdXQge1xuICBjYXJkSWQ6IElEIVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRlZmF1bHRNZW1vOiBTdHJpbmdcbn1cblxuaW5wdXQgT3B0T3V0T2ZJbmNlbnRpdmVDYW1wYWlnbklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJPcHQgb3V0IHR5cGVcIlwiXCJcbiAgb3B0T3V0VHlwZTogSW5jZW50aXZlT3B0T3V0VHlwZSFcbiAgXCJcIlwiVGhlIHBsYWNlbWVudCBpZFwiXCJcIlxuICBwbGFjZW1lbnRJZDogSUQhXG59XG5cbnR5cGUgUGF5bWVudENvbnRhY3RDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtQYXltZW50Q29udGFjdEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgdG90YWxDb3VudDogSW50IVxufVxuXG5cIlwiXCJNYXJrZXRvIGxlYWQgZm9ybSBvYmplY3RcIlwiXCJcbnR5cGUgTWFya2V0b0xlYWRGb3JtIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcInRoZSBNYXJrZXRvIGZvcm0gaWRcIlwiXCJcbiAgZm9ybUlkOiBTdHJpbmchXG4gIFwiXCJcInRoZSBNYXJrZXRvIGZvcm0gY29udGVudFwiXCJcIlxuICBmb3JtSnNvbjogU3RyaW5nIVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbn1cblxuZW51bSBVc2VyUm9sZVR5cGVJbnB1dCB7XG4gIFwiXCJcImFuIGFkbWluIGlzIGEgY2FyZC1vbmx5IGFkbWluXCJcIlwiXG4gIEFETUlOXG4gIFwiXCJcInRoaXMgaXMgY2FyZCBhbmQgY2FzaCBib29ra2VlcGVyXCJcIlwiXG4gIEJPT0tLRUVQRVJcbiAgXCJcIlwidGhpcyBpcyBhIGNhcmQgcmVndWxhciB1c2VyIGFuZCBjYXNoIHVzZXIgcm9sZVwiXCJcIlxuICBDQVNIX0FORF9DQVJEX1VTRVJcbiAgXCJcIlwidGhpcyBpcyBhIGNhcmQtb25seSByZWd1bGFyIHVzZXJcIlwiXCJcbiAgUkVHVUxBUlxuICBcIlwiXCJhIHN1cGVyYWRtaW4gaXMgYSBjYXNoIGFkbWluIGFuZCBjYXJkIGFkbWluXCJcIlwiXG4gIFNVUEVSQURNSU5cbn1cblxuZW51bSBQcmVtaXVtU2V0dGluZ0V2ZW50U291cmNlIHtcbiAgQlJFWF9JTlRFUk5BTFxuICBJTlZBTElEXG4gIFVTRVJcbn1cblxudHlwZSBDcmVhdGVSZXNwb25zZVRvUmZpUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcmZpOiBSZmlcbn1cblxudHlwZSBDdXN0b21lckF0dHJpYnV0ZXMgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIG51bWJlck9mRW1wbG95ZWVzOiBJbnRcbiAgb25lQnJleFNlZ21lbnQ6IE9uZUJyZXhTZWdtZW50IVxufVxuXG50eXBlIEJvb2tUcmFuc2ZlckRldGFpbHMge1xuICBzb3VyY2VEZXBvc2l0c0FjY291bnQ6IERlcG9zaXRzQWNjb3VudFxuICB0YXJnZXREZXBvc2l0c0FjY291bnQ6IERlcG9zaXRzQWNjb3VudFxufVxuXG50eXBlIENhc2hUcmFuc2FjdGlvblJlY2VpdmFibGVzT2ZmZXJzQWR2YW5jZURldGFpbHMge1xuICBfOiBCb29sZWFuXG59XG5cbnR5cGUgRXh0ZXJuYWxJbnRlZ3JhdGlvbkVudGl0eUNvbm5lY3Rpb24ge1xuICBlZGdlczogW0V4dGVybmFsSW50ZWdyYXRpb25FbnRpdHlFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbnR5cGUgTm90aWZ5VXNlck9mQ2FyZFJlcXVlc3RQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5pbnB1dCBVcGRhdGVMb2NhdGlvbklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZXNjcmlwdGlvbjogU3RyaW5nXG4gIGlkOiBJRCFcbiAgbmFtZTogU3RyaW5nIVxufVxuXG5cIlwiXCJQb2ludCBoaXN0b3J5IGZvciByZXdhcmRzIHRyYW5zYWN0aW9uc1wiXCJcIlxudHlwZSBSZXdhcmRzUG9pbnRzSGlzdG9yeUVudHJ5IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIkFtb3VudCBvZiBwb2ludHMgKDEvMTAwIG9mIGEgcG9pbnQpXCJcIlwiXG4gIGFtb3VudENlbnRpcG9pbnRzOiBJbnQhXG4gIFwiXCJcIk1vcmUgc3BlY2lmaWMgZGVzY3JpcHRpb24gb2YgdGhlIHR5cGUgb2YgcG9pbnQgdHJhbnNhY3Rpb25cIlwiXCJcbiAgZGVzY3JpcHRpb25UeXBlOiBSZXdhcmRzUG9pbnRzSGlzdG9yeUVudHJ5RGVzY3JpcHRpb25UeXBlIVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiV2hlbiB0aGUgcG9pbnRzIHdlcmUgZWFybmVkIG9yIGdyYW50ZWRcIlwiXCJcbiAgaW5zZXJ0ZWRBdDogVGltZSFcbiAgXCJcIlwiUGF5bG9hZCB3aXRoIG1vcmUgZGV0YWlscyBhYm91dCB0aGUgdHJhbnNhY3Rpb25cIlwiXCJcbiAgcGF5bG9hZDogUmV3YXJkc0hpc3RvcnlFbnRyeVBheWxvYWRcbiAgXCJcIlwiVHlwZTogQWNjcnVhbC9SZWRlbXB0aW9uXCJcIlwiXG4gIHR5cGU6IFJld2FyZHNQb2ludHNIaXN0b3J5RW50cnlUeXBlIVxuICBcIlwiXCJVc2VyIHdobyByZWRlZW1lZCB0aGUgcG9pbnRzXCJcIlwiXG4gIHVzZXI6IFVzZXJcbn1cblxudHlwZSBBY2hQYXltZW50SW5zdHJ1bWVudCB7XG4gIGFjY291bnRDbGFzczogQmFua0FjY291bnRDbGFzc1xuICBhY2NvdW50TnVtYmVyOiBTdHJpbmdcbiAgYWNjb3VudFR5cGU6IEJhbmtBY2NvdW50VHlwZVxuICBcIlwiXCJBIHNtYWxsIGxvZ28gZm9yIHRoZSBiZW5lZmljaWFyeSBiYW5rIGluIGJhc2U2NCBmb3JtYXQuIFdBUk5JTkc6IG1heSBjYXVzZSBzaWduaWZpY2FudGx5IHNsb3dlciByZXNwb25zZSB0aW1lc1wiXCJcIlxuICBiZW5lZmljaWFyeUJhbmtMb2dvQmFzZTY0OiBTdHJpbmdcbiAgXCJcIlwiTm90IHlldCBpbXBsZW1lbnRlZCwgd2lsbCBhbHdheXMgYmUgbnVsbC4gSXMgaW4gdGhlIHNjaGVtYSBzbyB0aGUgYXBwIGNhbiB1c2UgdGhlIFVSTCBpZiBhdmFpbGFibGUsIGZhbGxpbmcgYmFjayB0byBiYXNlNjRcIlwiXCJcbiAgYmVuZWZpY2lhcnlCYW5rTG9nb1VybDogU3RyaW5nXG4gIGJlbmVmaWNpYXJ5QmFua05hbWU6IFN0cmluZ1xuICByb3V0aW5nTnVtYmVyOiBTdHJpbmdcbn1cblxudHlwZSBDYXJkU3RhdGVtZW50IGltcGxlbWVudHMgTm9kZSB7XG4gIGVuZEJhbGFuY2VDZW50czogSW50XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBwYXltZW50c1RvdGFsQ2VudHM6IEludFxuICBwZXJpb2RFbmRUaW1lOiBUaW1lIVxuICBwZXJpb2RTdGFydFRpbWU6IFRpbWUhXG4gIHJld2FyZHNUb3RhbENlbnRzOiBJbnRcbiAgXCJcIlwidG90YWwgc3BlbmQgb24gdGhlIHN0YXRlbWVudCBpbiBjZW50c1wiXCJcIlxuICBzcGVuZFRvdGFsQ2VudHM6IEludFxuICBzdGFydEJhbGFuY2VDZW50czogSW50XG59XG5cbnR5cGUgVXBkYXRlVXNlckNhdGVnb3JpZXNQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB1c2VyQ2F0ZWdvcmllczogW1VzZXJDYXRlZ29yeSFdXG59XG5cbmlucHV0IFVwZGF0ZUV4cGVuc2VzU2V0dGluZ0F1dG9EaXNtaXNzTWF0Y2hlckpzb25JbnB1dCB7XG4gIGF1dG9EaXNtaXNzTWF0Y2hlckpzb246IFN0cmluZyFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpZDogSUQhXG59XG5cbmlucHV0IFNldE1vbnRobHlVc2VyTGltaXRJbnB1dCB7XG4gIGFtb3VudDogSW50XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdXNlcklkOiBJRCFcbn1cblxudHlwZSBDYXNoVHJhbnNhY3Rpb25EZXBvc2l0ZWRDaGVxdWVSZXR1cm5EZXRhaWxzIHtcbiAgXCJcIlwiRGV0YWlscyBmcm9tIHRoZSB0cmFuc2FjdGlvbiB0aGlzIHJldHVybiB3YXMgZm9yXCJcIlwiXG4gIG9yaWdpbmFsRGV0YWlsczogQ2FzaFRyYW5zYWN0aW9uRGVwb3NpdGVkQ2hlcXVlRGV0YWlscyFcbiAgXCJcIlwiVGhlIHJlYXNvbiB3aHkgdGhlIG9yaWdpbmFsIHRyYW5zYWN0aW9uIHdhcyByZXR1cm5lZFwiXCJcIlxuICByZXR1cm5SZWFzb246IENhc2hUcmFuc2FjdGlvbkNoZXF1ZVJldHVyblJlYXNvbiFcbn1cblxudHlwZSBBcGlDbGllbnQge1xuICBjbGllbnRJZDogU3RyaW5nXG4gIGNsaWVudE5hbWU6IFN0cmluZ1xuICBjbGllbnRVcmw6IFN0cmluZ1xufVxuXG5pbnB1dCBEZWxldGVCaWxsSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbn1cblxudHlwZSBJc3N1ZUNvbGxlY3Rpb25QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBjb2xsZWN0aW9uSW50ZW50aW9uOiBDb2xsZWN0aW9uSW50ZW50aW9uIVxufVxuXG5pbnB1dCBJbnB1dENhc2hSZWN1cnJpbmdTY2hlZHVsZVdlZWtseSB7XG4gIGNhZGVuY2U6IEludCFcbiAgZGF5T2ZXZWVrOiBDYXNoVHJhbnNhY3Rpb25CdXNpbmVzc0RheSFcbn1cblxudW5pb24gRmluYW5jaWFsU291cmNlUGF5bG9hZCA9IEZpbmljaXR5UGF5bG9hZCB8IFBsYWlkUGF5bG9hZCB8IFRlbGxlclBheWxvYWRcblxuaW5wdXQgQWN0aXZhdGVVc2VySW5mbyB7XG4gIGxlZ2FsQWdyZWVtZW50czogW0xlZ2FsQWdyZWVtZW50UmVmZXJlbmNlXVxuICBwYXNzd29yZDogU3RyaW5nIVxufVxuXG5lbnVtIERvY3VtZW50T2NyQ2xhc3NpZmljYXRpb25UeXBlIHtcbiAgXCJcIlwiVGhlIGRvY3VtZW50IGNsYXNzaWZpY2F0aW9uIGlzIHVua25vd25cIlwiXCJcbiAgSU5WQUxJRFxuICBJUlNfMTQ3X0MgQGRlcHJlY2F0ZWQocmVhc29uOiBcIlVzZSBpcnNfMTQ3Y1wiKVxuICBcIlwiXCJBIHByb29mIG9mIEVJTiBsZXR0ZXIuIFRoaXMgbWF5IGJlIHJlcXVlc3RlZCBvbiBkZW1hbmQgYnkgYnVzaW5lc3Nlcy5cIlwiXCJcbiAgSVJTXzE0N0NcbiAgXCJcIlwiQW4gRUlOIGNvbmZpcm1hdGlvbiBsZXR0ZXIuIFVzZXJzIHJlY2VpdmUgdGhpcyBvbmUgdGltZSBhZnRlciBhcHBseWluZyBmb3IgYW4gRUlOLlwiXCJcIlxuICBJUlNfQ1BfNTc1XG59XG5cbmVudW0gUmVmZXJyYWxSZXdhcmRUeXBlIHtcbiAgR0lGVF9DQVJEXG4gIFBPSU5UU1xuICBXQUlWRURfQ0FSRF9GRUVTXG59XG5cblwiXCJcIk1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCByZWNlaXZhYmxlc19vZmZlcnMgYWNjb3VudFwiXCJcIlxudHlwZSBSZWNlaXZhYmxlc09mZmVyc0FjY291bnRNZXRhZGF0YSB7XG4gIFwiXCJcIlRoZSBlZmZlY3RpdmUgZmVlIHByb2dyYW0gKGZyZWUvZGVmYXVsdCkgZm9yIGFuIGFjY291bnRcIlwiXCJcbiAgY3VycmVudEZlZVByb2dyYW06IFJlY2VpdmFibGVzT2ZmZXJzRmVlUHJvZ3JhbSFcbiAgXCJcIlwiVGhlIGZlZSBwcm9ncmFtIChmcmVlL2RlZmF1bHQpIGFuIGFjY291bnQgaXMgdW5kZXIgd2hlbiB0aGV5IG9uYm9hcmRcIlwiXCJcbiAgZnVubmVsRmVlUHJvZ3JhbTogUmVjZWl2YWJsZXNPZmZlcnNGZWVQcm9ncmFtIVxufVxuXG5pbnB1dCBWYWxpZGF0ZUNoZXF1ZUltYWdlc0lucHV0IHtcbiAgYW1vdW50VXNkQ2VudHM6IEludCFcbiAgYXR0ZW1wdE51bWJlcjogSW50IVxuICBiYWNrSW1hZ2VBc3NldElkOiBJRFxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRlcG9zaXRzQWNjb3VudElkOiBJRCFcbiAgZnJvbnRJbWFnZUFzc2V0SWQ6IElEXG4gIHZhbGlkYXRpb25UeXBlOiBDaGVxdWVJbWFnZVZhbGlkYXRpb25UeXBlXG59XG5cbmVudW0gUmVjZWl2YWJsZXNPZmZlcnNBY2NvdW50U3RhdHVzIHtcbiAgQUNUSVZFXG4gIEFDVElWRV9UUklBTFxuICBERUFDVElWQVRFRFxuICBJTlZBTElEXG4gIElOVklURURcbiAgUkVKRUNURURcbiAgU1VTUEVOREVEXG59XG5cbnR5cGUgQ3JlYXRlU3RhdGVtZW50RW50cmllc1NlYXJjaFJlcG9ydFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHJlcG9ydDogUmVwb3J0XG59XG5cbmVudW0gT3JkZXJEaXJlY3Rpb24ge1xuICBBU0NcbiAgREVTQ1xufVxuXG5pbnB1dCBDb25uZWN0UGxhaWRJbnN0aXR1dGlvbklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJQbGFpZCdzIGlkIG9mIHRoZSBpbnN0aXR1dGlvblwiXCJcIlxuICBwbGFpZEluc3RpdHV0aW9uSWQ6IFN0cmluZyFcbiAgXCJcIlwiUHVibGljIHRva2VuIGZyb20gUGxhaWQgTGlua1wiXCJcIlxuICBwdWJsaWNUb2tlbjogU3RyaW5nIVxuICBcIlwiXCJXaGV0aGVyIGFjY291bnQgZGV0YWlscyBzaG91bGQgYmUgcHVsbGVkIHN5bmNocm9ub3VzbHkgd2l0aCB0aGlzIHJlcXVlc3RcIlwiXCJcbiAgc2hvdWxkUHVsbERldGFpbHM6IEJvb2xlYW4gPSBmYWxzZVxufVxuXG50eXBlIE9uYm9hcmRpbmdJbmZvcm1hdGlvblJlcXVlc3RFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogT25ib2FyZGluZ0luZm9ybWF0aW9uUmVxdWVzdFxufVxuXG50eXBlIFhlcm9UcmFja2luZ0NhdGVnb3J5IHtcbiAgY2F0ZWdvcnlOYW1lOiBTdHJpbmdcbiAgY2F0ZWdvcnlOYW1lSWQ6IFN0cmluZ1xuICBjYXRlZ29yeU9wdGlvbjogU3RyaW5nXG4gIGNhdGVnb3J5T3B0aW9uSWQ6IFN0cmluZ1xuICBpc0luYWN0aXZlOiBCb29sZWFuXG59XG5cbnR5cGUgSW52b2ljZVRlbXBsYXRlIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIkNvbXBhbnkgY29udGFjdCBpbmZvIG9mIHRoZSBpbnZvaWNlIHRlbXBsYXRlLlwiXCJcIlxuICBjb250YWN0OiBJbnZvaWNpbmdDb250YWN0XG4gIFwiXCJcImZvb3RlclwiXCJcIlxuICBmb290ZXI6IFN0cmluZ1xuICBcIlwiXCJIZWFkZXJcIlwiXCJcbiAgaGVhZGVyOiBTdHJpbmdcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIklkZW1wb3RlbmN5IGtleS5cIlwiXCJcbiAgaWRlbXBvdGVuY3lLZXk6IFN0cmluZ1xuICBcIlwiXCJMb2dvIHVyaS5cIlwiXCJcbiAgbG9nb1VyaTogU3RyaW5nXG4gIFwiXCJcIkxvZ28gdXJsLlwiXCJcIlxuICBsb2dvVXJsOiBTdHJpbmdcbiAgXCJcIlwibm90ZVwiXCJcIlxuICBub3RlOiBTdHJpbmdcbn1cblxudHlwZSBQZW5kaW5nUmVjb3JkQXBwcm92YWxSZXNwb25zZSB7XG4gIGFwcHJvdmFsUGF5bWVudENvbnRleHQ6IEFwcHJvdmFsUGF5bWVudENvbnRleHRcbiAgcGVuZGluZ1JlY29yZEFwcHJvdmFsOiBQZW5kaW5nUmVjb3JkQXBwcm92YWwhXG59XG5cbnR5cGUgRGVsZXRlU3Vic2NyaXB0aW9uUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBFeHBlbnNlc0ZsYWdFdmVudENvbm5lY3Rpb24ge1xuICBlZGdlczogW0V4cGVuc2VzRmxhZ0V2ZW50RWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG5lbnVtIEV4cGVuc2VzU2V0dGluZ1N0YXR1cyB7XG4gIEFDVElWRVxuICBESVNBQkxFRFxuICBQQVVTRURcbn1cblxudHlwZSBSZXdhcmRzVHJpZ2dlclJlZmVycmVyQXdhcmQge1xuICByZWZlcnJlclJld2FyZDogUmV3YXJkc1BvaW50UmV3YXJkIVxuICByZWZlcnJlclJld2FyZFR5cGU6IFN0cmluZyFcbn1cblxudHlwZSBBcHByb3ZhbHNSZXZpZXdBc3NpZ25lZSBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgdXNlcjogVXNlclxufVxuXG50eXBlIFBlck1lcmNoYW50U3RhdHMgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIGxhc3RQdXJjaGFzZVRpbWU6IFRpbWVcbiAgbWVyY2hhbnQ6IE1lcmNoYW50XG59XG5cbnR5cGUgVXBkYXRlSW50ZWdyYXRpb25DcmVkZW50aWFsUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaW50ZWdyYXRpb246IEludGVncmF0aW9uXG59XG5cbnR5cGUgT25ib2FyZGluZ0FwcGxpY2F0aW9uRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IE9uYm9hcmRpbmdBcHBsaWNhdGlvblxufVxuXG5lbnVtIE5vdGlmaWNhdGlvblR5cGUge1xuICBDT0xMRUNUSU9OX0ZBSUxFRFxuICBERUxJTlFVRU5UXG4gIERFUE9TSVRTX0JPT0tfVFJBTlNGRVJcbiAgREVQT1NJVFNfUEFZTUVOVF9BUFBST1ZBTF9SRVFVRVNUXG4gIERFUE9TSVRTX1BBWU1FTlRfQVBQUk9WQUxfUkVTUE9OU0VcbiAgREVQT1NJVFNfUEFZTUVOVF9TVEFUVVNcbiAgREVQT1NJVFNfVFJBTlNBQ1RJT05fQVBQUk9WQUxfUkVRVUVTVFxuICBERVBPU0lUU19UUkFOU0FDVElPTl9BUFBST1ZBTF9SRVNQT05TRVxuICBERVBPU0lUU19UUkFOU0FDVElPTl9CTE9DS0VEX0JZX1BPU0lUSVZFX1BBWVxuICBERVBPU0lUU19UUkFOU0FDVElPTl9TVEFUVVNcbiAgRElTQ09OTkVDVEVEX0JBTktfQUNDT1VOVFNcbiAgRVhQRU5TRVNfUkVWSUVXRVJcbiAgRlVORElOR19TT1VSQ0VfVkVSSUZJQ0FUSU9OX0ZBSUxFRFxuICBHTE9CQUxfTElNSVRfUkVBQ0hFRFxuICBHTE9CQUxfTElNSVRfV0FSTklOR1xuICBMSU1JVF9EUk9QXG4gIExJTUlUX1dBUk5JTkdcbiAgTElNSVRfV0FSTklOR19MT1dfQ0FTSF9CQUxBTkNFXG4gIFBSSU1JVElWRVNfQ0FSRF9UUkFOU0FDVElPTl9BUFBST1ZFRFxuICBQUklNSVRJVkVTX0VYUEVOU0VTX05FV19QT0xJQ1lcbiAgUFJJTUlUSVZFU19FWFBFTlNFU19SRVZJRVdFUlxuICBQUklNSVRJVkVTX0VYUEVOU0VTX1NQRU5ERVJcbiAgUFJJTUlUSVZFU19FWFBFTlNFU19VUERBVEVfUE9MSUNZXG4gIFJFQ0VJUFRfQVVUT0dFTkVSQVRFRFxuICBTVEFURU1FTlRfUkVRVUVTVFxuICBUUkFOU0FDVElPTl9BUFBST1ZFRFxuICBUUkFOU0FDVElPTl9BUFBST1ZFRF9WMlxuICBUUkFOU0FDVElPTl9SRUZVU0VEXG59XG5cbmlucHV0IFBheWVlIHtcbiAgY29udGFjdElkOiBJRCFcbiAgY29udGFjdFZlcnNpb246IEludCFcbiAgcGF5bWVudEluc3RydW1lbnRJZDogSUQhXG4gIHBheW1lbnRJbnN0cnVtZW50VmVyc2lvbjogSW50IVxufVxuXG50eXBlIE1pbGVzVHJhbnNmZXJDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtNaWxlc1RyYW5zZmVyRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG50eXBlIERlbGV0ZUJpbGxQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIENvbnN0YW50cyB7XG4gIGNhc2hCYW5rOiBDYXNoQmFuayFcbiAgd2lyZUJhbms6IFdpcmVCYW5rIVxufVxuXG5cIlwiXCJcblRoZSBmdW5kaW5nIHNvdXJjZSB0eXBlIGZvciBhIHBheXJvbGwgcHJvdmlkZXIuXG4tIGRlcG9zaXRzX2FjY291bnQ6IEZ1bmRlZCBieSBhIGRlcG9zaXRzIGFjY291bnQgKEJyZXggQ2FzaClcbi0gZmluYW5jaWFsX2FjY291bnQ6IEZ1bmRlZCBieSBhbiBleHRlcm5hbCBmaW5hbmNpYWwgYWNjb3VudFxuLSB1bmtub3duOiBBbiB1bmtub3duIGV4dGVybmFsIHNvdXJjZVxuXCJcIlwiXG5lbnVtIFBheXJvbGxQcm92aWRlckZ1bmRpbmdTb3VyY2VBY2NvdW50VHlwZSB7XG4gIERFUE9TSVRTX0FDQ09VTlRcbiAgRklOQU5DSUFMX0FDQ09VTlRcbiAgVU5LTk9XTlxufVxuXG5pbnB1dCBDcmVhdGVQYXlyb2xsUHJvdmlkZXJJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGVwb3NpdHNBY2NvdW50SWQ6IElEIVxuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nIVxuICBuYW1lOiBTdHJpbmdcbn1cblxudHlwZSBSZXdhcmRzVHJpZ2dlckVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBSZXdhcmRzVHJpZ2dlclxufVxuXG5pbnB1dCBDcmVhdGVTdWJzY3JpcHRpb25zSW5wdXQge1xuICBjaGFubmVsSWQ6IElEIVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIG5vdGlmaWNhdGlvblR5cGVzOiBbTm90aWZpY2F0aW9uVHlwZSFdIVxufVxuXG50eXBlIEV4cGVuc2VzUnVsZSBpbXBsZW1lbnRzIE5vZGUge1xuICBkZXNjcmlwdGlvbjogU3RyaW5nXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBtYXRjaGVySnNvbjogU3RyaW5nXG4gIG5hbWU6IFN0cmluZ1xuICBzdGF0dXM6IEV4cGVuc2VzUnVsZVN0YXR1c1xuICB0eXBlOiBFeHBlbnNlc1J1bGVUeXBlXG59XG5cbnR5cGUgUmVmZXJVc2VyUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcmVmZXJyYWw6IFJlZmVycmFsUmVjb3JkIVxufVxuXG5pbnB1dCBTZXRBY2NvdW50UmVzdHJpY3RBY2hEZWJpdHNJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGVwb3NpdHNBY2NvdW50SWQ6IElEIVxuICByZXN0cmljdEFjaERlYml0czogQm9vbGVhbiFcbn1cblxuaW5wdXQgQ29tcGxldGVQZW5kaW5nUmVjb3JkQXBwcm92YWxMb2dnZWRPdXRJbnB1dCB7XG4gIGFwcHJvdmFsVG9rZW46IFN0cmluZyFcbiAgYXBwcm92ZXJVc2VySWQ6IFN0cmluZyFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZWNpc2lvbjogUGVuZGluZ1JlY29yZEFwcHJvdmFsRGVjaXNpb24hXG4gIGRlY2lzaW9uTm90ZXM6IFN0cmluZ1xuICBkZWNpc2lvblJlYXNvbjogUGVuZGluZ1JlY29yZEFwcHJvdmFsRGVjaXNpb25SZWFzb25cbn1cblxuaW5wdXQgQWNjZXB0TXVsdGlwbGVSZWNlaXZhYmxlc09mZmVyc0dyb3Vwc0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBvZmZlcnNHcm91cElkczogW0lEIV0hXG59XG5cbmVudW0gU3RhdGVtZW50RW50cnlJbnRlZ3JhdGlvblN0YXR1cyB7XG4gIEVYUE9SVEVEXG4gIEZBSUxFRFxufVxuXG50eXBlIEludGVncmF0aW9uUnVsZSBpbXBsZW1lbnRzIE5vZGUge1xuICBib2R5OiBKc29uXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBuYW1lOiBTdHJpbmdcbiAgcHJpb3JpdHk6IEludFxuICB0eXBlOiBTdHJpbmdcbn1cblxudHlwZSBGaWxlQXNzZXQge1xuICBjb250ZW50VHlwZTogU3RyaW5nXG4gIG5hbWU6IFN0cmluZ1xufVxuXG5lbnVtIFJlY2VpdmFibGVzT2ZmZXJzQ3VzdG9tZXJDaGVja05hbWUge1xuICBBQ1RJVkVfQ1VSUkVOVF9UQVJHRVRfQUNDT1VOVF9DT05ORUNUSU9OXG4gIEFNQVpPTl9TRUxMRVJfSEVBTFRIXG4gIEVYUEVSSUFOX1NUQU5ESU5HXG4gIEZJUlNUX1RSQU5TQUNUSU9OX0RBVEVcbiAgRlJBVURfRkxBR1NcbiAgR0VORVJBTF9QVVJDSEFTRVJfQ09OQ0VOVFJBVElPTlxuICBIRUFMVEhZX0FORF9IQVNfU0VUVExFRF9DT0xMRUNUSU9OU19GVU5ESU5HX1NPVVJDRVxuICBIRUFMVEhZX0ZVTkRJTkdfU09VUkNFXG4gIEhJU1RPUklDQUxfREVMSU5RVUVOQ0lFU1xuICBJTlZBTElEXG4gIExBU1RfMzBEX1NBTEVTXG4gIExPU1NfT0ZfUFJJVklMRUdFU1xuICBMT1dfRVNUSU1BVEVEX1BBWU9VVFxuICBOT05fUEVSRk9STUFOVF9QQVlPVVRcbiAgTk9OX1pFUk9fUEFZT1VUXG4gIE9OQk9BUkRJTkdfUEFZT1VUX1RPX0JFX0RFUE9TSVRFRF9CUkVYX0NBU0hcbiAgT05CT0FSRElOR19QTEFURk9STV9ERVJPR0FUT1JZX0VWRU5UU1xuICBQQVlPVVRfREVQT1NJVEVEX0JSRVhfQ0FTSFxuICBQQVlPVVRfVE9fQkVfREVQT1NJVEVEX0JSRVhfQ0FTSFxuICBQTEFURk9STV9DT05ORUNUSU9OXG4gIFBMQVRGT1JNX0RFUk9HQVRPUllfRVZFTlRTXG4gIFBMQVRGT1JNX0RFUk9HQVRPUllfRVZFTlRTX0NBUFxuICBQUk9EVUNUX0FVVEhFTlRJQ0lUWV9ERUZFQ1RTXG4gIFBST0RVQ1RfQVVUSEVOVElDSVRZX0RFRkVDVFNfQ0FQXG4gIFBST0hJQklURURfSVRFTVNcbiAgU0FMRVNfVkVMT0NJVFlcbiAgU1RBTkRBUkRfUEFZT1VUX05FVF9TQUxFU1xuICBWRVJJRklFRF9GVU5ESU5HX1NPVVJDRVxuICBWRVJJRklFRF9PUl9QRU5ESU5HX0ZVTkRJTkdfU09VUkNFXG59XG5cbnR5cGUgSW52b2ljaW5nQWNjb3VudCBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaGUgY3VzdG9tZXJfYWNjb3VudF9pZCBvZiB0aGUgaW52b2ljaW5nIGFjY291bnQuXCJcIlwiXG4gIGN1c3RvbWVyQWNjb3VudElkOiBTdHJpbmchXG4gIFwiXCJcIlRoZSBkZWZhdWx0IGludm9pY2UgdGVtcGxhdGUgdXNlZCB0byBnZW5lcmF0ZSBhIGZvcm1hdHRlZCBpbnZvaWNlIGRvY3VtZW50LlwiXCJcIlxuICBkZWZhdWx0SW52b2ljZVRlbXBsYXRlOiBJbnZvaWNlVGVtcGxhdGVcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlRoZSBwcmVmaXggZm9yIHRoZSBpbnZvaWNlIG51bWJlci5cIlwiXCJcbiAgaW52b2ljZU51bWJlclByZWZpeDogU3RyaW5nXG4gIFwiXCJcIkludm9pY2VzIGZvciB0aGlzIGFjY291bnRcIlwiXCJcbiAgaW52b2ljZXMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCwgc3RhdHVzOiBbSW52b2ljZVN0YXR1c10pOiBJbnZvaWNpbmdJbnZvaWNlQ29ubmVjdGlvblxuICBcIlwiXCJUaGUgbmV4dCBpbnZvaWNlIG51bWJlciBmb3IgY3JlYXRpbmcgYSBuZXcgaW52b2ljZS5cIlwiXCJcbiAgbmV4dEludm9pY2VOdW1iZXI6IEludCFcbiAgXCJcIlwiVGhlIHN0YXR1cyBvZiB0aGUgaW52b2ljaW5nIGFjY291bnQgKGUuZy4sIGBBQ1RJVkVgLCBgU1VTUEVOREVEYCwgYERFQUNUSVZBVEVEYCkuXCJcIlwiXG4gIHN0YXR1czogSW52b2ljaW5nQWNjb3VudFN0YXR1cyFcbn1cblxudHlwZSBCaWxsaW5nUGF5bWVudEludGVudENvbm5lY3Rpb24ge1xuICBlZGdlczogW0JpbGxpbmdQYXltZW50SW50ZW50RWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG50eXBlIEV4cGVuc2VzRmxhZ0VkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBFeHBlbnNlc0ZsYWdcbn1cblxudHlwZSBQcm9kdWN0T2ZmZXIge1xuICBcIlwiXCJBbnkgb2ZmZXItc3BlY2lmaWMgY29udGV4dFwiXCJcIlxuICBjb250ZXh0OiBKc29uXG4gIFwiXCJcIlRoZSBzZXF1ZW5jZSBpbiB3aGljaCB0byBwcmVzZW50IHRoaXMgb2ZmZXJcIlwiXCJcbiAgb3JkZXI6IEludCFcbiAgXCJcIlwiVGhlIHN0YXRlIG9mIHRoZSBvZmZlclwiXCJcIlxuICBzdGF0ZTogT2ZmZXJTdGF0ZSFcbiAgXCJcIlwiTGlzdCBvZiBzdGVwcyB0byB0YWtlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG9mZmVyXCJcIlwiXG4gIHN0ZXBzOiBbT2ZmZXJTZXR1cFN0ZXBdXG4gIFwiXCJcIlRoZSB0eXBlIG9mIG9mZmVyXCJcIlwiXG4gIHR5cGU6IE9mZmVyVHlwZSFcbn1cblxuXCJcIlwiVGhlIG1ldGFkYXRhIGZvciBhIGR1cGxpY2F0ZSBzdWJzY3JpcHRpb25zIHR5cGVcIlwiXCJcbnR5cGUgSW5zaWdodE1ldGFkYXRhRHVwbGljYXRlU3Vic2NyaXB0aW9ucyB7XG4gIFwiXCJcIlRoZSByZWxldmFudCBlbnRyaWVzIHRoYXQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgc3BlbmQgYWxlcnRcIlwiXCJcbiAgZHVwbGljYXRlU3Vic2NyaXB0aW9uc1JlbGV2YW50RW50cmllczogW1N0YXRlbWVudEVudHJ5XVxufVxuXG50eXBlIFNldFRyYW5zYWN0aW9uSW50ZWdyYXRpb25GaWVsZFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGxlbnM6IFRyYW5zYWN0aW9uTGVuc1xufVxuXG5lbnVtIEFwcHJvdmFsc1JlcXVlc3RTdGF0dXMge1xuICBBUFBST1ZFRFxuICBDQU5DRUxMRURcbiAgREVOSUVEXG4gIFBFTkRJTkdcbn1cblxudHlwZSBFZHVjYXRpb25UaWxlRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIFwiXCJcIkVkdWNhdGlvbiBUaWxlIE5vZGVcIlwiXCJcbiAgbm9kZTogRWR1Y2F0aW9uVGlsZVxufVxuXG5pbnB1dCBQdXNoTWFya2V0b0xlYWRzSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGZvcm1JZDogU3RyaW5nIVxuICBsZWFkQXR0cmlidXRpb25NZXRhZGF0YTogTGVhZEF0dHJpYnV0aW9uTWV0YWRhdGFcbiAgbGVhZHM6IFtTdHJpbmchXVxuICBsb29rdXBGaWVsZDogU3RyaW5nXG4gIHByb2dyYW1OYW1lOiBTdHJpbmchXG4gIHJlYXNvbjogU3RyaW5nXG4gIHNvdXJjZTogU3RyaW5nXG59XG5cbnR5cGUgU2V0UmVjZWl2YWJsZXNPZmZlcnNBY2NvdW50T25ib2FyZGluZ0FjdGlvblBheWxvYWQge1xuICBhY2NvdW50OiBSZWNlaXZhYmxlc09mZmVyc0FjY291bnRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIENyZWF0ZUJpbGxQYXlsb2FkIHtcbiAgYmlsbDogQmlsbFxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgUmVzeW5jQmlsbHNQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIERlbGV0ZVN1YnNjcmlwdGlvbnNQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5cIlwiXCJUaGUgYWNjb3VudCBzZXR0aW5ncyBmb3IgYSByZWNlaXZhYmxlc19vZmZlcnMgYWNjb3VudC4gVGhlc2Ugc2V0dGluZ3MgYXJlIG5pbCBpZiB0aGUgY3VzdG9tZXIgaGFzbid0IHNldCB0aGVtIHlldFwiXCJcIlxudHlwZSBSZWNlaXZhYmxlc09mZmVyc0FjY291bnRTZXR0aW5ncyB7XG4gIFwiXCJcIkhhcyB0aGUgY3VzdG9tZXIgb3B0ZWQgaW50byBhdXRvIGFkdmFuY2UgbW9kZSAobnVsbCBpZiBub3Qgc2V0KVwiXCJcIlxuICBhdXRvQWR2YW5jZU1vZGU6IEJvb2xlYW5cbiAgXCJcIlwiV2hldGhlciB0aGUgY3VzdG9tZXIgaW5kaWNhdGVkIHRoYXQgdGhleSByb3V0ZWQgdGhlaXIgQW1hem9uIHBheW91dHMgdG8gQnJleCAobnVsbCBpZiBub3Qgc2V0KVwiXCJcIlxuICBjb25maXJtZWRQYXlvdXRzUm91dGVkVG9CcmV4OiBCb29sZWFuXG4gIFwiXCJcIlRoZSBjdXN0b21lci1pbmRpY2F0ZWQgbWFwcGluZ3Mgb2YgaW50ZWdyYXRpb24gdG8gZmluYW5jaWFsIGFjY291bnQgd2hlcmUgdGhhdCBpbnRlZ3JhdGlvbidzIHBheW91dHMgYXJlIGJlaW5nIGRlcG9zaXRlZFwiXCJcIlxuICBpbnRlZ3JhdGlvbkZpbmFuY2lhbEFjY291bnRNYXBwaW5nczogW1JlY2VpdmFibGVzT2ZmZXJzSW50ZWdyYXRpb25GaW5hbmNpYWxBY2NvdW50TWFwcGluZ10hXG4gIFwiXCJcIkhhcyB0aGUgY3VzdG9tZXIgb3B0ZWQgb3V0IG9mIGluc3RhbnQgcGF5b3V0cyBwcm9kdWN0IChudWxsIGlmIG5vdCBzZXQpXCJcIlwiXG4gIG9wdGVkT3V0T2ZJbnN0YW50UGF5b3V0czogQm9vbGVhblxuICBcIlwiXCJXaGV0aGVyIHRoZSBjdXN0b21lciBoYXMgb3B0ZWQgdG8gcGF5IGZlZSB3aXRoIHJld2FyZHMgcG9pbnRzIChudWxsIGlmIG5vdCBzZXQpXCJcIlwiXG4gIHBheUZlZVdpdGhSZXdhcmRzOiBCb29sZWFuXG4gIFwiXCJcIldoZXRoZXIgdGhlIGN1c3RvbWVyIGhhcyByZXZlbnVlIGFjY2VzcyBlbmFibGVkXCJcIlwiXG4gIHJldmVudWVBY2Nlc3NFbmFibGVkOiBCb29sZWFuXG4gIFwiXCJcIldoZXRoZXIgdGhlIGN1c3RvbWVyIHNlbGVjdGVkIHRyaWFsIG9uYm9hcmRpbmcgZmxvdyAobnVsbCBpZiBub3Qgc2V0KVwiXCJcIlxuICBzZWxlY3RlZFRyaWFsT25ib2FyZGluZzogQm9vbGVhbiBAZGVwcmVjYXRlZChyZWFzb246IFwiVGhpcyBmaWVsZCB3YXMgdXNlZCBmb3IgaW5pdGlhbCBmZWF0dXJlIHJvbGxvdXQgYW5kIGlzIG5vIGxvbmdlciB1c2VkXCIpXG59XG5cbmVudW0gSW52ZXN0bWVudFR5cGUge1xuICBQRVJDRU5UQUdFX01NRlxuICBUQVJHRVRfQ0FTSF9JTl9DRU5UU1xuICBUQVJHRVRfTU1GX0lOX0NFTlRTXG59XG5cbnR5cGUgU2V0dXBNZmFQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZXZpY2VJZDogU3RyaW5nIVxuICBkZXZpY2VTZWNyZXQ6IFN0cmluZ1xufVxuXG50eXBlIEVhcmx5QWNjZXNzRmVhdHVyZSBpbXBsZW1lbnRzIE5vZGUge1xuICBhdmFpbGFibGVQbGF0Zm9ybXM6IFtFYXJseUFjY2Vzc0ZlYXR1cmVBdmFpbGFibGVQbGF0Zm9ybSFdIVxuICBhdmFpbGFibGVVc2VyUm9sZXM6IFtTdHJpbmchXSFcbiAgZGVzY3JpcHRpb246IFN0cmluZyFcbiAgZGlzcGxheU1lZGlhQXNzZXRzOiBbRWFybHlBY2Nlc3NGZWF0dXJlTWVkaWFBc3NldCFdIVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgam9pblN0YXR1czogRWFybHlBY2Nlc3NGZWF0dXJlSm9pblN0YXR1cyFcbiAgcHJvZHVjdFRhZ3M6IFtTdHJpbmchXSFcbiAgdGh1bWJuYWlsTWVkaWFBc3NldDogRWFybHlBY2Nlc3NGZWF0dXJlTWVkaWFBc3NldCFcbiAgdGl0bGU6IFN0cmluZyFcbn1cblxuaW5wdXQgSW52aXRlVXNlcklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZXBhcnRtZW50SWQ6IElEXG4gIGVtYWlsOiBFbWFpbCFcbiAgZmlyc3ROYW1lOiBTdHJpbmchXG4gIGdyb3VwczogW1N0cmluZ11cbiAgaW52aXRlSWRlbXBvdGVuY3lLZXk6IFN0cmluZ1xuICBpc0NvcnBvcmF0ZUNhcmRVc2VyOiBCb29sZWFuXG4gIGxhc3ROYW1lOiBTdHJpbmchXG4gIGxvY2F0aW9uSWQ6IElEXG4gIG1hbmFnZXJJZDogSURcbiAgcmVxdWlyZVBoeXNpY2FsQ2FyZDogQm9vbGVhblxuICByb2xlOiBVc2VyUm9sZVR5cGVJbnB1dCFcbiAgdXNlT25ib2FyZGluZzogQm9vbGVhblxufVxuXG50eXBlIFByb2Nlc3NBY2NvdW50Q2xvc3VyZVBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbmlucHV0IERlbGV0ZVN1YnNjcmlwdGlvbnNJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaWRzOiBbSUQhXSFcbn1cblxuaW5wdXQgRWRpdERlcG9zaXRzUGF5bWVudE1lbW9JbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgbWVtbzogU3RyaW5nXG4gIHBheW1lbnRJZDogSUQhXG59XG5cblwiXCJcIlJlc3BvbnNlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIGFjY291bnQgc2hvdWxkIHNlZSBhcHBsaWNhdGlvbi5cIlwiXCJcbnR5cGUgU2hvdWxkU2VlQXBwbGljYXRpb25SZXNwb25zZSB7XG4gIFwiXCJcIldoZXRoZXIgaW50aWFsX21hcmtldF9zZWdtZW50IHdhcyBwb3B1bGF0ZWQgYXQgdGltZSBvZiByZXF1ZXN0LlwiXCJcIlxuICBzZWdtZW50QXZhaWxhYmxlOiBCb29sZWFuIVxuICBcIlwiXCJXaGV0aGVyIGFjY291bnQgc2hvdWxkIHNlZSBhcHBsaWNhdGlvbi5cIlwiXCJcbiAgc2hvdWxkU2VlQXBwbGljYXRpb246IEJvb2xlYW5cbn1cblxuZW51bSBTdGF0dXMge1xuICBGQUlMRURcbiAgUFJPQ0VTU0VEXG4gIFBST0NFU1NJTkdcbn1cblxudHlwZSBEZXBvc2l0Q2hlcXVlUGF5bG9hZCB7XG4gIGFtb3VudDogSW50IVxuICBiYWNrSW1hZ2VBc3NldElkOiBJRCFcbiAgY2hlcXVlTnVtYmVyOiBJbnRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBleHBlY3RlZERlbGl2ZXJ5RGF0ZTogU3RyaW5nXG4gIGZyb250SW1hZ2VBc3NldElkOiBJRCFcbiAgcmVjaXBpZW50TmFtZTogU3RyaW5nXG4gIHNlbmRlck5hbWU6IFN0cmluZ1xuICBzdGF0dXM6IFN0cmluZyFcbn1cblxuaW5wdXQgQ3JlYXRlUmVzcG9uc2VUb1JmaUlucHV0IHtcbiAgYXJmaUlkOiBTdHJpbmchXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcmVzcG9uZGVyQ3VzdG9tZXJVc2VySWQ6IFN0cmluZyFcbiAgcmVzcG9uc2VJdGVtc0lucHV0OiBbQ3JlYXRlUmZpUmVzcG9uc2VJdGVtSW5wdXRdXG4gIHJlc3BvbnNlTWVzc2FnZTogU3RyaW5nXG59XG5cbnR5cGUgQ2FzaFRyYW5zYWN0aW9uQWNoRGV0YWlscyB7XG4gIFwiXCJcIlRoZSBmaW5hbmNpYWwgYWNjb3VudCBjbGFzc1wiXCJcIlxuICBhY2NvdW50Q2xhc3M6IENhc2hUcmFuc2FjdGlvbkFjY291bnRDbGFzc1xuICBcIlwiXCJUaGUgY291bnRlcnBhcnR5J3MgYWNjb3VudCBudW1iZXJcIlwiXCJcbiAgYWNjb3VudE51bWJlcjogU3RyaW5nXG4gIFwiXCJcIlRoZSBmaW5hbmNpYWwgYWNjb3VudCB0eXBlXCJcIlwiXG4gIGFjY291bnRUeXBlOiBDYXNoVHJhbnNhY3Rpb25BY2NvdW50VHlwZVxuICBcIlwiXCJUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50XCJcIlwiXG4gIGFkZHJlc3M6IEFkZHJlc3NcbiAgXCJcIlwiVGhlIGNvdW50ZXJwYXJ0eSdzIGJlbmVmaWNpYXJ5IGJhbmsgaW5mb3JtYXRpb25cIlwiXCJcbiAgYmVuZWZpY2lhcnlCYW5rOiBDYXNoVHJhbnNhY3Rpb25CZW5lZmljaWFyeUJhbmtcbiAgXCJcIlwiVGhlIGluc3RpdHV0aW9uJ3MgbG9nbyBhcyBhIGJhc2U2NCBQTkcsIGlmIGF2YWlsYWJsZVwiXCJcIlxuICBiZW5lZmljaWFyeUJhbmtMb2dvQmFzZTY0OiBTdHJpbmdcbiAgXCJcIlwiXG4gIE91dHB1dCBvbmx5LiBBIDEwLWRpZ2l0IHVuaXF1ZSBpZGVudGlmaWVyIHVzZWQgZm9yIGlkZW50aWZ5aW5nIEFDSCBlbnRpdGllc1xuICBPbmx5IGV4aXN0cyBmb3IgZXh0ZXJuYWxseSBvcmlnaW5hdGVkIGNvdW50ZXJwYXJ0aWVzXG4gIFwiXCJcIlxuICBjb21wYW55SWQ6IFN0cmluZ1xuICBcIlwiXCJUaGUgZW1haWwgb2YgdGhlIHJlY2lwaWVudFwiXCJcIlxuICBlbWFpbDogU3RyaW5nXG4gIFwiXCJcIldoZXRoZXIgdGhlIHRyYW5zYWN0aW9uIHdhcyBhIGRlYml0IG9yIGNyZWRpdFwiXCJcIlxuICBwYXltZW50TWV0aG9kOiBDYXNoVHJhbnNhY3Rpb25QYXltZW50TWV0aG9kIVxuICBcIlwiXCJUaGUgY291bnRlcnBhcnR5J3Mgcm91dGluZyBudW1iZXJcIlwiXCJcbiAgcm91dGluZ051bWJlcjogU3RyaW5nXG4gIFwiXCJcIkVudHJ5IGRlc2NyaXB0aW9uIHVzZWQgdG8gZGVzY3JpYmUgdGhlIHRyYW5zYWN0aW9uIGluIE5BQ0hBXCJcIlwiXG4gIHRyYW5zZmVyRGVzY3JpcHRpb246IFN0cmluZ1xufVxuXG5cIlwiXCJWYWxpZGF0aW9uIHJlc3VsdHMgb2YgYSBwYXltZW50IGluc3RydW1lbnRcIlwiXCJcbnR5cGUgVmFsaWRhdGVkUGF5bWVudEluc3RydW1lbnQge1xuICBcIlwiXCJGaWVsZHMgb2YgYSBwYXltZW50IGluc3RydW1lbnQgdGhhdCBhcmUgdmFsaWQgb3Igbm90IChib29sZWFuKVwiXCJcIlxuICBmaWVsZHM6IEpzb25cbiAgXCJcIlwiRW51bSB3aGV0aGVyIHRoZSBvdmVyYWxsIHBheW1lbnQgaW5zdHJ1bWVudCBpcyB2YWxpZFwiXCJcIlxuICBpc1ZhbGlkOiBCb29sZWFuXG59XG5cbnR5cGUgRGVwYXJ0bWVudEVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBEZXBhcnRtZW50XG59XG5cbmVudW0gQ2hlcXVlSW1hZ2VWYWxpZGF0aW9uRXJyb3JTZXZlcml0eSB7XG4gIEVSUk9SXG4gIElHTk9SRVxuICBXQVJOSU5HXG59XG5cbmVudW0gRmluYW5jaWFsTG9naW5GaWVsZENvbnRlbnRUeXBlIHtcbiAgSU1BR0VcbiAgUEFTU1dPUkRcbiAgVEVYVFxuICBVTktOT1dOXG4gIFVTRVJOQU1FXG59XG5cbnR5cGUgQ291bnRyeSB7XG4gIFwiXCJcIklTTyAzMTY2LTEgYWxwaGEtMiByZXByZXNlbnRhdGlvbiBvZiBhIGNvdW50cnkgKGV4LiAnVVMnIGZvciBVbml0ZWQgU3RhdGVzKVwiXCJcIlxuICBhbHBoYTI6IENvdW50cnlBbHBoYTIhXG4gIFwiXCJcIklTTyAzMTY2LTEgYWxwaGEtMyByZXByZXNlbnRhdGlvbiBvZiBhIGNvdW50cnkgKGV4LiAnVVNBJyBmb3IgVW5pdGVkIFN0YXRlcylcIlwiXCJcbiAgYWxwaGEzOiBDb3VudHJ5QWxwaGEzIVxuICBcIlwiXCJIdW1hbi1yZWFkYWJsZSBuYW1lIG9mIHRoZSBjb3VudHJ5XCJcIlwiXG4gIGRpc3BsYXlOYW1lOiBTdHJpbmchXG4gIFwiXCJcIk9mZmljaWFsIG5hbWUgb2YgdGhlIGNvdW50cnlcIlwiXCJcbiAgbmFtZTogU3RyaW5nIVxuICBcIlwiXCJJU08gMzE2Ni0xIG51bWVyaWMgcmVwcmVzZW50YXRpb24gb2YgYSBjb3VudHJ5IChleC4gJzg0MCcgZm9yIFVuaXRlZCBTdGF0ZXMpXCJcIlwiXG4gIG51bWVyaWM6IFN0cmluZyFcbiAgXCJcIlwiQWRkaXRpb25hbCBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUgY291bnRyeVwiXCJcIlxuICByZXN0cmljdGlvbnM6IFJlc3RyaWN0aW9ucyFcbn1cblxudHlwZSBMb3lhbHR5UHJvZ3JhbUNvbm5lY3Rpb24ge1xuICBlZGdlczogW0xveWFsdHlQcm9ncmFtRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG50eXBlIFVwZGF0ZVVzZXJQZXJtaXNzaW9uUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgXCJcIlwidGhlIHVwZGF0ZWQgdXNlclwiXCJcIlxuICB1c2VyOiBVc2VyIVxufVxuXG50eXBlIFJlY2VpcHRFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogUmVjZWlwdFxufVxuXG5pbnB1dCBFZGl0SW52b2ljZUlucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZXBvc2l0c0FjY291bnRJZDogSURcbiAgZGlzY291bnRBbW91bnQ6IEZpbmFuY2lhbEFzc2V0SW5wdXRcbiAgZGlzY291bnRQZXJjZW50OiBGbG9hdFxuICBkdWVEYXRlOiBEYXRlXG4gIGlkZW1wb3RlbmN5S2V5OiBTdHJpbmchXG4gIGludm9pY2VJZDogSUQhXG4gIGludm9pY2VOdW1iZXI6IFN0cmluZyFcbiAgaW52b2ljZVRlbXBsYXRlSWQ6IElEIVxuICBsaW5lSXRlbXM6IFtJbnZvaWNlTGluZUl0ZW1JbnB1dF1cbiAgbWVtbzogU3RyaW5nXG4gIHBheWVyQ29udGFjdElkOiBJRFxuICBzdWJ0b3RhbDogRmluYW5jaWFsQXNzZXRJbnB1dFxuICB0b3RhbEFtb3VudDogRmluYW5jaWFsQXNzZXRJbnB1dFxufVxuXG50eXBlIEZpbmFuY2lhbEluc3RydW1lbnQge1xuICBjb2RlOiBJbnN0cnVtZW50Q29kZVxuICBuYW1lOiBTdHJpbmdcbiAgdGlja2VyU3ltYm9sOiBTdHJpbmdcbn1cblxuaW5wdXQgU2VuZEJpbGxQYXltZW50SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGNvbnRhY3RWZXJzaW9uOiBJbnRcbiAgaWQ6IElEIVxuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nIVxuICBwYXltZW50SW5zdHJ1bWVudFZlcnNpb246IEludFxufVxuXG5lbnVtIEFjY291bnRNaWdyYXRpb25TdGF0dXMge1xuICBBQ0tOT1dMRURHRURcbiAgQ09NUExFVEVcbiAgSU5fUFJPR1JFU1NcbiAgSU5WQUxJRFxuICBOT1RfU1RBUlRFRFxufVxuXG5lbnVtIFJlaW1idXJzZW1lbnRJdGVtU3RhdGUge1xuICBBUFBST1ZFRFxuICBDQU5DRUxFRFxuICBDT01QTEVURURcbiAgQ1JFQVRFRFxuICBGQUlMRURcbiAgSU5WQUxJRFxuICBQQVlNRU5UX1BST0NFU1NJTkdcbiAgUEFZTUVOVF9XSVRIRFJBV0lOR1xuICBSRUpFQ1RFRFxuICBSRVZPS0VEXG4gIFNVQk1JVFRFRFxufVxuXG5cIlwiXCJSZXNwb25zZSB0aGF0IGVuY2Fwc3VsYXRlcyB0aGUgb3JpZ2luYWwgY29udGFjdCBpbnB1dCBhbmQgaXRzIHZhbGlkYXRpb24gcmVzdWx0XCJcIlwiXG50eXBlIFZhbGlkYXRlZFZlbmRvckNvbnRhY3RJbnB1dCBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJPcmlnaW5hbCBjb250YWN0IGlucHV0XCJcIlwiXG4gIGRhdGE6IFZlbmRvckNvbnRhY3RJbnB1dERhdGEhXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJWYWxpZGF0aW9uIGZvciB0aGUgY29udGFjdCBpbnB1dFwiXCJcIlxuICB2YWxpZGF0aW9uOiBWZW5kb3JDb250YWN0SW5wdXRWYWxpZGF0aW9uIVxufVxuXG51bmlvbiBDcmVkZW50aWFsUGF5bG9hZCA9IENyZWRlbnRpYWxBbWF6b25Nd3NQYXlsb2FkIHwgQ3JlZGVudGlhbFFiZFBheWxvYWQgfCBDcmVkZW50aWFsUXVpY2tib29rc1BheWxvYWQgfCBDcmVkZW50aWFsU2hvcGlmeVBheWxvYWQgfCBDcmVkZW50aWFsVmVuZG9yUGF5bG9hZCB8IENyZWRlbnRpYWxXZWF2UGF5bG9hZCB8IENyZWRlbnRpYWxYZXJvUGF5bG9hZFxuXG50eXBlIE1vZGlmeVByZWFwcHJvdmVkQ2FyZFNldHRpbmdzUGF5bG9hZCB7XG4gIGNhcmQ6IENhcmQhXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuZW51bSBFeHBlbnNlc0ZsYWdFdmVudEFjdGlvbiB7XG4gIENPTU1FTlRcbiAgQ1JFQVRFXG4gIERJU01JU1NcbiAgUkVTT0xWRURcbn1cblxudHlwZSBDYXNoUmVjdXJyaW5nU2NoZWR1bGVEdXJhdGlvbldpdGhFbmRzQXQge1xuICBcIlwiXCJLZWVwIGNyZWF0aW5nIHRyYW5zYWN0aW9ucyB1bnRpbCB0aGUgYGVuZHNfYXRgIGRhdGVcIlwiXCJcbiAgZW5kc0F0OiBUaW1lIVxufVxuXG5cIlwiXCJSdW53YXkgcHJvamVjdGlvbnMgZm9yIGEgZ2l2ZW4gdGltZSByYW5nZVwiXCJcIlxudHlwZSBJbnNpZ2h0c1J1bndheVByb2plY3Rpb24ge1xuICBcIlwiXCJFbmQgb2YgdGhlIHByb2plY3Rpb24gdGltZSByYW5nZSAoZXhjbHVzaXZlKVwiXCJcIlxuICBlbmRBdDogVGltZSFcbiAgXCJcIlwiXG4gIFByb2plY3RlZCBiYWxhbmNlIChVU0QpIGluIHRoZSBhY2NvdW50IGF0IHRoZSBlbmQgb2YgdGhlXG4gIHByb2plY3Rpb24gdGltZSByYW5nZSAoZW5kX2F0KVxuICBcIlwiXCJcbiAgcHJvamVjdGVkQmFsYW5jZVVzZENlbnRzOiBMb25nIVxuICBcIlwiXCJUaGUgY2FzaCB0aGUgYnVzaW5lc3MgaXMgYnVybmluZyB3aXRoaW4gdGhlIHRpbWUgcGVyaW9kXCJcIlwiXG4gIHByb2plY3RlZEJ1cm5SYXRlOiBMb25nIVxuICBcIlwiXCJcbiAgUHJvamVjdGVkIGFtb3VudCAoVVNEKSB0aGF0IHdpbGwgYmUgYnJvdWdodCBpbnRvIHRoZSBhY2NvdW50IGR1cmluZyB0aGVcbiAgcHJvamVjdGlvbiB0aW1lIHJhbmdlXG4gIFwiXCJcIlxuICBwcm9qZWN0ZWRNb25leUluVXNkQ2VudHM6IExvbmchXG4gIFwiXCJcIlxuICBQcm9qZWN0ZWQgYW1vdW50IChVU0QpIHRoYXQgd2lsbCBsZWF2ZSB0aGUgYWNjb3VudCBkdXJpbmcgdGhlXG4gIHByb2plY3Rpb24gdGltZSByYW5nZVxuICBcIlwiXCJcbiAgcHJvamVjdGVkTW9uZXlPdXRVc2RDZW50czogTG9uZyFcbiAgXCJcIlwiU3RhcnQgb2YgdGhlIHByb2plY3Rpb24gdGltZSByYW5nZSAoaW5jbHVzaXZlKVwiXCJcIlxuICBzdGFydEF0OiBUaW1lIVxufVxuXG50eXBlIEZpbmljaXR5Q29ubmVjdEdlbmVyYXRlRml4VXJsUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdXJsOiBTdHJpbmchXG59XG5cbnR5cGUgSW50ZWdyYXRpb25FZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogSW50ZWdyYXRpb25cbn1cblxudHlwZSBEZXBvc2l0c1BheW1lbnRDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtEZXBvc2l0c1BheW1lbnRFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG4gIHRvdGFsQ291bnQ6IEludCFcbn1cblxuaW50ZXJmYWNlIE5vZGUge1xuICBcIlwiXCJUaGUgaWQgb2YgdGhlIG9iamVjdC5cIlwiXCJcbiAgaWQ6IElEIVxufVxuXG5cIlwiXCJQYXJhbWV0ZXJzIHRoYXQgd2VyZSBwYXJ0IG9mIHRoaXMgYWNjb3VudCdzIGxhc3QgYW5hbHlzaXNcIlwiXCJcbnR5cGUgVW5kZXJ3cml0aW5nUGFyYW1ldGVycyB7XG4gIFwiXCJcIklmIHRoaXMgYWNjb3VudCB1c2VzIGNvbm5lY3RlZCBiYW5rIHVuZGVyd3JpdGluZ1wiXCJcIlxuICB1c2VDb25uZWN0ZWRCYW5rOiBCb29sZWFuIVxuICBcIlwiXCJJZiB0aGlzIGFjY291bnQgdXNlcyBzdGF0ZW1lbnQtYmFzZWQgdW5kZXJ3cml0aW5nXCJcIlwiXG4gIHVzZVN0YXRlbWVudHM6IEJvb2xlYW4hXG59XG5cbnR5cGUgU3RhcnRSZXNldFVzZXJQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIFVwZGF0ZUV4cGVuc2VzU2V0dGluZ1N0YXR1c1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGV4cGVuc2VzU2V0dGluZzogRXhwZW5zZXNTZXR0aW5nXG59XG5cbnR5cGUgQXBwcm92YWxzUmVxdWVzdFJlaW1idXJzZW1lbnQge1xuICBjdXN0b21lckFjY291bnRJZDogSUQhXG4gIGN1c3RvbWVyVXNlcklkOiBJRCFcbiAgcmVpbWJ1cnNlbWVudEl0ZW06IFJlaW1idXJzZW1lbnRJdGVtXG4gIHVwZGF0ZWRBdDogVGltZSFcbn1cblxudHlwZSBGaW5hbmNpYWxTdGF0ZW1lbnRBY2NvdW50RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IEZpbmFuY2lhbFN0YXRlbWVudEFjY291bnRcbn1cblxuaW5wdXQgU2V0UmVjZWl2YWJsZXNPZmZlcnNTZWxsZXJBY2NvdW50SGFzU2VlbkZhaWxpbmdDaGVja3NFcnJvckJhbm5lcklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBzZWxsZXJBY2NvdW50SWQ6IElEIVxuICB2YWx1ZTogQm9vbGVhbiFcbn1cblxudW5pb24gQ2FyZE92ZXJ2aWV3U3VtbWFyeVRpbGUgPSBDdXJyZW50QmFsYW5jZVRpbGUgfCBQYXltZW50RGV0YWlsc1RpbGVcblxuaW5wdXQgQ291bnRyaWVzTGlzdEZpbHRlcnMge1xuICBcIlwiXCJGaWx0ZXIgdG8gZXhjbHVkZSBzYW5jdGlvbmVkIGZvciBjYXJkIHNoaXBwaW5nIGZyb20gdGhlIGxpc3Qgb2YgY291bnRyaWVzIHJldHVybmVkXCJcIlwiXG4gIGV4Y2x1ZGVTYW5jdGlvbmVkRm9yQ2FyZFNoaXBwaW5nOiBCb29sZWFuXG59XG5cbnR5cGUgUGFnZUluZm8ge1xuICBcIlwiXCJXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuXCJcIlwiXG4gIGVuZEN1cnNvcjogU3RyaW5nXG4gIFwiXCJcIldoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/XCJcIlwiXG4gIGhhc05leHRQYWdlOiBCb29sZWFuIVxuICBcIlwiXCJXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz9cIlwiXCJcbiAgaGFzUHJldmlvdXNQYWdlOiBCb29sZWFuIVxuICBcIlwiXCJXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLlwiXCJcIlxuICBzdGFydEN1cnNvcjogU3RyaW5nXG59XG5cbmlucHV0IFJlbW92ZUZpbmFuY2lhbFNvdXJjZUlucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBmaW5hbmNpYWxTb3VyY2VJZDogSUQhXG59XG5cbmlucHV0IFRlcm1pbmF0ZUNhcmRJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaWQ6IElEIVxuICB0ZXJtaW5hdGlvbkRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgdGVybWluYXRpb25SZWFzb246IFRlcm1pbmF0aW9uUmVhc29uXG59XG5cbmlucHV0IFVwZGF0ZUFwcHJvdmFsc1Jldmlld0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZXNjcmlwdGlvbjogU3RyaW5nXG4gIHJlcXVlc3RTbmFwc2hvdDogQXBwcm92YWxzUmVxdWVzdElucHV0XG4gIHJldmlld0lkOiBJRCFcbiAgc3RhdHVzOiBBcHByb3ZhbHNSZXZpZXdTdGF0dXMhXG59XG5cbmVudW0gSHJpc0FnZ3JlZ2F0b3JWZW5kb3Ige1xuICBNRVJHRVxufVxuXG50eXBlIENvbGxlY3Rpb25BdHRlbXB0IGltcGxlbWVudHMgTm9kZSB7XG4gIGFtb3VudDogSW50XG4gIGNvbGxlY3Rpb25EYXRlOiBUaW1lXG4gIGNvbGxlY3Rpb25JbnRlbnRpb246IENvbGxlY3Rpb25JbnRlbnRpb25cbiAgZXJyb3JDb2RlOiBTdHJpbmdcbiAgZmFpbHVyZVR5cGU6IENhcmRQYXltZW50RmFpbHVyZVR5cGUgQGRlcHJlY2F0ZWQocmVhc29uOiBcIlN3aXRjaCB0byB2MiB2ZXJzaW9uIG9mIGZpZWxkIGluY2x1ZGluZyBuZXcgYG5vbl90cmFuc2FjdGlvbl9hY2NvdW50YCBtZW1iZXJcIilcbiAgZmFpbHVyZVR5cGVWMjogQ2FyZFBheW1lbnRGYWlsdXJlVHlwZVYyXG4gIGZhaWx1cmVUeXBlVjM6IENhcmRQYXltZW50RmFpbHVyZVR5cGVWM1xuICBmdW5kaW5nU291cmNlOiBGdW5kaW5nU291cmNlXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBvcmlnaW5hdG9ySWQ6IFN0cmluZ1xuICBvcmlnaW5hdG9yVHlwZTogU3RyaW5nXG4gIHBlZWtEZXRhaWxzOiBDb2xsZWN0aW9uQXR0ZW1wdFBlZWtEZXRhaWxzXG4gIHByZXNlbnRDb2xsZWN0aW9uSW50ZW50aW9uSWQ6IFN0cmluZ1xuICBwcm92aWRlckNvbGxlY3Rpb25JZDogU3RyaW5nXG4gIHByb3ZpZGVyTmFtZTogU3RyaW5nXG4gIHNjaGVkdWxlZERhdGU6IFRpbWVcbiAgc3RhdGVtZW50OiBMZWdhY3lDYXJkU3RhdGVtZW50UGVyaW9kQm91bmRhcmllc1xuICBzdGF0dXM6IFN0cmluZ1xufVxuXG50eXBlIENvbm5lY3RBbWF6b25Nd3NDcmVkZW50aWFsUGF5bG9hZCB7XG4gIGF1dGhlbnRpY2F0aW9uUmVzdWx0OiBDcmVkZW50aWFsQXV0aGVudGljYXRpb25SZXN1bHRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5cIlwiXCJcblRoZSBjb3VudGVycGFydCB0byBhIFJmaSwgcHJvdmlkaW5nIHRoZSBJbmZvcm1hdGlvbiByZXF1ZXN0ZWQgYnkgYSBzcGVjaWZpY1xuUmZpSXRlbSAoYSBkb2N1bWVudCwgb3IgYSB0ZXh0IHJlc3BvbnNlKS4gV2hldGhlciBvciBub3QgdGhlIHJlc3BvbnNlIGlzXG52YWxpZCBpcyBzb21ldGhpbmcgZGV0ZXJtaW5lZCBieSB0aGUgcmV2aWV3ZXIgKHVzdWFsbHkgdGhlIHJlcXVlc3RvcikuXG5cIlwiXCJcbnR5cGUgUmZpUmVzcG9uc2Uge1xuICBtZXNzYWdlOiBTdHJpbmdcbiAgcmVzcG9uZGVyQ3VzdG9tZXJVc2VyOiBVc2VyIVxuICByZXNwb25zZUl0ZW1zOiBbUmZpUmVzcG9uc2VJdGVtXVxufVxuXG5lbnVtIENyZWRpdE1hcmtldGluZ09mZmVyU3RhdHVzIHtcbiAgQUNDRVBURURcbiAgQ0FOQ0VMTEVEXG4gIE9GRkVSRURcbiAgUEVORElOR1xuICBSRUpFQ1RFRFxufVxuXG50eXBlIFNldFByaW1hcnlGdW5kaW5nU291cmNlUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZnVuZGluZ1NvdXJjZTogRnVuZGluZ1NvdXJjZSFcbn1cblxuZW51bSBDYXNoVHJhbnNhY3Rpb25BY2NvdW50Q2xhc3Mge1xuICBCVVNJTkVTU1xuICBJTlZBTElEXG4gIFBFUlNPTkFMXG59XG5cbnR5cGUgQ29tcGxldGVDYXNoVHJhbnNhY3Rpb25BcHByb3ZhbFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHRyYW5zYWN0aW9uOiBDYXNoVHJhbnNhY3Rpb24hXG4gIHRyYW5zYWN0aW9uQXBwcm92YWxSZXN1bHQ6IENhc2hUcmFuc2FjdGlvbkFwcHJvdmFsUmVzdWx0IVxufVxuXG5pbnB1dCBDaGVxdWVQYXltZW50SW5zdHJ1bWVudEZpbmRJbnB1dCB7XG4gIGFkZHJlc3M6IEFkZHJlc3NJbnB1dCFcbiAgcmVjaXBpZW50TmFtZTogU3RyaW5nIVxufVxuXG50eXBlIEFjdGl2YXRlVXNlclBheWxvYWQge1xuICBhdXRoVHlwZTogQWN0aXZhdGVVc2VyQXV0aFR5cGUhXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgc2Vzc2lvbjogU2Vzc2lvblxuICB0b2tlbjogU3RyaW5nIVxuICB1c2VyOiBVc2VyXG59XG5cbnR5cGUgUmVtb3ZlRnNwQm9va2tlZXBlclVzZXJQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBncm91cFVybjogU3RyaW5nXG59XG5cbnR5cGUgTGltaXRVdGlsaXphdGlvblRpbGUgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiQ3VzdG9tZXIncyBsaW1pdFwiXCJcIlxuICBnbG9iYWxMaW1pdDogSW50IVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiTGltaXQgdXRpbGl6YXRpb24gc3RhdHVzLCBjaGVjayBlbnVtIGxpbWl0X3V0aWxpemF0aW9uX3N0YXR1cyBmb3IgbW9yZSBkZXRhaWxzXCJcIlwiXG4gIGxpbWl0VXRpbGl6YXRpb25TdGF0dXM6IExpbWl0VXRpbGl6YXRpb25TdGF0dXMhXG59XG5cbnR5cGUgQ3JlZGVudGlhbEVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBDcmVkZW50aWFsXG59XG5cbnR5cGUgUmV3YXJkc1JlZnVuZCBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgcG9pbnRzQ29zdDogSW50IVxuICByZWRlZW1lcjogVXNlciFcbiAgcmVmdW5kZWRTdGF0ZW1lbnRFbnRyeTogU3RhdGVtZW50RW50cnkhIEBkZXByZWNhdGVkKHJlYXNvbjogXCJUaGlzIGZlYXR1cmUgaXMgc2xhdGVkIGZvciByZW1vdmFsXCIpXG59XG5cbnR5cGUgRmVkYWNoUGFydGljaXBhbnQgaW1wbGVtZW50cyBOb2RlIHtcbiAgY2hhbmdlRGF0ZTogU3RyaW5nIVxuICBjdXN0b21lckFkZHJlc3M6IFN0cmluZyFcbiAgY3VzdG9tZXJBcmVhQ29kZTogU3RyaW5nIVxuICBjdXN0b21lckNpdHk6IFN0cmluZyFcbiAgXCJcIlwiVGhlIGluc3RpdHV0aW9uJ3MgbG9nbyBhcyBhIGJhc2U2NCBQTkcsIGlmIGF2YWlsYWJsZVwiXCJcIlxuICBjdXN0b21lckxvZ29CYXNlNjQ6IFN0cmluZ1xuICBjdXN0b21lck5hbWU6IFN0cmluZyFcbiAgY3VzdG9tZXJQaG9uZVByZWZpeDogU3RyaW5nIVxuICBjdXN0b21lclBob25lU3VmZml4OiBTdHJpbmchXG4gIGN1c3RvbWVyU3RhdGU6IFN0cmluZyFcbiAgY3VzdG9tZXJaaXA6IFN0cmluZyFcbiAgY3VzdG9tZXJaaXBFeHQ6IFN0cmluZyFcbiAgZGF0YVZpZXdDb2RlOiBTdHJpbmchXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBpbnN0aXR1dGlvblN0YXR1c0NvZGU6IFN0cmluZyFcbiAgbmV3Um91dGluZ051bWJlcjogU3RyaW5nIVxuICBvZmZpY2VDb2RlOiBTdHJpbmchXG4gIHJlY29yZFR5cGVDb2RlOiBTdHJpbmchXG4gIHJvdXRpbmdOdW1iZXI6IFN0cmluZyFcbiAgc2VydmljaW5nRnJiTnVtYmVyOiBTdHJpbmchXG59XG5cbmlucHV0IFVwZGF0ZUludGVncmF0aW9uUnVsZUlucHV0IHtcbiAgYm9keTogSnNvblxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbiAgbmFtZTogU3RyaW5nXG4gIHByaW9yaXR5OiBJbnRcbn1cblxuZW51bSBJbnRlZ3JhdGlvblJ1bGVzRmlsdGVyRmFjZXRUeXBlIHtcbiAgQ09ORkxJQ1RJTkdcbiAgQ1VTVE9NXG4gIE1FUkNIQU5UXG4gIE9WRVJSSURFXG59XG5cbmVudW0gUHJvbW90aW9uc0N0YUFjdGlvbiB7XG4gIEFERF9URUFNTUFURVNcbiAgQ0FTSF9UT1VSXG4gIENPTk5FQ1RfUEFZUk9MTFxuICBDUkVBVEVfQVBJX1RPS0VOXG4gIEhSSVNcbiAgSU5TVEFOVF9QQVlPVVRTXG4gIE9ORV9QQVNTV09SRFxuICBQUkVNSVVNX1VQU0VMTFxuICBSRUZFUlJBTFNcbiAgWkFQSUVSXG59XG5cbnR5cGUgUmV3YXJkc1JlZGVtcHRpb25EZXRhaWxzIHtcbiAgaW5pdGlhdGVkQnlDdXN0b21lclVzZXI6IFVzZXJcbiAgcG9pbnRzUmVkZWVtZWQ6IEludCFcbn1cblxudHlwZSBTdWJtaXRPbmJvYXJkaW5nSW5mb3JtYXRpb25SZXF1ZXN0UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaW5mb3JtYXRpb25SZXF1ZXN0OiBPbmJvYXJkaW5nSW5mb3JtYXRpb25SZXF1ZXN0IVxufVxuXG5cIlwiXCJZZWFyIGZvciBSZXdpbmQgdmlkZW9cIlwiXCJcbmVudW0gTWFya2V0aW5nUmV3aW5kWWVhciB7XG4gIFwiXCJcIjIwMjBcIlwiXCJcbiAgWUVBUl8yMDIwXG59XG5cblwiXCJcIlRoZSBtZXRhZGF0YSBmb3IgYSBzcGVuZCBpbmNyZWFzZSB0eXBlXCJcIlwiXG50eXBlIEluc2lnaHRNZXRhZGF0YVNwZW5kSW5jcmVhc2Uge1xuICBcIlwiXCJUaGUgY3VycmVudCBhbW91bnRcIlwiXCJcbiAgY3VycmVudEFtb3VudDogRmxvYXRcbiAgXCJcIlwiVGhlIHBhc3QgbW9udGggYW1vdW50c1wiXCJcIlxuICBwYXN0TW9BbW91bnRzOiBKc29uXG4gIFwiXCJcIlRoZSBwZXJjZW50IGluY3JlYXNlIHRocmVzaG9sZFwiXCJcIlxuICBwY3RJbmNyZWFzZVRocmVzaG9sZDogRmxvYXRcbiAgXCJcIlwiVGhlIHByZXZpb3VzIGFtb3VudCBiZWZvcmUgdGhlIHNwZW5kIGluY3JlYXNlXCJcIlwiXG4gIHByZXZpb3VzQW1vdW50OiBGbG9hdCFcbiAgXCJcIlwiVGhlIHJlbGV2YW50IGVudHJpZXMgdGhhdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBzcGVuZCBhbGVydFwiXCJcIlxuICBzcGVuZEluY3JlYXNlUmVsZXZhbnRFbnRyaWVzOiBbU3RhdGVtZW50RW50cnldXG4gIFwiXCJcIlRoZSBhbW91bnQgdGhhdCB0cmlnZ2VycyB0aGlzIGFsZXJ0XCJcIlwiXG4gIHRyaWdnZXJBbW91bnQ6IEZsb2F0XG59XG5cbnR5cGUgQWRtaW5VcGRhdGVBcHByb3ZhbHNSZXZpZXdzUGF5bG9hZCB7XG4gIGFwcHJvdmFsc1Jldmlld3M6IFtBcHByb3ZhbHNSZXZpZXchXVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgR2VuZXJhdGVSZWNlaXZhYmxlc09mZmVyc0dyb3VwUmVwb3J0UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgb2ZmZXJzR3JvdXBSZXBvcnRVcmk6IFN0cmluZyFcbn1cblxudHlwZSBJbnZlc3RtZW50UG9saWN5QnJlYWtkb3duIHtcbiAgYW1vdW50OiBJbnQhXG4gIGludmVzdG1lbnRUeXBlOiBJbnZlc3RtZW50VHlwZSFcbiAgaXNPcGVyYXRpdmU6IEJvb2xlYW4hXG59XG5cblwiXCJcIkEgZ2VuZXJpYyB2YWx1ZSB0eXBlIHRoZSBjb2x1bW4gaXMgYW4gYXJiaXRyYXJ5IHN0cmluZ1wiXCJcIlxudHlwZSBNdXRlVmFsdWVSYXcge1xuICBcIlwiXCJUaGUgcmF3IHN0cmluZyB2YWx1ZSBmb3IgdGhpcyBnZW5lcmljIHZhbHVlIHR5cGVcIlwiXCJcbiAgcmF3VmFsdWU6IFN0cmluZ1xufVxuXG50eXBlIEZpbmljaXR5Q29ubmVjdE1pZ3JhdGVBY2NvdW50c1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHVwZGF0ZWRTb3VyY2U6IEZpbmFuY2lhbFNvdXJjZVxufVxuXG5lbnVtIFRpbWVCdWNrZXRTdHJhdGVneSB7XG4gIENBTEVOREFSXG4gIEVORFxuICBJTlZBTElEXG4gIFNUQVJUXG59XG5cbmlucHV0IE9wdEludG9JbmNlbnRpdmVDYW1wYWlnbklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBjdXN0b21lckFjY291bnRJZDogSURcbiAgXCJcIlwiVGhlIHBsYWNlbWVudCBpZFwiXCJcIlxuICBwbGFjZW1lbnRJZDogSUQhXG59XG5cbnR5cGUgT25ib2FyZGluZ0Zvcm1Vd0Vjb21tZXJjZUNvbm5lY3Rpb24ge1xuICBfOiBCb29sZWFuXG59XG5cbnR5cGUgRGlzY29ubmVjdFBheXJvbGxQcm92aWRlckludGVncmF0aW9uUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuaW5wdXQgQnVsa0NyZWF0ZVNwZW5kQWxlcnRFdmVudElucHV0IHtcbiAgYWN0aW9uOiBDYXJkVHJhbnNhY3Rpb25JbnNpZ2h0RXZlbnRBY3Rpb24hXG4gIGFsZXJ0SWRzOiBbSURdIVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGV2ZW50TWV0YWRhdGE6IEpzb25cbn1cblxuaW5wdXQgU2V0dXBNZmFJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgbWZhRGV2aWNlVHlwZTogTWZhUHJpbWFyeU1ldGhvZCFcbiAgcGhvbmVOdW1iZXI6IFN0cmluZyFcbn1cblxuXCJcIlwiQ29ubmVjdGlvbiBOb2RlIFR5cGUgQ3JlZGl0IExpbWl0IEZhY3RvciBUaWxlXCJcIlwiXG50eXBlIENyZWRpdExpbWl0RmFjdG9yVGlsZUNvbm5lY3Rpb24ge1xuICBlZGdlczogW0NyZWRpdExpbWl0RmFjdG9yVGlsZUVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxuZW51bSBCaWxsU3RhdHVzIHtcbiAgQURNSU5fQVBQUk9WQUxfUkVRVUlSRURcbiAgQVBQUk9WQUxfUkVRVUlSRURcbiAgREVMRVRFRFxuICBEUkFGVFxuICBQQVlNRU5UX1BST0NFU1NFRFxuICBQQVlNRU5UX1BST0NFU1NJTkdcbiAgUEFZTUVOVF9TQ0hFRFVMRURcbn1cblxudHlwZSBJbnZvaWNlTGluZUl0ZW0ge1xuICBcIlwiXCJEZXNjcmlwdGlvbiBpdGVtLiBlLmcuIHByb2R1Y3QgLyBzZXJ2aWNlLlwiXCJcIlxuICBkZXNjcmlwdGlvbjogU3RyaW5nIVxuICBcIlwiXCJRdWFudGl0eSBvZiB0aGUgZGVzY3JpcHRpb24gaXRlbS5cIlwiXCJcbiAgcXVhbnRpdHk6IEludCFcbiAgXCJcIlwiVG90YWwgYW1vdW50IG9mIHRoZSBsaW5lIGl0ZW1cIlwiXCJcbiAgdG90YWxBbW91bnQ6IEZpbmFuY2lhbEFzc2V0IVxuICBcIlwiXCJVbml0IHByaWNlIG9mIHRoZSBkZXNjcmlwdGlvbiBpdGVtLlwiXCJcIlxuICB1bml0UHJpY2U6IEZpbmFuY2lhbEFzc2V0IVxufVxuXG50eXBlIE5ldHN1aXRlQ2F0ZWdvcmllcyB7XG4gIGFjY291bnRzUGF5YWJsZVVzZXJDYXRlZ29yeTogVXNlckNhdGVnb3J5XG4gIGNvbGxlY3Rpb25UYXJnZXRVc2VyQ2F0ZWdvcnk6IFVzZXJDYXRlZ29yeVxuICBcIlwiXCJyZWltYnVyc2VtZW50cyB1c2VyIGNhdGVnb3J5XCJcIlwiXG4gIHJlaW1idXJzZW1lbnRzVXNlckNhdGVnb3J5OiBVc2VyQ2F0ZWdvcnlcbiAgcmV3YXJkc0luY29tZVVzZXJDYXRlZ29yeTogVXNlckNhdGVnb3J5XG4gIHZlbmRvck5hbWU6IFN0cmluZ1xufVxuXG50eXBlIE1hcmtPZmZlclNlZW5QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5lbnVtIFJld2FyZHNQb2ludHNIaXN0b3J5RW50cnlEZXNjcmlwdGlvblR5cGUge1xuICBBU0NFTkRBXG4gIENBU0hcbiAgQ1JZUFRPXG4gIEdJRlRfQ0FSRFxuICBJTkNFTlRJVkVfQk9OVVNcbiAgSU5TVEFOVF9QQVlPVVRTX0ZFRVxuICBPUEVSQVRJT05BTFxuICBPVEhFUlxuICBQQVlST0xMX0xJTktfQk9OVVNcbiAgU1BFTkRfQUNDUlVBTFxuICBTUEVORF9CT05VU1xuICBTVEFURU1FTlRfQ1JFRElUXG4gIFRSQVZFTFxufVxuXG5pbnB1dCBDcmVhdGVQdXNoQ2hhbm5lbElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZXZpY2VJbmZvcm1hdGlvbjogRGV2aWNlSW5mb3JtYXRpb25JbnB1dCFcbiAgZGV2aWNlVG9rZW46IFN0cmluZyFcbiAgdHlwZTogUHVzaFByb3ZpZGVyVHlwZSFcbn1cblxudHlwZSBDYXNoVHJhbnNhY3Rpb25QYXllZSB7XG4gIFwiXCJcIkNvbnRhY3Qgb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIFRyYW5zYWN0aW9uXCJcIlwiXG4gIGNvbnRhY3Q6IFBheW1lbnRDb250YWN0XG4gIFwiXCJcIlBheW1lbnQgSW5zdHJ1bWVudCBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMgVHJhbnNhY3Rpb25cIlwiXCJcbiAgcGF5bWVudEluc3RydW1lbnQ6IFBheW1lbnRJbnN0cnVtZW50XG59XG5cbnR5cGUgRmluYW5jaWFsQWNjb3VudERldGFpbHMge1xuICBcIlwiXCJMYXN0IDQgZGlnaXRzIG9mIGFjY291bnQgbnVtYmVyIGlmIGl0IGV4aXN0cy5cIlwiXCJcbiAgYWNjb3VudE51bWJlckxhc3Q0OiBTdHJpbmdcbiAgXCJcIlwiTGFzdCA0IGRpZ2l0cyBvZiByb3V0aW5nIG51bWJlciBpZiBpdCBleGlzdHMuXCJcIlwiXG4gIHJvdXRpbmdOdW1iZXJMYXN0NDogU3RyaW5nXG4gIHR5cGU6IEZpbmFuY2lhbEFjY291bnRUeXBlXG59XG5cblwiXCJcIkJ1c2luZXNzIGFjdGl2aXRpZXMgdGhhdCBjYW4gbGVhZCB0byBTdGF0ZW1lbnQgRW50cmllc1wiXCJcIlxuZW51bSBTdGF0ZW1lbnRFbnRyeUFjdGl2aXR5VHlwZSB7XG4gIENBUkRfVFJBTlNBQ1RJT05cbiAgQ09MTEVDVElPTlxuICBSRVdBUkRcbn1cblxudHlwZSBSZXdhcmRzVHJpZ2dlciBpbXBsZW1lbnRzIE5vZGUge1xuICBkZXNjcmlwdGlvbjogU3RyaW5nIVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgbmFtZTogU3RyaW5nIVxuICBwYXlsb2FkOiBSZXdhcmRzVHJpZ2dlclBheWxvYWQhXG4gIHJld2FyZHNUcmlnZ2VySW5zdGFuY2VzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBSZXdhcmRzVHJpZ2dlckluc3RhbmNlQ29ubmVjdGlvblxuICB0eXBlOiBSZXdhcmRzVHJpZ2dlclR5cGUhXG59XG5cbmVudW0gRmluYW5jaWFsc1ZlbmRvciB7XG4gIERFUE9TSVRTXG4gIEZJTklDSVRZXG4gIE1BTlVBTFxuICBPQ1JPTFVTXG4gIFBMQUlEXG4gIFRFTExFUlxufVxuXG50eXBlIENyZWF0ZUV4cGVuc2VzU2V0dGluZ1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGV4cGVuc2VzU2V0dGluZzogRXhwZW5zZXNTZXR0aW5nXG59XG5cbmVudW0gUGF5cm9sbFN0YXR1cyB7XG4gIEFVVEhFTlRJQ0FURURcbiAgREFUQVxuICBJTklUSUFURURcbn1cblxuZW51bSBPbmJvYXJkaW5nSW5mb3JtYXRpb25SZXF1ZXN0U3RhdHVzIHtcbiAgQ09NUExFVEVcbiAgSU5fUFJPR1JFU1NcbiAgTkVXXG59XG5cbmVudW0gQ3JlZGl0TWFya2V0aW5nT2ZmZXJUeXBlIHtcbiAgRklDT19UUkFESVRJT05BTF9DSEFSR0Vcbn1cblxuaW5wdXQgUmVmcmVzaEZpbmFuY2lhbFNvdXJjZUlucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBmaW5hbmNpYWxTb3VyY2VJZDogSUQhXG59XG5cbnR5cGUgT2ZmZXJTZXR1cFN0ZXAge1xuICBcIlwiXCJXaGV0aGVyIG9yIG5vdCB0aGlzIHN0ZXAgaGFzIGJlZW4gY29tcGxldGVkXCJcIlwiXG4gIGNvbXBsZXRlZDogQm9vbGVhbiFcbiAgXCJcIlwiQSBzdGVwIGluIHRoZSBvZmZlciBmbG93XCJcIlwiXG4gIHN0ZXA6IE9mZmVyU2V0dXBTdGVwVHlwZSFcbn1cblxudHlwZSBEZXBvc2l0c1Byb2Nlc3NpbmdBbmRGdXR1cmVQYXltZW50RGF0ZUVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBEZXBvc2l0c1Byb2Nlc3NpbmdBbmRGdXR1cmVQYXltZW50RGF0ZVxufVxuXG5pbnB1dCBCdWxrSW52aXRlVXNlcnNJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdXNlcnM6IFtVc2VySW52aXRlIV0hXG59XG5cblwiXCJcIkludGVybmFsbHkgaW5pdGlhdGVkIGJ5IGEgQnJleCBlbXBsb3llZVwiXCJcIlxudHlwZSBJbnRlcm5hbEluaXRpYXRlZCB7XG4gIFwiXCJcIkEgcGxhY2Vob2xkZXIgYWx3YXlzIHRydWUgZmllbGQgdG8gbWFrZSB0aGUgb2JqZWN0IHF1ZXJ5YWJsZVwiXCJcIlxuICBpbnRlcm5hbDogQm9vbGVhblxufVxuXG5lbnVtIFByZW1pdW1TZXR0aW5nUHJpY2luZ1NjaGVtZSB7XG4gIEJFVEFfR1JBTkRGQVRIRVJcbiAgQkVUQV9VUEdSQURFRFxuICBDVVNUT01cbiAgSU5WQUxJRFxuICBMRUdBQ1lfRVhQRU5TRV9CRVRBXG4gIE9ORV9QT0lOVF9QRVJfRE9MTEFSXG4gIFBST01PVElPTkFMX0NBTVBBSUdOXG4gIFNUQU5EQVJEXG59XG5cbnR5cGUgRGVsZXRlUG9zaXRpdmVQYXlBY2NvdW50U2V0dGluZ1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmc6IFBvc2l0aXZlUGF5QWNjb3VudFNldHRpbmchXG59XG5cbmlucHV0IENvbXBsZXRlUHJvbW90aW9uSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHByb21vdGlvbk5hbWU6IFN0cmluZyFcbn1cblxuXCJcIlwiQ2FzaCBsaW5rZWQgYWNjb3VudCBib251c1wiXCJcIlxudHlwZSBDYXNoTGlua2VkQWNjb3VudEJvbnVzIHtcbiAgY29tcGxldGVkQXQ6IFRpbWVcbiAgZXhwaXJlc0F0OiBUaW1lXG4gIHJld2FyZEFtb3VudDogSW50IVxuICBzdGF0dXM6IENhc2hCb251c1N0YXR1cyFcbn1cblxudHlwZSBSZXdhcmRzQWNjcnVhbEVudHJ5RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IFJld2FyZHNBY2NydWFsRW50cnlcbn1cblxudHlwZSBFeHBlbnNlc0l0ZW1Db25uZWN0aW9uIHtcbiAgZWRnZXM6IFtFeHBlbnNlc0l0ZW1FZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbnR5cGUgQ29sbGVjdGlvbkF0dGVtcHRDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtDb2xsZWN0aW9uQXR0ZW1wdEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBDYXJkUGF5bWVudEZvcndhcmRlckludm9pY2Uge1xuICBpbnZvaWNlQXNzZXRJZDogU3RyaW5nXG4gIGludm9pY2VOdW1iZXI6IFN0cmluZ1xufVxuXG50eXBlIFN0YXJ0SW50ZWdyYXRpb25FeHBvcnRQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJFeHBvcnRfYXR0ZW1wdF9pZCB0byB1c2UgZm9yIHRyYWNraW5nIGV4cG9ydCBzdGF0dXMgYW5kIGdldHRpbmcgcmVzdWx0c1wiXCJcIlxuICBleHBvcnRBdHRlbXB0SWQ6IElEXG59XG5cbnR5cGUgVXBkYXRlSW50ZWdyYXRpb25SdWxlUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaW50ZWdyYXRpb25SdWxlOiBJbnRlZ3JhdGlvblJ1bGVcbn1cblxudHlwZSBVcGRhdGVQYXltZW50SW5zdHJ1bWVudFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHBheW1lbnRJbnN0cnVtZW50OiBQYXltZW50SW5zdHJ1bWVudCFcbn1cblxuaW5wdXQgVXBkYXRlRXhwZW5zZXNTZXR0aW5nU3RhdHVzSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbiAgc3RhdHVzOiBFeHBlbnNlc1NldHRpbmdTdGF0dXMhXG59XG5cbmlucHV0IFNldERlcG9zaXRzVHJhbnNhY3Rpb25QYXltZW50TWVtb0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBtZW1vOiBTdHJpbmdcbiAgdHJhbnNhY3Rpb25JZDogSUQhXG59XG5cbnR5cGUgQXBwcm92YWxzUmVxdWVzdENvbm5lY3Rpb24ge1xuICBlZGdlczogW0FwcHJvdmFsc1JlcXVlc3RFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG4gIFwiXCJcIlRoZSB0b3RhbCBudW1iZXIgb2YgcmVxdWVzdHNcIlwiXCJcbiAgdG90YWxDb3VudDogSW50IVxufVxuXG50eXBlIE9uYm9hcmRpbmdBcHBsaWNhdGlvblN0YXRlRW1wdHkge1xuICBfOiBCb29sZWFuXG59XG5cbnR5cGUgT25ib2FyZGluZ1BhZ2VVd0JhbmtDb25uZWN0aW9uIHtcbiAgYW1vdW50TmVlZGVkQ29ubmVjdGVkQmFuazogSW50XG4gIGFtb3VudE5lZWRlZFN0YXRlbWVudHM6IEludFxuICBjYW5Ta2lwU3RhdGVtZW50czogQm9vbGVhbiFcbiAgY29udGVudDogT25ib2FyZGluZ0Zvcm1Vd0JhbmtDb25uZWN0aW9uIVxuICBmaW5hbmNpYWxQcm9kdWN0VHlwZTogRmluYW5jaWFsUHJvZHVjdFR5cGVcbiAgcmVxdWVzdFJlYXNvbjogT25ib2FyZGluZ1VuZGVyd3JpdGluZ0JhbmtDb25uZWN0aW9uUmVxdWVzdFJlYXNvblxuICBzaG91bGRQcm9tcHRTdGF0ZW1lbnRzOiBCb29sZWFuIVxufVxuXG5pbnB1dCBDcmVhdGVSZWltYnVyc2VtZW50UmVwb3J0SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRpc3BsYXlUaW1lOiBUaW1lIVxuICBmaWx0ZXJzOiBKc29uIVxufVxuXG5pbnB1dCBBcHByb3ZhbHNSZXF1ZXN0UmVpbWJ1cnNlbWVudElucHV0IHtcbiAgY3VzdG9tZXJBY2NvdW50SWQ6IElEIVxuICBjdXN0b21lclVzZXJJZDogSUQhXG4gIHJlaW1idXJzZW1lbnRJdGVtSWQ6IElEIVxuICB1cGRhdGVkQXQ6IFRpbWUhXG59XG5cbmVudW0gQXBwcm92YWxzU2V0dGluZ1N0YXR1cyB7XG4gIERJU0FCTEVEXG4gIEVOQUJMRURcbn1cblxudHlwZSBDYXJkVHJhbnNhY3Rpb25GcmF1ZEFsZXJ0IGltcGxlbWVudHMgTm9kZSB7XG4gIGNyZWF0aW9uRGF0ZTogVGltZVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgc3RhdHVzOiBDb25maXJtYXRpb25TdGF0dXMhXG4gIHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiFcbn1cblxuaW5wdXQgVXBkYXRlQWNjb3VudEFkZHJlc3NJbnB1dCB7XG4gIGFkZHJlc3M6IEFkZHJlc3NJbnB1dCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB1cGRhdGVFeGlzdGluZ0NhcmRBZGRyZXNzZXM6IEJvb2xlYW5cbn1cblxudHlwZSBHZXRFeHBvcnRBdHRlbXB0U3RhdGVQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJSZXBvcnQgZG93bmxvYWQgVVJMIChmb3IgQ1NWIGV4cG9ydHMpXCJcIlwiXG4gIGRvd25sb2FkVXJsOiBTdHJpbmdcbiAgXCJcIlwiU3RhdHVzIG9mIGV4cG9ydCBhdHRlbXB0XCJcIlwiXG4gIHN0YXR1czogU3RyaW5nXG59XG5cbmVudW0gQ2xvc3VyZVN0YXR1cyB7XG4gIENPTVBMRVRFXG4gIE5PVF9TVEFSVEVEXG4gIFJFRlVORF9QUk9DRVNTSU5HXG59XG5cbnR5cGUgSW5zdGFudFBheW91dHNGZWVQYXlsb2FkIHtcbiAgdXNkQ2VudHNQZXJQb2ludDogRmxvYXQhXG59XG5cbmlucHV0IEdldEV4cG9ydEF0dGVtcHRTdGF0ZUlucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJleHBvcnRfYXR0ZW1wdF9pZCBpcyByZXR1cm5lZCBieSBzdGFydF9pbnRlZ3JhdGlvbl9leHBvcnQgcmVzcG9uc2VcIlwiXCJcbiAgZXhwb3J0QXR0ZW1wdElkOiBTdHJpbmdcbn1cblxudHlwZSBBcHByb3ZhbHNTZXR0aW5nIGltcGxlbWVudHMgTm9kZSB7XG4gIGRlZmF1bHRQb2xpY3k6IEFwcHJvdmFsc1BvbGljeSFcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIHN0YXR1czogQXBwcm92YWxzU2V0dGluZ1N0YXR1cyFcbn1cblxudHlwZSBDcmVhdGVOb25QcmltYXJ5RGVwb3NpdHNBY2NvdW50UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGVwb3NpdHNBY2NvdW50OiBEZXBvc2l0c0FjY291bnQhXG59XG5cbnR5cGUgU2VtaU1vbnRobHlDbG9zaW5nU3RyYXRlZ3kge1xuICBmaXJzdERheTogSW50XG4gIHNlY29uZERheTogSW50XG59XG5cbnR5cGUgQ2FsY3VsYXRlQ3JlZGl0TWFya2V0aW5nT2ZmZXJQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBvZmZlcjogQ3JlZGl0TWFya2V0aW5nT2ZmZXJcbiAgcmVzdWx0OiBDYWxjdWxhdGVDcmVkaXRNYXJrZXRpbmdPZmZlclJlc3VsdFN0YXR1cyFcbn1cblxuZW51bSBBZmZpbGlhdGVCb251c1N0YXR1cyB7XG4gIEFDVElWRVxuICBDT01QTEVURURcbiAgRVhQSVJFRFxuICBJTlZBTElEXG59XG5cbnR5cGUgVHJhbnNhY3Rpb25MZW5zIGltcGxlbWVudHMgTm9kZSB7XG4gIGJpbGxhYmxlU3RhdHVzOiBCaWxsYWJsZVN0YXR1c1xuICBkaXNwbGF5RmllbGRFbnRpdGllczogW0V4dGVybmFsSW50ZWdyYXRpb25FbnRpdHldXG4gIGRpc3BsYXlGaWVsZHM6IEpzb25cbiAgZXh0ZXJuYWxDbGFzczogRXh0ZXJuYWxJbnRlZ3JhdGlvbkVudGl0eVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiXG4gIFJldHVybnMgdGhlIGNvbXB1dGVkIGludGVncmF0aW9uIGZpZWxkIGVudGl0aWVzIGZyb20gaW50ZWdyYXRpb24gcnVsZSBlbmdpbmUgZm9yIGEgdHhuLlxuICBXZSByZXR1cm4gYSBsaXN0IG9mIFBFSUVzIGFzIHRoZSBQRUlGIGRhdGEgZXhpc3RzIG9uIHRoZSBvYmplY3QgaXRzZWxmIHRvIG1hdGNoIGluIHRoZSBmcm9udGVuZC5cbiAgXCJcIlwiXG4gIGludGVncmF0aW9uRmllbGRFbnRpdGllczogW0V4dGVybmFsSW50ZWdyYXRpb25FbnRpdHldXG4gIHJ1bGVFdmFsdWF0aW9uczogW0ludGVncmF0aW9uUnVsZUV2YWx1YXRpb25dXG4gIHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvblxuICB1c2VyQ2F0ZWdvcnk6IFVzZXJDYXRlZ29yeVxufVxuXG50eXBlIEludm9pY2luZ0NvbnRhY3QgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiQWRkcmVzc1wiXCJcIlxuICBhZGRyZXNzOiBDb250YWN0QWRkcmVzc1xuICBcIlwiXCJUeXBlIG9mIGNvbnRhY3QuIGUuZy4gSW52b2ljZXIsIFBheWVyXCJcIlwiXG4gIGNvbnRhY3RUeXBlOiBDb250YWN0VHlwZSFcbiAgXCJcIlwiRG9pbmcgQnVzaW5lc3MgQXNcIlwiXCJcbiAgZGJhTmFtZTogU3RyaW5nXG4gIFwiXCJcIkVtYWlsXCJcIlwiXG4gIGVtYWlsOiBTdHJpbmdcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlBob25lIG51bWJlclwiXCJcIlxuICBwaG9uZTogU3RyaW5nXG59XG5cbnR5cGUgUm9sZVJ1bGVQcmVkaWNhdGUge1xuICBjdXN0b21lckFjY291bnRJZDogU3RyaW5nXG4gIGN1c3RvbWVyVXNlcklkOiBTdHJpbmdcbn1cblxuaW5wdXQgVXBkYXRlUmVpbWJ1cnNlbWVudE1ldGFkYXRhSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHJlaW1idXJzZW1lbnRJdGVtSWQ6IElEIVxuICB1cGRhdGVkUmVpbWJ1cnNlbWVudE1ldGFkYXRhOiBSZWltYnVyc2VtZW50TWV0YWRhdGFJbnB1dCFcbn1cblxudHlwZSBFbmFibGVJbnRlZ3JhdGlvblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIFwiXCJcIlRoZSBlbmFibGVkIGludGVncmF0aW9uXCJcIlwiXG4gIGludGVncmF0aW9uOiBJbnRlZ3JhdGlvblxufVxuXG50eXBlIEJhbGFuY2VCcmVha2Rvd24ge1xuICBcIlwiXCJUaGUgdW5zaWduZWQgc3VtIG9mIGFsbCB0cmFuc2FjdGlvbnMuIFRyYW5zYWN0aW9ucyB0aGF0IGFkZCBtb25leSB0byB0aGUgQ2FzaCBhY2NvdW50IGFyZSBpbmNsdWRlZCBvbmx5IGlmIHRoZXkgaGF2ZSBiZWVuIGZ1bGx5IHByb2Nlc3NlZCAodHJhbnNhY3Rpb24gaGFzIGhpdCB0aGUgYmFuaykuIFRyYW5zYWN0aW9ucyB0aGF0IHJlbW92ZSBtb25leSBmcm9tIHRoZSBDYXNoIGFjY291bnQgYXJlIHJlbW92ZWQgb25jZSB0aGUgdHJhbnNhY3Rpb24gaXMgc3RhcnRlZC5cIlwiXCJcbiAgYXZhaWxhYmxlQmFsYW5jZTogSW50IVxuICBcIlwiXCJVbnNpZ25lZCBzdW0gb2YgdHJhbnNhY3Rpb25zIHRoYXQgaGF2ZW4ndCBmaW5pc2hlZCBwcm9jZXNzaW5nIChib3RoIGZvciBpbmNvbWluZyBhbmQgb3V0Z29pbmcgdHJhbnNhY3Rpb25zKS5cIlwiXCJcbiAgcHJvY2Vzc2luZ0JhbGFuY2U6IEludCFcbiAgXCJcIlwiQ2FyZCB0cmFuc2FjdGlvbnMgZm9yIHRoZSBkYXkgdGhhdCBhY2N1bXVsYXRlIHVudGlsIGl0J3MgcHJvY2Vzc2VkIGZyb20gdGhlIENhc2ggYWNjb3VudCBhdCB0aGUgZW5kIG9mIHRoZSBkYXkuXCJcIlwiXG4gIHNhbWVEYXlDYXJkQmFsYW5jZTogSW50IVxuICBcIlwiXCJVbnNpZ25lZCBzdW0gb2YgdHJhbnNhY3Rpb25zIHRoYXQgYXJlIHNjaGVkdWxlZCBmb3IgdGhlIGZ1dHVyZSAoYm90aCBmb3IgaW5jb21pbmcgYW5kIG91dGdvaW5nIHRyYW5zYWN0aW9ucykuXCJcIlwiXG4gIHNjaGVkdWxlZEZ1bmRzQW1vdW50OiBJbnQhXG59XG5cblwiXCJcIlRoZSBjb2xsZWN0aW9uIGluZm9ybWF0aW9uIGZvciB0aGUgb2ZmZXJzIGdyb3VwIChhZHZhbmNlKVwiXCJcIlxudHlwZSBSZWNlaXZhYmxlc09mZmVyc09mZmVyc0dyb3VwQ29sbGVjdGlvbkluZm8ge1xuICBcIlwiXCJUaGUgdG90YWwgYW1vdW50IHRoYXQgaGFzIGJlZW4gY29sbGVjdGVkIHNvIGZhclwiXCJcIlxuICB0b3RhbENvbGxlY3RlZEFtb3VudDogRmluYW5jaWFsQXNzZXQhXG4gIFwiXCJcIlRoZSB0b3RhbCBwb2ludHMgdGhhdCBoYXZlIGJlZW4gcmVkZWVtZWQgdG8gcGF5IGZvciBmZWVzXCJcIlwiXG4gIHRvdGFsUG9pbnRzUmVkZWVtZWQ6IEludCFcbiAgXCJcIlwiVGhlIHZhbHVlIG9mIHRoZXNlIHBvaW50cyAoaW4gY2VudHMpXCJcIlwiXG4gIHRvdGFsUG9pbnRzVmFsdWU6IEZpbmFuY2lhbEFzc2V0IVxufVxuXG50eXBlIE9uYm9hcmRpbmdQYWdlRnVuZGluZ1NvdXJjZSB7XG4gIF86IEJvb2xlYW5cbiAgY29udGVudDogT25ib2FyZGluZ0Zvcm1FbXB0eSFcbn1cblxudHlwZSBTZXRTdGF0ZW1lbnRFbnRyeUludGVncmF0aW9uRmllbGRQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBsZW5zOiBTdGF0ZW1lbnRFbnRyeUxlbnNcbn1cblxuXCJcIlwiVmlldyBkYXRhIGZvciByZXdhcmRzIHBhZ2UgdGhyZXNob2xkIGJvbnVzZXNcIlwiXCJcbnR5cGUgSW5jZW50aXZlUGxhY2VtZW50Vmlld0RhdGFSZXdhcmRzUGFnZVRocmVzaG9sZCB7XG4gIFwiXCJcIkJvbnVzIGlmIGFjaGlldmVkIChjZW50cylcIlwiXCJcbiAgYm9udXM6IEludCFcbiAgXCJcIlwiRGVzY3JpcHRpb24gb2YgYm9udXMgKHBvdGVudGlhbGx5IHRvIHB1dCBpbiBtb2RhbClcIlwiXCJcbiAgZGVzY3JpcHRpb246IFN0cmluZyFcbiAgXCJcIlwiVGltZSB3aGVuIHRoZSB1c2VyIHdhcyBwYWlkIHRoZSBwb2ludHMsIG51bGwgaWYgdGhleSBoYXZlbid0IGJlZW4gcGFpZFwiXCJcIlxuICBwYXllZE91dEF0OiBUaW1lXG4gIFwiXCJcIlBsYWNlbWVudFwiXCJcIlxuICBwbGFjZW1lbnQ6IEluY2VudGl2ZVBsYWNlbWVudCFcbiAgXCJcIlwiUHJvZ3Jlc3MgKGNlbnRzKSBpLmUgJDUwMCBpbiAkNTAwLyQxMDAwXCJcIlwiXG4gIHByb2dyZXNzOiBJbnQhXG4gIFwiXCJcIlNob3J0IGRlc2NyaXB0aW9uIChxdWljayBzdW1tYXJ5KVwiXCJcIlxuICBzaG9ydERlc2NyaXB0aW9uOiBTdHJpbmchXG4gIFwiXCJcIlN0YXR1cyBvZiB0aGUgYm9udXNcIlwiXCJcbiAgc3RhdHVzOiBJbmNlbnRpdmVQbGFjZW1lbnRWaWV3RGF0YVN0YXR1c1xuICBcIlwiXCJUaHJlc2hvbGQgKGNlbnRzKSBpLmUgJDEwMDAgaW4gJDUwMC8kMTAwMFwiXCJcIlxuICB0aHJlc2hvbGQ6IEludCFcbiAgXCJcIlwiVGl0bGVcIlwiXCJcbiAgdGl0bGU6IFN0cmluZyFcbn1cblxudHlwZSBSb2xlIGltcGxlbWVudHMgTm9kZSB7XG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIG5hbWU6IFN0cmluZyFcbiAgcnVsZXM6IFtSb2xlUnVsZV1cbn1cblxuXCJcIlwiT2JqZWN0IGRlZmluaW5nIGJyZXgtb3JpZ2luYXRlZCBhY2ggZGViaXQgbGltaXRzXCJcIlwiXG50eXBlIEFjaERlYml0TGltaXRzIHtcbiAgXCJcIlwiVGhlIGxlbmd0aCBvZiB0aGUgcGF5b3V0IGRlbGF5IGluIGJ1c2luZXNzIGRheXMgZm9yIGFjaCBkZWJpdHNcIlwiXCJcbiAgYWNoRGViaXRQYXlvdXREZWxheTogSW50IVxuICBcIlwiXCJUaGUgcmVtYWluaW5nIGxpbWl0IGF2YWlsYWJsZSBmb3IgbWFraW5nIGFjaCBkZWJpdHMgdG9kYXlcIlwiXCJcbiAgYWNoUmVtYWluaW5nTGltaXRUb2RheTogSW50IVxuICBcIlwiXCJUaGUgcmVtYWluaW5nIGxpbWl0IGF2YWlsYWJsZSBmb3IgbWFraW5nIGFjaCBkZWJpdHMgdG9tb3Jyb3dcIlwiXCJcbiAgYWNoUmVtYWluaW5nTGltaXRUb21vcnJvdzogSW50IVxuICBcIlwiXCJUaGUgdG90YWwgbGltaXQgZGVmaW5pdGlvbiBmb3IgYnJleC1vcmlnaW5hdGVkIGFjaCBkZWJpdHNcIlwiXCJcbiAgYWNoVG90YWxMaW1pdFVzZENlbnRzOiBJbnQhXG4gIFwiXCJcIlRoZSBuZXh0IGJ1c2luZXNzIGRheSwgaW5jbHVzaXZlIG9mIHRvZGF5LiBleCBpZiB0b2RheT1GcmlkYXksIHJldHVybiBGcmlkYXkncyBkYXRlLiBpZiB0b2RheT1TYXR1cmRheSwgcmV0dXJuIE1vbmRheSdzIGRhdGVcIlwiXCJcbiAgZmlyc3RBdmFpbGFibGVCdXNpbmVzc0RheTogVGltZSFcbiAgXCJcIlwiVGhlIHNlY29uZCBuZXh0IGJ1c2luZXNzIGRheSwgaW5jbHVzaXZlIG9mIHRvZGF5LiBleCBpZiB0b2RheT1Nb25kYXksIHJldHVybiBUdWVzZGF5cydzIGRhdGUuIGlmIHRvZGF5PUZyaWRheSwgcmV0dXJuIE1vbmRheSdzIGRhdGVcIlwiXCJcbiAgc2Vjb25kQXZhaWxhYmxlQnVzaW5lc3NEYXk6IFRpbWUhXG59XG5cblwiXCJcIlJlcHJlc2VudHMgYSBzaW5nbGUgYWdncmVnYXRpb24gaW4gYSB0aW1lIHJhbmdlIGZvciB0cmFuc2FjdGlvbnNcIlwiXCJcbnR5cGUgSW5zaWdodHNBZ2dyZWdhdGVUcmFuc2FjdGlvbiB7XG4gIFwiXCJcIkNhc2ggYmFsYW5jZSBhdCB0aGUgZW5kX2F0IGRhdGVcIlwiXCJcbiAgYmFsYW5jZVVzZENlbnRzOiBMb25nIVxuICBcIlwiXCJUaGUgY2FzaCB0aGUgYnVzaW5lc3MgaXMgYnVybmluZyB3aXRoaW4gdGhlIHRpbWUgcGVyaW9kXCJcIlwiXG4gIGJ1cm5SYXRlOiBMb25nIVxuICBcIlwiXCJFbmQgdGltZXN0YW1wIGZvciBhZ2dyZWdhdGlvbiB2YWx1ZVwiXCJcIlxuICBlbmRBdDogVGltZSFcbiAgXCJcIlwiQWdncmVnYXRlIG1vbmV5IGluIHZhbHVlIGluIHVzZCBjZW50c1wiXCJcIlxuICBtb25leUluVXNkQ2VudHM6IExvbmchXG4gIFwiXCJcIkFnZ3JlZ2F0ZSBtb25leSBvdXQgdmFsdWUgaW4gdXNkIGNlbnRzXCJcIlwiXG4gIG1vbmV5T3V0VXNkQ2VudHM6IExvbmchXG4gIFwiXCJcIlN0YXJ0IHRpbWVzdGFtcCBmb3IgYWdncmVnYXRpb24gdmFsdWVcIlwiXCJcbiAgc3RhcnRBdDogVGltZSFcbn1cblxudHlwZSBOb3RpZmljYXRpb25TdWJzY3JpcHRpb25FZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uXG59XG5cbnVuaW9uIFJld2FyZHNUcmlnZ2VySW5zdGFuY2VTdGF0ZSA9IFJld2FyZHNUcmlnZ2VySW5zdGFuY2VTdGF0ZUNhc2hBY3RpdmF0aW9uQ2FyZFNwZW5kQm9udXMgfCBSZXdhcmRzVHJpZ2dlckluc3RhbmNlU3RhdGVFbXB0eSB8IFJld2FyZHNUcmlnZ2VySW5zdGFuY2VTdGF0ZVJlZmVycmVkQW1vdW50U3BlbnRcblxuZW51bSBEZXBvc2l0c0FjY291bnRzRGlzcGxheUNvbG9yIHtcbiAgR1JFRU5fQkFTRUxJTkVcbiAgSU5WQUxJRFxuICBKQU1cbiAgTkFWWV9NSURcbiAgT0NFQU5cbiAgT1JBTkdFX0JBU0VMSU5FXG4gIFBVUlBMRV9CQVNFTElORVxuICBST1lBTFxuICBZRUxMT1dfQkFTRUxJTkVcbn1cblxudHlwZSBDaGVja1JlY2VpdmluZ01ldGhvZCB7XG4gIGFkZHJlc3M6IEFkZHJlc3Ncbn1cblxuXCJcIlwiQW4gYWNjb3VudCByZXByZXNlbnRpbmcgYWN0aXZpdHkgY29ycmVzcG9uZGluZyB0byBhIHNldCBvZiBsb2FuIHRlcm1zXCJcIlwiXG50eXBlIEpvdXJuYWxBY2NvdW50IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxufVxuXG5pbnB1dCBDb21wbGV0ZVBlbmRpbmdSZWNvcmRBcHByb3ZhbElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZWNpc2lvbjogUGVuZGluZ1JlY29yZEFwcHJvdmFsRGVjaXNpb24hXG4gIGRlY2lzaW9uTm90ZXM6IFN0cmluZ1xuICBkZWNpc2lvblJlYXNvbjogUGVuZGluZ1JlY29yZEFwcHJvdmFsRGVjaXNpb25SZWFzb25cbiAgcGF5bWVudElkOiBJRCFcbn1cblxudHlwZSBNYXJrZXRpbmdSZXdpbmRWaWRlbyB7XG4gIGFzc2V0OiBBc3NldFxuICB1c2VyOiBVc2VyXG4gIHdhdGNoZWQ6IEJvb2xlYW4hXG4gIHllYXI6IE1hcmtldGluZ1Jld2luZFllYXIhXG59XG5cblwiXCJcIkN1c3RvbWVyIGltcG9ydGVkIGZyb20gUXVpY2tib29rc1wiXCJcIlxudHlwZSBRdWlja2Jvb2tzQ3VzdG9tZXIge1xuICBcIlwiXCJDdXN0b21lciBuYW1lIGZyb20gUXVpY2tCb29rc1wiXCJcIlxuICBuYW1lOiBTdHJpbmdcbn1cblxuZW51bSBQcm9tb3Rpb25zVGhlbWUge1xuICBEQVJLXG4gIExJR0hUXG59XG5cbmVudW0gUmV0dXJuUmVhc29uIHtcbiAgQUNDT1VOVF9OT1RfRk9VTkRcbiAgQ09SUE9SQVRFX0NVU1RPTUVSX0FEVklTRVNfTk9UX0FVVEhPUklaRURcbiAgQ1JFRElUX0VOVFJZX1JFRlVTRURfQllfUkVDRUlWRVJcbiAgSU5DT1JSRUNUTFlfQ09ERURfT1VUQk9VTkRfSU5URVJOQVRJT05BTF9QQVlNRU5UXG4gIElOU1VGRklDSUVOVF9GVU5EU1xuICBVTktOT1dOXG59XG5cblwiXCJcIlNjaGVtYSBmb3IgZXh0ZXJuYWwgaW50ZWdyYXRpb24gZmllbGRzXCJcIlwiXG50eXBlIEV4dGVybmFsSW50ZWdyYXRpb25GaWVsZCBpbXBsZW1lbnRzIE5vZGUge1xuICBkZWxldGVkQXQ6IFRpbWVcbiAgXCJcIlwiS2V5IHVzZWQgaW4gdGhlIEVSUCBmb3IgY3VzdG9tIGZpZWxkc1wiXCJcIlxuICBleHRlcm5hbEtleTogU3RyaW5nXG4gIFwiXCJcIkV4dHJhIG1ldGFkYXRhIHNwZWNpZmllZCBmb3IgY3VzdG9tIGZpZWxkcywgaS5lLiB7IGZpZWxkX3R5cGU6ICdzdHJpbmcnIH1cIlwiXCJcbiAgZXh0ZXJuYWxNZXRhZGF0YTogSnNvblxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgaW50ZWdyYXRpb25JZDogSUQhXG4gIGlzSW5hY3RpdmU6IEJvb2xlYW5cbiAgXCJcIlwiSHVtYW4tcmVhZGFibGUgbmFtZSB1c2VkIGZvciBjdXN0b20gZmllbGRzLCBpLmUuIENvbG91ciwgQ2l0eVwiXCJcIlxuICBuYW1lOiBTdHJpbmdcbiAgdHlwZTogSW50ZWdyYXRpb25GaWVsZFR5cGUhXG59XG5cbmVudW0gUGF5bWVudEFwcHJvdmFsUmVzdWx0IHtcbiAgQUxSRUFEWV9QUk9DRVNTRURcbiAgSU5WQUxJRFxuICBTVUNDRVNTRlVMTFlfVVBEQVRFRFxufVxuXG50eXBlIFRlcm1pbmF0ZUNhcmRQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG51bmlvbiBEZXBvc2l0c1RyYW5zYWN0aW9uRGV0YWlscyA9IEFjaERldGFpbHMgfCBBY2hSZXR1cm5EZXRhaWxzIHwgQm9va1RyYW5zZmVyRGV0YWlscyB8IEJyZXhPcGVyYXRpb25hbFRyYW5zZmVyRGV0YWlscyB8IEJyZXhPcmlnaW5hdGVkQ2hlcXVlRGV0YWlscyB8IENhcmRDb2xsZWN0aW9uRGV0YWlscyB8IERlcG9zaXRzQWRtaW5CYWxhbmNlQWRqdXN0bWVudERldGFpbHMgfCBEaXZpZGVuZERldGFpbHMgfCBFeHRlcm5hbGx5T3JpZ2luYXRlZENoZXF1ZURldGFpbHMgfCBGYm9UcmFuc2ZlckRldGFpbHMgfCBJbnRlcmVzdERldGFpbHMgfCBJbnRyYUN1c3RvbWVyQWNjb3VudEJvb2tUcmFuc2ZlckRldGFpbHMgfCBQYXltZW50RGV0YWlscyB8IFJlY2VpdmFibGVzT2ZmZXJzQWR2YW5jZURldGFpbHMgfCBSZWNlaXZhYmxlc09mZmVyc1JlcGF5bWVudERldGFpbHMgfCBSZXdhcmRzUmVkZW1wdGlvbkRldGFpbHMgfCBXaXJlRGV0YWlsc1xuXG5pbnB1dCBDcmVhdGVQYXltZW50RWFybHlBdXRoQmFsYW5jZURlY3JlYXNlQ29tbWl0bWVudElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIENhc2hSZWN1cnJpbmdTY2hlZHVsZU1vbnRobHlCeVdlZWsge1xuICBcIlwiXCJOdW1iZXIgb2YgbW9udGhzIGJldHdlZW4gc3VjY2Vzc2l2ZSB0cmFuc2FjdGlvbnNcIlwiXCJcbiAgY2FkZW5jZTogSW50IVxuICBcIlwiXCJEYXkgb2YgdGhlIHdlZWsgdG8gc2NoZWR1bGUgdHJhbnNhY3Rpb25zXCJcIlwiXG4gIGRheU9mV2VlazogQ2FzaFRyYW5zYWN0aW9uQnVzaW5lc3NEYXkhXG4gIFwiXCJcIldlZWsgb2YgdGhlIG1vbnRoIHRvIHNjaGVkdWxlIHRyYW5zYWN0aW9uc1wiXCJcIlxuICB3ZWVrT2ZNb250aDogSW50IVxufVxuXG50eXBlIERpc3B1dGVUcmFuc2FjdGlvbkVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBEaXNwdXRlVHJhbnNhY3Rpb25cbn1cblxudHlwZSBSZW1vdmVGaW5hbmNpYWxTb3VyY2VQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBmaW5hbmNpYWxTb3VyY2VzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBGaW5hbmNpYWxTb3VyY2VDb25uZWN0aW9uXG59XG5cbnR5cGUgUmVkZWVtU3RhdGVtZW50RW50cnlSZWZ1bmRQYXlsb2FkIHtcbiAgYWNjb3VudDogQWNjb3VudCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICByZWZ1bmRlZFN0YXRlbWVudEVudHJ5OiBTdGF0ZW1lbnRFbnRyeSFcbn1cblxudHlwZSBNb3N0UmVjZW50VHJhbnNhY3Rpb25zVGlsZSBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiU3RhdGVtZW50IEVudHJpZXNcIlwiXCJcbiAgc3RhdGVtZW50RW50cmllczogW1N0YXRlbWVudEVudHJ5IV0hXG59XG5cbnR5cGUgQmlsbGluZ1BheW1lbnRJbnRlbnRFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogQmlsbGluZ1BheW1lbnRJbnRlbnRcbn1cblxudHlwZSBQYXltZW50QXBwcm92YWwgaW1wbGVtZW50cyBOb2RlIHtcbiAgZGVjaXNpb246IFBheW1lbnRBcHByb3ZhbERlY2lzaW9uIVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgcGF5bWVudEFwcHJvdmVyczogW1BheW1lbnRBcHByb3Zlcl1cbiAgcGVuZGluZ1JlY29yZElkOiBJRCFcbiAgdXBkYXRlZEF0OiBUaW1lXG59XG5cbnR5cGUgTW9udGhseVVzZXJMaW1pdEluZm8ge1xuICBhY3RpdmVBbW91bnQ6IEludFxuICBub3JtYWxBbW91bnQ6IEludFxuICBvdmVycmlkZTogTW9udGhseVVzZXJMaW1pdE92ZXJyaWRlXG59XG5cbnR5cGUgRG9jdW1lbnRPY3JQYXJzZWREZXRhaWxzIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBFSU4gZXh0cmFjdGVkIGZyb20gdGhlIGRvY3VtZW50LiBOb3QgcHJlc2VudCBmb3IgYWxsIGRvY3VtZW50cy5cIlwiXCJcbiAgZWluOiBEb2N1bWVudE9jclBhcnNlZERldGFpbHNEZXRhaWxcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlRoZSBOYW1lIGV4dHJhY3RlZCBmcm9tIHRoZSBkb2N1bWVudC4gTm90IHByZXNlbnQgZm9yIGFsbCBkb2N1bWVudHMuXCJcIlwiXG4gIG5hbWU6IERvY3VtZW50T2NyUGFyc2VkRGV0YWlsc0RldGFpbFxufVxuXG5pbnB1dCBFbmFibGVJbnRlZ3JhdGlvbklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJpZCBpcyBpbnRlZ3JhdGlvbiBpZFwiXCJcIlxuICBpZDogSUQhXG59XG5cblwiXCJcIkF1dG8gaW5pdGlhdGVkIGJ5IGEgQnJleCBzeXN0ZW1cIlwiXCJcbnR5cGUgQXV0b0luaXRpYXRlZCB7XG4gIFwiXCJcIlRoZSBvcmlnaW5hdG9yIGlkIG9mIHRoZSBhdXRvIGluaXRpYXRlZCBwYXltZW50XCJcIlwiXG4gIG9yaWdpbmF0b3JJZDogU3RyaW5nXG4gIFwiXCJcIlRoZSBvcmlnaW5hdG9yIHR5cGUgb2YgdGhlIGF1dG8gaW5pdGlhdGVkIHBheW1lbnRcIlwiXCJcbiAgb3JpZ2luYXRvclR5cGU6IFN0cmluZyFcbn1cblxuaW5wdXQgU3RhcnRSZXNldFVzZXJJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdXNlcjogU3RhcnRSZXNldFVzZXJVc2VySW5wdXQhXG59XG5cbnR5cGUgRnVuZGluZ1NvdXJjZSBpbXBsZW1lbnRzIE5vZGUge1xuICBkYXRhOiBGdW5kaW5nU291cmNlRGF0YVxuICBkaXNhYmxlZE9uVGltZXN0YW1wOiBUaW1lXG4gIFwiXCJcIkxvYWQgZmluYW5jaWFsIGFjY291bnQgd2hlbiBwcm92ZW5hbmNlIG9mIGZ1bmRpbmcgc291cmNlLiBOdWxsIGZvciBvdGhlciBwcm92ZW5hbmNlIHR5cGVzLlwiXCJcIlxuICBmaW5hbmNpYWxBY2NvdW50OiBGaW5hbmNpYWxBY2NvdW50XG4gIFwiXCJcIkNvbnRhaW5zIHJlbGV2YW50IGluZm9ybWF0aW9uIGRldGVybWluaW5nIHRoZSBoZWFsdGggb2YgYSBmdW5kaW5nIHNvdXJjZSAoZXJyb3JzLCB3YXJuaW5ncywgZXRjLilcIlwiXCJcbiAgaGVhbHRoOiBGdW5kaW5nU291cmNlSGVhbHRoIVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgaXNCcmV4Q2FzaDogQm9vbGVhblxuICBcIlwiXCJXaGV0aGVyIHRoaXMgZnVuZGluZyBzb3VyY2UgaXMgZGlzYWJsZWQgYnkgc2VydmljaW5nIHRlYW0sIG1lYW5pbmcgd2UgY2FuIG5vIGxvbmdlciBjb2xsZWN0IGZyb20gaGVyZVwiXCJcIlxuICBpc01hbnVhbGx5RGlzYWJsZWRCeVNlcnZpY2luZzogQm9vbGVhbiFcbiAgcHJpb3JpdHk6IEZ1bmRpbmdTb3VyY2VQcmlvcml0eVxuICBwcm92ZW5hbmNlOiBGdW5kaW5nU291cmNlUHJvdmVuYW5jZVxuICBwcm92ZW5hbmNlSWQ6IFN0cmluZ1xuICB0eXBlOiBTdHJpbmdcbn1cblxuXCJcIlwiVGhlIGN1c3RvbWVyLWluZGljYXRlZCBtYXBwaW5nIG9mIGludGVncmF0aW9uIHRvIGZpbmFuY2lhbCBhY2NvdW50IHdoZXJlIHRoYXQgaW50ZWdyYXRpb24ncyBwYXlvdXRzIGFyZSBiZWluZyBkZXBvc2l0ZWRcIlwiXCJcbnR5cGUgUmVjZWl2YWJsZXNPZmZlcnNJbnRlZ3JhdGlvbkZpbmFuY2lhbEFjY291bnRNYXBwaW5nIHtcbiAgXCJcIlwiVGhlIGlkIG9mIHRoZSBmaW5hbmNpYWxfYWNjb3VudFwiXCJcIlxuICBmaW5hbmNpYWxBY2NvdW50SWQ6IFN0cmluZyFcbiAgXCJcIlwiVGhlIGlkIG9mIHRoZSBpbnRlZ3JhdGlvblwiXCJcIlxuICBpbnRlZ3JhdGlvbkNyZWRlbnRpYWxJZDogU3RyaW5nIVxufVxuXG5cIlwiXCJGaW5hbmNpYWwgQXNzZXQgd3JhcHBlclwiXCJcIlxudHlwZSBGaW5hbmNpYWxBc3NldCB7XG4gIFwiXCJcIlRoZSBpbnN0cnVtZW50IGNvZGUgKHVzZCwgZXRjLikuIEN1cnJlbnRseSwgb25seSB1c2QgaXMgc3VwcG9ydGVkLlwiXCJcIlxuICBpbnN0cnVtZW50Q29kZTogRmluYW5jaWFsSW5zdHJ1bWVudENvZGUhXG4gIFwiXCJcIlRoZSBhbW91bnQgaW4gY2VudHNcIlwiXCJcbiAgcXVhbnRpdHlDZW50czogSW50IVxufVxuXG5zY2FsYXIgU2FmZVN0cmluZ1xuXG5pbnB1dCBEaXNtaXNzQ2FyZEZyYXVkQWxlcnRzSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHRyYW5zYWN0aW9uSWRzOiBbSUQhXSFcbn1cblxuXCJcIlwiXG5BIGdlbmVyaWMgaW5wdXQgdHlwZSB0byBjcmVhdGUgYSBjb25uZWN0aW9uXG5BZGQgZmllbGRzIHRvIHJlcHJlc2VudCBzcGVjaWZpYyB2ZW5kb3JzIGFuZCB0aGUgY29ubmVjdGlvbiBwYXJhbWV0ZXJzIHRoZXkgcmVxdWlyZVxuV2Ugb25seSByZXByZXNlbnQgbWVyZ2UncyBjb25uZWN0aW9uIGlucHV0IHR5cGUgZm9yIG5vd1xuXCJcIlwiXG5pbnB1dCBWZW5kb3JDb25uZWN0aW9uQ3JlYXRpb25JbnB1dCB7XG4gIFwiXCJcIkEgbWVyZ2UgY29ubmVjdGlvbiBpcyBhIHR5cGUgb2YgdmVuZG9yIGNvbm5lY3Rpb24gd2UgY2FuIG1ha2UuIFRoaXMgZmllbGQgcmVwcmVzZW50cyB0aGUgaW5wdXQgd2UgbmVlZCBmb3IgaXQuXCJcIlwiXG4gIG1lcmdlSHJpc0Nvbm5lY3Rpb25JbnB1dDogTWVyZ2VIcmlzQ29ubmVjdGlvbklucHV0XG59XG5cblwiXCJcIm11dGluZyBjb25maWcgZm9yIGFuIGFsZXJ0IHR5cGVcIlwiXCJcbmlucHV0IEFsZXJ0VHlwZU11dGluZ0NvbmZpZ3VyYXRpb25zSW5wdXQge1xuICBhbGVydFR5cGU6IFNwZW5kQWxlcnRUeXBlIVxuICBtdXRpbmdDb25maWd1cmF0aW9uczogW011dGluZ0NvbmZpZ3VyYXRpb25JbnB1dCFdIVxufVxuXG50eXBlIENyZWF0ZVBheW1lbnRJbnN0cnVtZW50UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcGF5bWVudEluc3RydW1lbnQ6IFBheW1lbnRJbnN0cnVtZW50IVxufVxuXG50eXBlIFJlaW1idXJzZW1lbnRJdGVtRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IFJlaW1idXJzZW1lbnRJdGVtXG59XG5cbmlucHV0IERvbWVzdGljV2lyZVBheW1lbnRJbnN0cnVtZW50RmluZElucHV0IHtcbiAgYWNjb3VudE51bWJlcjogU3RyaW5nIVxuICByb3V0aW5nTnVtYmVyOiBTdHJpbmchXG59XG5cbnR5cGUgUGF5bWVudEhpc3RvcnlUaWxlIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJXaGV0aGVyIG9yIG5vdCBzcGVuZCBoYXMgYmVlbiBzdXNwZW5kZWQgZHVlIHRvIHNlcnZpY2luZywgbGlrZWx5IGZyb20gYSBmYWlsZWQgcGF5bWVudFwiXCJcIlxuICBpc1NwZW5kU3VzcGVuZGVkOiBCb29sZWFuIVxufVxuXG50eXBlIENhc2hUcmFuc2FjdGlvbkRpdmlkZW5kRGV0YWlscyB7XG4gIFwiXCJcIkZpbmFuY2lhbCBpbnN0cnVtZW50IHRoZSBkaXZpZGVuZCB3YXMgZm9yIChlLmcuIE1NRiB0aWNrZXIpXCJcIlwiXG4gIGZpbmFuY2lhbEluc3RydW1lbnQ6IEZpbmFuY2lhbEluc3RydW1lbnRcbiAgXCJcIlwiV2hlbiB0aGUgZGl2aWRlbmQgcGF5b3V0IHdhcyBpbml0aWF0ZWQsIHdoaWNoIGNvdWxkIGRpZmZlciBmcm9tIHRoZSBzZXR0bGVkX2F0IHRpbWVcIlwiXCJcbiAgcGFpZE9uRGF0ZTogRGF0ZVxufVxuXG5lbnVtIFNwZW5kQWdncmVnYXRlR3JvdXBLZXkge1xuICBDQVJEX0lEXG4gIERBWVxuICBERVBBUlRNRU5UX0lEXG4gIElOVkFMSURcbiAgTUVSQ0hBTlRfQ0FURUdPUllfSURcbiAgTUVSQ0hBTlRfSURcbiAgVVNFUl9DQVRFR09SWV9JRFxuICBVU0VSX0lEXG59XG5cbnR5cGUgQ2FzaFRyYW5zYWN0aW9uRGVwb3NpdGVkQ2hlcXVlRGV0YWlscyB7XG4gIFwiXCJcIkEgdGVtcG9yYXJ5IFVSTCBwb2ludGluZyB0byBhbiBpbWFnZSBvZiB0aGUgYmFjayBvZiB0aGUgY2hlcXVlXCJcIlwiXG4gIGJhY2tJbWFnZVVybDogU3RyaW5nXG4gIFwiXCJcIk1lbW8gZm91bmQgaW4gdGhlIHBoeXNpY2FsIGNoZXF1ZVwiXCJcIlxuICBjaGVxdWVNZW1vOiBTdHJpbmdcbiAgXCJcIlwiQSB0ZW1wb3JhcnkgVVJMIHBvaW50aW5nIHRvIGFuIGltYWdlIG9mIHRoZSBmcm9udCBvZiB0aGUgY2hlcXVlXCJcIlwiXG4gIGZyb250SW1hZ2VVcmw6IFN0cmluZ1xuICBcIlwiXCJTZW5kZXIgbmFtZSBmb3VuZCBpbiB0aGUgcGh5c2ljYWwgY2hlcXVlXCJcIlwiXG4gIHNlbmRlck5hbWU6IFN0cmluZ1xufVxuXG50eXBlIEdlbmVyYXRlUGxhaWRMaW5rVG9rZW5QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBsaW5rVG9rZW46IFN0cmluZyFcbn1cblxudHlwZSBDcmVhdGVFeHBlbnNlc0ZsYWdFdmVudFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGV4cGVuc2VzRmxhZzogRXhwZW5zZXNGbGFnXG59XG5cbnR5cGUgRWRpdERlcG9zaXRzUGF5bWVudE1lbW9QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBwYXltZW50OiBEZXBvc2l0c1BheW1lbnQhXG59XG5cblwiXCJcIkNvbnRhaW5zIGluZm9ybWF0aW9uIGZvciB0aGUgZWFjaCBzdGVwIHRvIGJlIGNvbXBsZXRlZCBmb3IgdGhlIGNoZWNrYm94IHJld2FyZFwiXCJcIlxudHlwZSBSZXdhcmRzUGFnZUNoZWNrYm94U3RlcCB7XG4gIFwiXCJcInNob3J0IGRlc2NyaXB0aW9uIGZvciB0aGUgc3RlcFwiXCJcIlxuICBkZXNjcmlwdGlvbjogU3RyaW5nIVxuICBcIlwiXCJ3aGV0aGVyIHRoZSBjdXN0b21lciBoYXMgY29tcGxldGVkIHRoaXMgc3RlcCBvciBub3RcIlwiXCJcbiAgc3RhdHVzOiBJbmNlbnRpdmVQbGFjZW1lbnRSZXdhcmRzUGFnZUNoZWNrYm94Vmlld0RhdGFTdGVwU3RhdHVzIVxufVxuXG50eXBlIEJhdGNoQ3JlYXRlQ29udGFjdHNQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBjcmVhdGVkQ29udGFjdHM6IFtQYXltZW50Q29udGFjdCFdXG59XG5cbmlucHV0IEdlbmVyYXRlRGVwb3NpdHNUcmFuc2FjdGlvbkNvbmZpcm1hdGlvbkRvd25sb2FkVXJsSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIFwiXCJcInRyYW5zYWN0aW9uIGlkXCJcIlwiXG4gIGRlcG9zaXRzVHJhbnNhY3Rpb25JZDogSUQhXG4gIFwiXCJcIkpzb24gZm9ybWF0dGVkIHN0cmluZyB3aXRoIHRyYW5zYWN0aW9uIGRldGFpbCBcIlwiXCJcbiAgdHJhbnNhY3Rpb25EZXRhaWxTdHJpbmc6IFN0cmluZyFcbn1cblxudHlwZSBDb25uZWN0VGVsbGVySW5zdGl0dXRpb25QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICByZXN1bHQ6IEZpbmFuY2lhbFNvdXJjZSFcbn1cblxudHlwZSBDYXNoUmVjdXJyaW5nU2NoZWR1bGVXZWVrbHkge1xuICBcIlwiXCJOdW1iZXIgb2Ygd2Vla3MgYmV0d2VlbiBzdWNjZXNzaXZlIHRyYW5zYWN0aW9uc1wiXCJcIlxuICBjYWRlbmNlOiBJbnQhXG4gIFwiXCJcIkRheSBvZiB0aGUgd2VlayB0byBzY2hlZHVsZSB0cmFuc2FjdGlvbnNcIlwiXCJcbiAgZGF5T2ZXZWVrOiBDYXNoVHJhbnNhY3Rpb25CdXNpbmVzc0RheSFcbn1cblxuaW5wdXQgTW9udGhseVNjaGVkdWxlIHtcbiAgZGF5T2ZNb250aDogSW50XG4gIGRheU9mV2VlazogQnVzaW5lc3NEYXlzXG4gIG5Nb250aHM6IEludCFcbiAgd2Vla09mTW9udGg6IEludFxufVxuXG50eXBlIENhc2hUcmFuc2FjdGlvblJld2FyZHNSZWRlbXB0aW9uRGV0YWlscyB7XG4gIFwiXCJcIlJld2FyZCBwb2ludHMgcmVkZWVtZWQgZm9yIHRoaXMgdHJhbnNhY3Rpb25cIlwiXCJcbiAgcG9pbnRzUmVkZWVtZWQ6IEludCFcbn1cblxuaW5wdXQgUHJvY2Vzc0RvY3VtZW50SW5wdXQge1xuICBhc3NldElkOiBTdHJpbmdcbiAgcmVxdWVzdElkOiBTdHJpbmdcbn1cblxuZW51bSBDYXNoVHJhbnNhY3Rpb25CdXNpbmVzc0RheSB7XG4gIEZSSURBWVxuICBJTlZBTElEXG4gIE1PTkRBWVxuICBUSFVSU0RBWVxuICBUVUVTREFZXG4gIFdFRE5FU0RBWVxufVxuXG5pbnB1dCBVcGRhdGVDYXJkUGluSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbiAgcGluOiBTdHJpbmchXG59XG5cbmlucHV0IFJlZGVlbVN0YXRlbWVudEVudHJ5UmVmdW5kSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHJlZGVtcHRpb25PZmZlcklkOiBTdHJpbmchXG4gIHN0YXRlbWVudEVudHJ5SWQ6IElEIVxufVxuXG50eXBlIE1vbnRobHlDbG9zaW5nU3RyYXRlZ3kge1xuICBkYXlPZk1vbnRoOiBJbnRcbn1cblxuaW5wdXQgU3RhcnREZXBvc2l0c09mZmJvYXJkaW5nSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGNsb3N1cmVSZWFzb246IERlcG9zaXRzQWNjb3VudENsb3N1cmVSZWFzb24hXG4gIGRlcG9zaXRzQWNjb3VudElkOiBJRCFcbn1cblxudHlwZSBHZW5lcmF0ZURlcG9zaXRzU3RhdGVtZW50RG9jdW1lbnREb3dubG9hZFVybFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRlcG9zaXRzU3RhdGVtZW50UGRmRG93bmxvYWRVcmw6IFN0cmluZ1xufVxuXG5pbnB1dCBBcHByb3ZhbHNSb3V0aW5nUnVsZU1hbmFnZXJJbnB1dCB7XG4gIFwiXCJcIkEgbGlzdCBvZiBmYWxsYmFjayBhcHByb3ZlcnMgd2hlbiB0aGUgcmVxdWVzdCBpbml0aWF0b3IgZG9lcyBub3QgaGF2ZSBhIG1hbmFnZXJcIlwiXCJcbiAgZmFsbGJhY2tBcHByb3ZlclVzZXJJZHM6IFtTdHJpbmchXSFcbn1cblxuaW5wdXQgQ2FuY2VsUmVpbWJ1cnNlbWVudElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICByZWltYnVyc2VtZW50SXRlbUlkOiBJRCFcbn1cblxudHlwZSBDcmVhdGVQYXltZW50UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcGF5bWVudDogRGVwb3NpdHNQYXltZW50IVxufVxuXG50eXBlIERlbGV0ZUhyaXNDb25uZWN0aW9uUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuaW5wdXQgQ3JlYXRlQWNjb3VudElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkYXRlRXN0YWJsaXNoZWQ6IFRpbWUhXG4gIGRiYU5hbWU6IFN0cmluZyFcbiAgaW5jb3Jwb3JhdGlvblN0YXRlOiBTdHJpbmchXG4gIGluY29ycG9yYXRpb25UeXBlOiBBY2NvdW50SW5jb3Jwb3JhdGlvblR5cGVJbnB1dCFcbiAgbGVnYWxOYW1lOiBTdHJpbmchXG4gIG9mZmljZUFkZHJlc3M6IEFkZHJlc3NJbnB1dCFcbiAgcHJpbmNpcGFsVXNlcjogQWNjb3VudFByaW5jaXBhbFVzZXJJbnB1dFxuICB0YXhwYXllck51bWJlcjogU3RyaW5nIVxufVxuXG50eXBlIFNwZW5kQWdncmVnYXRlVGltZVNlcmllc0Nvbm5lY3Rpb24ge1xuICBlZGdlczogW1NwZW5kQWdncmVnYXRlVGltZVNlcmllc0VkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgdG90YWxDb3VudDogSW50IVxufVxuXG5cIlwiXCJUaGUgYXBwcm92YWwgc3RlcCBkZXRhaWxzXCJcIlwiXG50eXBlIEFwcHJvdmFsc1N0ZXAge1xuICBcIlwiXCJBIGxpc3Qgb2YgYWxsb3dlZCBhcHByb3ZlcnMgZm9yIHRoaXMgc3RlcFwiXCJcIlxuICBhcHByb3ZlcnM6IFtBcHByb3ZhbHNVc2VyXVxufVxuXG50eXBlIFJvb3RRdWVyeVR5cGUge1xuICBcIlwiXCJJbnRlcm5hbCBxdWVyeSBzdXBwb3J0aW5nIGZlZGVyYXRpb24uIERvIG5vdCB1c2UgaW4gY2xpZW50IGNhbGxzLlwiXCJcIlxuICBjYXJkRW50aXR5KGlkOiBJRCk6IENhcmQhXG4gIGRlcGFydG1lbnQoaWQ6IElEISk6IERlcGFydG1lbnRcbiAgZmluYW5jaWFsRG9jdW1lbnRzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBGaW5hbmNpYWxCYW5rU3RhdGVtZW50RG9jdW1lbnRDb25uZWN0aW9uXG4gIHJlY3VycmluZ1J1bGVzQW5kRnV0dXJlRGF0ZXMoZW5kc09uOiBEYXRlLCBtb250aGx5U2NoZWR1bGU6IE1vbnRobHlTY2hlZHVsZSwgcGF5bWVudFJhaWw6IFBheW1lbnRSYWlsISwgc2VuZE9uOiBEYXRlISwgdG90YWxOdW1iZXJPZlBheW1lbnRzOiBJbnQsIHdlZWtseVNjaGVkdWxlOiBXZWVrbHlTY2hlZHVsZSk6IFJlY3VycmluZ1J1bGVzQW5kRnV0dXJlRGF0ZXNcbiAgc2VhcmNoVXNlcnMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGNhbkFjY2Vzc0NvcnBvcmF0ZUNhcmRzOiBCb29sZWFuLCBkZXBhcnRtZW50SWQ6IElELCBkaXNwbGF5Um9sZTogVXNlclJvbGVUeXBlSW5wdXQsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCwgbG9jYXRpb25JZDogSUQsIG1hbmFnZXJJZDogSUQsIHByZWFwcHJvdmVkQ2FyZHM6IEJvb2xlYW4sIHNlYXJjaFRleHQ6IFN0cmluZywgc3RhdHVzOiBTdHJpbmcpOiBVc2VyQ29ubmVjdGlvblxuICBwb3NpdGl2ZVBheUFjY291bnRTZXR0aW5nKGlkOiBJRCEpOiBQb3NpdGl2ZVBheUFjY291bnRTZXR0aW5nXG4gIHZhbGlkYXRlTG95YWx0eVByb2dyYW1NZW1iZXJzaGlwSWQobG95YWx0eVByb2dyYW1JZDogSUQhLCBtZW1iZXJzaGlwSWQ6IFN0cmluZyEpOiBCb29sZWFuXG4gIFwiXCJcIlVuZGVyd3JpdGluZyBtb2RlbCBmb3IgdGhpcyBhY2NvdW50XCJcIlwiXG4gIHVuZGVyd3JpdGluZ01vZGVsQ2xhc3NOYW1lOiBVbmRlcndyaXRpbmdNb2RlbE5hbWUhXG4gIFwiXCJcImludGVybmFsIGVudGl0eSBzeW5jIGVycm9yc1wiXCJcIlxuICBpbnRlcm5hbEVudGl0eVN5bmNFcnJvcnMoYWZ0ZXI6IFN0cmluZywgZW50aXR5VHlwZTogU3RyaW5nISwgZmlyc3Q6IEludCwgaW50ZWdyYXRpb25JZDogSUQhKTogSW50ZXJuYWxFbnRpdHlTeW5jRXJyb3JDb25uZWN0aW9uXG4gIGZyYXVkQWxlcnRzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBjdXN0b21lclVzZXJJZDogSUQhLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBGcmF1ZEFsZXJ0Q29ubmVjdGlvblxuICB2ZXJpZnlBZGRyZXNzKGFkZHJlc3MxOiBTdHJpbmchLCBhZGRyZXNzMjogU3RyaW5nISwgY2l0eTogU3RyaW5nISwgY291bnRyeTogU3RyaW5nLCBzdGF0ZTogU3RyaW5nISwgemlwOiBTdHJpbmchKTogVmVyaWZ5QWRkcmVzc1Jlc3BvbnNlXG4gIFwiXCJcImRldGFpbHMgYWJvdXQgbWFuYWdlciBzZXR1cFwiXCJcIlxuICBtYW5hZ2VyU2V0dXBTdW1tYXJ5OiBNYW5hZ2VyU2V0dXBTdW1tYXJ5XG4gIGN1cnJlbnRDYXJkU3RhdGVtZW50UG9saWN5OiBDYXJkU3RhdGVtZW50UG9saWN5XG4gIHRyYW5zYWN0aW9uKGlkOiBJRCEpOiBUcmFuc2FjdGlvblxuICBwZW5kaW5nUmVjb3JkQXBwcm92YWwoYXBwcm92YWxUb2tlbjogU3RyaW5nISwgYXBwcm92ZXJVc2VySWQ6IFN0cmluZyEpOiBQZW5kaW5nUmVjb3JkQXBwcm92YWxSZXNwb25zZVxuICBtZXJjaGFudENhdGVnb3J5KGlkOiBJRCEpOiBNZXJjaGFudENhdGVnb3J5XG4gIGJpbGxTeW5jRXJyb3JzKGFmdGVyOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGludGVncmF0aW9uSWQ6IElEISk6IEJpbGxTeW5jRXJyb3JDb25uZWN0aW9uXG4gIFwiXCJcIkZldGNoIGFsbCBjYXRlZ29yeSBpbmZvcm1hdGlvbi5cIlwiXCJcbiAgY2FyZFBheW1lbnRGb3J3YXJkZXJDYXRlZ29yaWVzOiBbQ2FyZFBheW1lbnRGb3J3YXJkZXJDYXRlZ29yeV1cbiAgXCJcIlwiR2V0cyBhIGRpc3B1dGVcIlwiXCJcbiAgZGlzcHV0ZShpZDogSUQhKTogRGlzcHV0ZVxuICBjcmVkZW50aWFscyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50LCB2ZW5kb3I6IFtTdHJpbmchXSk6IENyZWRlbnRpYWxDb25uZWN0aW9uXG4gIHJ1bGUoaWQ6IElEISk6IFJ1bGVcbiAgc3VwcG9ydGVkUm9sZXM6IFtTdHJpbmddXG4gIHVzZXJDYXRlZ29yaWVzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBVc2VyQ2F0ZWdvcnlDb25uZWN0aW9uXG4gIGRlcG9zaXRzUGF5bWVudChpZDogSUQhKTogRGVwb3NpdHNQYXltZW50XG4gIFwiXCJcIkdldCBpbmNlbnRpdmUgcGxhY2VtZW50cyB0byBkaXNwbGF5IHRvIHVzZXIuXCJcIlwiXG4gIHBsYWNlbWVudHMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCwgc3VwcG9ydGVkUGxhY2VtZW50czogW0luY2VudGl2ZVBsYWNlbWVudFR5cGUhXSEpOiBJbmNlbnRpdmVQbGFjZW1lbnRWaWV3RGF0YUNvbm5lY3Rpb25cbiAgXCJcIlwiRmV0Y2ggYWxsIGxpbmtlZCBwYXlyb2xsIHByb3ZpZGVycyBmb3IgYWNjb3VudFwiXCJcIlxuICBwYXlyb2xsUHJvdmlkZXJzOiBbUGF5cm9sbFByb3ZpZGVyVjIhXSFcbiAgYmlsbChpZDogSUQhKTogQmlsbFxuICByZXdhcmRzQm9udXNUcmlnZ2VyczogW1Jld2FyZHNUcmlnZ2VyXVxuICBcIlwiXCJGZXRjaCBkZXRhaWxzIG9mIGEgc3BlY2lmaWVkIHBheW1lbnQuXCJcIlwiXG4gIGNhcmRQYXltZW50Rm9yd2FyZGVyUGF5bWVudChwYXltZW50SWQ6IElEKTogQ2FyZFBheW1lbnRGb3J3YXJkZXJQYXltZW50T2JqZWN0XG4gIGFub21hbGllcyhhY3Rpb25zOiBbQ2FyZFRyYW5zYWN0aW9uSW5zaWdodEV2ZW50QWN0aW9uXSwgYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGN1c3RvbWVyVXNlcklkczogW0lEXSwgZGVwYXJ0bWVudElkczogW0lEXSwgZmlyc3Q6IEludCwgZnJvbURhdGU6IFRpbWUsIGluc2lnaHRJZHM6IFtJRF0sIGluc2lnaHRUeXBlczogW0NhcmRUcmFuc2FjdGlvbnNJbnNpZ2h0VHlwZV0sIGxhc3Q6IEludCwgbWVyY2hhbnRJZHM6IFtJRF0sIHNlYXJjaFRleHQ6IFN0cmluZywgc29ydENvbHVtbjogU29ydENvbHVtbiwgc29ydERpcmVjdGlvbjogU29ydERpcmVjdGlvbiwgc3RhdHVzOiBJbnNpZ2h0U3RhdHVzLCB0b0RhdGU6IFRpbWUpOiBDYXJkVHJhbnNhY3Rpb25JbnNpZ2h0Q29ubmVjdGlvblxuICByZXdhcmRzQ2FtcGFpZ25zKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBSZXdhcmRzQ2FtcGFpZ25Db25uZWN0aW9uXG4gIHByZXZpZXdJbnRlZ3JhdGlvblJ1bGUoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGludGVncmF0aW9uSWQ6IElEISwgbGFzdDogSW50LCBydWxlQm9keTogSnNvbiEsIHJ1bGVJZDogSUQpOiBTdGF0ZW1lbnRFbnRyeUxlbnNDb25uZWN0aW9uXG4gIFwiXCJcIlF1ZXJ5IGZvciBUaW1lIFNlcmllc1wiXCJcIlxuICBzcGVuZEFnZ3JlZ2F0ZVRpbWVTZXJpZXMoYWZ0ZXI6IFN0cmluZywgZmlsdGVyczogU3BlbmRBZ2dyZWdhdGVUaW1lU2VyaWVzRmlsdGVycyEsIGZpcnN0OiBJbnQsIHNvcnRPcmRlcjogU3BlbmRBZ2dyZWdhdGVUaW1lU2VyaWVzU29ydE9yZGVyKTogU3BlbmRBZ2dyZWdhdGVUaW1lU2VyaWVzQ29ubmVjdGlvblxuICBcIlwiXCJJbnRlcm5hbFwiXCJcIlxuICBkZWJ1Z0V4Y2VwdGlvbih0cmlnZ2VyOiBCb29sZWFuKTogQm9vbGVhblxuICBnZXRVc2VyQ2F0ZWdvcnlGb3JJbnRlZ3JhdGlvbk1lcmNoYW50Q2F0ZWdvcnkoaW50ZWdyYXRpb25JZDogSUQsIG1lcmNoYW50Q2F0ZWdvcnlJZDogSUQpOiBVc2VyQ2F0ZWdvcnlcbiAgdXNlcnMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGRlcGFydG1lbnRJZDogSUQsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCwgbG9jYXRpb25JZDogSUQsIG1hbmFnZXJJZDogSUQsIHJvbGU6IFVzZXJSb2xlVHlwZUlucHV0LCBzZWFyY2hUZXh0OiBTdHJpbmcsIHN0YXR1czogU3RyaW5nKTogVXNlckNvbm5lY3Rpb25cbiAgY29sbGVjdGlvbkludGVudGlvbihpZDogSUQhKTogQ29sbGVjdGlvbkludGVudGlvblxuICByZWltYnVyc2VtZW50SXRlbUV2ZW50cyhhZnRlcjogU3RyaW5nLCBmaXJzdDogSW50LCByZWltYnVyc2VtZW50SXRlbUlkOiBJRCEpOiBSZWltYnVyc2VtZW50SXRlbUV2ZW50Q29ubmVjdGlvblxuICBcIlwiXCJGZXRjaCBhbGwgcmVjaXBpZW50IGluZm9ybWF0aW9uIGZvciBhY2NvdW50LlwiXCJcIlxuICBjYXJkUGF5bWVudEZvcndhcmRlclJlY2lwaWVudHM6IFtDYXJkUGF5bWVudEZvcndhcmRlclJlY2lwaWVudF1cbiAgZnJhdWRBbGVydChpZDogSUQhKTogRnJhdWRBbGVydFxuICBcIlwiXCJMb3lhbHR5IHByb2dyYW1zIGZvciBtaWxlcyB0cmFuc2ZlclwiXCJcIlxuICBsb3lhbHR5UHJvZ3JhbXMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IExveWFsdHlQcm9ncmFtQ29ubmVjdGlvblxuICBleHBlbnNlc1NldHRpbmdzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBFeHBlbnNlc1NldHRpbmdDb25uZWN0aW9uXG4gIFwiXCJcIkFsbCBjcmVkaXQgbWFya2V0aW5nIG9mZmVycyBmb3IgYSB1c2VycyBhY2NvdW50XCJcIlwiXG4gIGNyZWRpdE1hcmtldGluZ09mZmVycyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogQ3JlZGl0TWFya2V0aW5nT2ZmZXJDb25uZWN0aW9uXG4gIHNwZW5kQWdncmVnYXRlcyhhZnRlcjogU3RyaW5nLCBmaWx0ZXJzOiBTcGVuZEFnZ3JlZ2F0ZUZpbHRlcnMhLCBmaXJzdDogSW50LCBncm91cEtleXM6IFtTcGVuZEFnZ3JlZ2F0ZUdyb3VwS2V5IV0sIHNvcnRLZXk6IFNwZW5kQWdncmVnYXRlU29ydEtleSwgc29ydE9yZGVyOiBTcGVuZEFnZ3JlZ2F0ZVNvcnRPcmRlcik6IFNwZW5kQWdncmVnYXRlQ29ubmVjdGlvblxuICBcIlwiXCJSZXR1cm4gZGV2cG9ydGFsIHJlbGF0ZWQgaW5mb3JtYXRpb25cIlwiXCJcbiAgZGV2QWNjZXNzQWdyZWVtZW50U3RhdHVzOiBEZXZBY2Nlc3NBZ3JlZW1lbnRcbiAgYXZhaWxhYmxlUHJvZHVjdE9mZmVyczogW1Byb2R1Y3RPZmZlciFdIVxuICBcIlwiXCJHaXZlbiBhbiBGU1AsIGxpc3RzIGFsbCBjbGllbnQgYWNjb3VudHMgY29ubmVjdGVkIHRvIGl0XCJcIlwiXG4gIGdldENsaWVudEFjY3RzRm9yRnNwKGFjY291bnRJZDogU3RyaW5nISk6IFtGc3BDbGllbnRBY2NvdW50XVxuICBwYXltZW50QXBwcm92YWwoYXBwcm92YWxUb2tlbjogU3RyaW5nISk6IFBheW1lbnRBcHByb3ZhbFJlc3BvbnNlXG4gIFwiXCJcIlJldHVybiBhIGxpc3Qgb2YgT0F1dGggc2NvcGVzIHRoZSBjdXN0b21lciBjYW4gcmVxdWVzdFwiXCJcIlxuICBzY29wZXM6IFtTY29wZVdyYXBwZXJdXG4gIFwiXCJcIlJld2luZCBjYW1wYWlnbiB2aWRlby4gQ3VzdG9tZXIgbm90IGVsaWdpYmxlIGlmIG51bGxcIlwiXCJcbiAgbWFya2V0aW5nUmV3aW5kVmlkZW8oeWVhcjogTWFya2V0aW5nUmV3aW5kWWVhciEpOiBNYXJrZXRpbmdSZXdpbmRWaWRlb1xuICBcIlwiXCJSZXR1cm4gYSBsaXN0IG9mIHRva2VucyBmb3IgdGhlIGN1cnJlbnQgdXNlcidzIGFjY291bnRcIlwiXCJcbiAgZGV2ZWxvcGVyQXBpVG9rZW5zOiBbRGV2ZWxvcGVyQXBpVG9rZW5dXG4gIFwiXCJcIkdpdmVuIGEgY2xpZW50IGFjY291bnQsIGxpc3QgYWxsIEZTUHMgY29ubmVjdGVkIHRvIGl0XCJcIlwiXG4gIGdldEZzcHNGb3JDbGllbnRBY2N0KGFjY291bnRJZDogU3RyaW5nISk6IFtTdHJpbmddXG4gIHNlYXJjaEluZHVzdHJpZXMoYWZ0ZXI6IFN0cmluZywgZmlyc3Q6IEludCwga2V5d29yZHM6IFN0cmluZyEpOiBJbmR1c3RyeVNlYXJjaFJlc3VsdEVudHJ5Q29ubmVjdGlvblxuICBcIlwiXCJHZXRzIGEgdGltZWxpbmUgd2l0aCB0aGUgZXN0aW1hdGVkIHRyYW5zYWN0aW9uIHRpbWUgZm9yIGEgcGF5bWVudCByYWlsXCJcIlwiXG4gIGNhc2hUcmFuc2FjdGlvblRpbWVsaW5lRXN0aW1hdGVzKG9yaWdpbjogQ2FzaFRyYW5zYWN0aW9uT3JpZ2luISwgcGF5bWVudE1ldGhvZDogQ2FzaFRyYW5zYWN0aW9uUGF5bWVudE1ldGhvZCEsIHNjaGVkdWxlZFNlbmRBdDogVGltZSk6IFBheW1lbnRSYWlsVGltZWxpbmVcbiAgcmVpbWJ1cnNlbWVudEl0ZW1zKFxuICAgIGFmdGVyOiBTdHJpbmdcbiAgICBcIlwiXCJPcHRpb25hbCBmaWVsZCB0byBxdWVyeSByZWltYnVyc2VtZW50X2l0ZW1zIGJ5IGV4cGVuc2VfaWRzXCJcIlwiXG4gICAgZXhwZW5zZUlkczogW0lEIV1cbiAgICBmaXJzdDogSW50XG4gICAgcmVpbWJ1cnNlbWVudEl0ZW1JZHM6IFtJRCFdXG4gICAgXCJcIlwiT3B0aW9uYWwgZmllbGQgdG8gY2hhbmdlIHNjb3BlIGZyb20gdXNlciB0byBhY2NvdW50XCJcIlwiXG4gICAgc2NvcGVUb0FjY291bnQ6IEJvb2xlYW4gPSBmYWxzZVxuICAgIHN0YXRlczogW1JlaW1idXJzZW1lbnRJdGVtU3RhdGUhXVxuICApOiBSZWltYnVyc2VtZW50SXRlbUNvbm5lY3Rpb25cbiAgY29ubmVjdEhhc0VuY291bnRlcmVkRmFpbHVyZSh2ZW5kb3I6IEZpbmFuY2lhbHNWZW5kb3IhKTogQm9vbGVhbiFcbiAgYXBwcm92YWxzU2V0dGluZzogQXBwcm92YWxzU2V0dGluZ1xuICBcIlwiXCJHZXQgc3RhdHVzIGFuZCByZXN1bHQgb2YgYW4gZXhwb3J0IGF0dGVtcHRcIlwiXCJcbiAgZ2V0RXhwb3J0QXR0ZW1wdFN0YXRlKGlucHV0OiBHZXRFeHBvcnRBdHRlbXB0U3RhdGVJbnB1dCEpOiBHZXRFeHBvcnRBdHRlbXB0U3RhdGVQYXlsb2FkXG4gIHJlZmVycmFsUmVjb3JkczogW1JlZmVycmFsUmVjb3JkXVxuICBhcHByb3ZhbHNQb2xpY2llcyhwcm9kdWN0VHlwZXM6IFtQcm9kdWN0VHlwZV0pOiBbQXBwcm92YWxzUG9saWN5XVxuICBcIlwiXCJJbnRlcm5hbCBxdWVyeSBzdXBwb3J0aW5nIGZlZGVyYXRpb24uIERvIG5vdCB1c2UgaW4gY2xpZW50IGNhbGxzLlwiXCJcIlxuICBkZXBhcnRtZW50RW50aXR5KGlkOiBJRCk6IERlcGFydG1lbnQhXG4gIFwiXCJcIkdpdmVuIGFuIEZTUCwgbGlzdHMgYWxsIG9mIGl0cyBleHRlcm5hbCBib29ra2VlcGVyc1wiXCJcIlxuICBnZXRCb29ra2VlcGVyc0ZvckZzcChhY2NvdW50SWQ6IFN0cmluZyEpOiBbU3RyaW5nXVxuICBmaW5hbmNpYWxTdGF0ZW1lbnRSZXF1ZXN0ZWRBY2NvdW50cyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogRmluYW5jaWFsU3RhdGVtZW50UmVxdWVzdGVkQWNjb3VudENvbm5lY3Rpb25cbiAgaW50ZWdyYXRpb25FbnRpdGllcyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZW50aXR5VHlwZTogU3RyaW5nLCBmaWVsZElkOiBTdHJpbmcsIGZpbHRlckRlbGV0ZWQ6IEJvb2xlYW4sIGZpcnN0OiBJbnQsIGxhc3Q6IEludCwgcXVlcnk6IFN0cmluZyk6IEV4dGVybmFsSW50ZWdyYXRpb25FbnRpdHlDb25uZWN0aW9uXG4gIGFjY291bnRDb25uZWN0ZWRBcGlDbGllbnRzOiBbQXBpQ2xpZW50XVxuICByZWZlcnJhbHMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IFJlZmVycmFsQ29ubmVjdGlvblxuICBhcHByb3ZhbHNSZXF1ZXN0cyhhZnRlcjogU3RyaW5nLCBhc3NpZ25lZUN1c3RvbWVyVXNlcklkOiBJRCwgYmVmb3JlOiBTdHJpbmcsIGN1c3RvbWVyVXNlcklkOiBJRCwgZXhjbHVkZUFzc2lnbmVlQ3VzdG9tZXJVc2VySWQ6IElELCBmaXJzdDogSW50LCBmcm9tRGF0ZTogVGltZSwgaW5jbHVkZURpcmVjdFJlcG9ydHM6IEluY2x1ZGVEaXJlY3RSZXBvcnRzT3B0aW9uLCBsYXN0OiBJbnQsIHNlYXJjaFF1ZXJ5OiBTdHJpbmcsIHN0YXR1czogQXBwcm92YWxzUmVxdWVzdFN0YXR1cywgc3RhdHVzZXM6IFtBcHByb3ZhbHNSZXF1ZXN0U3RhdHVzXSwgdG9EYXRlOiBUaW1lLCB0eXBlOiBBcHByb3ZhbHNSZXF1ZXN0VHlwZSwgdHlwZXM6IFtBcHByb3ZhbHNSZXF1ZXN0VHlwZV0pOiBBcHByb3ZhbHNSZXF1ZXN0Q29ubmVjdGlvblxuICBpc0ludGVncmF0aW9uUmVhZHlUb1N5bmMoZW5kRGF0ZTogVGltZSwgaWQ6IElEISwgaXNQcmltaXRpdmU6IEJvb2xlYW4sIHN0YXJ0RGF0ZTogVGltZSwgc3RhdGVtZW50RW50cnlUeXBlczogW1N0cmluZ10pOiBTeW5jUmVhZHlTdGF0dXNcbiAgZmluYW5jaWFsQWNjb3VudHNXaXRoRnVuZGluZyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogRmluYW5jaWFsQWNjb3VudENvbm5lY3Rpb25cbiAgc3RhdGVtZW50RW50cmllcyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50LCBvbmx5VW5leHBvcnRlZDogQm9vbGVhbik6IFN0YXRlbWVudEVudHJ5Q29ubmVjdGlvblxuICBkZXBhcnRtZW50cyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogRGVwYXJ0bWVudENvbm5lY3Rpb25cbiAgXCJcIlwiR2V0IGEgbGluayB0b2tlbiBmcm9tIEhSSVMgYWdncmVnYXRvciB2ZW5kb3IgYW5kIHJldHVybiBiYWNrIHRvIHRoZSBjbGllbnRcIlwiXCJcbiAgZ2V0TGlua1Rva2VuKFxuICAgIFwiXCJcIlRoZSB2ZW5kb3Igd2UgYXJlIHJldHJpZXZpbmcgdGhlIGxpbmsgdG9rZW4gZnJvbVwiXCJcIlxuICAgIGhyaXNBZ2dyZWdhdG9yVmVuZG9yOiBIcmlzQWdncmVnYXRvclZlbmRvciFcbiAgKTogSHJpc0xpbmtUb2tlblxuICBcIlwiXCJGaW5kIHRoZSBGZWQgQUNIIFBhcnRpY2lwYW50IFwiXCJcIlxuICBmZWRhY2hQYXJ0aWNpcGFudChyb3V0aW5nTnVtYmVyOiBTdHJpbmchKTogRmVkYWNoUGFydGljaXBhbnRcbiAgdW5leHBvcnRlZFN0YXRlbWVudEVudHJpZXMoYWN0aXZlRmFjZXRUeXBlOiBJbnRlZ3JhdGlvblJ1bGVzRmlsdGVyRmFjZXRUeXBlLCBhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZW5kRGF0ZTogVGltZSwgZmlyc3Q6IEludCwgaW50ZWdyYXRpb25JZDogSUQsIGxhc3Q6IEludCwgcnVsZUlkczogW0lEXSwgc3RhcnREYXRlOiBUaW1lLCBzdGF0ZW1lbnRFbnRyeVR5cGVzOiBbU3RyaW5nXSk6IFN0YXRlbWVudEVudHJ5Q29ubmVjdGlvblxuICBwb2ludHNCYWxhbmNlQXNDYXNoUmVkZW1wdGlvbkFtb3VudDogSW50XG4gIGNvbGxlY3Rpb25BdHRlbXB0KGlkOiBJRCEpOiBDb2xsZWN0aW9uQXR0ZW1wdFxuICBub2RlKFxuICAgIFwiXCJcIlRoZSBpZCBvZiBhbiBvYmplY3QuXCJcIlwiXG4gICAgaWQ6IElEIVxuICApOiBOb2RlXG4gIFwiXCJcIlRoZXNlIGFyZSBpbnN0aXR1dGlvbnMgZm9yIHdoaWNoIHdlIHNob3VsZCBmYWxsYmFjayB0byB1c2luZyBGaW5pY2l0eVwiXCJcIlxuICBmaW5pY2l0eUVuYWJsZWRJbnN0aXR1dGlvbnM6IFtGaW5hbmNpYWxJbnN0aXR1dGlvbiFdIVxuICBcIlwiXCJNaWxlcyB0cmFuc2ZlcnNcIlwiXCJcbiAgbWlsZXNUcmFuc2ZlcnMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IE1pbGVzVHJhbnNmZXJDb25uZWN0aW9uXG4gIFwiXCJcIkFsbG93cyBmb3IgdGhlIHRyYWNraW5nIG9mIHNlc3Npb25zIGR1cmluZyBzb2Z0IHNpZ251cFwiXCJcIlxuICBhbm9ueW1vdXNTZXNzaW9uOiBBcHBsaWNhdGlvblNlc3Npb25cbiAgaW52b2ljaW5nQWNjb3VudDogSW52b2ljaW5nQWNjb3VudFxuICBpbnRlZ3JhdGlvblJ1bGUoaWQ6IElEISk6IEludGVncmF0aW9uUnVsZVxuICBcIlwiXCJMaXN0IGFsbCByZWdpc3RlcmVkIEZTUCBhY2NvdW50c1wiXCJcIlxuICBmc3BBY2NvdW50czogW0ZzcEFjY291bnRdXG4gIHN1Z2dlc3Qoc2NvcGVUb1VzZXI6IEJvb2xlYW4sIHRleHQ6IFN0cmluZyEpOiBbU3VnZ2VzdGlvbl1cbiAgY3VzdG9tZXJBdHRyaWJ1dGVzOiBDdXN0b21lckF0dHJpYnV0ZXNcbiAgXCJcIlwiR2V0IHBvaW50IGhpc3RvcnkgZW50cmllcyB0byBkaXNwbGF5IHRvIHVzZXIuXCJcIlwiXG4gIHJld2FyZHNQb2ludEhpc3RvcnlFbnRyaWVzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBkZXNjcmlwdGlvblR5cGVzOiBbUmV3YXJkc1BvaW50c0hpc3RvcnlFbnRyeURlc2NyaXB0aW9uVHlwZV0sIGVuZEF0OiBUaW1lLCBmaXJzdDogSW50LCBsYXN0OiBJbnQsIG9yZGVyRmllbGQ6IFJld2FyZHNIaXN0b3J5RW50cnlPcmRlckZpZWxkLCBvcmRlclR5cGU6IFJld2FyZHNIaXN0b3J5RW50cnlPcmRlclR5cGUsIHN0YXJ0QXQ6IFRpbWUsIHR5cGU6IFJld2FyZHNQb2ludHNIaXN0b3J5RW50cnlUeXBlKTogUmV3YXJkc1BvaW50c0hpc3RvcnlFbnRyeUNvbm5lY3Rpb25cbiAgbWFya2V0b0xlYWRGb3JtKG1hcmtldG9Gb3JtSWQ6IFNhZmVTdHJpbmchKTogTWFya2V0b0xlYWRGb3JtXG4gIFwiXCJcIlJld2FyZHMgYm9udXNlc1wiXCJcIlxuICByZXdhcmRzQm9udXNlcyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogUmV3YXJkc0JvbnVzQ29ubmVjdGlvblxuICBzZWFyY2goYWdncmVnYXRlczogSnNvbiwgY3Vyc29yOiBTdHJpbmcsIGZpbHRlcnM6IEpzb24hLCBvcmRlckJ5OiBbT3JkZXJCeUlucHV0XSwgcGFnZVNpemU6IEludCwgc2NvcGVUb1VzZXI6IEJvb2xlYW4sIHR5cGU6IFN0cmluZyEpOiBTZWFyY2hSZXN1bHRcbiAgaW50ZWdyYXRpb24oaWQ6IElEISk6IEludGVncmF0aW9uXG4gIGludGVybmF0aW9uYWxXaXJlQ29uZmlnOiBJbnRlcm5hdGlvbmFsV2lyZUNvbmZpZ1xuICBcIlwiXCJJbnRlcm5hbCBxdWVyeSBzdXBwb3J0aW5nIGZlZGVyYXRpb24uIERvIG5vdCB1c2UgaW4gY2xpZW50IGNhbGxzLlwiXCJcIlxuICBsb2NhdGlvbkVudGl0eShpZDogSUQpOiBMb2NhdGlvbiFcbiAgXCJcIlwiTGlzdCBvZiB0aGUgY3VzdG9tZXIncyB0b3AgY2F0ZWdvcmllcy5cIlwiXCJcbiAgcmV3YXJkc0N1cnJlbnRUb3BDYXRlZ29yaWVzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBSZXdhcmRzVG9wQ2F0ZWdvcnlDb25uZWN0aW9uXG4gIGFjY291bnRDb25uZWN0ZWRBcGlDbGllbnQ6IEFwaUNsaWVudFxuICB2YWxpZGF0ZUFjdGl2YXRpb24odG9rZW46IFN0cmluZyEpOiBWYWxpZGF0ZUFjdGl2YXRpb25cbiAgcnVsZXMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IFJ1bGVDb25uZWN0aW9uXG4gIFwiXCJcIlJld2FyZCBvZmZlcmVkIHRvIHJlZmVycmVkIHVzZXIgZm9yIG5ldyByZWZlcnJhbHMgYnkgbG9nZ2VkLWluIHJlZmVycmVyLlwiXCJcIlxuICBjdXJyZW50UmVmZXJyZWRSZXdhcmQ6IFJlZmVycmFsUmV3YXJkXG4gIGJhbmtBZ2dyZWdhdG9yRGVjaXNpb246IEJhbmtBZ2dyZWdhdG9yRGVjaXNpb25cbiAgXCJcIlwiVVcgRW5naW5lIHBhcmFtZXRlcnMgZm9yIHRoaXMgYWNjb3VudFwiXCJcIlxuICBjdXJyZW50VW5kZXJ3cml0aW5nUGFyYW1ldGVyczogVW5kZXJ3cml0aW5nUGFyYW1ldGVycyFcbiAgdW5leHBvcnRlZFN0YXRlbWVudEVudHJ5RmlsdGVyRmFjZXRzKGVuZERhdGU6IFRpbWUsIGludGVncmF0aW9uSWQ6IElELCBzdGFydERhdGU6IFRpbWUpOiBbSW50ZWdyYXRpb25SdWxlc0ZpbHRlckZhY2V0XVxuICBhbm9tYWx5TXV0aW5nUG9saWNpZXMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IENhcmRUcmFuc2FjdGlvbkluc2lnaHRNdXRpbmdQb2xpY3lDb25uZWN0aW9uXG4gIFwiXCJcIlJldHVybnMgdHJ1ZSBpZiB0aGUgdXNlciBpcyBhbiBleHRlcm5hbCBib29ra2VlcGVyIG9mIHRoZSBGU1AsIGZhbHNlIG90aGVyd2lzZVwiXCJcIlxuICBpc0V4dGVybmFsQm9va2tlZXBlcih1c2VySWQ6IFN0cmluZyEpOiBCb29sZWFuXG4gIGluc2lnaHRzOiBJbnNpZ2h0cyFcbiAgcmV3YXJkc01hcmtldHBsYWNlVXBzZWxsOiBSZXdhcmRzTWFya2V0cGxhY2VVcHNlbGxcbiAgZmluYW5jaWFsSW5zdGl0dXRpb25zKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQsIHN0YXR1czogRmluYW5jaWFsSW5zdGl0dXRpb25TdGF0dXMpOiBGaW5hbmNpYWxJbnN0aXR1dGlvbkNvbm5lY3Rpb25cbiAgXCJcIlwiVGhlIGRvY3VtZW50cyBmb3IgZmluYW5jaWFscyBkYXRhIChtYWlubHkgdXNlZCBmb3IgYmFuayBzdGF0ZW1lbnQgY29sbGVjdGlvbilcIlwiXCJcbiAgZmluYW5jaWFsQmFua1N0YXRlbWVudHMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IEZpbmFuY2lhbEJhbmtTdGF0ZW1lbnREb2N1bWVudENvbm5lY3Rpb25cbiAgYWNjb3VudENsb3N1cmVTdGF0dXM6IENsb3N1cmVTdGF0dXNcbiAgXCJcIlwiUXVlcnkgdG8gdmFsaWRhdGUgY29udGFjdCBpbnB1dHNcIlwiXCJcbiAgdmFsaWRhdGVkVmVuZG9yQ29udGFjdElucHV0cyhcbiAgICBhZnRlcjogU3RyaW5nXG4gICAgYmVmb3JlOiBTdHJpbmdcbiAgICBmaXJzdDogSW50XG4gICAgbGFzdDogSW50XG4gICAgXCJcIlwiQ29udGFjdCBpbnB1dHMgdG8gYmUgdmFsaWRhdGVkXCJcIlwiXG4gICAgdmVuZG9yQ29udGFjdElucHV0czogW1ZlbmRvckNvbnRhY3RJbnB1dCFdIVxuICApOiBWYWxpZGF0ZWRWZW5kb3JDb250YWN0SW5wdXRDb25uZWN0aW9uXG4gIFwiXCJcIlRoZSBpbmZvcm1hdGlvbiByZXF1ZXN0cyBmb3IgZmluYW5jaWFscyBkYXRhIChtYWlubHkgdXNlZCBmb3IgYmFuayBzdGF0ZW1lbnQgY29sbGVjdGlvbilcIlwiXCJcbiAgZmluYW5jaWFsU291cmNlcyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogRmluYW5jaWFsU291cmNlQ29ubmVjdGlvblxuICBcIlwiXCJJbnRlcm5hbCBxdWVyeSBzdXBwb3J0aW5nIGZlZGVyYXRpb24uIERvIG5vdCB1c2UgaW4gY2xpZW50IGNhbGxzLlwiXCJcIlxuICByZWltYnVyc2VtZW50SXRlbUVudGl0eShpZDogSUQpOiBSZWltYnVyc2VtZW50SXRlbSFcbiAgdW5leHBvcnRlZFN0YXRlbWVudEVudHJ5Q291bnQoZW5kRGF0ZTogVGltZSwgaW50ZWdyYXRpb25JZDogSUQsIHN0YXJ0RGF0ZTogVGltZSwgc3RhdGVtZW50RW50cnlUeXBlczogW1N0cmluZ10pOiBVbmV4cG9ydGVkU3RhdGVtZW50RW50cnlDb3VudFxuICBcIlwiXCJSZXR1cm5zIHRydWUgaWYgYW4gYWNjb3VudCBpcyBhIGZpbmFuY2lhbCBzZXJ2aWNlIHByb3ZpZGVyIChpLmUuIEZTUCksIGZhbHNlIG90aGVyd2lzZVwiXCJcIlxuICBpc0ZzcChhY2NvdW50SWQ6IFN0cmluZyEpOiBCb29sZWFuXG4gIGF1dGh6UnVsZXM6IFtSb2xlUnVsZV1cbiAgcHJldmlld1RyaWdnZXJDb21wYXJpc29uKHRvQ2FyZEFjY291bnRUeXBlOiBDYXJkQWNjb3VudFR5cGUhKTogW1Jld2FyZHNUcmlnZ2VyQ29tcGFyaXNvbiFdIVxuICBmaW5kQ29udGFjdChpZGVudGlmaWVyOiBGaW5kQ29udGFjdElkZW50aWZpZXJJbnB1dFVuaW9uLCBuYW1lOiBTdHJpbmcpOiBQYXltZW50Q29udGFjdFxuICBcIlwiXCJcbiAgRmV0Y2ggYWxsIGFzc29jaWF0ZWQgcGF5bWVudHMgZm9yIGFjY291bnQuXG4gIFRPRE86IHN1cHBvcnQgcGFnaW5hdGlvbi5cbiAgXCJcIlwiXG4gIGNhcmRQYXltZW50Rm9yd2FyZGVyTGlzdFBheW1lbnRzKHN0YXR1c0ZpbHRlcjogW0NhcmRQYXltZW50Rm9yd2FyZGVyUGF5bWVudFN0YXR1c10pOiBbQ2FyZFBheW1lbnRGb3J3YXJkZXJQYXltZW50T2JqZWN0XVxuICBtZXJjaGFudENhdGVnb3JpZXMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IE1lcmNoYW50Q2F0ZWdvcnlDb25uZWN0aW9uXG4gIFwiXCJcIlJld2FyZCBvZmZlcmVkIHRvIHJlZmVycmVyIGZvciBuZXcgcmVmZXJyYWxzIGJ5IGxvZ2dlZC1pbiByZWZlcnJlci5cIlwiXCJcbiAgY3VycmVudFJlZmVycmVyUmV3YXJkOiBSZWZlcnJhbFJld2FyZFxuICBsb2NhdGlvbihpZDogSUQhKTogTG9jYXRpb25cbiAgY3JlZGVudGlhbChpZDogSUQhKTogQ3JlZGVudGlhbFxuICBjYXJkcyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgY3VzdG9tZXJVc2VySWQ6IFtJRCFdLCBkZXBhcnRtZW50SWRzOiBbU3RyaW5nIV0sIGZpcnN0OiBJbnQsIGhhc0FjdGl2ZUxpbWl0SW5jcmVhc2U6IEJvb2xlYW4sIGluc3RydW1lbnRUeXBlOiBJbnN0cnVtZW50VHlwZSwgaXNQcmVhcHByb3ZlZDogQm9vbGVhbiwgbGFzdDogSW50LCBzZWFyY2hRdWVyeTogU3RyaW5nLCBzb3J0Qnk6IENhcmRTb3J0Q29sdW1uLCBzdGF0dXM6IFtTdHJpbmchXSwgc3RhdHVzVmlld3M6IFtTdGF0dXNWaWV3IV0pOiBDYXJkQ29ubmVjdGlvblxuICByZWZlcnJhbHNTdW1tYXJ5KGlzQWRtaW46IEJvb2xlYW4sIGlzRXhwZXJpbWVudGFsOiBCb29sZWFuKTogUmVmZXJyYWxzU3VtbWFyeVxuICBleHBlbnNlc0l0ZW1zKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBleHRlcm5hbEVudHJ5SWQ6IFtJRF0sIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IEV4cGVuc2VzSXRlbUNvbm5lY3Rpb25cbiAgY291bnRyaWVzKGZpbHRlcnM6IENvdW50cmllc0xpc3RGaWx0ZXJzKTogW0NvdW50cnkhXSFcbiAgdXNlcihpZDogSUQpOiBVc2VyXG4gIFwiXCJcIktleSBmYWN0b3JzIHRoYXQgaW1wYWN0IHRoZSBjcmVkaXQgbGltaXQgb24gYW4gYWNjb3VudFwiXCJcIlxuICBrZXlDcmVkaXRMaW1pdEZhY3RvcnM6IFtVbmRlcndyaXRpbmdMaW1pdEZhY3RvciFdIVxuICByZWNlaXZhYmxlc09mZmVyc0FjY291bnQ6IFJlY2VpdmFibGVzT2ZmZXJzQWNjb3VudFxuICBcIlwiXCJRdWVyeSBmb3IgcGVyaW9kaWMgcmV2aWV3IGJ5IGN1c3RvbWVyIGFjY291bnQgSURcIlwiXCJcbiAgcGVyaW9kaWNSZXZpZXc6IFBlcmlvZGljUmV2aWV3XG4gIFwiXCJcIkdldCBzaW5nbGUgSFJJUyBjb25uZWN0aW9uIGJhc2VkIG9uIGlkXCJcIlwiXG4gIGhyaXNDb25uZWN0aW9uKGlkOiBJRCEpOiBIcmlzQ29ubmVjdGlvblxuICByZXdhcmRzUmVkZW1wdGlvblByb2dyYW1zKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBSZXdhcmRzUmVkZW1wdGlvblByb2dyYW1Db25uZWN0aW9uXG4gIHVzZXJDYXRlZ29yeShpZDogSUQhKTogVXNlckNhdGVnb3J5XG4gIFwiXCJcIkludGVybmFsIHF1ZXJ5IHN1cHBvcnRpbmcgZmVkZXJhdGlvbi4gRG8gbm90IHVzZSBpbiBjbGllbnQgY2FsbHMuXCJcIlwiXG4gIGFjY291bnRFbnRpdHkoaWQ6IElEKTogQWNjb3VudCFcbiAgb25ib2FyZGluZ0FwcGxpY2F0aW9ucyhhZnRlcjogU3RyaW5nLCBhcHBsaWNhbnRDdXN0b21lclVzZXJJZDogSUQsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQsIHR5cGU6IE9uYm9hcmRpbmdCbHVlcHJpbnRUeXBlKTogT25ib2FyZGluZ0FwcGxpY2F0aW9uQ29ubmVjdGlvblxuICBcIlwiXCJJbnRlcm5hbCBxdWVyeSBzdXBwb3J0aW5nIGZlZGVyYXRpb24uIERvIG5vdCB1c2UgaW4gY2xpZW50IGNhbGxzLlwiXCJcIlxuICB1c2VyRW50aXR5KGlkOiBJRCk6IFVzZXIhXG4gIGJpbGxzKFxuICAgIGFmdGVyOiBTdHJpbmdcbiAgICBiZWZvcmU6IFN0cmluZ1xuICAgIGR1ZUF0OiBUaW1lXG4gICAgZW5kVGltZTogVGltZVxuICAgIGZpcnN0OiBJbnRcbiAgICBcIlwiXCJJZiBwcm92aWRlZCwgb25seSBiaWxscyB3aXRoIHRoZXNlIGludm9pY2UgcHJvY2Vzc2luZyBzdGF0dXNlcyB3aWxsIGJlIHJldHVybmVkLlwiXCJcIlxuICAgIGludm9pY2VQcm9jZXNzaW5nU3RhdHVzZXM6IFtCaWxsSW52b2ljZVByb2Nlc3NpbmdTdGF0dXNdXG4gICAgaXNEdWVTb29uOiBCb29sZWFuXG4gICAgaXNSZWN1cnJpbmc6IEJvb2xlYW5cbiAgICBsYXN0OiBJbnRcbiAgICBzZWFyY2hRdWVyeTogU3RyaW5nXG4gICAgc29ydEtleTogQmlsbFNvcnRLZXlcbiAgICBzb3J0T3JkZXI6IEJpbGxTb3J0T3JkZXJcbiAgICBzdGFydFRpbWU6IFRpbWVcbiAgICBcIlwiXCJJZiBwcm92aWRlZCwgb25seSBiaWxscyB3aXRoIHRoZXNlIGJpbGwgc3RhdHVzZXMgd2lsbCBiZSByZXR1cm5lZC5cIlwiXCJcbiAgICBzdGF0dXNlczogW0JpbGxTdGF0dXNdXG4gICk6IEJpbGxDb25uZWN0aW9uXG4gIHByZW1pdW1TZXR0aW5nOiBQcmVtaXVtU2V0dGluZ1xuICB0cmFuc2FjdGVkTWVyY2hhbnRzKGxpbWl0OiBJbnQsIHF1ZXJ5OiBTdHJpbmcpOiBbTWVyY2hhbnRdXG4gIGxvY2F0aW9ucyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogTG9jYXRpb25Db25uZWN0aW9uXG4gIFwiXCJcIlF1ZXJ5IGZvciBhIGRvY3VtZW50T2NyIGVudGl0eSBieSBJRFwiXCJcIlxuICBkb2N1bWVudE9jcihcbiAgICBcIlwiXCJUaGUgSUQgb2YgdGhlIGRvY3VtZW50IE9DUiBlbnRpdHlcIlwiXCJcbiAgICBpZDogSUQhXG4gICk6IERvY3VtZW50T2NyXG4gIGN1cnJlbnRDYXJkU3RhdGVtZW50UGVyaW9kOiBDYXJkU3RhdGVtZW50UGVyaW9kXG4gIGNhc2hUcmFuc2FjdGlvbihpZDogSUQhKTogQ2FzaFRyYW5zYWN0aW9uXG4gIGdldFJmaShpbnB1dDogR2V0UmZpSW5wdXQhKTogUmZpXG4gIGludGVybmF0aW9uYWxCYW5rSW5mb3JtYXRpb24oaWJhbjogU3RyaW5nLCBzd2lmdENvZGU6IFN0cmluZyk6IEludGVybmF0aW9uYWxCYW5rSW5mb3JtYXRpb25cbiAgYXNzZXQoaWQ6IElEKTogQXNzZXRcbiAgXCJcIlwiSW50ZXJuYWwgcXVlcnkgc3VwcG9ydGluZyBmZWRlcmF0aW9uLiBEbyBub3QgdXNlIGluIGNsaWVudCBjYWxscy5cIlwiXCJcbiAgbWVyY2hhbnRDYXRlZ29yeUVudGl0eShpZDogSUQpOiBNZXJjaGFudENhdGVnb3J5IVxuICBcIlwiXCJXaGV0aGVyIHRoZSB1c2VyIHNob3VsZCBiZSBpbiB0aGUgcHJvZHVjdCBvbmJvYXJkaW5nIGZsb3dcIlwiXCJcbiAgbXVzdFNlZVByb2R1Y3RPbmJvYXJkaW5nOiBCb29sZWFuIVxuICBcIlwiXCJTZXNzaW9uIG9iamVjdFwiXCJcIlxuICBhcHBsaWNhdGlvblNlc3Npb246IEFwcGxpY2F0aW9uU2Vzc2lvblxuICBjb2xsZWN0aW9uQXR0ZW1wdHMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCk6IENvbGxlY3Rpb25BdHRlbXB0Q29ubmVjdGlvblxuICBhcHByb3ZhbHNVbnNhZmVGbGFnKGZsYWdOYW1lOiBTdHJpbmchLCBrZXlUeXBlOiBBcHByb3ZhbHNVbnNhZmVGbGFnS2V5VHlwZSEpOiBBcHByb3ZhbHNVbnNhZmVGbGFnXG4gIGNvbnRhY3QoaWQ6IElEISk6IFBheW1lbnRDb250YWN0XG4gIFwiXCJcIkludGVybmFsIHF1ZXJ5IHN1cHBvcnRpbmcgZmVkZXJhdGlvbi4gRG8gbm90IHVzZSBpbiBjbGllbnQgY2FsbHMuXCJcIlwiXG4gIGV4cGVuc2VFbnRpdHlFeHRlbnNpb24oaWQ6IElEISk6IEV4cGVuc2UhXG4gIHN0YXRlbWVudEVudHJ5KGlkOiBJRCEpOiBTdGF0ZW1lbnRFbnRyeVxuICBcIlwiXCJDdXN0b21lciBhY2NvdW50J3MgY3VycmVudCBzZXJ2aWNpbmcgcG9saWN5XCJcIlwiXG4gIGN1cnJlbnRTZXJ2aWNpbmdQb2xpY3k6IFNlcnZpY2luZ1BvbGljeVxuICBhY2NvdW50OiBBY2NvdW50XG4gIHJlY2VpdmFibGVzT2ZmZXJzUGF5b3V0KGlkOiBJRCEpOiBSZWNlaXZhYmxlc09mZmVyc1BheW91dFxuICBcIlwiXCJnZXQgc3BlbmQgYWxlcnRzIGNvbmZpZyBmb3IgdGhlIGN1cnJlbnQgYWNjb3VudFwiXCJcIlxuICBzcGVuZEFsZXJ0c0NvbmZpZ3VyYXRpb25EZXRhaWxzOiBTcGVuZEFsZXJ0c0NvbmZpZ3VyYXRpb25EZXRhaWxzIVxuICBwbGFpZEluc3RpdHV0aW9uRmFsbGJhY2tzOiBbUGxhaWRJbnN0aXR1dGlvbk1hcHBpbmddIVxuICBjYXJkT3ZlcnZpZXdQYWdlOiBDYXJkT3ZlcnZpZXdQYWdlXG4gIG9uYm9hcmRpbmdBcHBsaWNhdGlvbihpZDogSUQhKTogT25ib2FyZGluZ0FwcGxpY2F0aW9uXG4gIFwiXCJcIkdldCBtYXRjaGluZyBydWxlcyBmaWx0ZXIgZmFjZXRzIGZvciB1bmV4cG9ydGVkIGV4cGVuc2VzXCJcIlwiXG4gIHVuZXhwb3J0ZWRFeHBlbnNlRmlsdGVyRmFjZXRzKGVuZERhdGU6IFRpbWUsIGludGVncmF0aW9uSWQ6IElELCBzdGFydERhdGU6IFRpbWUpOiBbTWF0Y2hpbmdSdWxlc0ZpbHRlckZhY2V0XVxuICBcIlwiXCJHZXRzIGEgdGltZWxpbmUgd2l0aCB0aGUgZXN0aW1hdGVkIHRyYW5zYWN0aW9uIHRpbWVcIlwiXCJcbiAgY2FzaFRyYW5zYWN0aW9uVGltZWxpbmVFc3RpbWF0ZShsb2NhdGlvbjogQWNjb3VudExvY2F0aW9uLCBvcmlnaW46IENhc2hUcmFuc2FjdGlvbk9yaWdpbiEsIHBheW1lbnRNZXRob2Q6IENhc2hUcmFuc2FjdGlvblBheW1lbnRNZXRob2QhLCBwYXltZW50UmFpbDogUGF5bWVudFJhaWwhLCBzY2hlZHVsZWRTZW5kQXQ6IFRpbWUpOiBDYXNoVHJhbnNhY3Rpb25UaW1lbGluZVxuICBtZXJjaGFudChpZDogSUQhKTogTWVyY2hhbnRcbiAgZXhwZW5zZXNGbGFncyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50LCBzdGF0dXM6IFN0cmluZyk6IEV4cGVuc2VzRmxhZ0Nvbm5lY3Rpb25cbiAgZmluYW5jaWFsSW5zdGl0dXRpb24oaWQ6IElEISk6IEZpbmFuY2lhbEluc3RpdHV0aW9uXG4gIFwiXCJcIkluc3RpdHV0aW9ucyBlbmFibGVkIGZvciB1c2Ugb24gRmluaWNpdHlcIlwiXCJcbiAgZmluYW5jaWFsU291cmNlKFxuICAgIFwiXCJcIkZpbmFuY2lhbCBzb3VyY2UgYnkgaWRcIlwiXCJcbiAgICBpZDogSUQhXG4gICk6IEZpbmFuY2lhbFNvdXJjZVxuICBmaW5hbmNpYWxJbmZvcm1hdGlvblJlcXVlc3RzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBGaW5hbmNpYWxJbmZvcm1hdGlvblJlcXVlc3RDb25uZWN0aW9uXG4gIFwiXCJcIkxpc3QgYWxsIGNvbm5lY3Rpb25zIGZvciBhIGN1c3RvbWVyIGFjY291bnQgaWQgZ2l2ZW4gc29tZSBmaWx0ZXIgY3JpdGVyaW9uXCJcIlwiXG4gIGhyaXNDb25uZWN0aW9ucyhcbiAgICBcIlwiXCJIUklTIHZlbmRvciBmaWx0ZXJcIlwiXCJcbiAgICBocmlzQWdncmVnYXRvclZlbmRvcjogW0hyaXNBZ2dyZWdhdG9yVmVuZG9yXVxuICAgIFwiXCJcIkhSSVMgc3lzdGVtIGZpbHRlclwiXCJcIlxuICAgIGhyaXNTeXN0ZW06IFtIcmlzU3lzdGVtXVxuICAgIFwiXCJcIlN0YXR1cyBmaWx0ZXJcIlwiXCJcbiAgICBzdGF0dXNlczogW0hyaXNTdGF0dXNdXG4gICk6IFtIcmlzQ29ubmVjdGlvbiFdXG4gIFwiXCJcIkludGVybmFsXCJcIlwiXG4gIGRlYnVnRXhpdCh0cmlnZ2VyOiBCb29sZWFuKTogQm9vbGVhblxuICBpbnZvaWNpbmdJbnZvaWNlKGludm9pY2VJZDogSUQhKTogSW52b2ljaW5nSW52b2ljZVxuICB1bmV4cG9ydGVkRXhwZW5zZUNvdW50KGVuZERhdGU6IFRpbWUsIGludGVncmF0aW9uSWQ6IElELCBzdGFydERhdGU6IFRpbWUpOiBVbmV4cG9ydGVkRXhwZW5zZUNvdW50XG4gIGVhcmx5QWNjZXNzRmVhdHVyZXM6IFtFYXJseUFjY2Vzc0ZlYXR1cmVdIVxuICBmaW5hbmNpYWxTdGF0ZW1lbnRBY2NvdW50cyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogRmluYW5jaWFsU3RhdGVtZW50QWNjb3VudENvbm5lY3Rpb25cbiAgXCJcIlwiSW50ZXJuYWwgcXVlcnkgc3VwcG9ydGluZyBmZWRlcmF0aW9uLiBEbyBub3QgdXNlIGluIGNsaWVudCBjYWxscy5cIlwiXCJcbiAgbWVyY2hhbnRFbnRpdHkoaWQ6IElEKTogTWVyY2hhbnQhXG4gIHN0YWxlRmluYW5jaWFsU291cmNlcyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogRmluYW5jaWFsU291cmNlQ29ubmVjdGlvblxuICB0cmFuc2FjdGlvbnMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGN1c3RvbWVyVXNlcklkOiBJRCwgZmlyc3Q6IEludCwgbGFzdDogSW50LCBzdGF0dXM6IFN0cmluZyk6IFRyYW5zYWN0aW9uQ29ubmVjdGlvblxuICBsaW1pdFByZXZpZXcoY2FyZEFjY291bnRUeXBlOiBDYXJkQWNjb3VudFR5cGUhKTogTGltaXRQcmV2aWV3XG4gIGludGVncmF0aW9uRW50aXR5KGlkOiBJRCEpOiBFeHRlcm5hbEludGVncmF0aW9uRW50aXR5XG4gIGFwcHJvdmFsc1JldmlldyhpZDogSUQhKTogQXBwcm92YWxzUmV2aWV3XG4gIGVycEZlZWRzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBFcnBGZWVkQ29ubmVjdGlvblxuICBpbnRlZ3JhdGlvbnMoYWZ0ZXI6IFN0cmluZywgYmVmb3JlOiBTdHJpbmcsIGZpcnN0OiBJbnQsIGxhc3Q6IEludCwgc3RhdHVzOiBbU3RyaW5nXSk6IEludGVncmF0aW9uQ29ubmVjdGlvblxuICBjb3VudHJ5QWRkcmVzc01ldGFkYXRhKGFscGhhMjogQ291bnRyeUFscGhhMiEpOiBDb3VudHJ5QWRkcmVzc01ldGFkYXRhIVxuICBcIlwiXCJcbiAgR2V0IHRoZSBmdXR1cmUgdHJhbnNhY3Rpb24gdGltZWxpbmVzIGZvciBhIHJlY3VycmluZyBzY2hlZHVsZVxuICB0aGF0IGhhcyBub3QgYmVlbiBjcmVhdGVkIHlldC5cbiAgXCJcIlwiXG4gIGNhc2hSZWN1cnJpbmdTY2hlZHVsZShcbiAgICBwYXltZW50UmFpbDogUGF5bWVudFJhaWwhXG4gICAgcmVjdXJyaW5nU2NoZWR1bGU6IElucHV0Q2FzaFJlY3VycmluZ1NjaGVkdWxlIVxuICAgIFwiXCJcIlxuICAgIFRoZSBkYXRlIG9uIHdoaWNoIHRoZSByZWN1cnJpbmcgc2NoZWR1bGUgd2lsbCBzdGFydFxuICAgIElmIHN0YXJ0c19hdCBpcyBzZXQgdG8gTlVMTCwgd2UgYXNzdW1lIHRoZSBzY2hlZHVsZSB3aWxsIHN0YXJ0IHRvZGF5XG4gICAgXCJcIlwiXG4gICAgc3RhcnRzQXQ6IFRpbWVcbiAgICB0aW1lbGluZUNvdW50OiBJbnRcbiAgKTogQ2FzaFJlY3VycmluZ1NjaGVkdWxlV2l0aFRpbWVsaW5lc1xuICBcIlwiXCJJbnRlcm5hbCBxdWVyeSBzdXBwb3J0aW5nIGZlZGVyYXRpb24uIERvIG5vdCB1c2UgaW4gY2xpZW50IGNhbGxzLlwiXCJcIlxuICBkaXNwdXRlRW50aXR5KGlkOiBJRCk6IERpc3B1dGUhXG4gIGZpbmRDb250YWN0QnlQYXltZW50SW5zdHJ1bWVudEluZm8oYWNoUGF5bWVudEluc3RydW1lbnQ6IEFjaFBheW1lbnRJbnN0cnVtZW50RmluZElucHV0LCBjaGVxdWVQYXltZW50SW5zdHJ1bWVudDogQ2hlcXVlUGF5bWVudEluc3RydW1lbnRGaW5kSW5wdXQsIGRvbWVzdGljV2lyZVBheW1lbnRJbnN0cnVtZW50OiBEb21lc3RpY1dpcmVQYXltZW50SW5zdHJ1bWVudEZpbmRJbnB1dCwgaW50ZXJuYXRpb25hbFdpcmVQYXltZW50SW5zdHJ1bWVudDogSW50ZXJuYXRpb25hbFdpcmVQYXltZW50SW5zdHJ1bWVudEZpbmRJbnB1dCk6IFBheW1lbnRDb250YWN0XG4gIHJlY2VpdmFibGVzT2ZmZXJzQWN0aXZlT2ZmZXJzOiBbUmVjZWl2YWJsZXNPZmZlcnNPZmZlciFdXG4gIG5hdmlnYXRpb246IE5hdmlnYXRpb25cbiAgXCJcIlwiR2V0IHBheW1lbnQgc291cmNlIG1hcHBpbmcgZm9yIHRoZSBhY2NvdW50XCJcIlwiXG4gIHJlaW1idXJzZW1lbnRQYXltZW50U291cmNlOiBSZWltYnVyc2VtZW50UGF5bWVudFNvdXJjZVxuICBhcHByb3ZhbHNSZXZpZXdzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBjdXN0b21lclVzZXJJZDogSUQsIGZpbHRlckJ5QWNjb3VudDogQm9vbGVhbiwgZmlyc3Q6IEludCwgZnJvbURhdGU6IFRpbWUsIGxhc3Q6IEludCwgcmVxdWVzdFR5cGU6IEFwcHJvdmFsc1JlcXVlc3RUeXBlLCBzZWFyY2hRdWVyeTogU3RyaW5nLCBzdGF0dXNlczogW0FwcHJvdmFsc1Jldmlld1N0YXR1cyFdLCB0b0RhdGU6IFRpbWUpOiBBcHByb3ZhbHNSZXZpZXdDb25uZWN0aW9uXG4gIHJlZmVycmFsUmVjb3Jkc1BhZ2luYXRlZChwYWdlU2l6ZTogSW50LCBwYWdlVG9rZW46IFN0cmluZyk6IFJlZmVycmFsUmVjb3Jkc1BhZ2luYXRlZFxuICBmZWR3aXJlUGFydGljaXBhbnQocm91dGluZ051bWJlcjogU3RyaW5nISk6IEZlZHdpcmVQYXJ0aWNpcGFudFxuICBcIlwiXCJcbiAgR2V0IHRoZSBkZWNpc2lvbiBhbmQgdGhlIGRlY2lzaW9uIGRldGFpbHMgb2YgYW4gYXBwcm92YWwgZm9yIGEgZ2l2ZW5cbiAgdHJhbnNhY3Rpb24sIGdpdmVuIGl0cyBpZGVudGlmaWVyIC0gZWl0aGVyIGl0cyBpZCBvZiBhcHByb3ZhbCB0b2tlbi5cbiAgXCJcIlwiXG4gIGNhc2hUcmFuc2FjdGlvbkFwcHJvdmFsKGFwcHJvdmFsVG9rZW46IFN0cmluZyEpOiBDYXNoVHJhbnNhY3Rpb25BcHByb3ZhbFJlc3BvbnNlXG4gIGRlcG9zaXRzVHJhbnNhY3Rpb24oaWQ6IElEISk6IERlcG9zaXRzVHJhbnNhY3Rpb25cbiAgcHJvbW90aW9ucyhjb3VudDogSW50LCB0eXBlOiBQcm9tb3Rpb25zVHlwZSEpOiBbUHJvbW90aW9uc0l0ZW0hXSFcbiAgY2FyZChpZDogSUQhLCBzaG93UGFuOiBCb29sZWFuKTogQ2FyZFxuICBjYXNoVHJhbnNhY3Rpb25EZXBvc2l0c1BheW1lbnQoaWQ6IElEISk6IERlcG9zaXRzUGF5bWVudFxuICByZWNlaXZhYmxlc09mZmVyc09mZmVyc0dyb3VwKGlkOiBJRCEpOiBSZWNlaXZhYmxlc09mZmVyc09mZmVyc0dyb3VwXG4gIFwiXCJcIkdlbmVyYWwgaW5mb3JtYXRpb24gb24gdGhlIGN1c3RvbWVyJ3MgdG9wIGNhdGVnb3J5IGJvbnVzLlwiXCJcIlxuICByZXdhcmRzQ3VycmVudFRvcENhdGVnb3J5Qm9udXNJbmZvOiBSZXdhcmRzVG9wQ2F0ZWdvcnlCb251c0luZm9cbiAgXCJcIlwiRmV0Y2ggc3N1IHByZWZpbGwgZGF0YSBmb3IgcGFydG5lciByZWZlcnJhbHNcIlwiXCJcbiAgc3N1UHJlZmlsbERhdGEocmVmZXJyYWxJZGVudGlmaWVyOiBTdHJpbmchKTogU3N1UHJlZmlsbERhdGFcbiAgY2FyZFN0YXRlbWVudHMoYWZ0ZXI6IFN0cmluZywgZmlyc3Q6IEludCwgZnJvbVBlcmlvZDogVGltZSwgdG9QZXJpb2Q6IFRpbWUpOiBDYXJkU3RhdGVtZW50Q29ubmVjdGlvblxuICBmaW5hbmNpYWxBY2NvdW50cyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZXhjbHVkZUN1c3RvbWVySGlkZGVuOiBCb29sZWFuLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBGaW5hbmNpYWxBY2NvdW50Q29ubmVjdGlvblxuICBnZXRCYW5raW5nSG9saWRheXMoZW5kRGF0ZTogRGF0ZSwgc3RhcnREYXRlOiBEYXRlKTogQmFua2luZ0hvbGlkYXlzXG59XG5cbmlucHV0IFVwZGF0ZURlcGFydG1lbnRJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGVzY3JpcHRpb246IFN0cmluZ1xuICBpZDogSUQhXG4gIG5hbWU6IFN0cmluZyFcbn1cblxuaW5wdXQgUHJvY2Vzc0ludm9pY2VBbmRDcmVhdGVCaWxsSW5wdXQge1xuICBhc3NldElkOiBJRCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB1cGxvYWRTZXNzaW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBCaWxsU3luY0Vycm9yIGltcGxlbWVudHMgTm9kZSB7XG4gIGJpbGw6IEJpbGxcbiAgZXJyb3JNZXNzYWdlOiBTdHJpbmdcbiAgZXJyb3JUeXBlOiBTdHJpbmdcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIGlkZW1wb3RlbmN5S2V5OiBTdHJpbmdcbiAgaW5zZXJ0ZWRBdDogVGltZVxuICBvcGVyYXRpb246IFN0cmluZ1xuICByYXdSZXNwb25zZTogSnNvblxuICByZXF1ZXN0UGF5bG9hZDogSnNvblxuICBzdGF0dXM6IFN5bmNTdGF0dXMhXG4gIHVwZGF0ZWRBdDogVGltZVxufVxuXG50eXBlIFNlYXJjaFJlc3VsdCB7XG4gIGFnZ3JlZ2F0ZXM6IFtBZ2dyZWdhdGlvblJlc3VsdF1cbiAgY3Vyc29yOiBTdHJpbmdcbiAgaGl0czogW1NlYXJjaGFibGVdIVxuICB0b3RhbEhpdHM6IEludCFcbn1cblxuZW51bSBGaW5hbmNpYWxJbnN0aXR1dGlvblN0YXR1cyB7XG4gIERJU0FCTEVEXG4gIEVOQUJMRURcbiAgSU5URVJOQUxcbiAgUEVORElOR1xufVxuXG5pbnB1dCBDcmVhdGVEZXZlbG9wZXJBcGlUb2tlbklucHV0IHtcbiAgYXV0aG9yaXphdGlvbkNvZGU6IFN0cmluZyFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpc0xvY2FsUmVkaXJlY3Q6IEJvb2xlYW5cbiAgbmFtZTogU3RyaW5nIVxufVxuXG5lbnVtIEJpbGxTb3J0S2V5IHtcbiAgQ1JFQVRFRF9BVFxuICBTRU5EX0FUXG4gIFVQREFURURfQVRcbn1cblxudHlwZSBGaW5hbmNpYWxJbnN0aXR1dGlvbkltYWdlVXJscyB7XG4gIGljb246IFN0cmluZ1xuICBsb2dvOiBTdHJpbmdcbn1cblxuZW51bSBGaW5hbmNpYWxJbnN0cnVtZW50Q29kZSB7XG4gIERPUFxuICBVWUlcbiAgVVNEXG4gIFhDRFxuICBTR0RcbiAgRVVSXG4gIE5BU0RBUV9HR1NYWFxuICBCWU5cbiAgUldGXG4gIE5BU0RBUV9HU0JYWFxuICBTVkNcbiAgQUVEXG4gIEdJUFxuICBNRExcbiAgWFhYXG4gIFhQVFxuICBYUERcbiAgUEtSXG4gIFBHS1xuICBOUFJcbiAgSlBZXG4gIE1YVlxuICBJTFNcbiAgWUVSXG4gIFNMTFxuICBUWlNcbiAgTkFTREFRX0RHQ1hYXG4gIE1XS1xuICBUTkRcbiAgSFVGXG4gIEtNRlxuICBFUk5cbiAgQkhEXG4gIEFNRFxuICBQSFBcbiAgTkFTREFRX0RHVlhYXG4gIENIRlxuICBYVFNcbiAgSVFEXG4gIEtaVFxuICBEWkRcbiAgU0JEXG4gIFBZR1xuICBLWURcbiAgVUFIXG4gIENWRVxuICBMU0xcbiAgS1JXXG4gIFVTTlxuICBPTVJcbiAgQ0FEXG4gIE5BRFxuICBCQU1cbiAgWEFHXG4gIFVZVVxuICBLR1NcbiAgQU9BXG4gIEFaTlxuICBHVFFcbiAgTUdBXG4gIERLS1xuICBCT0JcbiAgWEFGXG4gIE1aTlxuICBOQVNEQVFfR0dEWFhcbiAgR0VMXG4gIFRPUFxuICBDSFdcbiAgQ09VXG4gIE5PS1xuICBTUkRcbiAgWFBGXG4gIEJJRlxuICBDUllQVE9fVVNEQ1xuICBHTkZcbiAgSE5MXG4gIFRSWVxuICBTU1BcbiAgQkJEXG4gIFZORFxuICBTRUtcbiAgQVdHXG4gIEtXRFxuICBQQUJcbiAgTVhOXG4gIENVQ1xuICBOWkRcbiAgQ0xGXG4gIFdTVFxuICBYQkJcbiAgVEpTXG4gIENSWVBUT19CVENcbiAgWFVBXG4gIEJXUFxuICBQRU5cbiAgR1lEXG4gIFZFU1xuICBDTllcbiAgU0NSXG4gIENSWVBUT19FVEhcbiAgU0FSXG4gIFZVVlxuICBOQVNEQVFfRFBHWFhcbiAgSVNLXG4gIEJEVFxuICBUV0RcbiAgTkFTREFRX0dHQlhYXG4gIFRIQlxuICBYU1VcbiAgQlpEXG4gIEhLRFxuICBCUkxcbiAgQ0hFXG4gIElOUlxuICBTVE5cbiAgTFJEXG4gIEpPRFxuICBVWVdcbiAgTEJQXG4gIFNPU1xuICBMQUtcbiAgSk1EXG4gIE1WUlxuICBYQVVcbiAgVVpTXG4gIEFGTlxuICBCTkRcbiAgRkpEXG4gIEdCUFxuICBDVVBcbiAgSVJSXG4gIEtQV1xuICBLSFJcbiAgSFRHXG4gIE5BU0RBUV9EQUdYWFxuICBNWVJcbiAgWEJDXG4gIENaS1xuICBNS0RcbiAgQk9WXG4gIENPUFxuICBHTURcbiAgVFREXG4gIFpNV1xuICBMS1JcbiAgQlROXG4gIENERlxuICBYQkRcbiAgVUdYXG4gIE5JT1xuICBRQVJcbiAgTU1LXG4gIEVUQlxuICBNQURcbiAgRktQXG4gIEFSU1xuICBCR05cbiAgQVVEXG4gIE1VUlxuICBYQkFcbiAgQ0xQXG4gIFRNVFxuICBNUlVcbiAgREpGXG4gIEVHUFxuICBMWURcbiAgUExOXG4gIEFOR1xuICBYT0ZcbiAgWERSXG4gIFNaTFxuICBCTURcbiAgR0hTXG4gIFNIUFxuICBTREdcbiAgTU5UXG4gIEJTRFxuICBSU0RcbiAgU1lQXG4gIFJVQlxuICBBTExcbiAgUk9OXG4gIE1PUFxuICBIUktcbiAgWkFSXG4gIE5HTlxuICBaV0xcbiAgSURSXG4gIENSQ1xuICBLRVNcbn1cblxudHlwZSBSZXdhcmRzVHJpZ2dlckNvbXBhcmlzb24ge1xuICBcIlwiXCJBY2NydWFsIHJhdGUgb2YgdGhlIGN1cnJlbnQgdHJpZ2dlclwiXCJcIlxuICBjdXJyZW50QWNjcnVhbFJhdGU6IEZsb2F0IVxuICBcIlwiXCJEZXNjcmlwdGlvbiBvZiB0aGUgY3VycmVudCB0cmlnZ2VyXCJcIlwiXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmchXG4gIFwiXCJcIkFjY3J1YWwgcmF0ZSBvZiB0aGUgZnV0dXJlIHRyaWdnZXJcIlwiXCJcbiAgZnV0dXJlQWNjcnVhbFJhdGU6IEZsb2F0IVxuICBcIlwiXCJOYW1lIG9mIHRoZSBjdXJyZW50IHRyaWdnZXJcIlwiXCJcbiAgbmFtZTogU3RyaW5nIVxufVxuXG5cIlwiXCJBIGN5Y2xlIHJlb2NjdXJyaW5nIGV2ZXJ5IG90aGVyIHdlZWsgb24gYSBwYXJ0aWN1bGFyIGRheSBvZiB0aGUgd2Vlay5cIlwiXCJcbnR5cGUgQml3ZWVrbHlDYXJkU3RhdGVtZW50UG9saWN5Q3ljbGUge1xuICBcIlwiXCJUaGUgZGF5IG9mIHRoZSB3ZWVrLlwiXCJcIlxuICBkYXlPZldlZWs6IEludFxufVxuXG50eXBlIENyZWF0ZU1pbGVzVHJhbnNmZXJQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBtaWxlc1RyYW5zZmVyOiBNaWxlc1RyYW5zZmVyXG59XG5cbmVudW0gRGVwb3NpdHNSZWN1cnJpbmdQYXltZW50Q2FuY2VsbGF0aW9uVHlwZSB7XG4gIFBST0NFU1NJTkdfQU5EX1JFQ1VSUklOR19QQVlNRU5UXG4gIFBST0NFU1NJTkdfUEFZTUVOVFxuICBSRUNVUlJJTkdfUEFZTUVOVFxufVxuXG5pbnB1dCBDYXJkUGF5bWVudEZvcndhcmRlckJlbmVmaWNpYWxPd25lcklucHV0IHtcbiAgZmlyc3ROYW1lOiBTdHJpbmdcbiAgbGFzdE5hbWU6IFN0cmluZ1xufVxuXG51bmlvbiBGcmF1ZEFsZXJ0ID0gQ2FyZFRyYW5zYWN0aW9uRnJhdWRBbGVydFxuXG5pbnB1dCBDb252ZXJ0Q2FyZEFjY291bnRUeXBlSW5wdXQge1xuICBieXBhc3NFbGlnaWJpbGl0eUNoZWNrczogQm9vbGVhblxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlzRmljb1VuZGVyd3JpdGluZzogQm9vbGVhblxuICB0b0NhcmRBY2NvdW50VHlwZTogQ2FyZEFjY291bnRUeXBlIVxuICB1bmRlcndyaXRpbmdMaW1pdDogSW50XG59XG5cbnR5cGUgQXNjZW5kYVRyYW5zZmVyUGF5bG9hZCB7XG4gIGxveWFsdHlQcm9ncmFtSWQ6IFN0cmluZyFcbiAgcmVkZW1wdGlvblJhdGU6IEludCFcbn1cblxudHlwZSBJbnZpdGVVc2VyV2l0aE1vbnRobHlMaW1pdFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHVzZXI6IFVzZXJcbn1cblxuXCJcIlwiYWNjb3VudC1sZXZlbCBzcGVuZCBhbGVydHMgY29uZmlnXCJcIlwiXG5pbnB1dCBTcGVuZEFsZXJ0c0NvbmZpZ3VyYXRpb25EZXRhaWxzSW5wdXQge1xuICBcIlwiXCJhbGwgbXV0aW5nIGNvbmZpZ3VyYXRpb25zIGZvciB0aGlzIGFjY291bnRcIlwiXCJcbiAgYWxlcnRUeXBlTXV0aW5nQ29uZmlndXJhdGlvbnM6IFtBbGVydFR5cGVNdXRpbmdDb25maWd1cmF0aW9uc0lucHV0IV0hXG4gIFwiXCJcImFsZXJ0cyBlbmFibGVkIGZvciB0aGlzIGFjY291bnRcIlwiXCJcbiAgZW5hYmxlZEFsZXJ0VHlwZXM6IFtTcGVuZEFsZXJ0VHlwZSFdIVxuICBcIlwiXCJ1c2VycyBtdXRlZCBmcm9tIGFsbCBhbGVydHNcIlwiXCJcbiAgdW5pdmVyc2FsbHlNdXRlZFVzZXJJZHM6IFtJRCFdIVxufVxuXG50eXBlIENvbXBsZXRlT25ib2FyZGluZ1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHVzZXI6IFVzZXIhXG59XG5cbnR5cGUgQ3JlYXRlRnJhdWREaXNwdXRlUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZnJhdWRBbGVydHM6IFtGcmF1ZEFsZXJ0IV0hXG4gIHRyYW5zYWN0aW9uczogW1RyYW5zYWN0aW9uIV0hXG59XG5cbnR5cGUgUmV3YXJkc1BvaW50c0hpc3RvcnlFbnRyeUNvbm5lY3Rpb24ge1xuICBlZGdlczogW1Jld2FyZHNQb2ludHNIaXN0b3J5RW50cnlFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbmVudW0gRXJwVmVuZG9yVHlwZSB7XG4gIENPTkNVUlxuICBDT05GRVJNQVxuICBJTlZBTElEXG4gIFhFUk9cbn1cblxuXCJcIlwiUXVpY2tib29rcyBEZXNrdG9wIEdMIGFjY291bnQgc2V0dGluZ3NcIlwiXCJcbnR5cGUgUWJkQ2F0ZWdvcmllcyB7XG4gIFwiXCJcIkRlZmF1bHQgYWNjb3VudHMgcGF5YWJsZSBHTCBhY2NvdW50XCJcIlwiXG4gIGFjY291bnRzUGF5YWJsZVVzZXJDYXRlZ29yeTogVXNlckNhdGVnb3J5XG4gIFwiXCJcIkRlZmF1bHQgY29sbGVjdGlvbnMgR0wgYWNjb3VudFwiXCJcIlxuICBjb2xsZWN0aW9uVGFyZ2V0VXNlckNhdGVnb3J5OiBVc2VyQ2F0ZWdvcnlcbiAgXCJcIlwiRGVmYXVsdCByZXdhcmRzIEdMIGFjY291bnRcIlwiXCJcbiAgcmV3YXJkc0luY29tZVVzZXJDYXRlZ29yeTogVXNlckNhdGVnb3J5XG59XG5cbmlucHV0IEZpbmFsaXplQ29ubmVjdENyZWRlbnRpYWxJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaW50ZWdyYXRpb25DcmVkZW50aWFsSWQ6IElEIVxufVxuXG50eXBlIEFwcHJvdmFsc1Jldmlld0Nvbm5lY3Rpb24ge1xuICBlZGdlczogW0FwcHJvdmFsc1Jldmlld0VkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgdG90YWxDb3VudDogSW50IVxufVxuXG5cIlwiXCJUaGUgYXBwcm92YWxzIHJvdXRpbmcgcnVsZSBpbnB1dCBvYmplY3QuIE9ubHkgb25lIG9mIGluZGl2aWR1YWxzLCBtYW5hZ2VyIGFuZCBpbmRpdmlkdWFsc192MiBzaG91bGQgYmUgc3BlY2lmaWVkXCJcIlwiXG5pbnB1dCBBcHByb3ZhbHNSb3V0aW5nUnVsZUlucHV0IHtcbiAgXCJcIlwiVGhlIGluZGl2aWR1YWxzIHJvdXRpbmcgcnVsZSBpbnB1dCBvYmplY3RcIlwiXCJcbiAgaW5kaXZpZHVhbHM6IEFwcHJvdmFsc1JvdXRpbmdSdWxlSW5kaXZpZHVhbHNJbnB1dFxuICBcIlwiXCJUaGUgZHluYW1pYyByb3V0aW5nIHJ1bGUgaW5wdXQgb2JqZWN0IGNhbiBiZSBzcGVjaWZpZWQgYnkgYSBtYW5hZ2VyIHJvbGUgb3IgYSBpbmRpdmlkdWFsIHVzZXJcIlwiXCJcbiAgaW5kaXZpZHVhbHNWMjogQXBwcm92YWxzUm91dGluZ1J1bGVJbmRpdmlkdWFsc1YySW5wdXRcbiAgXCJcIlwiVGhlIG1hbmFnZXIgcm91dGluZyBydWxlXCJcIlwiXG4gIG1hbmFnZXI6IEFwcHJvdmFsc1JvdXRpbmdSdWxlTWFuYWdlcklucHV0XG59XG5cbnVuaW9uIE9yaWdpbk1ldGFkYXRhID0gRW1haWxNZXRhZGF0YVxuXG50eXBlIEZ1bmRpbmdTb3VyY2VFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogRnVuZGluZ1NvdXJjZVxufVxuXG51bmlvbiBVc2VyVHlwZSA9IFVzZXJUeXBlSW5kaXZpZHVhbCB8IFVzZXJUeXBlTWFuYWdlclxuXG5pbnB1dCBSZXNldFVzZXJJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdG9rZW46IFN0cmluZyFcbiAgdXNlcjogUmVzZXRVc2VyVXNlcklucHV0IVxufVxuXG5pbnB1dCBDcmVhdGVQaHlzaWNhbENhcmRWMklucHV0IHtcbiAgYnVkZ2V0SWQ6IElEXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgY3VzdG9tZXJVc2VySWQ6IElEXG4gIGRlZmF1bHRNZW1vOiBTdHJpbmdcbiAgZGlzcGxheU5hbWU6IFN0cmluZ1xuICBob2xkZXJOYW1lOiBTdHJpbmdcbiAgc2hpcHBpbmdBZGRyZXNzOiBTaGlwcGluZ0FkZHJlc3NJbnB1dCFcbn1cblxuZW51bSBDYXNoVHJhbnNhY3Rpb25QYXltZW50TWV0aG9kIHtcbiAgQ1JFRElUXG4gIERFQklUXG4gIElOVkFMSURcbn1cblxudHlwZSBPbmJvYXJkaW5nRm9ybVBlcmlvZGljUmV2aWV3IHtcbiAgYnVzaW5lc3M6IEpzb25cbiAgaW5kaXZpZHVhbHM6IEpzb25cbn1cblxudHlwZSBFeHBvcnRJdGVtIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBpbnNlcnRlZEF0OiBUaW1lIVxuICBzdGF0dXM6IFN0cmluZyFcbn1cblxudHlwZSBSZWZyZXNoSW50ZWdyYXRpb25QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpbnRlZ3JhdGlvbjogSW50ZWdyYXRpb25cbn1cblxuZW51bSBQdXNoUHJvdmlkZXJUeXBlIHtcbiAgQVBOU1xuICBGQ01cbn1cblxuZW51bSBCdXNpbmVzc0RheXMge1xuICBGUklEQVlcbiAgTU9OREFZXG4gIFRIVVJTREFZXG4gIFRVRVNEQVlcbiAgV0VETkVTREFZXG59XG5cbnVuaW9uIEJpbGxpbmdQYXltZW50U291cmNlID0gRGVwb3NpdHNBY2NvdW50IHwgRnVuZGluZ1NvdXJjZSB8IE9mZmxpbmVTb3VyY2UgfCBSZXdhcmRzUmVkZW1wdGlvblNvdXJjZVxuXG5pbnB1dCBVcGRhdGVUcmFuc2FjdGlvbkJpbGxhYmxlU3RhdHVzSW5wdXQge1xuICBiaWxsYWJsZVN0YXR1czogQmlsbGFibGVTdGF0dXNcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICB0cmFuc2FjdGlvbklkOiBJRCFcbn1cblxudHlwZSBFeHRlcm5hbEludGVncmF0aW9uRW50aXR5IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlRpbWUgb2YgZGVsZXRpb24sIGVpdGhlciBpZiBleHBsaWNpdGx5IGRlbGV0ZWQgaW4gdGhlIEVSUCBvciBub3QgZm91bmQgaW4gcmVmZXRjaFwiXCJcIlxuICBkZWxldGVkQXQ6IFRpbWVcbiAgXCJcIlwiSUQgdGhhdCByZWZlcmVuY2VzIGFuIGVudGl0eSdzIHBhcmVudCBpbnRlZ3JhdGlvbiBmaWVsZCwgaS5lLiBOZXRzdWl0ZSBDbGFzc1wiXCJcIlxuICBleHRlcm5hbEludGVncmF0aW9uRmllbGRJZDogSUQhXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBpbnRlZ3JhdGlvbjogSW50ZWdyYXRpb25cbiAgXCJcIlwiRmxhZyB0aGF0IGRlbm90ZXMgd2hldGhlciB0aGlzIGVudGl0eSB3YXMgbWFya2VkIGFzIGluYWN0aXZlIG9uIHRoZSBFUlAgc2lkZVwiXCJcIlxuICBpc0luYWN0aXZlOiBCb29sZWFuXG4gIFwiXCJcIkh1bWFuLXJlYWRhYmxlIG5hbWVcIlwiXCJcbiAgbmFtZTogU3RyaW5nXG4gIFwiXCJcIkVudGl0aWVzIGFyZSBhcnJhbmdlZCBpbiBhIHRyZWUgc3RydWN0dXJlXCJcIlwiXG4gIHBhcmVudEVudGl0eTogRXh0ZXJuYWxJbnRlZ3JhdGlvbkVudGl0eVxuICBcIlwiXCJTb2Z0IGRlcHJlY2F0ZWQsIHdpbGwgZGVsZXRlIHNvb24gLSB1c2UgZXh0ZXJuYWxfaW50ZWdyYXRpb25fZmllbGRfaWRcIlwiXCJcbiAgcGF5bG9hZDogRXh0ZXJuYWxJbnRlZ3JhdGlvbkVudGl0eVBheWxvYWRcbiAgXCJcIlwiSUQgdXNlZCBieSB0aGUgZXh0ZXJuYWwgRVJQIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IGFuIGVudGl0eVwiXCJcIlxuICB2ZW5kb3JJbnRlcm5hbElkOiBTdHJpbmdcbn1cblxudHlwZSBDb2xsZWN0aW9uSW50ZW50aW9uIGltcGxlbWVudHMgTm9kZSB7XG4gIGFtb3VudDogSW50XG4gIGNvbGxlY3RlZEF0OiBUaW1lXG4gIGNvbGxlY3Rpb25BdHRlbXB0cyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogQ29sbGVjdGlvbkF0dGVtcHRDb25uZWN0aW9uXG4gIGN1c3RvbWVyQWNjb3VudElkOiBTdHJpbmdcbiAgZnVuZGluZ1NvdXJjZTogRnVuZGluZ1NvdXJjZVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgaW5pdGlhdG9yOiBVc2VyXG4gIGluc2VydGVkQXQ6IFRpbWVcbiAgb3JpZ2luYXRvclR5cGU6IFN0cmluZ1xuICBzY2hlZHVsZWRGb3JEYXRlOiBUaW1lXG4gIHN0YXR1czogU3RyaW5nXG59XG5cbmlucHV0IFVwZGF0ZVRyYW5zYWN0aW9uTWVtb0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBtZW1vOiBTdHJpbmdcbiAgdHJhbnNhY3Rpb25JZDogSUQhXG59XG5cbnR5cGUgRGVwb3NpdHNBZG1pbkJhbGFuY2VBZGp1c3RtZW50RGV0YWlscyB7XG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgbWV0aG9kOiBNZXRob2QhXG59XG5cbnR5cGUgQ3JlZGVudGlhbFJlZGlyZWN0UmVzdWx0IHtcbiAgY3JlZGVudGlhbDogQ3JlZGVudGlhbFxuICByZWRpcmVjdFVybDogU3RyaW5nXG59XG5cbnR5cGUgUmVjZWlwdCBpbXBsZW1lbnRzIE5vZGUge1xuICBhc3NldDogQXNzZXRcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIG9yaWdpbjogU3RyaW5nXG59XG5cbmlucHV0IFJlaW1idXJzZW1lbnRNZXRhZGF0YUlucHV0IHtcbiAgYWRkQXNzZXRJZHM6IFtJRCFdXG4gIGFtb3VudDogSW50XG4gIGJ1ZGdldElkOiBJRFxuICBkZXBhcnRtZW50SWQ6IElEXG4gIGRlcGFydG1lbnROYW1lOiBTdHJpbmdcbiAgbG9jYXRpb25JZDogSURcbiAgbG9jYXRpb25OYW1lOiBTdHJpbmdcbiAgbWVtbzogU3RyaW5nXG4gIG1lcmNoYW50Q2F0ZWdvcnlJZDogSURcbiAgbWVyY2hhbnRJZDogSURcbiAgbWVyY2hhbnROYW1lOiBTdHJpbmdcbiAgbmV0c3VpdGVDbGFzc0V4dGVybmFsRW50aXR5SWQ6IElEXG4gIHB1cmNoYXNlRGF0ZTogVGltZVxuICByZWNlaXB0QXNzZXRGaWxlSWQ6IElEXG4gIHJlbW92ZUFzc2V0SWRzOiBbSUQhXVxuICB1c2VyQ2F0ZWdvcnlJZDogSURcbn1cblxuXCJcIlwiQSB1c2VyIHRvIGludml0ZVwiXCJcIlxuaW5wdXQgVXNlckludml0ZSB7XG4gIFwiXCJcIlRoZSBJRCBvZiB0aGUgZGVwYXJ0bWVudCB0byBhZGQgdGhlIG5ldyB1c2VyIHRvXCJcIlwiXG4gIGRlcGFydG1lbnRJZDogSURcbiAgXCJcIlwiVGhlIGVtYWlsIGFkZHJlc3MgdG8gc2VuZCB0aGUgaW52aXRlIHRvXCJcIlwiXG4gIGVtYWlsOiBFbWFpbCFcbiAgXCJcIlwiVGhlIG5ldyB1c2VyJ3MgZmlyc3QgbmFtZVwiXCJcIlxuICBmaXJzdE5hbWU6IFN0cmluZyFcbiAgXCJcIlwiQSBsaXN0IG9mIGdyb3VwcyB0byBhZGQgdGhlIHVzZXIgdG9cIlwiXCJcbiAgZ3JvdXBzOiBbU3RyaW5nIV1cbiAgXCJcIlwid2hldGhlciBvciBub3QgdGhlIHVzZXIgc2hvdWxkIGhhdmUgYWNjZXNzIHRvIGNvcnBvcmF0ZSBjYXJkc1wiXCJcIlxuICBpc0NvcnBvcmF0ZUNhcmRVc2VyOiBCb29sZWFuXG4gIFwiXCJcIlRoZSBuZXcgdXNlcidzIGxhc3QgbmFtZVwiXCJcIlxuICBsYXN0TmFtZTogU3RyaW5nIVxuICBcIlwiXCJUaGUgSUQgb2YgdGhlIGxvY2F0aW9uIHRvIGFzc2lnbiB0aGlzIHVzZXIgdG9cIlwiXCJcbiAgbG9jYXRpb25JZDogSURcbiAgXCJcIlwiVGhlIElEIG9mIHRoZSB1c2VyIHdobyBzaG91bGQgYmUgYXNzaWduZWQgYXMgdGhlIG5ldyB1c2VyJ3MgbWFuYWdlclwiXCJcIlxuICBtYW5hZ2VySWQ6IElEXG4gIFwiXCJcIldoZW4gdHJ1ZSwgdGhpcyB1c2VyIHdpbGwgYmUgbWFkZSB0byBzZXQgdXAgYSBwaHlzaWNhbCBjYXJkIHdoaWxlIGFjdGl2YXRpbmdcIlwiXCJcbiAgcmVxdWlyZVBoeXNpY2FsQ2FyZDogQm9vbGVhblxuICBcIlwiXCJUaGUgbmV3IHVzZXIncyByb2xlXCJcIlwiXG4gIHJvbGU6IFVzZXJSb2xlVHlwZUlucHV0IVxufVxuXG5pbnB1dCBFbmFibGVFeHBlbnNlc0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpZDogSUQhXG59XG5cbmVudW0gU3BlbmRBbGVydFR5cGUge1xuICBBTExcbiAgRVhQRU5TSVZFX1RSQU5TQUNUSU9OXG4gIEhJR0hfU1BFTkRfUEVSX0RJRU1fUkVTVEFVUkFOVFNcbiAgSElHSF9TUEVORF9QRVJfRElFTV9SSURFU0hBUkVcbiAgSU5WQUxJRFxuICBORVdfVkVORE9SX1NBQVNcbiAgUkVDVVJSSU5HXG4gIFJFQ1VSUklOR19EVVBMSUNBVEVcbiAgU1BFTkRfSU5DUkVBU0VfREVQQVJUTUVOVFxuICBTUEVORF9JTkNSRUFTRV9NRVJDSEFOVFxuICBTUEVORF9JTkNSRUFTRV9NRVJDSEFOVF9DQVRFR09SWVxuICBTUEVORF9JTkNSRUFTRV9SRUNVUlJJTkdcbiAgU1BFTkRfSU5DUkVBU0VfVVNFUlxufVxuXG5lbnVtIEZ1bmRpbmdTb3VyY2VQcm92ZW5hbmNlIHtcbiAgREVQT1NJVFNfQUNDT1VOVFxuICBGSU5BTkNJQUxfQUNDT1VOVFxuICBNQU5VQUxfSU5URVJOQUxcbiAgTUFOVUFMX1VTRVJcbn1cblxuaW5wdXQgUmVjZWl2YWJsZXNPZmZlcnNJbnRlZ3JhdGlvbkZpbmFuY2lhbEFjY291bnRNYXBwaW5nSW5wdXQge1xuICBcIlwiXCJUaGUgaWQgb2YgdGhlIGZpbmFuY2lhbF9hY2NvdW50XCJcIlwiXG4gIGZpbmFuY2lhbEFjY291bnRJZDogU3RyaW5nIVxuICBcIlwiXCJUaGUgaWQgb2YgdGhlIGludGVncmF0aW9uXCJcIlwiXG4gIGludGVncmF0aW9uQ3JlZGVudGlhbElkOiBTdHJpbmchXG59XG5cblwiXCJcIkEgY2F0ZWdvcnkgdGhhdCBpcyBhIGNhbmRpZGF0ZSBmb3IgYmVpbmcgdGhlIHRvcCBjYXRlZ29yeSBpbiBhIGdpdmVuIHBlcmlvZC5cIlwiXCJcbnR5cGUgUmV3YXJkc1RvcENhdGVnb3J5IGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIkluZm9ybWF0aW9uIGFib3V0IHRoZSBjYXRlZ29yeSBmZXRjaGVkIGZyb20gUHJlc2VudC5cIlwiXCJcbiAgY2F0ZWdvcnk6IE1lcmNoYW50Q2F0ZWdvcnkhXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBcIlwiXCJUaGUgSUQgb2YgdGhlIGNhdGVnb3J5IGluIHByZXNlbnQuXCJcIlwiXG4gIHByZXNlbnRNZXJjaGFudENhdGVnb3J5SWQ6IFN0cmluZyFcbiAgXCJcIlwiVGhlIGFtb3VudCB0aGUgY3VzdG9tZXIgaGFzIHNwZW50IG9uIHRoZSBjYXRlZ29yeS5cIlwiXCJcbiAgdG90YWxBbW91bnRTcGVudENlbnRzOiBJbnQhXG59XG5cbnR5cGUgRGVsZXRlSW50ZWdyYXRpb25SdWxlUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBPbmJvYXJkaW5nSW5mb3JtYXRpb25SZXF1ZXN0Q29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbT25ib2FyZGluZ0luZm9ybWF0aW9uUmVxdWVzdEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxuaW5wdXQgT3JkZXJCeUlucHV0IHtcbiAgZGlyZWN0aW9uOiBPcmRlckRpcmVjdGlvbiFcbiAgc29ydDogU3RyaW5nIVxufVxuXG5lbnVtIENhcmRQYXltZW50RmFpbHVyZVR5cGVWMiB7XG4gIEFDQ09VTlRfQ0xPU0VEXG4gIEFDQ09VTlRfTk9UX0ZPVU5EXG4gIElOU1VGRklDSUVOVF9GVU5EU1xuICBOT05fVFJBTlNBQ1RJT05fQUNDT1VOVFxuICBOT1RfQVVUSE9SSVpFRFxufVxuXG5pbnB1dCBDcmVhdGVQYXltZW50SW5wdXQge1xuICBhbW91bnQ6IEludCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBjb25zdW1lclNldHRpbmdzOiBUcmFuc2FjdGlvbkNvbnN1bWVyU2V0dGluZ3NcbiAgY29udGFjdElkOiBJRFxuICBjb250YWN0VmVyc2lvbjogSW50XG4gIFwiXCJcIlVzZSBjb250YWN0IGlkIGluc3RlYWRcIlwiXCJcbiAgY291bnRlcnBhcnR5SWQ6IElEXG4gIGRlcG9zaXRzQWNjb3VudElkOiBJRCFcbiAgZW5kc0F0OiBUaW1lXG4gIGVuZHNPbjogRGF0ZVxuICBleHRlcm5hbE1lbW86IFN0cmluZ1xuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nIVxuICBtb250aGx5U2NoZWR1bGU6IE1vbnRobHlTY2hlZHVsZVxuICBwYXltZW50SW5zdHJ1bWVudElkOiBJRFxuICBwYXltZW50SW5zdHJ1bWVudFZlcnNpb246IEludFxuICBzZW5kQXQ6IFRpbWVcbiAgc2VuZE9uOiBEYXRlXG4gIHRvdGFsTnVtYmVyT2ZQYXltZW50czogSW50XG4gIHdlZWtseVNjaGVkdWxlOiBXZWVrbHlTY2hlZHVsZVxufVxuXG5cIlwiXCJNb2JpbGUgc3VtbWFyeSBzY2hlbWFcIlwiXCJcbnR5cGUgTW9iaWxlUmVmZXJyYWxzU3VtbWFyeSBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaXRsZSBmb3IgZW50cnkgcG9pbnRcIlwiXCJcbiAgZW50cnlQb2ludFRpdGxlOiBTdHJpbmdcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIkxhbmRpbmcgc2NyZWVuIGRlc2NyaXB0aW9uXCJcIlwiXG4gIGxhbmRpbmdTY3JlZW5EZXNjcmlwdGlvbjogU3RyaW5nXG4gIFwiXCJcIkxhbmRpbmcgc2NyZWVuIHRpdGxlXCJcIlwiXG4gIGxhbmRpbmdTY3JlZW5UaXRsZTogU3RyaW5nXG4gIFwiXCJcIlRlcm1zIGFuZCBjb25kaXRpb25zXCJcIlwiXG4gIHRlcm1zQW5kQ29uZGl0aW9uczogU3RyaW5nXG59XG5cbnR5cGUgUXVpY2tib29rc0NsYXNzIHtcbiAgbmFtZTogU3RyaW5nXG59XG5cbmlucHV0IFByb2dyYW1NZW1iZXJzaGlwUGF5bG9hZCB7XG4gIGZpcnN0TmFtZTogU3RyaW5nXG4gIGxhc3ROYW1lOiBTdHJpbmdcbiAgbWVtYmVyc2hpcElkOiBTdHJpbmdcbn1cblxuZW51bSBDb21wYW55VHlwZSB7XG4gIEVDT01NRVJDRVxuICBMSUZFU0NJRU5DRVxuICBPVEhFUlNcbiAgU1RBUlRVUFxufVxuXG5lbnVtIFBlbmRpbmdSZWNvcmRBcHByb3ZhbERlY2lzaW9uIHtcbiAgQVBQUk9WRURcbiAgQ0FOQ0VMTEVEXG4gIERFTklFRFxuICBQRU5ESU5HXG59XG5cbnR5cGUgT25ib2FyZGluZ0Zvcm1CbG9ja2luZyB7XG4gIF86IEJvb2xlYW5cbn1cblxudHlwZSBNZXJjaGFudENhdGVnb3J5Q29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbTWVyY2hhbnRDYXRlZ29yeUVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxuZW51bSBCYW5rQWNjb3VudENsYXNzIHtcbiAgQlVTSU5FU1NcbiAgUEVSU09OQUxcbn1cblxuZW51bSBXZWF2U2FsZXNQbGF0Zm9ybSB7XG4gIEFNQVpPTl9TUFxuICBQQVlQQUxcbiAgU0hPUElGWVxuICBTUVVBUkVcbiAgU1RSSVBFXG4gIFdBTE1BUlRcbn1cblxudHlwZSBDb252ZXJ0Q2FyZEFjY291bnRUeXBlUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaW5lbGlnaWJpbGl0eVJlYXNvbjogQ29udmVyc2lvbkluZWxpZ2liaWxpdHlSZWFzb25cbn1cblxudHlwZSBDcmVhdGVJbnRlZ3JhdGlvblJ1bGVQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJ0aGUgaW50ZWdyYXRpb24gY29udGFpbmluZyBuZXcgcnVsZVwiXCJcIlxuICBpbnRlZ3JhdGlvbjogSW50ZWdyYXRpb25cbn1cblxuaW5wdXQgQ3JlYXRlT25ib2FyZGluZ1Byb2R1Y3RBcHBsaWNhdGlvbklucHV0IHtcbiAgXCJcIlwiQ2FuY2VsIGFueSBleGlzdGluZyBhcHBsaWNhdGlvbnMgb2YgdGhlIHNhbWUgbmFtZWQgYmx1ZXByaW50XCJcIlwiXG4gIGNhbmNlbFByZXZpb3VzQXBwbGljYXRpb246IEJvb2xlYW5cbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJUaGUgc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gb2YgdGhlIGJsdWVwcmludCB0eXBlXCJcIlwiXG4gIG5hbWU6IFN0cmluZyFcbn1cblxudHlwZSBEZXBvc2l0c1Byb2Nlc3NpbmdBbmRGdXR1cmVQYXltZW50RGF0ZUNvbm5lY3Rpb24ge1xuICBlZGdlczogW0RlcG9zaXRzUHJvY2Vzc2luZ0FuZEZ1dHVyZVBheW1lbnREYXRlRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxuICB0b3RhbENvdW50OiBJbnQhXG59XG5cbnR5cGUgQ3JlYXRlTmV0c3VpdGVDcmVkZW50aWFsUGF5bG9hZCB7XG4gIGF1dGhlbnRpY2F0aW9uUmVzdWx0OiBDcmVkZW50aWFsQXV0aGVudGljYXRpb25SZXN1bHRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBzdWJzaWRpYXJpZXM6IFtOZXRzdWl0ZVN1YnNpZGlhcnldXG59XG5cbnR5cGUgQmFua2luZ0hvbGlkYXlzIHtcbiAgYmFua2luZ0hvbGlkYXlzOiBbRGF0ZSFdIVxufVxuXG5lbnVtIENvbmZpcm1hdGlvblN0YXR1cyB7XG4gIENPTkZJUk1BVElPTl9TVEFUVVNfQ09ORklSTUVEXG4gIENPTkZJUk1BVElPTl9TVEFUVVNfRElTTUlTU0VEXG4gIENPTkZJUk1BVElPTl9TVEFUVVNfSU5WQUxJRFxuICBDT05GSVJNQVRJT05fU1RBVFVTX1BFTkRJTkdcbn1cblxudHlwZSBDcmVhdGVSZWNlaXB0UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcmVjZWlwdDogUmVjZWlwdFxufVxuXG5pbnB1dCBTZXRUcmFuc2FjdGlvbkludGVncmF0aW9uRmllbGRJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZmllbGQ6IFN0cmluZyFcbiAgdHJhbnNhY3Rpb25JZDogSUQhXG4gIHZhbHVlOiBTdHJpbmchXG59XG5cbnR5cGUgQ29tcGxldGVQcm9tb3Rpb25QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5pbnB1dCBDaGVja1JlY2VpdmluZ01ldGhvZElucHV0IHtcbiAgYWRkcmVzczogQWRkcmVzc0lucHV0XG59XG5cblwiXCJcIkNvbGxlY3RlZCAoZm9yIGZlZSkgdmlhIFJld2FyZHMgUmVkZW1wdGlvblwiXCJcIlxudHlwZSBSZWNlaXZhYmxlc09mZmVyc1BheW1lbnRJbnRlbnRTb3VyY2VSZXdhcmRzUmVkZW1wdGlvbiB7XG4gIFwiXCJcIklEIG9mIHRoZSBQYXlvdXQgdGhhdCBpcyBsaW5rZWQgdG8gdGhlIE9mZmVyIEZlZSB0aGF0IHdlIGNvbGxlY3RlZCBhZ2FpbnN0LlwiXCJcIlxuICBwYXlvdXRJZDogSUQhXG4gIHJld2FyZHNSZWRlbXB0aW9uSW5zdGFuY2VJZDogU3RyaW5nIVxufVxuXG5pbnB1dCBDcmVhdGVQYXllcklucHV0IHtcbiAgYWRkcmVzczogQ29udGFjdEFkZHJlc3NJbnB1dFxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRiYU5hbWU6IFN0cmluZ1xuICBlbWFpbDogU3RyaW5nXG4gIGlkZW1wb3RlbmN5S2V5OiBTdHJpbmchXG4gIGludm9pY2luZ0FjY291bnRJZDogSUQhXG4gIHBob25lTnVtYmVyOiBTdHJpbmdcbn1cblxudHlwZSBSZXN0cmljdGlvbnMge1xuICBcIlwiXCJJbmRpY2F0ZXMgaWYgdGhlIGNvdW50cnkgaXMgc2FuY3Rpb25lZCBmb3IgY2FyZCBzaGlwcGluZyBwdXJwb3Nlc1wiXCJcIlxuICBpc1NhbmN0aW9uZWRGb3JDYXJkU2hpcHBpbmc6IEJvb2xlYW4hXG59XG5cbmlucHV0IENyZWF0ZUV4cGVuc2VzU2V0dGluZ0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBydWxlczogW0V4cGVuc2VzUnVsZUlucHV0XSFcbiAgc2VuZEVtYWlsVG9FbXBsb3llZXM6IEJvb2xlYW5cbiAgc3RhdHVzOiBFeHBlbnNlc1NldHRpbmdTdGF0dXMhXG59XG5cbnR5cGUgVXBkYXRlSW50ZWdyYXRpb25TZXR0aW5nc1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGludGVncmF0aW9uOiBJbnRlZ3JhdGlvblxufVxuXG5pbnB1dCBTZXRVc2VyUm9sZUlucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICByb2xlOiBTdHJpbmchXG4gIHVzZU9uYm9hcmRpbmc6IEJvb2xlYW5cbiAgdXNlcklkOiBJRCFcbn1cblxudW5pb24gUGF5bWVudEluc3RydW1lbnRUeXBlID0gQWNoUGF5bWVudEluc3RydW1lbnQgfCBDaGVxdWVQYXltZW50SW5zdHJ1bWVudCB8IERvbWVzdGljV2lyZVBheW1lbnRJbnN0cnVtZW50IHwgSW50ZXJuYXRpb25hbFdpcmVQYXltZW50SW5zdHJ1bWVudFxuXG50eXBlIERlbGV0ZVJlY2VpcHRQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5cIlwiXCJUaGUgY29tcHV0ZWQgaW50ZWdyYXRpb24gbGVucyBmaWVsZCBmcm9tIGludGVncmF0aW9uIHJ1bGUgZW5naW5lIGZvciBleHBlbnNlcy5cIlwiXCJcbnR5cGUgRXhwZW5zZUxlbnMgaW1wbGVtZW50cyBOb2RlIHtcbiAgYmlsbGFibGVTdGF0dXM6IEJvb2xlYW5cbiAgZGlzYWJsZWRJbnRlZ3JhdGlvblJ1bGVzOiBbSW50ZWdyYXRpb25SdWxlXVxuICBkaXNhYmxlZFJ1bGVJZHM6IFtTdHJpbmddXG4gIGV4cGVuc2VJZDogU3RyaW5nXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBpbnRlZ3JhdGlvbkZpZWxkczogW0ludGVncmF0aW9uRmllbGRdXG4gIGludGVncmF0aW9uUnVsZUV2YWx1YXRpb25zOiBbUnVsZUV2YWx1YXRpb25dXG4gIFwiXCJcIldoZXRoZXIgdGhlIGV4cGVuc2UgaXMgZXhwb3J0ZWRcIlwiXCJcbiAgaXNFeHBvcnRlZDogQm9vbGVhblxuICB1c2VyQ2F0ZWdvcnk6IFVzZXJDYXRlZ29yeVxuICB1c2VyQ2F0ZWdvcnlJZDogU3RyaW5nXG59XG5cbnR5cGUgU29mdEV4cGlyYXRpb25TdW1tYXJ5IHtcbiAgaXNTb2Z0RXhwaXJlZDogQm9vbGVhblxuICBzb2Z0RXhwaXJlc0F0OiBUaW1lXG59XG5cbnR5cGUgUmV3YXJkc1RyaWdnZXJJbnN0YW5jZVN0YXRlQ2FzaEFjdGl2YXRpb25DYXJkU3BlbmRCb251cyB7XG4gIGFtb3VudFNwZW50VXNkQ2VudHM6IEludCFcbn1cblxudHlwZSBTcGVuZEFnZ3JlZ2F0ZVRpbWVTZXJpZXMge1xuICBhbW91bnQ6IEludCFcbiAgdGltZTogVGltZVxufVxuXG50eXBlIE9uYm9hcmRpbmdQYWdlVXdFY29tbWVyY2VDb25uZWN0aW9uIHtcbiAgXzogQm9vbGVhblxuICBjb250ZW50OiBPbmJvYXJkaW5nRm9ybVV3RWNvbW1lcmNlQ29ubmVjdGlvbiFcbn1cblxuXCJcIlwiRGVzY3JpYmVzIGEgbGluayB0b2tlbiBvYmplY3RcIlwiXCJcbnR5cGUgSHJpc0xpbmtUb2tlbiB7XG4gIFwiXCJcIlRoZSBsaW5rIHRva2VuIHdlIHdhbnQgdG8gcGFzcyBiYWNrIHRvIHRoZSBGRVwiXCJcIlxuICBsaW5rVG9rZW46IFN0cmluZyFcbn1cblxudHlwZSBCdWxrQ3JlYXRlRXhwZW5zZXNJdGVtRXZlbnRQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBleHBlbnNlc0l0ZW1FdmVudHM6IFtFeHBlbnNlc0l0ZW1FdmVudCFdXG59XG5cbnR5cGUgVXBkYXRlSW5zdGl0dXRpb25Mb2dpblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHJlc3VsdDogRmluYW5jaWFsc1NvdXJjZVJlc3VsdFxufVxuXG50eXBlIFRlbGxlclBheWxvYWQge1xuICBlbnJvbGxtZW50SWQ6IFN0cmluZyFcbiAgdGVsbGVyRW5yb2xsbWVudElkOiBTdHJpbmdcbiAgdGVsbGVySW5zdGl0dXRpb25JZDogU3RyaW5nIVxufVxuXG5lbnVtIENhc2hUcmFuc2FjdGlvbldpcmVSZXR1cm5SZWFzb24ge1xuICBJTlZBTElEXG4gIFVOS05PV05cbn1cblxudHlwZSBSZWNlaXZhYmxlc09mZmVyc1BheW1lbnRJbnRlbnRDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtSZWNlaXZhYmxlc09mZmVyc1BheW1lbnRJbnRlbnRFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG4gIHN1bW1hcnk6IFJlY2VpdmFibGVzT2ZmZXJzUGF5bWVudEludGVudEFsbG9jYXRpb25TdW1tYXJ5XG59XG5cbmlucHV0IEFjdGl2YXRlVXNlcklucHV0IHtcbiAgYWN0aXZhdGlvblRva2VuOiBTdHJpbmchXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdXNlcjogQWN0aXZhdGVVc2VySW5mb1xufVxuXG50eXBlIERpc2Nvbm5lY3RFcnBGZWVkUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZXJwRmVlZDogRXJwRmVlZFxuICBlcnJvck1lc3NhZ2U6IFN0cmluZ1xufVxuXG50eXBlIFJld2FyZHNSZWRlbXB0aW9uT2ZmZXJDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtSZXdhcmRzUmVkZW1wdGlvbk9mZmVyRWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG5lbnVtIFBheW1lbnRBcHByb3ZhbERlY2lzaW9uUmVhc29uIHtcbiAgRlJBVURVTEVOVFxuICBJTkNPUlJFQ1RcbiAgT1RIRVJcbiAgVU5BVVRIT1JJWkVEXG59XG5cbnR5cGUgTG9jYXRpb25Db25uZWN0aW9uIHtcbiAgZWRnZXM6IFtMb2NhdGlvbkVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBSZXBsYWNlQ2FyZFdpdGhWaXJ0dWFsUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcmVwbGFjZWRDYXJkOiBDYXJkXG4gIHJlcGxhY2VtZW50Q2FyZDogQ2FyZFxufVxuXG5pbnB1dCBEZWxldGVEZXBhcnRtZW50SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbn1cblxuZW51bSBBcHByb3ZhbHNSZXZpZXdTdGF0dXMge1xuICBBUFBST1ZFRFxuICBERU5JRURcbiAgUEVORElOR1xuICBTS0lQXG59XG5cbnR5cGUgRXhwZW5zZXNTZXR0aW5nRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IEV4cGVuc2VzU2V0dGluZ1xufVxuXG5pbnB1dCBJbnB1dENhc2hSZWN1cnJpbmdTY2hlZHVsZVR5cGVVbmlvbiB7XG4gIG1vbnRobHlCeURheTogSW5wdXRDYXNoUmVjdXJyaW5nU2NoZWR1bGVNb250aGx5QnlEYXlcbiAgbW9udGhseUJ5V2VlazogSW5wdXRDYXNoUmVjdXJyaW5nU2NoZWR1bGVNb250aGx5QnlXZWVrXG4gIHdlZWtseTogSW5wdXRDYXNoUmVjdXJyaW5nU2NoZWR1bGVXZWVrbHlcbn1cblxudHlwZSBPbmJvYXJkaW5nUGFnZUVtYWlsVmVyaWZpY2F0aW9uIHtcbiAgXzogQm9vbGVhblxuICBjb250ZW50OiBPbmJvYXJkaW5nRm9ybUJsb2NraW5nIVxufVxuXG5pbnB1dCBTaWdudXBJbmZvSW5wdXQge1xuICBhdHRyaWJ1dGlvblNvdXJjZTogU3RyaW5nXG4gIGF0dHJpYnV0aW9uVG9rZW46IFN0cmluZ1xuICBibGFja2JveDogU3RyaW5nXG4gIGNvbXBhbnlJbmR1c3RyeTogU3RyaW5nXG4gIGNvbXBhbnlOYW1lOiBTdHJpbmchXG4gIGNvbXBhbnlUeXBlOiBDb21wYW55VHlwZVxuICBjb21wYW55VXJsOiBTdHJpbmdcbiAgXCJcIlwiQXBwcm94aW1hdGUgbW9udGhseSBjcmVkaXQgY2FyZCBzcGVuZGluZ1wiXCJcIlxuICBjcmVkaXRDYXJkU3BlbmQ6IFN0cmluZ1xuICBcIlwiXCJUaGUgZXh0ZXJuYWwgYWNjb3VudHMgdGhlIHVzZXIgaGFkIHdoZW4gdGhleSBzaWduZWQgdXAgKGUuZy4gU2hvcGlmeSwgQW1hem9uLCBldGMpXCJcIlwiXG4gIGV4dGVybmFsQWNjb3VudHM6IFtTdHJpbmddXG4gIGZpbmFuY2lhbFByb2R1Y3RUeXBlOiBGaW5hbmNpYWxQcm9kdWN0VHlwZSFcbiAgZmlyc3ROYW1lOiBTYWZlU3RyaW5nIVxuICBcIlwiXCJVc2VycyBpbnRlbnQgZm9yIHNpZ25pbmcgdXAgZm9yIGJyZXhcIlwiXCJcbiAgaW50ZW50OiBbU3RyaW5nXVxuICBpbnZlc3RtZW50U291cmNlOiBTdHJpbmdcbiAgbGFzdE5hbWU6IFNhZmVTdHJpbmchXG4gIGxlZ2FsQWdyZWVtZW50czogW0xlZ2FsQWdyZWVtZW50UmVmZXJlbmNlXSFcbiAgbWFya2V0aW5nTWV0YWRhdGE6IEpzb25cbiAgXCJcIlwiQW5zd2VycyB0byB0aGUgYnVzaW5lc3MgbWF0dXJpdHkgcXVlc3Rpb25cIlwiXCJcbiAgbWF0dXJpdHk6IFtTdHJpbmddXG4gIHJvbGU6IFN0cmluZ1xuICBzYWxlc1ZvbHVtZTogU3RyaW5nXG59XG5cbnR5cGUgR2VuZXJhdGVEZXBvc2l0c1RyYW5zYWN0aW9uQ29uZmlybWF0aW9uRG93bmxvYWRVcmxQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJ1cmwgdG8gZG93bmxvYWQgY29uZmlybWF0aW9uXCJcIlwiXG4gIGRlcG9zaXRzVHJhbnNhY3Rpb25Db25maXJtYXRpb25Eb3dubG9hZFVybDogU3RyaW5nXG59XG5cbnR5cGUgQ2FzaFJlY3VycmluZ1NjaGVkdWxlTW9udGhseUJ5RGF5IHtcbiAgXCJcIlwiTnVtYmVyIG9mIG1vbnRocyBiZXR3ZWVuIHN1Y2Nlc3NpdmUgdHJhbnNhY3Rpb25zXCJcIlwiXG4gIGNhZGVuY2U6IEludCFcbiAgXCJcIlwiRGF5IG9mIHRoZSBtb250aCB0byBzY2hlZHVsZSB0cmFuc2FjdGlvbnNcIlwiXCJcbiAgZGF5T2ZNb250aDogSW50IVxufVxuXG50eXBlIENvbGxlY3Rpb25JbnRlbnRpb25FZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogQ29sbGVjdGlvbkludGVudGlvblxufVxuXG5lbnVtIFJlY2VpdmFibGVzT2ZmZXJzQWNjb3VudE9uYm9hcmRpbmdBY3Rpb24ge1xuICBJTlZBTElEXG4gIExFR0FMX0FHUkVFTUVOVF9BQ0NFUFRFRFxufVxuXG5cIlwiXCJtdXRpbmcgY29uZmlnIGZvciBhbiBpbmRpdmlkdWFsIGNvbHVtblwiXCJcIlxudHlwZSBNdXRpbmdDb25maWd1cmF0aW9uIHtcbiAgbXV0ZUNvbHVtbjogTXV0ZUNvbHVtbiFcbiAgbXV0ZVZhbHVlczogW1N0cmluZyFdIVxufVxuXG50eXBlIEJpbGxpbmdQZXJpb2Qge1xuICBlbmRQZXJpb2Q6IFRpbWUhXG4gIHN0YXJ0UGVyaW9kOiBUaW1lIVxufVxuXG50eXBlIEZpbmFuY2lhbFNvdXJjZUNvbm5lY3Rpb24ge1xuICBlZGdlczogW0ZpbmFuY2lhbFNvdXJjZUVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxuaW5wdXQgQ3JlYXRlQ2FyZFRyYW5zYWN0aW9uSW5zaWdodEV2ZW50SW5wdXQge1xuICBhY3Rpb246IENhcmRUcmFuc2FjdGlvbkluc2lnaHRFdmVudEFjdGlvbiFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBldmVudE1ldGFkYXRhOiBKc29uXG4gIGluc2lnaHRJZDogSUQhXG4gIG5vdGlmeU1hbmFnZXJzOiBCb29sZWFuXG4gIG5vdGlmeVNlbGVjdGVkVXNlcnM6IFtJRF1cbn1cblxudHlwZSBFZnRSZWNlaXZpbmdNZXRob2Qge1xuICBhY2NvdW50TnVtYmVyOiBTdHJpbmdcbiAgYmVuZWZpY2lhcnlOYW1lOiBTdHJpbmdcbiAgcm91dGluZ051bWJlcjogU3RyaW5nXG59XG5cbnVuaW9uIFNlYXJjaGFibGUgPSBDYXJkIHwgQ29sbGVjdGlvbkludGVudGlvbiB8IERlcGFydG1lbnQgfCBNZXJjaGFudCB8IE1lcmNoYW50Q2F0ZWdvcnkgfCBTdGF0ZW1lbnRFbnRyeSB8IFRyYW5zYWN0aW9uIHwgVHJhbnNhY3Rpb25PcGVyYXRpb24gfCBVc2VyIHwgVXNlckNhdGVnb3J5XG5cbnR5cGUgUmVtb3ZlRnNwQm9va2tlZXBlclBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHBvbGljeVVybjogU3RyaW5nXG59XG5cbmlucHV0IE5vdGlmeUFsbFVzZXJzQXBwcm92YWxzRW5hYmxlZElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nXG59XG5cblwiXCJcIm11dGluZyBjb25maWcgZm9yIGFuIGFsZXJ0IHR5cGVcIlwiXCJcbnR5cGUgQWxlcnRUeXBlTXV0aW5nQ29uZmlndXJhdGlvbnMge1xuICBhbGVydFR5cGU6IFNwZW5kQWxlcnRUeXBlIVxuICBtdXRpbmdDb25maWd1cmF0aW9uczogW011dGluZ0NvbmZpZ3VyYXRpb24hXSFcbn1cblxudHlwZSBCaWxsQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbQmlsbEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgdG90YWxDb3VudDogSW50IVxufVxuXG50eXBlIERpc2FibGVSZWltYnVyc2VtZW50c1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGludGVncmF0aW9uOiBJbnRlZ3JhdGlvblxufVxuXG5pbnB1dCBGbGV4aWJsZUFkZHJlc3NJbnB1dCB7XG4gIGFkZHJlc3MxOiBTdHJpbmchXG4gIGFkZHJlc3MyOiBTdHJpbmdcbiAgY2l0eTogU3RyaW5nIVxuICBjb3VudHJ5OiBTdHJpbmchXG4gIHN0YXRlOiBTdHJpbmdcbiAgemlwOiBTdHJpbmdcbn1cblxuaW5wdXQgUmVtb3ZlRnNwQm9va2tlZXBlcklucHV0IHtcbiAgYm9va2tlZXBlckFjY291bnRJZDogU3RyaW5nIVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbmlucHV0IENyZWF0ZUFzc2V0SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIFwiXCJcIlRoZSBmaWxlIGNvbnRlbnQgdHlwZVwiXCJcIlxuICBjb250ZW50VHlwZTogU3RyaW5nIVxuICBcIlwiXCJGb3IgSW50ZXJuYWwgVXNlIE9ubHk6IEFzc2V0cyB3aWxsIG5vdCBiZSBhY2Nlc3NpYmxlIGluIHRoZSBkYXNoYm9hcmQgd2hlbiB0aGlzIGlzIHRydWVcIlwiXCJcbiAgZml1bzogQm9vbGVhblxuICBcIlwiXCJcbiAgU3Ryb25nIGNvbXBsaWFuY2UgbWVhbnMgdGhhdCBhc3NldHMgd2lsbCBiZSBzdG9yZWQgaW4gYW4gczMgYnVja2V0IHdoZXJlIGFzc2V0cyBjYW5ub3QgYmUgZGVsZXRlZC5cbiAgVGhpcyBpcyBuZWNlc3NhcnkgZm9yIGFzc2V0cyB3aGljaCBhcmUgcmVxdWlyZWQgYnkgRklOUkEgdG8gYmUgc3RvcmVkIGluIGEgV09STSBjb21wbGlhbnQgd2F5LlxuICBcIlwiXCJcbiAgaXNTdHJvbmdDb21wbGlhbmNlOiBCb29sZWFuXG4gIFwiXCJcIlRoZSBuYW1lIG9mIHRoZSBmaWxlXCJcIlwiXG4gIG5hbWU6IFN0cmluZyFcbiAgXCJcIlwiSWRlbXBvdGVuY3kga2V5IGZvciB0aGUgdXBsb2FkIHJlcXVlc3RcIlwiXCJcbiAgdXBsb2FkUmVxdWVzdElkOiBTdHJpbmchXG59XG5cbmlucHV0IFJlY29ubmVjdEVycEZlZWRJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZXJwRmVlZElkOiBJRCFcbn1cblxuaW5wdXQgSW5wdXRDYXNoVHJhbnNhY3Rpb25DcmVkaXRBcmd1bWVudHMge1xuICBcIlwiXCJDb250YWN0IGFuZCBwYXltZW50IGluc3RydW1lbnQgb2YgdGhlIGV4dGVybmFsIGFjY291bnQgdG8gcHVzaCBmdW5kcyB0b1wiXCJcIlxuICBwYXllZTogUGF5ZWUhXG59XG5cbnR5cGUgQ3JlYXRlUGF5cm9sbFByb3ZpZGVyUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcGF5cm9sbFByb3ZpZGVyOiBQYXlyb2xsUHJvdmlkZXJcbn1cblxudHlwZSBBc2NlbmRhRGV0YWlscyB7XG4gIGN1cnJlbmN5TmFtZTogU3RyaW5nXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgZW5yb2xsbWVudExpbms6IFN0cmluZ1xuICBlc3RpbWF0ZWRQcm9jZXNzaW5nVGltZUhvdXJzOiBJbnRcbiAgZnVsbEN1cnJlbmN5TmFtZTogU3RyaW5nXG4gIG1haW50ZW5hbmNlOiBBc2NlbmRhTWFpbnRlbmFuY2UhXG4gIHBhcnRuZXJOYW1lOiBTdHJpbmdcbiAgcHJvZ3JhbU5hbWU6IFN0cmluZ1xuICBzaG9ydFByb2dyYW1OYW1lOiBTdHJpbmdcbiAgdGVybXNBbmRDb25kaXRpb25zTGluazogU3RyaW5nXG59XG5cblwiXCJcIkEgZmluYW5jaWFsX2RvY3VtZW50IHJlcHJlc2VudGluZyBzcGVjaWZpY2FsbHkgYSBiYW5rIHN0YXRlbWVudFwiXCJcIlxudHlwZSBGaW5hbmNpYWxCYW5rU3RhdGVtZW50RG9jdW1lbnQgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIGxhc3QgZGlnaXRzIG9mIHRoZSBiYW5rIGFjY291bnQgbnVtYmVyIGZvciBkaXNwbGF5XCJcIlwiXG4gIGFjY291bnROdW1iZXJMYXN0Rm91cjogU3RyaW5nXG4gIFwiXCJcIkFzc2V0L0ZpbGVzdG9yZSBJRCBvZiBzdGF0ZW1lbnQgZG9jdW1lbnRcIlwiXCJcbiAgYXNzZXRJZDogU3RyaW5nIVxuICBiYW5rQWNjb3VudE51bWJlcjogU3RyaW5nXG4gIFwiXCJcIkJhbmsvRmluYW5jaWFsIGluc3RpdHV0aW9uICYgYWNjb3VudCBudW1iZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBzdGF0ZW1lbnQgYWNjb3VudFwiXCJcIlxuICBiYW5rTmFtZTogU3RyaW5nXG4gIFwiXCJcIkZpcnN0ICYgbGFzdCBuYW1lIG9mIHVzZXIgd2hvIHVwbG9hZGVkIHRoZSBzdGF0ZW1lbnRcIlwiXCJcbiAgZmlyc3ROYW1lOiBTdHJpbmdcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIGxhc3ROYW1lOiBTdHJpbmdcbiAgXCJcIlwiVGhlIG1vbnRoIG9mIHRoZSByZXF1ZXN0ZWQgc3RhdGVtZW50XCJcIlwiXG4gIHJlcXVlc3RlZE1vbnRoOiBJbnQhXG4gIFwiXCJcIlN0YXR1cyBvZiB1cGxvYWRlZCBzdGF0ZW1lbnQgZG9jdW1lbnRcIlwiXCJcbiAgc3RhdHVzOiBGaW5hbmNpYWxEb2N1bWVudFN0YXR1cyFcbiAgXCJcIlwiVXBsb2FkIHRpbWVzdGFtcCBvZiB0aGUgc3RhdGVtZW50IGRvY3VtZW50XCJcIlwiXG4gIHVwbG9hZGVkQXQ6IFRpbWUhXG59XG5cbnR5cGUgT25ib2FyZGluZ1BhZ2VQZXJzb25hIHtcbiAgXzogQm9vbGVhblxuICBjb250ZW50OiBPbmJvYXJkaW5nRm9ybVBlcnNvbmEhXG59XG5cbnR5cGUgVXBkYXRlQ2FyZERpc3BsYXlOYW1lUGF5bG9hZCB7XG4gIGNhcmQ6IENhcmQhXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuaW5wdXQgVGhpcmRQYXJ0eUF0dHJpYnV0aW9uIHtcbiAgXCJcIlwidGhlIEZhY2Vib29rIGNsaWNrIElEXCJcIlwiXG4gIGZiYzogU3RyaW5nXG4gIFwiXCJcInRoZSBGYWNlYm9vayBicm93c2VyIElEXCJcIlwiXG4gIGZicDogU3RyaW5nXG4gIFwiXCJcIi8qKiBHb29nbGUgQ2xpY2sgSUQgKi9cIlwiXCJcbiAgZ2NsaWQ6IFN0cmluZ1xufVxuXG50eXBlIFR1cm5PZmZTZWVuRmxhZ1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIFwiXCJcIlVwZGF0ZWQgZmxhZ1wiXCJcIlxuICBzZWVuRmxhZzogU2VlbkZsYWdcbn1cblxudHlwZSBDYXNoVHJhbnNhY3Rpb25BZG1pbkJhbGFuY2VBZGp1c3RtZW50RGV0YWlscyB7XG4gIFwiXCJcIkludGVybmFsIHJlYXNvbiB3aHkgdGhlIGFkbWluIGJhbGFuY2UgYWRqdXN0bWVudCB3YXMgY3JlYXRlZFwiXCJcIlxuICBkZXNjcmlwdGlvbjogU3RyaW5nXG4gIFwiXCJcIldoZXRoZXIgdGhlIHRyYW5zYWN0aW9uIHdhcyBhIGRlYml0IG9yIGNyZWRpdFwiXCJcIlxuICBwYXltZW50TWV0aG9kOiBDYXNoVHJhbnNhY3Rpb25QYXltZW50TWV0aG9kIVxufVxuXG5lbnVtIFBheWVlVHlwZSB7XG4gIFVTRVJcbiAgVkVORE9SXG59XG5cbmlucHV0IENyZWF0ZUNhc2hUcmFuc2FjdGlvbklucHV0IHtcbiAgYW1vdW50VXNkQ2VudHM6IEludCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJUaGUgdHlwZSBvZiB0cmFuc2FjdGlvbiB0byBjcmVhdGVcIlwiXCJcbiAgY3JlYXRpb25UeXBlOiBJbnB1dENhc2hUcmFuc2FjdGlvbkNyZWF0aW9uQXJndW1lbnRVbmlvbiFcbiAgXCJcIlwiT3B0aW9uYWwgaW50ZXJuYWwgY3VzdG9tZXIgbWVtbyBvZiB0aGUgdHJhbnNhY3Rpb25cIlwiXCJcbiAgY3VzdG9tZXJNZW1vOiBTdHJpbmdcbiAgZGVwb3NpdHNBY2NvdW50SWQ6IElEIVxuICBcIlwiXCJcbiAgT3B0aW9uYWwgZGVzY3JpcHRpb24gZm9yIHRyYW5zZmVyIHRoYXQgd2lsbCBiZSB1c2VkIGZvciB0aGUgXCJQYXltZW50IEluc3RydWN0aW9uc1wiIGZvclxuICBXaXJlcyBhbmQgdGhlIFwiRW50cnkgRGVzY3JpcHRpb25cIiBmaWVsZCBmb3IgQWNoIHRyYW5zYWN0aW9uc1xuICBcIlwiXCJcbiAgZXh0ZXJuYWxNZW1vOiBTdHJpbmdcbiAgaWRlbXBvdGVuY3lLZXk6IFN0cmluZyFcbiAgXCJcIlwiXG4gIE5vdGlmeSB0aGUgY29udGFjdCBpZiBhbmQgd2hlbiB0aGUgdHJhbnNhY3Rpb24gbW92ZXMgdG8gdGhlIHByb2Nlc3Npbmcgc3RhdGVcbiAgRmFsc2UgYnkgZGVmYXVsdCwgaWdub3JlZCB1bmxlc3MgYSBjcmVkaXQgdG8gYSBjb250YWN0IHdpdGggYSB2YWxpZCBlbWFpbFxuICBcIlwiXCJcbiAgbm90aWZ5Q29udGFjdFByb2Nlc3Npbmc6IEJvb2xlYW5cbiAgXCJcIlwiXG4gIE9wdGlvbmFsIHNjaGVkdWxlIHRvIHJlcGVhdCB0aGUgdHJhbnNhY3Rpb24gb24uIElmIG5vdCBzZXQsIHRoZSB0cmFuc2FjdGlvbiB3aWxsIG9ubHkgYmVcbiAgIGluaXRpYXRlZCBvbmNlLlxuICBcIlwiXCJcbiAgcmVjdXJyaW5nU2NoZWR1bGU6IElucHV0Q2FzaFJlY3VycmluZ1NjaGVkdWxlXG4gIFwiXCJcIlxuICBPcHRpb25hbCB0aW1lIHRvIGluaXRpYXRlIHRoZSB0cmFuc2FjdGlvbi4gSWYgbm90IHNldCwgaW5pdGlhdGUgdGhlIHRyYW5zYWN0aW9uIGFzIHNvb25cbiAgYXMgcG9zc2libGUgKGUuZy4gYnVzaW5lc3MgZGF5KVxuICBcIlwiXCJcbiAgc2NoZWR1bGVkU2VuZEF0OiBUaW1lXG59XG5cbnR5cGUgRGVwb3NpdHNUcmFuc2FjdGlvbkNvbm5lY3Rpb24ge1xuICBlZGdlczogW0RlcG9zaXRzVHJhbnNhY3Rpb25FZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG4gIHRvdGFsQ291bnQ6IEludCFcbn1cblxudHlwZSBBcHByb3ZhbHNSZXF1ZXN0RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IEFwcHJvdmFsc1JlcXVlc3Rcbn1cblxudW5pb24gT25ib2FyZGluZ0luZm9ybWF0aW9uUmVxdWVzdENvbnRlbnQgPSBPbmJvYXJkaW5nRm9ybUJsb2NraW5nIHwgT25ib2FyZGluZ0Zvcm1FbXB0eSB8IE9uYm9hcmRpbmdGb3JtSnNvblNjaGVtYSB8IE9uYm9hcmRpbmdGb3JtUGVyaW9kaWNSZXZpZXcgfCBPbmJvYXJkaW5nRm9ybVBlcnNvbmEgfCBPbmJvYXJkaW5nRm9ybVRlcm1zIHwgT25ib2FyZGluZ0Zvcm1Vd0JhbmtDb25uZWN0aW9uIHwgT25ib2FyZGluZ0Zvcm1Vd0Vjb21tZXJjZUNvbm5lY3Rpb25cblxudHlwZSBCaWxsIGltcGxlbWVudHMgTm9kZSB7XG4gIFwiXCJcIlxuICBERVBSRUNBVEVELlxuICBVc2UgY2FzaFRyYW5zYWN0aW9uIHsgdGltZWxpbmUgeyBzY2hlZHVsZWRTZW5kQXQgfSB9IGluc3RlYWQuXG4gIFwiXCJcIlxuICBwYXltZW50U2VuZEF0OiBUaW1lXG4gIG1lcmNoYW50Q2F0ZWdvcnk6IE1lcmNoYW50Q2F0ZWdvcnlcbiAgXCJcIlwiREVQUkVDQVRFRCwgUExFQVNFIFVTRSBjYXNoVHJhbnNhY3Rpb24gSU5TVEVBRFwiXCJcIlxuICBkZXBvc2l0c1BheW1lbnQ6IERlcG9zaXRzUGF5bWVudFxuICBvcmlnaW5NZXRhZGF0YTogT3JpZ2luTWV0YWRhdGFcbiAgY3JlYXRlZEJ5VXNlcjogVXNlclxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgdHJhbnNmZXJEZXNjcmlwdGlvbjogU3RyaW5nXG4gIGRlbGV0ZWRBdDogVGltZVxuICBjcmVhdGVkQXQ6IFRpbWVcbiAgZXh0ZXJuYWxJbnZvaWNlTnVtYmVyOiBTdHJpbmdcbiAgaXNEcmFmdDogQm9vbGVhblxuICBkdWVBdDogVGltZVxuICBcIlwiXCJCb29sZWFuIHRvIGluZGljYXRlIHdoZXRoZXIgcGF5bWVudCByZWNpcGllbnQgc2hvdWxkIGJlIG5vdGlmaWVkXCJcIlwiXG4gIG5vdGlmeVJlY2lwaWVudDogQm9vbGVhblxuICBcIlwiXCJERVBSRUNBVEVELCBQTEVBU0UgVVNFIGNvbnRhY3QvcGF5bWVudEluc3RydW1lbnQgSU5TVEVBRFwiXCJcIlxuICBjb3VudGVycGFydHk6IENvdW50ZXJwYXJ0eVxuICBcIlwiXCJUb3RhbCBudW1iZXIgb2YgcGF5bWVudHMgdG8gcmVjdXJcIlwiXCJcbiAgdG90YWxOdW1iZXJPZlBheW1lbnRzOiBJbnRcbiAgaW52b2ljZTogQXNzZXRcbiAgaW52b2ljZVByb2Nlc3NpbmdTdGF0dXM6IEJpbGxJbnZvaWNlUHJvY2Vzc2luZ1N0YXR1c1xuICBcIlwiXCJSZWN1cnJpbmcgc2NoZWR1bGUgZm9yIGJpbGxzXCJcIlwiXG4gIHJlY3VycmluZ1NjaGVkdWxlOiBSZWN1cnJpbmdTY2hlZHVsZVxuICBsYXN0VXBkYXRlZEF0OiBUaW1lXG4gIHBheW1lbnRJbnN0cnVtZW50OiBQYXltZW50SW5zdHJ1bWVudFxuICBcIlwiXCJJZiBub3QgTlVMTCwgdGhlIHRyYW5zYWN0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgYmlsbC5cIlwiXCJcbiAgY2FzaFRyYW5zYWN0aW9uOiBDYXNoVHJhbnNhY3Rpb25cbiAgXCJcIlwiRGF0ZSB0byBlbmQgcmVjdXJyaW5nIHBheW1lbnRzXCJcIlwiXG4gIGVuZHNBdDogVGltZVxuICBwYXltZW50SW5pdGlhdGVkQnlVc2VyOiBVc2VyXG4gIGNoZXF1ZU1lbW86IFN0cmluZ1xuICBjb250YWN0OiBQYXltZW50Q29udGFjdFxuICBcIlwiXCJSZWN1cnJpbmcgcnVsZXMgZm9yIGJpbGxzXCJcIlwiXG4gIHJlY3VycmluZ1J1bGVzOiBSZWN1cnJpbmdSdWxlc1xuICBvcmlnaW46IEJpbGxPcmlnaW5cbiAgdXNlckVycENhdGVnb3J5OiBVc2VyQ2F0ZWdvcnlcbiAgXCJcIlwiVGhlIGRlcG9zaXRzIGFjY291bnQgdGhlIG1vbmV5IHdpbGwgYmUgcHVsbGVkIGZyb21cIlwiXCJcbiAgZGVwb3NpdHNBY2NvdW50OiBEZXBvc2l0c0FjY291bnRcbiAgZHVlQW1vdW50Q2VudHM6IEludFxuICBcIlwiXCJcbiAgRE8gTk9UIEJBVENILCBXSUxMIFJFU1VMVCBJTiBBTiBOKzEgUVVFUlkuXG4gIEV4dHJhY3RlZCBmaWVsZHMgZnJvbSBPQ1JcbiAgXCJcIlwiXG4gIGV4dHJhY3RlZEJpbGxGaWVsZHM6IEV4dHJhY3RlZEJpbGxGaWVsZHNcbiAgZGVzY3JpcHRpb246IFN0cmluZ1xufVxuXG5cIlwiXCJWaWV3IGRhdGEgZm9yIHJld2FyZHMgcGFnZSBzY2FsZVwiXCJcIlxudHlwZSBJbmNlbnRpdmVQbGFjZW1lbnRWaWV3RGF0YVJld2FyZHNQYWdlU2NhbGUge1xuICBcIlwiXCJBZGRpdGlvbmFsIHBvaW50IG11bHRpcGxpZXIgZm9yIHB1cmNoYXNlcyBhYm92ZSB0aHJlc2hvbGRcIlwiXCJcbiAgYWRkaXRpb25hbFBvaW50TXVsdGlwbGllcjogSW50IVxuICBcIlwiXCJEZXNjcmlwdGlvbiBvZiBib251cyAocG90ZW50aWFsbHkgdG8gcHV0IGluIG1vZGFsKVwiXCJcIlxuICBkZXNjcmlwdGlvbjogU3RyaW5nIVxuICBcIlwiXCJUaW1lIHdoZW4gdGhlIHVzZXIgd2FzIHBhaWQgdGhlIHBvaW50cywgbnVsbCBpZiB0aGV5IGhhdmVuJ3QgYmVlbiBwYWlkXCJcIlwiXG4gIHBheWVkT3V0QXQ6IFRpbWVcbiAgXCJcIlwiUGxhY2VtZW50XCJcIlwiXG4gIHBsYWNlbWVudDogSW5jZW50aXZlUGxhY2VtZW50IVxuICBcIlwiXCJQcm9ncmVzcyAoY2VudHMpIGkuZSAkNTAwIGluICQ1MDAvJDEwMDBcIlwiXCJcbiAgcHJvZ3Jlc3M6IEludCFcbiAgXCJcIlwiU2hvcnQgZGVzY3JpcHRpb24gKHF1aWNrIHN1bW1hcnkpXCJcIlwiXG4gIHNob3J0RGVzY3JpcHRpb246IFN0cmluZyFcbiAgXCJcIlwiU3RhdHVzXCJcIlwiXG4gIHN0YXR1czogSW5jZW50aXZlUGxhY2VtZW50Vmlld0RhdGFTdGF0dXNcbiAgXCJcIlwiVGhyZXNob2xkIChjZW50cykgaS5lICQxMDAwIGluICQ1MDAvJDEwMDBcIlwiXCJcbiAgdGhyZXNob2xkOiBJbnQhXG4gIFwiXCJcIlRpdGxlXCJcIlwiXG4gIHRpdGxlOiBTdHJpbmchXG59XG5cbmVudW0gQ2FzaFRyYW5zYWN0aW9uQ2hlcXVlUmV0dXJuUmVhc29uIHtcbiAgQ09VTlRFUkZFSVRfV0FSUkFOVFlfQlJFQUNIXG4gIEFMVEVSRURfT1JfQ09VTlRFUkZFSVRcbiAgSVRFTVNfRVhDRUVEU19TVEFURURfTUFYX1ZBTFVFXG4gIFBPU1RfREFURURcbiAgV0FSUkFOVFlfQlJFQUNIXG4gIEVYQ0VFRFNfTUFYX1BSRVNFTlRNRU5UU1xuICBJTkRFVEVSTUlOQVRFX0FNT1VOVFxuICBSRVRJUkVEX09SX0lORUxJR0lCTEVfUk9VVElOR19OVU1CRVJcbiAgQUNDT1VOVF9GUk9aRU5cbiAgRFVQTElDQVRFX1BSRVNFTlRNRU5UXG4gIEZPUkdFUllcbiAgUEFZTUVOVF9TVE9QUEVEXG4gIFJFRkVSX1RPX01BS0VSXG4gIE5PTl9DQVNIX0lURU1cbiAgVU5BQkxFX1RPX1BST0NFU1NcbiAgSU5TVUZGSUNJRU5UX0ZVTkRTXG4gIFJDQ19XQVJSQU5UWV9CUkVBQ0hcbiAgQ09SUE9SQVRFX0NVU1RPTUVSX0FEVklTRVNfTk9UX0FVVEhPUklaRURcbiAgQUNDT1VOVF9OT1RfRk9VTkRcbiAgTk9UX0FVVEhPUklaRURfUkNDXG4gIE1BTlVBTExZX0NBTkNFTExFRFxuICBSRUZFUl9UT19JTUFHRVxuICBTVEFMRV9EQVRFRFxuICBPTkVfT1JfTU9SRV9TSUdOQVRVUkVTX0lSUkVHVUxBUlxuICBVTktOT1dOXG4gIFVOVVNBQkxFX0lNQUdFXG4gIE9ORV9PUl9NT1JFX1NJR05BVFVSRVNfTUlTU0lOR1xuICBCUkFOQ0hfU09MRFxuICBFTkRPUlNFTUVOVF9NSVNTSU5HXG4gIFVOQ09MTEVDVEVEX0ZVTkRTXG4gIElOVkFMSURcbiAgRU5ET1JTRU1FTlRfSVJSRUdVTEFSXG4gIEFDQ09VTlRfQ0xPU0VEXG59XG5cbmlucHV0IElucHV0Q2FzaFJlY3VycmluZ1NjaGVkdWxlTW9udGhseUJ5RGF5IHtcbiAgY2FkZW5jZTogSW50IVxuICBkYXlPZk1vbnRoOiBJbnQhXG59XG5cbnR5cGUgQWNjb3VudEJhbGFuY2VTdW1tYXJ5IHtcbiAgZ2xvYmFsTGltaXQ6IEludFxuICByZW1haW5pbmdTcGVuZDogSW50XG4gIHVzZWRCYWxhbmNlOiBJbnRcbn1cblxudHlwZSBMb2NhdGlvbkVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBMb2NhdGlvblxufVxuXG50eXBlIENvbmZpcm1QYXltZW50RHJhZnRQYXlsb2FkIHtcbiAgcGF5bWVudDogQ2FyZFBheW1lbnRGb3J3YXJkZXJQYXltZW50T2JqZWN0IVxufVxuXG50eXBlIERpc2FibGVCaWxsc1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGludGVncmF0aW9uOiBJbnRlZ3JhdGlvblxufVxuXG50eXBlIEFkZEZzcEJvb2trZWVwZXJVc2VyUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZ3JvdXBVcm46IFN0cmluZ1xufVxuXG5pbnB1dCBTb2Z0U2lnbnVwSW5wdXQge1xuICBhdHRyaWJ1dGlvbk1ldGFkYXRhOiBBdHRyaWJ1dGlvbk1ldGFkYXRhXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZW1haWw6IEVtYWlsIVxuICBpbmZvOiBTaWdudXBJbmZvSW5wdXQhXG4gIHBhcnRuZXJSZWZUb2tlbjogU3RyaW5nXG4gIHBhc3N3b3JkOiBTdHJpbmchXG4gIHJlZGlyZWN0VXJsOiBTdHJpbmchXG59XG5cbmlucHV0IFJlc2VuZFdlbGNvbWVFbWFpbElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJVcmwgZm9yIHRoZSBidXR0b24gaW4gdGhlIGVtYWlsXCJcIlwiXG4gIHJlZGlyZWN0VXJsOiBTdHJpbmchXG4gIFwiXCJcIlVuaXF1ZSB0b2tlbiBmb3IgdGhlIGVtYWlsICh3b24ndCBzZW5kIGR1cGxpY2F0ZXMpXCJcIlwiXG4gIHVuaXF1ZVRva2VuOiBTdHJpbmchXG59XG5cbmlucHV0IFNldFJlY2VpdmFibGVzT2ZmZXJzU2VsbGVyQWNjb3VudEhhc1NlZW5GdWxsQWNjZXNzQ29uZmlybWF0aW9uQmFubmVySW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHNlbGxlckFjY291bnRJZDogSUQhXG4gIHZhbHVlOiBCb29sZWFuIVxufVxuXG5lbnVtIEluc2lnaHRzVGltZVVuaXQge1xuICBEQVlcbiAgTU9OVEhcbiAgUVVBUlRFUlxuICBXRUVLXG4gIFlFQVJcbn1cblxudHlwZSBDaGFubmVsRW1haWxPcHRpb25zIHtcbiAgZW1haWw6IEVtYWlsXG59XG5cbnR5cGUgRG9jdW1lbnRPY3JSZXN1bHQgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIHR5cGUgb2YgZG9jdW1lbnQsIGRldGVybWluZWQgYmFzZWQgb24gdGhlIE9DUiByZXN1bHQuXCJcIlwiXG4gIGNsYXNzaWZpY2F0aW9uVHlwZTogRG9jdW1lbnRPY3JDbGFzc2lmaWNhdGlvblR5cGVcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIFwiXCJcIlRoZSBpbmZvcm1hdGlvbiBleHRyYWN0ZWQgZnJvbSB0aGUgZG9jdW1lbnRcIlwiXCJcbiAgcGFyc2VkRGV0YWlsczogRG9jdW1lbnRPY3JQYXJzZWREZXRhaWxzXG59XG5cbmlucHV0IEFwcHJvdmFsc1JvdXRpbmdSdWxlSW5kaXZpZHVhbHNJbnB1dCB7XG4gIFwiXCJcIkEgbGlzdCBvZiBhbGxvd2VkIGFwcHJvdmVyIGlkc1wiXCJcIlxuICBzdGF0aWNBbGxvd2VkQXBwcm92ZXJVc2VySWRzOiBbSUQhXSFcbn1cblxuZW51bSBJbnN0cnVtZW50VHlwZSB7XG4gIFBIWVNJQ0FMXG4gIFZJUlRVQUxcbn1cblxudHlwZSBSZWNlaXZhYmxlc09mZmVyc1BheW91dENvbm5lY3Rpb24ge1xuICBlZGdlczogW1JlY2VpdmFibGVzT2ZmZXJzUGF5b3V0RWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxuICB0b3RhbENvdW50OiBJbnQhXG59XG5cbmlucHV0IENyZWF0ZUludm9pY2VJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGVwb3NpdHNBY2NvdW50SWQ6IElEXG4gIGRpc2NvdW50QW1vdW50OiBGaW5hbmNpYWxBc3NldElucHV0XG4gIGRpc2NvdW50UGVyY2VudDogRmxvYXRcbiAgZHVlRGF0ZTogRGF0ZVxuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nIVxuICBpbnZvaWNlTnVtYmVyOiBTdHJpbmchXG4gIGludm9pY2VUZW1wbGF0ZUlkOiBJRCFcbiAgaW52b2ljaW5nQWNjb3VudElkOiBJRFxuICBsaW5lSXRlbXM6IFtJbnZvaWNlTGluZUl0ZW1JbnB1dF1cbiAgbWVtbzogU3RyaW5nXG4gIHBheWVyQ29udGFjdElkOiBJRFxuICBzdWJ0b3RhbDogRmluYW5jaWFsQXNzZXRJbnB1dFxuICB0b3RhbEFtb3VudDogRmluYW5jaWFsQXNzZXRJbnB1dFxufVxuXG50eXBlIENhc2hUcmFuc2FjdGlvbkNvbm5lY3Rpb24ge1xuICBlZGdlczogW0Nhc2hUcmFuc2FjdGlvbkVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgdG90YWxDb3VudDogSW50IVxufVxuXG50eXBlIENhc2hUcmFuc2FjdGlvbkVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBDYXNoVHJhbnNhY3Rpb25cbn1cblxuZW51bSBSZXdhcmRzVG9wQ2F0ZWdvcnlOb3RFbmFibGVkUmVhc29uIHtcbiAgQVVUT1BBWV9OT1RfU0VUXG4gIElOVkFMSURcbiAgTk9UX0VMSUdJQkxFXG4gIFBBWU1FTlRTX0RPX05PVF9RVUFMSUZZXG59XG5cbnR5cGUgUmVjZWl2YWJsZXNPZmZlcnNSZXBheW1lbnREZXRhaWxzIHtcbiAgcmVzb3VyY2VJZDogU3RyaW5nXG59XG5cbnR5cGUgRGlzY29ubmVjdENyZWRlbnRpYWxQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBjcmVkZW50aWFsOiBDcmVkZW50aWFsXG59XG5cbmVudW0gUmV3YXJkc1JlZGVtcHRpb25DbGFzc1R5cGUge1xuICBBU0NFTkRBX1RSQU5TRkVSXG4gIENBU0hfQkFMQU5DRVxuICBJTlNUQU5UX1BBWU9VVFNfRkVFXG4gIElTU1VFUl9UUkFOU0FDVElPTlxuICBSRUZVTkRfVFJBTlNBQ1RJT05cbn1cblxudHlwZSBDYXNoQmFsYW5jZVBheWxvYWQge1xuICBjZW50c1BlclBvaW50OiBGbG9hdCFcbn1cblxuaW5wdXQgU2V0UHJpbWFyeUZ1bmRpbmdTb3VyY2VJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZnVuZGluZ1NvdXJjZUlkOiBJRCFcbn1cblxudHlwZSBPbmJvYXJkaW5nRm9ybUpzb25TY2hlbWEge1xuICBqc29uU2NoZW1hOiBKc29uIVxuICBcIlwiXCJNZXRhZGF0YSB0byBzdXBwbGVtZW50IHRoZSBmb3JtIHNjaGVtYVwiXCJcIlxuICBtZXRhZGF0YTogSnNvblxuICB1aVNjaGVtYTogSnNvblxufVxuXG50eXBlIFN0YXRlbWVudEVudHJ5TGVuc0VkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBTdGF0ZW1lbnRFbnRyeUxlbnNcbn1cblxuZW51bSBQYXlyb2xsUHJvdmlkZXJUeXBlIHtcbiAgQURQXG4gIEJBTUJPT19IUlxuICBHVVNUT1xuICBJTlZBTElEXG4gIEpVU1RXT1JLU1xuICBQQVlDSEVYXG4gIFBBWUxPQ0lUWVxuICBRVUlDS0JPT0tTXG4gIFJJUFBMSU5HXG4gIFRSSU5FVFxuICBaRU5FRklUU1xufVxuXG50eXBlIENyZWF0ZVJlaW1idXJzZW1lbnRSZXBvcnRQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICByZXBvcnQ6IFJlcG9ydCFcbn1cblxuXCJcIlwiSW5jZW50aXZlIHBsYWNlbWVudC4gVXNlZCBvbmx5IGZvciBJRCB0cmFuc2xhdGlvbiByaWdodCBub3cuXCJcIlwiXG50eXBlIEluY2VudGl2ZVBsYWNlbWVudCBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbn1cblxudHlwZSBQYXlyb2xsUHJvdmlkZXIge1xuICBuYW1lOiBTdHJpbmdcbiAgcGF5cm9sbEluZm86IFBheXJvbGxJbmZvXG4gIHNvdXJjZTogUGF5cm9sbFNvdXJjZVxuICBzdGF0dXM6IFBheXJvbGxTdGF0dXNcbn1cblxuZW51bSBEZXBvc2l0c1BheW1lbnRTdGF0dXMge1xuICBBRE1JTl9BUFBST1ZBTF9SRVFVSVJFRFxuICBBUFBST1ZBTF9SRVFVSVJFRFxuICBDQU5DRUxMRURcbiAgUEFZUk9MTF9FU1RJTUFURVxuICBQUk9DRVNTRURcbiAgUFJPQ0VTU0lOR1xuICBTQ0hFRFVMRURcbiAgVU5JTklUSUFURURcbn1cblxudHlwZSBGcmF1ZEFsZXJ0Q29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbRnJhdWRBbGVydEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBEZXBvc2l0c1BheW1lbnQgaW1wbGVtZW50cyBOb2RlIHtcbiAgcGF5bWVudEFwcHJvdmFsUGF5bWVudENvbnRleHQocGF5bWVudElkOiBJRCk6IFBheW1lbnRBcHByb3ZhbFBheW1lbnRDb250ZXh0XG4gIGFtb3VudDogSW50IVxuICBcIlwiXCJUaGUgcmF3IHRyYW5zYWN0aW9uX2lkIChub3QgZW5jb2RlZCkuXCJcIlwiXG4gIHRyYW5zYWN0aW9uSWQ6IElEXG4gIHBlbmRpbmdSZWNvcmRBcHByb3ZhbChwYXltZW50SWQ6IElEKTogUGVuZGluZ1JlY29yZEFwcHJvdmFsXG4gIGVuZHNPbjogRGF0ZVxuICBiaWxsOiBCaWxsXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBwYXltZW50QXBwcm92YWwocGF5bWVudElkOiBJRCk6IFBheW1lbnRBcHByb3ZhbFxuICBhc3NvY2lhdGlvbklkczogW1N0cmluZ11cbiAgY3JlYXRlZE9uOiBEYXRlIVxuICBjcmVhdGVkQXQ6IFRpbWUhXG4gIG1lbW86IFN0cmluZ1xuICBzZW5kQXQ6IFRpbWVcbiAgY2FuY2VsbGVkQXQ6IFRpbWVcbiAgc3RhdHVzOiBEZXBvc2l0c1BheW1lbnRTdGF0dXMhXG4gIGNhbmNlbGxhdGlvbkluaXRpYXRlZEJ5VXNlcjogVXNlclxuICBjb25zdW1lclNldHRpbmdzOiBEZXBvc2l0c1RyYW5zYWN0aW9uQ29uc3VtZXJTZXR0aW5nc1xuICBjb3VudGVycGFydHlOYW1lOiBTdHJpbmchXG4gIHRvdGFsTnVtYmVyT2ZQYXltZW50czogSW50XG4gIFwiXCJcIkVuY29kZWQgc291cmNlIGRlcG9zaXRzIGFjY291bnQgSURcIlwiXCJcbiAgZGVwb3NpdHNBY2NvdW50SWQ6IElEIVxuICBkZXBvc2l0c1RyYWNlSWQ6IFN0cmluZ1xuICBzZW5kT246IERhdGVcbiAgcmVjdXJyaW5nU2NoZWR1bGU6IFJlY3VycmluZ1NjaGVkdWxlXG4gIGV4dGVybmFsTWVtbzogU3RyaW5nXG4gIGVuZHNBdDogVGltZVxuICBjb250YWN0OiBQYXltZW50Q29udGFjdFxuICB0eXBlOiBQYXltZW50UmFpbCFcbiAgcHJvY2Vzc2luZ0FuZEZ1dHVyZVBheW1lbnRzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBEZXBvc2l0c1Byb2Nlc3NpbmdBbmRGdXR1cmVQYXltZW50RGF0ZUNvbm5lY3Rpb25cbiAgcmVjdXJyaW5nUnVsZXM6IFJlY3VycmluZ1J1bGVzXG4gIFwiXCJcIlNvdXJjZSBkZXBvc2l0cyBhY2NvdW50XCJcIlwiXG4gIGRlcG9zaXRzQWNjb3VudDogRGVwb3NpdHNBY2NvdW50XG4gIHN0YXR1c1JlYXNvbjogU3RhdHVzUmVhc29uXG4gIFwiXCJcIkVuY29kZWQgQ2FzaFRyYW5zYWN0aW9uIElEXCJcIlwiXG4gIGNhc2hUcmFuc2FjdGlvbklkOiBJRCFcbiAgZGV0YWlsczogRGVwb3NpdHNQYXltZW50RGV0YWlscyFcbiAgaXNDYW5jZWxsYWJsZTogQm9vbGVhbiFcbn1cblxudHlwZSBGaW5hbmNpYWxTdGF0ZW1lbnRBY2NvdW50Q29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbRmluYW5jaWFsU3RhdGVtZW50QWNjb3VudEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxuZW51bSBGaW5hbmNpYWxJbmZvcm1hdGlvblJlcXVlc3RTdGF0dXMge1xuICBQRU5ESU5HXG4gIFNVQk1JVFRFRFxufVxuXG5cIlwiXCJUaGUgc2VsbGVyIGFjY291bnQgc2V0dGluZ3MgZm9yIGEgcmVjZWl2YWJsZXNfb2ZmZXJzIHNlbGxlciBhY2NvdW50LiBUaGVzZSBzZXR0aW5ncyBhcmUgbmlsIGlmIHRoZSBjdXN0b21lciBoYXNuJ3Qgc2V0IHRoZW0geWV0XCJcIlwiXG50eXBlIFJlY2VpdmFibGVzT2ZmZXJzU2VsbGVyQWNjb3VudFNldHRpbmdzIHtcbiAgXCJcIlwiV2hldGhlciB0aGUgY3VzdG9tZXIgaW5kaWNhdGVkIHRoYXQgdGhleSByb3V0ZWQgdGhlaXIgcGF5b3V0cyB0byBCcmV4IChudWxsIGlmIG5vdCBzZXQpXCJcIlwiXG4gIGNvbmZpcm1lZFBheW91dHNSb3V0ZWRUb0JyZXg6IEJvb2xlYW5cbiAgXCJcIlwiV2hldGhlciB0aGUgY3VzdG9tZXIgaGFzIHNlZW4gdGhlIGZhaWxpbmcgY2hlY2tzIGVycm9yIGJhbm5lciBvbiB0aGUgZnJvbnRlbmQgKG51bGwgaWYgbm90IHNldClcIlwiXCJcbiAgaGFzU2VlbkZhaWxpbmdDaGVja3NFcnJvckJhbm5lcjogQm9vbGVhblxuICBcIlwiXCJXaGV0aGVyIHRoZSBjdXN0b21lciBoYXMgc2VlbiB0aGUgY29uZmlybWF0aW9uIGJhbm5lciBmb3IgRnVsbCBBY2Nlc3Mgb24gdGhlIGZyb250ZW5kIChudWxsIGlmIG5vdCBzZXQpXCJcIlwiXG4gIGhhc1NlZW5GdWxsQWNjZXNzQ29uZmlybWF0aW9uQmFubmVyOiBCb29sZWFuXG4gIFwiXCJcIldoZXRoZXIgdGhlIGN1c3RvbWVyIGhhcyBzZWVuIHRoZSBjb25maXJtYXRpb24gYmFubmVyIGZvciBUcmlhbCBBY2Nlc3Mgb24gdGhlIGZyb250ZW5kIChudWxsIGlmIG5vdCBzZXQpXCJcIlwiXG4gIGhhc1NlZW5UcmlhbEFjY2Vzc0NvbmZpcm1hdGlvbkJhbm5lcjogQm9vbGVhblxufVxuXG5pbnB1dCBGYWtlTXV0YXRpb25Eb05vdFVzZUlucHV0IHtcbiAgY2FzaEludGVuc2l2ZU1heENhc2hIYW5kbGVkOiBDYXNoSW50ZW5zaXZlTWF4Q2FzaEhhbmRsZWRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBmaU5iZmlSZWdpc3RyYXRpb25TdGF0dXM6IEZpTmJmaVJlZ2lzdHJhdGlvblN0YXR1c1xufVxuXG50eXBlIERlcG9zaXRzVHJhbnNhY3Rpb25FZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogRGVwb3NpdHNUcmFuc2FjdGlvblxufVxuXG51bmlvbiBFZHVjYXRpb25UaWxlID0gQ3JlZGl0TGltaXRFZHVjYXRpb25UaWxlXG5cbnR5cGUgU2VtaVdlZWtseUNsb3NpbmdTdHJhdGVneSB7XG4gIGZpcnN0RGF5OiBJbnRcbiAgc2Vjb25kRGF5OiBJbnRcbn1cblxudHlwZSBDcmVhdGVUcmFuc2FjdGlvbkFwcHJvdmVkU3Vic2NyaXB0aW9uUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgbm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uOiBOb3RpZmljYXRpb25TdWJzY3JpcHRpb25cbn1cblxuXCJcIlwiVGhlIHZhbHVlIHR5cGUgd2hlbiBtdXRlX2NvbHVtbiBpcyBzZXQgdG8gbWVyY2hhbnRfaWRcIlwiXCJcbnR5cGUgTXV0ZVZhbHVlTWVyY2hhbnQge1xuICBcIlwiXCJUaGUgbWVyY2hhbnQgdGhhdCBpcyBiZWluZyBtdXRlZCBmb3IgdGhpcyBtdXRpbmcgcG9saWN5XCJcIlwiXG4gIG1lcmNoYW50OiBNZXJjaGFudFxufVxuXG51bmlvbiBBY2NvdW50Q2F0ZWdvcmllcyA9IEV4cGVuc2lmeUNhdGVnb3JpZXMgfCBJbnRhY2N0Q2F0ZWdvcmllcyB8IE5ldHN1aXRlQ2F0ZWdvcmllcyB8IFFiZENhdGVnb3JpZXMgfCBRdWlja2Jvb2tzQ2F0ZWdvcmllcyB8IFhlcm9DYXRlZ29yaWVzXG5cbnR5cGUgQ29ubmVjdFBsYWlkSW5zdGl0dXRpb25QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICByZXN1bHQ6IEZpbmFuY2lhbFNvdXJjZSFcbn1cblxuZW51bSBDYXNoVHJhbnNhY3Rpb25PcmRlckZpZWxkIHtcbiAgRkFJTEVEX0FUXG4gIElOSVRJQVRFRF9BVFxuICBQUk9DRVNTRURfQVRcbiAgU0NIRURVTEVEX1NFTkRfQVRcbn1cblxudHlwZSBJbnRlcm5hdGlvbmFsV2lyZVBheW1lbnRJbnN0cnVtZW50IHtcbiAgYWRkcmVzczogQWRkcmVzc1xuICBiZW5lZmljaWFyeUJhbmtBZGRyZXNzOiBBZGRyZXNzXG4gIGJlbmVmaWNpYXJ5QmFua0luZm86IEpzb25cbiAgYmVuZWZpY2lhcnlCYW5rTmFtZTogU3RyaW5nXG4gIGliYW46IFN0cmluZ1xuICBzd2lmdENvZGU6IFN0cmluZ1xufVxuXG5pbnB1dCBTZXRTcGVuZEFsZXJ0c0NvbmZpZ3VyYXRpb25JbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgY29uZmlndXJhdGlvbkRldGFpbHM6IFNwZW5kQWxlcnRzQ29uZmlndXJhdGlvbkRldGFpbHNJbnB1dCFcbn1cblxuc2NhbGFyIEVtYWlsXG5cbnR5cGUgRGVwb3NpdHNQYXlyb2xsRXN0aW1hdGVEZXRhaWxzIHtcbiAgY291bnRlcnBhcnR5OiBDb3VudGVycGFydHkhXG4gIG9yaWdpbjogT3JpZ2luIVxuICBwYXltZW50TWV0aG9kOiBNZXRob2QhXG4gIHBheXJvbGxQZXJpb2Q6IFN0cmluZyFcbn1cblxuaW5wdXQgU3VibWl0RmluYW5jaWFsSW5mb3JtYXRpb25SZXF1ZXN0SW5wdXQge1xuICBhc3NldElkczogW0lEXSFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpbmZvcm1hdGlvblJlcXVlc3RJZDogSUQhXG59XG5cbnR5cGUgQ3JlZGl0TWFya2V0aW5nT2ZmZXJDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtDcmVkaXRNYXJrZXRpbmdPZmZlckVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxuaW5wdXQgRGlzY29ubmVjdFBheXJvbGxQcm92aWRlckludGVncmF0aW9uSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIFwiXCJcIlRoZSBpbnRlZ3JhdGlvbiB0aGUgdXNlciB3YW50cyB0byBkaXNjb25uZWN0XCJcIlwiXG4gIHBheXJvbGxQcm92aWRlckludGVncmF0aW9uSWQ6IElEIVxufVxuXG50eXBlIFVwY29taW5nRHVlQW1vdW50IHtcbiAgYW1vdW50RHVlVXNkQ2VudHM6IEludCFcbiAgZHVlQXQ6IFRpbWUhXG59XG5cbnR5cGUgUnVsZSBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgbWV0YWRhdGE6IFJ1bGVNZXRhZGF0YVxuICB0eXBlOiBTdHJpbmdcbiAgdXNlcjogVXNlclxufVxuXG50eXBlIERpc3B1dGUgaW1wbGVtZW50cyBOb2RlIEBrZXkoZmllbGRzOiBcImlkXCIpIHtcbiAgY2FyZFBvc3Nlc3Npb246IERpc3B1dGVDYXJkUG9zc2Vzc2lvblxuICBkaXNwdXRlVHJhbnNhY3Rpb25zKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBEaXNwdXRlVHJhbnNhY3Rpb25Db25uZWN0aW9uXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICByZWFzb246IFN0cmluZyFcbiAgc3RhdHVzOiBEaXNwdXRlU3RhdHVzXG4gIHR5cGU6IERpc3B1dGVUeXBlXG59XG5cbmlucHV0IENhcmRMaW1pdCB7XG4gIGFtb3VudDogSW50IVxuICBmcmVxdWVuY3k6IENhcmRMaW1pdEZyZXF1ZW5jeSFcbn1cblxudHlwZSBFbWFpbEFzc2V0IHtcbiAgYWNjcnVhbFRpbWU6IFRpbWVcbiAgYXR0YWNobWVudHM6IFtFbWFpbEFzc2V0QXR0YWNobWVudF1cbiAgYm9kaWVzOiBbRW1haWxBc3NldEJvZHldXG4gIGZvcndhcmRlZEJ5OiBTdHJpbmdcbiAgZnJvbTogU3RyaW5nXG4gIHN1YmplY3Q6IFN0cmluZ1xufVxuXG51bmlvbiBTdGF0ZW1lbnRFbnRyeU9yaWdpbmF0b3IgPSBDb2xsZWN0aW9uIHwgQ29sbGVjdGlvbkF0dGVtcHQgfCBSZXdhcmRzUmVmdW5kIHwgVHJhbnNhY3Rpb25PcGVyYXRpb25cblxudHlwZSBFdmVyeU5EYXlzQ2xvc2luZ1N0cmF0ZWd5IHtcbiAgbnVtRGF5czogSW50XG59XG5cbmVudW0gVHhUeXBlIHtcbiAgUkVUVVJOXG4gIFNUQU5EQVJEXG59XG5cbmlucHV0IEJ1bGtDcmVhdGVFeHBlbnNlc0l0ZW1FdmVudElucHV0IHtcbiAgYWN0aW9uOiBFeHBlbnNlc0l0ZW1FdmVudEFjdGlvbiFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZXNjcmlwdGlvbjogU3RyaW5nXG4gIGl0ZW1JZHM6IFtJRF1cbiAgaXRlbVN0YXR1czogRXhwZW5zZXNJdGVtU3RhdHVzXG59XG5cbnR5cGUgU2V0U3BlbmRBbGVydHNDb25maWd1cmF0aW9uUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBSZWNlaXZhYmxlc09mZmVyc1BheW1lbnRJbnRlbnRFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogUmVjZWl2YWJsZXNPZmZlcnNQYXltZW50SW50ZW50XG59XG5cblwiXCJcIlNvdXJjZSBvZiBhIFBheW1lbnQgaW50ZW50OiB3aGVyZSB3ZSBjb2xsZWN0ZWQgZnJvbVwiXCJcIlxudW5pb24gUmVjZWl2YWJsZXNPZmZlcnNQYXltZW50SW50ZW50U291cmNlID0gUmVjZWl2YWJsZXNPZmZlcnNQYXltZW50SW50ZW50U291cmNlQ29sbGVjdEZ1bmRpbmdTb3VyY2UgfCBSZWNlaXZhYmxlc09mZmVyc1BheW1lbnRJbnRlbnRTb3VyY2VEZXBvc2l0c0FjY291bnQgfCBSZWNlaXZhYmxlc09mZmVyc1BheW1lbnRJbnRlbnRTb3VyY2VEZXBvc2l0c0xvY2tlZFRyYW5zYWN0aW9uIHwgUmVjZWl2YWJsZXNPZmZlcnNQYXltZW50SW50ZW50U291cmNlUmV3YXJkc1JlZGVtcHRpb25cblxuZW51bSBSZXBvcnRGb3JtYXQge1xuICBDU1ZcbiAgSFRNTFxuICBQREZcbiAgVFhUXG4gIFhMU1hcbn1cblxuaW5wdXQgQ29tcGxldGVDYXNoVHJhbnNhY3Rpb25BcHByb3ZhbElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZWNpc2lvbjogQ2FzaFRyYW5zYWN0aW9uQXBwcm92YWxEZWNpc2lvbiFcbiAgXCJcIlwiQW55IG5vdGVzIHRoZSBhZG1pbiB3YW50cyB0byBmaWxsIGluIGEgZnJlZSBmb3JtIGZpZWxkIHdoZW4gcHJvY2Vzc2luZyBhIGRyYWZ0IHBheW1lbnQuXCJcIlwiXG4gIGRlY2lzaW9uTm90ZXM6IFN0cmluZ1xuICBkZWNpc2lvblJlYXNvbjogQ2FzaFRyYW5zYWN0aW9uQXBwcm92YWxEZWNpc2lvblJlYXNvblxuICB0cmFuc2FjdGlvbklkZW50aWZpZXI6IElucHV0VHJhbnNhY3Rpb25BcHByb3ZhbElkZW50aWZpZXJVbmlvbiFcbn1cblxudHlwZSBDYXJkUGF5bWVudEZvcndhcmRlckNvbnRhY3Qge1xuICBlbWFpbDogU3RyaW5nXG4gIGZpcnN0TmFtZTogU3RyaW5nXG4gIGxhc3ROYW1lOiBTdHJpbmdcbiAgcGhvbmVOdW1iZXI6IFN0cmluZ1xufVxuXG50eXBlIENhbmNlbEFwcHJvdmFsc1JlcXVlc3RQYXlsb2FkIHtcbiAgYXBwcm92YWxzUmVxdWVzdHM6IFtBcHByb3ZhbHNSZXF1ZXN0IV1cbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIE9uYm9hcmRpbmdQYWdlUGhvdG9JZEludHJvIHtcbiAgXzogQm9vbGVhblxuICBjb250ZW50OiBPbmJvYXJkaW5nRm9ybUpzb25TY2hlbWEhXG59XG5cbnR5cGUgUHJvZ3JhbU1lbWJlcnNoaXBDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtQcm9ncmFtTWVtYmVyc2hpcEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxuXCJcIlwiUGF5bG9hZCBmb3IgQ29kYXQgdHJhY2tpbmcgY2F0ZWdvcmllc1wiXCJcIlxudHlwZSBDb2RhdFRyYWNraW5nQ2F0ZWdvcnkge1xuICBcIlwiXCJDYXRlZ29yeSBuYW1lIGltcG9ydGVkIGZyb20gQ29kYXRcIlwiXCJcbiAgY2F0ZWdvcnlOYW1lOiBTdHJpbmdcbiAgXCJcIlwiSXMgbWFya2VkIGluYWN0aXZlIG9uIENvZGF0IHNpZGVcIlwiXCJcbiAgaXNJbmFjdGl2ZTogQm9vbGVhblxufVxuXG50eXBlIERpc2FibGVJbnRlZ3JhdGlvblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGludGVncmF0aW9uOiBJbnRlZ3JhdGlvblxufVxuXG50eXBlIFJlaW1idXJzZW1lbnRJdGVtIGltcGxlbWVudHMgTm9kZSBAa2V5KGZpZWxkczogXCJpZFwiKSB7XG4gIGFwcHJvdmFsUmVxdWVzdElkOiBJRFxuICBhcHByb3ZhbHNSZXF1ZXN0OiBBcHByb3ZhbHNSZXF1ZXN0XG4gIGN1c3RvbWVyQWNjb3VudElkOiBJRCFcbiAgY3VzdG9tZXJVc2VySWQ6IElEIVxuICBleHBlbnNlSWQ6IElEXG4gIGZ1bmRpbmdTb3VyY2U6IEZ1bmRpbmdTb3VyY2VcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIGluc2VydGVkQXQ6IFRpbWUhXG4gIG1vZGlmaWVkQnk6IFN0cmluZ1xuICBwYXltZW50SW5zdHJ1bWVudDogUGF5bWVudEluc3RydW1lbnRcbiAgcGF5bWVudEluc3RydW1lbnRWZXJzaW9uOiBJbnRcbiAgcG9zdGVkRGF0ZTogVGltZVxuICByZWltYnVyc2VtZW50TWV0YWRhdGE6IFJlaW1idXJzZW1lbnRNZXRhZGF0YSFcbiAgcmVxdWVzdGluZ1VzZXI6IFVzZXJcbiAgc3RhdGU6IFJlaW1idXJzZW1lbnRJdGVtU3RhdGUhXG4gIHVwZGF0ZWRBdDogVGltZSFcbn1cblxudHlwZSBDcmVhdGVDb250YWN0UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgY29udGFjdDogUGF5bWVudENvbnRhY3QhXG59XG5cbnR5cGUgU2V0UmVjZWl2YWJsZXNPZmZlcnNTZWxsZXJBY2NvdW50SGFzU2VlbkZ1bGxBY2Nlc3NDb25maXJtYXRpb25CYW5uZXJQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBzZWxsZXJBY2NvdW50OiBSZWNlaXZhYmxlc09mZmVyc1NlbGxlckFjY291bnRcbn1cblxudHlwZSBEZWxldGVEZXBhcnRtZW50UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBEZXZpY2VJbmZvcm1hdGlvbiB7XG4gIGFkZGl0aW9uYWxJbmZvcm1hdGlvbjogSnNvblxuICBhcHBWZXJzaW9uOiBTdHJpbmchXG4gIG1vZGVsOiBTdHJpbmchXG4gIG9zOiBTdHJpbmchXG59XG5cbmlucHV0IEFjaFJlY2VpdmluZ01ldGhvZElucHV0IHtcbiAgYWNjb3VudE51bWJlcjogU3RyaW5nXG4gIGJlbmVmaWNpYXJ5TmFtZTogU3RyaW5nXG4gIHJvdXRpbmdOdW1iZXI6IFN0cmluZ1xufVxuXG5pbnB1dCBCYXRjaENyZWF0ZUNvbnRhY3RzSW5wdXQge1xuICBcIlwiXCJUaGUgaWQgb2YgYXNzZXQgdXBsb2FkZWQgdG8gY3JlYXRlIHRoZXNlIGNvbnRhY3RzXCJcIlwiXG4gIGFzc2V0SWQ6IFN0cmluZyFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJUaGUgY29udGFjdCBpbnB1dHNcIlwiXCJcbiAgdmVuZG9yQ29udGFjdElucHV0czogW1ZlbmRvckNvbnRhY3RJbnB1dCFdIVxufVxuXG5pbnB1dCBTcGVuZEFnZ3JlZ2F0ZUZpbHRlcnMge1xuICBjYXJkSWRzOiBbU3RyaW5nXVxuICBkZXBhcnRtZW50SWRzOiBbU3RyaW5nXVxuICBmcm9tOiBUaW1lIVxuICBtZXJjaGFudENhdGVnb3J5SWRzOiBbU3RyaW5nXVxuICBtZXJjaGFudElkczogW1N0cmluZ11cbiAgdG86IFRpbWUhXG4gIHVzZXJDYXRlZ29yeUlkczogW1N0cmluZ11cbiAgdXNlcklkczogW1N0cmluZ11cbn1cblxudHlwZSBDcmVhdGVJbnRlZ3JhdGlvblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGludGVncmF0aW9uOiBJbnRlZ3JhdGlvblxufVxuXG5pbnB1dCBFcnBGZWVkSW5wdXQge1xuICBcIlwiXCJmaW5hbmNpYWxfYWNjb3VudF9pZCB0aGUgZmVlZCBpcyBmb3JcIlwiXCJcbiAgZmluYW5jaWFsQWNjb3VudElkOiBJRCFcbiAgXCJcIlwiRGF0ZSB0byBiZWdpbiB0aGUgc3luY1wiXCJcIlxuICBzeW5jRnJvbTogVGltZSFcbiAgXCJcIlwiRXJwIFZlbmRvciB0eXBlXCJcIlwiXG4gIHR5cGU6IEVycFZlbmRvclR5cGUhXG4gIFwiXCJcIlJhdyBqc29uIG9iamVjdCB3aXRoIG1ldGFkYXRhXCJcIlwiXG4gIHZlbmRvck9wdGlvbnM6IEpzb25cbn1cblxudHlwZSBNaWxlc1RyYW5zZmVyUXVvdGUge1xuICBleGNoYW5nZVJhdGU6IEludCFcbiAgcmVkZW1wdGlvbk9mZmVySWQ6IFN0cmluZyFcbn1cblxudHlwZSBDcmVhdGVPclVwZGF0ZVBheW1lbnRQYXlsb2FkIHtcbiAgcGF5bWVudDogQ2FyZFBheW1lbnRGb3J3YXJkZXJQYXltZW50T2JqZWN0IVxufVxuXG50eXBlIFBsYWlkSW5zdGl0dXRpb25NYXBwaW5nIHtcbiAgZmFsbGJhY2tJbnN0aXR1dGlvbjogRmluYW5jaWFsSW5zdGl0dXRpb24hXG4gIHBsYWlkSW5zdGl0dXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIFRyYW5zYWN0aW9uQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbVHJhbnNhY3Rpb25FZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbnR5cGUgUHJvY2Vzc0RvY3VtZW50UGF5bG9hZCB7XG4gIHN1Y2Nlc3M6IEJvb2xlYW5cbn1cblxudW5pb24gUnVsZU1ldGFkYXRhID0gR2xvYmFsTGltaXRSdWxlTWV0YWRhdGEgfCBMaW1pdFJ1bGVNZXRhZGF0YVxuXG50eXBlIE1lcmNoYW50Q2F0ZWdvcnkgaW1wbGVtZW50cyBOb2RlIEBrZXkoZmllbGRzOiBcImlkXCIpIHtcbiAgZGVzY3JpcHRpb246IFN0cmluZ1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgaXNEZWZhdWx0OiBCb29sZWFuXG4gIG5hbWU6IFN0cmluZ1xufVxuXG50eXBlIENvbm5lY3RJbnN0aXR1dGlvblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHJlc3VsdDogRmluYW5jaWFsc1NvdXJjZVJlc3VsdFxufVxuXG50eXBlIENhbmNlbENhc2hUcmFuc2FjdGlvblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHRyYW5zYWN0aW9uOiBDYXNoVHJhbnNhY3Rpb24hXG59XG5cbnVuaW9uIEpvdXJuYWxFbnRyeU9yaWdpbmF0b3IgPSBSZXdhcmRzUmVmdW5kIHwgVHJhbnNhY3Rpb25PcGVyYXRpb25cblxuaW5wdXQgQ2hlcXVlUGF5bWVudEluc3RydW1lbnRJbnB1dCB7XG4gIGFkZHJlc3M6IEFkZHJlc3NJbnB1dCFcbiAgcmVjaXBpZW50TmFtZTogU3RyaW5nIVxufVxuXG50eXBlIEV4cG9ydENvbm5lY3Rpb24ge1xuICBlZGdlczogW0V4cG9ydEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxuaW5wdXQgUmVmcmVzaEludGVncmF0aW9uSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGlkOiBJRCFcbn1cblxudHlwZSBDcmVhdGVPbmJvYXJkaW5nUHJvZHVjdEFwcGxpY2F0aW9uUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgb25ib2FyZGluZ0FwcGxpY2F0aW9uOiBPbmJvYXJkaW5nQXBwbGljYXRpb24hXG59XG5cbnR5cGUgQ3JlYXRlUGVyaW9kaWNSZXZpZXdBcHBsaWNhdGlvblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIG9uYm9hcmRpbmdBcHBsaWNhdGlvbjogT25ib2FyZGluZ0FwcGxpY2F0aW9uIVxufVxuXG50eXBlIFBlbmRpbmdSZWNvcmRBcHByb3ZhbCBpbXBsZW1lbnRzIE5vZGUge1xuICBhcHByb3ZhbFRva2VuOiBTdHJpbmchXG4gIGRlY2lkZWRCeVVzZXI6IFVzZXJcbiAgZGVjaXNpb246IFBlbmRpbmdSZWNvcmRBcHByb3ZhbERlY2lzaW9uIVxuICBkZWNpc2lvbk5vdGVzOiBTdHJpbmdcbiAgZGVjaXNpb25SZWFzb246IFBlbmRpbmdSZWNvcmRBcHByb3ZhbERlY2lzaW9uUmVhc29uXG4gIFwiXCJcIlRoZSBJRCBvZiBhbiBvYmplY3RcIlwiXCJcbiAgaWQ6IElEIVxuICBwZW5kaW5nUmVjb3JkSWQ6IElEIVxuICB1cGRhdGVkQXQ6IFRpbWVcbn1cblxudW5pb24gQ2FzaFRyYW5zYWN0aW9uRGV0YWlscyA9IENhc2hUcmFuc2FjdGlvbkFjaERldGFpbHMgfCBDYXNoVHJhbnNhY3Rpb25BY2hSZXR1cm5EZXRhaWxzIHwgQ2FzaFRyYW5zYWN0aW9uQWRtaW5CYWxhbmNlQWRqdXN0bWVudERldGFpbHMgfCBDYXNoVHJhbnNhY3Rpb25Cb29rVHJhbnNmZXJEZXRhaWxzIHwgQ2FzaFRyYW5zYWN0aW9uQnJleE9wZXJhdGlvbmFsVHJhbnNmZXJEZXRhaWxzIHwgQ2FzaFRyYW5zYWN0aW9uQ2FyZENvbGxlY3Rpb25EZXRhaWxzIHwgQ2FzaFRyYW5zYWN0aW9uRGVwb3NpdGVkQ2hlcXVlRGV0YWlscyB8IENhc2hUcmFuc2FjdGlvbkRlcG9zaXRlZENoZXF1ZVJldHVybkRldGFpbHMgfCBDYXNoVHJhbnNhY3Rpb25EaXZpZGVuZERldGFpbHMgfCBDYXNoVHJhbnNhY3Rpb25Eb21lc3RpY1dpcmVEZXRhaWxzIHwgQ2FzaFRyYW5zYWN0aW9uRG9tZXN0aWNXaXJlUmV0dXJuRGV0YWlscyB8IENhc2hUcmFuc2FjdGlvbkZib1RyYW5zZmVyRGV0YWlscyB8IENhc2hUcmFuc2FjdGlvbkludGVyZXN0RGV0YWlscyB8IENhc2hUcmFuc2FjdGlvbkludGVybmF0aW9uYWxXaXJlRGV0YWlscyB8IENhc2hUcmFuc2FjdGlvbkludGVybmF0aW9uYWxXaXJlUmV0dXJuRGV0YWlscyB8IENhc2hUcmFuc2FjdGlvbkludHJhQ3VhY2NCb29rVHJhbnNmZXJEZXRhaWxzIHwgQ2FzaFRyYW5zYWN0aW9uT3V0Z29pbmdDaGVxdWVEZXRhaWxzIHwgQ2FzaFRyYW5zYWN0aW9uT3V0Z29pbmdDaGVxdWVSZXR1cm5EZXRhaWxzIHwgQ2FzaFRyYW5zYWN0aW9uUGF5cm9sbEVzdGltYXRlRGV0YWlscyB8IENhc2hUcmFuc2FjdGlvblJlY2VpdmFibGVzT2ZmZXJzQWR2YW5jZURldGFpbHMgfCBDYXNoVHJhbnNhY3Rpb25SZWNlaXZhYmxlc09mZmVyc0NvbGxlY3Rpb25EZXRhaWxzIHwgQ2FzaFRyYW5zYWN0aW9uUmVjZWl2YWJsZXNPZmZlcnNSZXBheW1lbnREZXRhaWxzIHwgQ2FzaFRyYW5zYWN0aW9uUmV3YXJkc1JlZGVtcHRpb25EZXRhaWxzXG5cbmlucHV0IENyZWF0ZVBheW1lbnRJbnN0cnVtZW50SW5wdXQge1xuICBhY2hQYXltZW50SW5zdHJ1bWVudDogQWNoUGF5bWVudEluc3RydW1lbnRJbnB1dFxuICBcIlwiXCJQYXltZW50IGluc3RydW1lbnQncyBiZW5lZmljaWFyeSBuYW1lXCJcIlwiXG4gIGJlbmVmaWNpYXJ5TmFtZTogU3RyaW5nXG4gIGNoZXF1ZVBheW1lbnRJbnN0cnVtZW50OiBDaGVxdWVQYXltZW50SW5zdHJ1bWVudElucHV0XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgY29udGFjdElkOiBJRCFcbiAgZG9tZXN0aWNXaXJlUGF5bWVudEluc3RydW1lbnQ6IERvbWVzdGljV2lyZVBheW1lbnRJbnN0cnVtZW50SW5wdXRcbiAgaW50ZXJuYXRpb25hbFdpcmVQYXltZW50SW5zdHJ1bWVudDogSW50ZXJuYXRpb25hbFdpcmVQYXltZW50SW5zdHJ1bWVudElucHV0XG59XG5cbnR5cGUgU2V0UmVjZWl2YWJsZXNPZmZlcnNQYXlGZWVXaXRoUmV3YXJkc1BheWxvYWQge1xuICBhY2NvdW50OiBSZWNlaXZhYmxlc09mZmVyc0FjY291bnRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5pbnB1dCBCYW5rQWNjb3VudFNvdXJjZUlucHV0IHtcbiAgYWNjb3VudE5hbWU6IFN0cmluZyFcbiAgYWNjb3VudE51bWJlcjogU3RyaW5nIVxuICBhY2NvdW50VHlwZTogU3RyaW5nIVxuICByb3V0aW5nTnVtYmVyOiBTdHJpbmchXG59XG5cbnR5cGUgVHJhbnNhY3Rpb24gaW1wbGVtZW50cyBOb2RlIHtcbiAgYWNjcnVhbFRpbWU6IFRpbWVcbiAgYW1vdW50OiBUcmFuc2FjdGlvbkFtb3VudCBAZGVwcmVjYXRlZChyZWFzb246IFwiVXNlIHBlbmRpbmdfYW1vdW50IGluc3RlYWRcIilcbiAgYXV0aG9yaXphdGlvbkNvZGU6IFN0cmluZ1xuICBjYXJkOiBDYXJkXG4gIGNhcmRBY2NlcHRvcjogQ2FyZEFjY2VwdG9yXG4gIGNhdGVnb3JpemF0aW9uVHlwZTogU3RyaW5nXG4gIGNsZWFyZWRBbW91bnQ6IEludFxuICBkZXBhcnRtZW50OiBEZXBhcnRtZW50XG4gIGRpc3B1dGVUcmFuc2FjdGlvbjogRGlzcHV0ZVRyYW5zYWN0aW9uXG4gIGhhc0Rpc3B1dGU6IEJvb2xlYW5cbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIGxlbnM6IFRyYW5zYWN0aW9uTGVuc1xuICBsb2NhdGlvbjogTG9jYXRpb25cbiAgbWVtbzogU3RyaW5nXG4gIG1lcmNoYW50OiBNZXJjaGFudFxuICBvcGVyYXRpb25zKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBUcmFuc2FjdGlvbk9wZXJhdGlvbkNvbm5lY3Rpb25cbiAgcGVuZGluZ0Ftb3VudDogSW50XG4gIHB1cmNoYXNlVGltZTogVGltZVxuICByZWNlaXB0cyhhZnRlcjogU3RyaW5nLCBiZWZvcmU6IFN0cmluZywgZmlyc3Q6IEludCwgbGFzdDogSW50KTogUmVjZWlwdENvbm5lY3Rpb25cbiAgc3RhdHVzOiBTdHJpbmdcbiAgdXNlckNhdGVnb3J5OiBVc2VyQ2F0ZWdvcnlcbn1cblxuZW51bSBDYXNoVHJhbnNhY3Rpb25BY2NvdW50VHlwZSB7XG4gIENIRUNLSU5HXG4gIElOVkFMSURcbiAgU0FWSU5HU1xufVxuXG50eXBlIENoZXF1ZVBheW1lbnRJbnN0cnVtZW50IHtcbiAgYWRkcmVzczogQWRkcmVzc1xuICByZWNpcGllbnROYW1lOiBTdHJpbmdcbn1cblxuZW51bSBEZXBvc2l0c1RyYW5zYWN0aW9uVHlwZSB7XG4gIEFDSFxuICBBQ0hfUkVUVVJOXG4gIEFETUlOX0JBTEFOQ0VfQURKVVNUTUVOVFxuICBCT09LX1RSQU5TRkVSXG4gIEJSRVhfT1BFUkFUSU9OQUxfVFJBTlNGRVJcbiAgQ0FSRF9DT0xMRUNUSU9OXG4gIENIRVFVRVxuICBDSEVRVUVfUkVUVVJOXG4gIERJVklERU5EXG4gIEZCT19UUkFOU0ZFUlxuICBJTlRFUkVTVFxuICBJTlRSQV9DVVNUT01FUl9BQ0NPVU5UX0JPT0tfVFJBTlNGRVJcbiAgUkVDRUlWQUJMRVNfT0ZGRVJTX0FEVkFOQ0VcbiAgUkVDRUlWQUJMRVNfT0ZGRVJTX0NPTExFQ1RJT05cbiAgUkVDRUlWQUJMRVNfT0ZGRVJTX1JFUEFZTUVOVFxuICBSRVdBUkRTX1JFREVNUFRJT05cbiAgV0lSRVxuICBXSVJFX1JFVFVSTlxufVxuXG50eXBlIFN1Ym1pdEVhcmx5QWNjZXNzRmVhdHVyZVN1Z2dlc3Rpb25QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5pbnB1dCBVcGRhdGVDYXJkRnJhdWRBbGVydHNJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZnJhdWR1bGVudFRyYW5zYWN0aW9uSWRzOiBbSUQhXVxuICBsZWdpdGltYXRlVHJhbnNhY3Rpb25JZHM6IFtJRCFdXG59XG5cbnR5cGUgUmVjZWl2YWJsZXNPZmZlcnNPZmZlcnNHcm91cENvbm5lY3Rpb24ge1xuICBlZGdlczogW1JlY2VpdmFibGVzT2ZmZXJzT2ZmZXJzR3JvdXBFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG4gIHRvdGFsQ291bnQ6IEludCFcbn1cblxuaW5wdXQgSW5wdXRDYXNoUmVjdXJyaW5nU2NoZWR1bGVNb250aGx5QnlXZWVrIHtcbiAgY2FkZW5jZTogSW50IVxuICBkYXlPZldlZWs6IENhc2hUcmFuc2FjdGlvbkJ1c2luZXNzRGF5IVxuICB3ZWVrT2ZNb250aDogSW50IVxufVxuXG5lbnVtIEluY2x1ZGVEaXJlY3RSZXBvcnRzT3B0aW9uIHtcbiAgRElSRUNUX1JFUE9SVFNfT05MWVxuICBTRUxGX0FORF9ESVJFQ1RfUkVQT1JUU1xufVxuXG5lbnVtIE9uYm9hcmRpbmdBcHBsaWNhdGlvblN0YXR1cyB7XG4gIFwiXCJcIkFwcGxpY2F0aW9uIGFwcHJvdmVkXCJcIlwiXG4gIEFQUFJPVkVEXG4gIFwiXCJcIlVzZXIgbmVlZHMgdG8gc3VibWl0IGV2aWRlbmNlIHJlcXVlc3RzIChiZWZvcmUgYXBwbGljYXRpb24gc3VibWlzc2lvbilcIlwiXCJcbiAgSU5fUFJPR1JFU1NcbiAgXCJcIlwiVXNlciBuZWVkcyB0byBzdWJtaXQgZXZpZGVuY2UgcmVxdWVzdHMgKGFmdGVyIGFwcGxpY2F0aW9uIHN1Ym1pc3Npb24pXCJcIlwiXG4gIFBFTkRJTkdfRVZJREVOQ0VcbiAgUEVORElOR19SRVZJRVdcbiAgUFJPQ0VTU0lOR1xuICBcIlwiXCJTYW1lIGFzIHByb2Nlc3NpbmcuIFdpbGwgYmUgZGVwcmVjYXRlZC5cIlwiXCJcbiAgUFJPQ0VTU0lOR19FVklERU5DRVNcbiAgXCJcIlwiQXBwbGljYXRpb24gcmVqZWN0ZWRcIlwiXCJcbiAgUkVKRUNURURcbiAgXCJcIlwiQXBwbGljYXRpb24gc3VibWl0dGVkIGJ5IHVzZXJcIlwiXCJcbiAgU1VCTUlUVEVEXG59XG5cbmlucHV0IENhbmNlbENhc2hSZWN1cnJpbmdTY2hlZHVsZUlucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlwiXCJJRCBvZiB0aGUgcmVjdXJyaW5nIHNjaGVkdWxlXCJcIlwiXG4gIGlkOiBJRCFcbn1cblxudHlwZSBGaW5hbmNpYWxMb2dpbkZpZWxkIHtcbiAgY29udGVudFR5cGU6IEZpbmFuY2lhbExvZ2luRmllbGRDb250ZW50VHlwZVxuICBkZXNjcmlwdGlvbjogU3RyaW5nXG4gIGlkOiBTdHJpbmdcbiAgbWFza2VkOiBCb29sZWFuXG4gIG5hbWU6IFN0cmluZ1xuICBvcmRlcjogSW50XG59XG5cbmVudW0gQXBpIHtcbiAgSU5WQUxJRFxuICBPTkJPQVJESU5HXG4gIFBBWU1FTlRTXG4gIFRFQU1cbiAgVFJBTlNBQ1RJT05TXG59XG5cbnR5cGUgUmVzZW5kV2VsY29tZUVtYWlsUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBPbmJvYXJkaW5nQXBwbGljYXRpb25TdGF0ZVByb2R1Y3RWMSB7XG4gIFwiXCJcIlRoZSBzdGF0ZSBvZiB0aGUgY2FyZCBwb3J0aW9uIG9mIHRoZSBwcm9kdWN0IGFwcGxpY2F0aW9uXCJcIlwiXG4gIGNhcmQ6IE9uYm9hcmRpbmdBcHBsaWNhdGlvblN0YXRlUHJvZHVjdFYxVmFsdWVcbiAgXCJcIlwiVGhlIHN0YXRlIG9mIHRoZSBjYXNoIHBvcnRpb24gb2YgdGhlIHByb2R1Y3QgYXBwbGljYXRpb25cIlwiXCJcbiAgY2FzaDogT25ib2FyZGluZ0FwcGxpY2F0aW9uU3RhdGVQcm9kdWN0VjFWYWx1ZVxufVxuXG50eXBlIENhc2hUcmFuc2FjdGlvbkJlbmVmaWNpYXJ5QmFuayB7XG4gIGFkZHJlc3M6IEFkZHJlc3NcbiAgaW5mbzogSnNvblxuICBuYW1lOiBTdHJpbmdcbn1cblxuZW51bSBCaWxsT3JpZ2luIHtcbiAgREFTSEJPQVJEXG4gIEVNQUlMXG4gIFJFQ1VSUklOR1xufVxuXG51bmlvbiBBc3NldERhdGEgPSBFbWFpbEFzc2V0IHwgRmlsZUFzc2V0XG5cbmlucHV0IElucHV0Q2FzaFJlY3VycmluZ1NjaGVkdWxlRHVyYXRpb25VbmlvbiB7XG4gIGVuZHNBdDogVGltZVxuICB0b3RhbENvdW50OiBJbnRcbn1cblxuaW5wdXQgUmVwbGFjZUNhcmRXaXRoVmlydHVhbElucHV0IHtcbiAgY2FyZElkOiBJRCFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkaXNwbGF5TmFtZTogU3RyaW5nXG4gIGhvbGRlck5hbWU6IFN0cmluZ1xuICByZXBsYWNlbWVudERlc2NyaXB0aW9uOiBTdHJpbmdcbiAgcmVwbGFjZW1lbnRSZWFzb246IENhcmRSZXBsYWNlbWVudFJlYXNvbiFcbn1cblxuaW5wdXQgUmVwbGFjZUZ1bmRpbmdTb3VyY2VJbnB1dCB7XG4gIGJhbmtBY2NvdW50U291cmNlOiBCYW5rQWNjb3VudFNvdXJjZUlucHV0IVxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGZ1bmRpbmdTb3VyY2VJZDogU3RyaW5nIVxuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nIVxuICBub3RlczogU3RyaW5nIVxuICBwcmlvcml0eTogRnVuZGluZ1NvdXJjZVByaW9yaXR5XG4gIHJlYXNvbjogRnVuZGluZ1NvdXJjZVN0YXR1c0NoYW5nZVJlYXNvbiFcbiAgdHlwZTogU3RyaW5nIVxufVxuXG5pbnB1dCBDcmVhdGVBcHByb3ZhbHNSZXF1ZXN0SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgbW9udGhseUxpbWl0T3ZlcnJpZGVNZXRhZGF0YTogQXBwcm92YWxzUmVxdWVzdE1vbnRobHlMaW1pdE92ZXJyaWRlSW5wdXRcbiAgcHJlYXBwcm92ZWRDYXJkTWV0YWRhdGE6IEFwcHJvdmFsc1JlcXVlc3RQcmVhcHByb3ZlZENhcmRJbnB1dFxuICB0eXBlOiBBcHByb3ZhbHNSZXF1ZXN0VHlwZSFcbn1cblxudHlwZSBDcmVhdGVTdWJzY3JpcHRpb25QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBub3RpZmljYXRpb25TdWJzY3JpcHRpb246IE5vdGlmaWNhdGlvblN1YnNjcmlwdGlvblxufVxuXG50eXBlIERlbGV0ZUNvbnRhY3RQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBjb250YWN0OiBQYXltZW50Q29udGFjdCFcbn1cblxuaW5wdXQgQ3JlYXRlSW52b2ljZVRlbXBsYXRlSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGZvb3RlcjogU3RyaW5nXG4gIGhlYWRlcjogU3RyaW5nXG4gIGlkZW1wb3RlbmN5S2V5OiBTdHJpbmchXG4gIGludm9pY2VyQ29udGFjdElkOiBJRFxuICBpbnZvaWNpbmdBY2NvdW50SWQ6IElEIVxuICBsb2dvQXNzZXRJZDogSURcbiAgbm90ZTogU3RyaW5nXG4gIHNldEFzRGVmYXVsdFRlbXBsYXRlOiBCb29sZWFuXG59XG5cbnR5cGUgU3RhdGVtZW50RW50cnlFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogU3RhdGVtZW50RW50cnlcbn1cblxudHlwZSBTb2Z0U2lnbnVwUGF5bG9hZCB7XG4gIGF1dGhUeXBlOiBTb2Z0U2lnbnVwQXV0aFR5cGUhXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgc2Vzc2lvbjogU2Vzc2lvbiFcbiAgdG9rZW46IFN0cmluZyFcbiAgdXNlcjogVXNlciFcbn1cblxuaW5wdXQgVXBkYXRlQ2FzaFRyYW5zYWN0aW9uSW5wdXQge1xuICBhbW91bnRVc2RDZW50czogSW50XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgXCJcIlwiQSBjdXN0b21lciBlZGl0YWJsZSBtZW1vIGZvciB0aGUgdHJhbnNhY3Rpb24gd2hpY2ggaXMgbm90IG1lYW50IHRvIGJlIHByb2Nlc3NlZCBpbiBhbnkgd2F5IG91dHNpZGUgb2YgYSBub3RlIGZvciB0aGUgY3VzdG9tZXIgdG8gdmlld1wiXCJcIlxuICBjdXN0b21lck1lbW86IFN0cmluZ1xuICBcIlwiXCJcbiAgT3B0aW9uYWwgZGVzY3JpcHRpb24gZm9yIHRyYW5zZmVyIHRoYXQgd2lsbCBiZSB1c2VkIGZvciB0aGUgXCJQYXltZW50IEluc3RydWN0aW9uc1wiIGZvclxuICBXaXJlcyBhbmQgdGhlIFwiRW50cnkgRGVzY3JpcHRpb25cIiBmaWVsZCBmb3IgQWNoIHRyYW5zYWN0aW9uc1xuICBcIlwiXCJcbiAgZXh0ZXJuYWxNZW1vOiBTdHJpbmdcbiAgaWQ6IElEIVxuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nIVxuICBcIlwiXCJcbiAgTm90aWZ5IHRoZSBjb250YWN0IGlmIGFuZCB3aGVuIHRoZSB0cmFuc2FjdGlvbiBtb3ZlcyB0byB0aGUgcHJvY2Vzc2luZyBzdGF0ZVxuICBGYWxzZSBieSBkZWZhdWx0LCBpZ25vcmVkIHVubGVzcyBhIGNyZWRpdCB0byBhIGNvbnRhY3Qgd2l0aCBhIHZhbGlkIGVtYWlsXG4gIFwiXCJcIlxuICBub3RpZnlDb250YWN0UHJvY2Vzc2luZzogQm9vbGVhblxuICByZWN1cnJpbmdTY2hlZHVsZTogSW5wdXRDYXNoUmVjdXJyaW5nU2NoZWR1bGVcbiAgXCJcIlwiSWYgbm90IHNldCwgaW5pdGlhdGUgdGhlIHRyYW5zYWN0aW9uIGFzIHNvb24gYXMgcG9zc2libGUgKGUuZy4gYnVzaW5lc3MgZGF5KVwiXCJcIlxuICBzY2hlZHVsZWRTZW5kQXQ6IFRpbWVcbiAgdXBkYXRlVHlwZTogSW5wdXRDYXNoVHJhbnNhY3Rpb25VcGRhdGVBcmd1bWVudFVuaW9uXG59XG5cblwiXCJcIk1pbGVzIHRyYW5zZmVyIGZhaWx1cmUgcmVhc29uc1wiXCJcIlxuZW51bSBNaWxlc1RyYW5zZmVyRmFpbHVyZVJlYXNvbiB7XG4gIFwiXCJcIkEgZ2VuZXJpYyBlcnJvciBvY2N1cnJlZCBkdXJpbmcgbWlsZXMgdHJhbnNhY3Rpb25cIlwiXCJcbiAgR0VORVJJQ19FUlJPUlxuICBcIlwiXCJNZW1iZXJzaGlwIGlzIGludmFsaWRcIlwiXCJcbiAgSU5WQUxJRF9NRU1CRVJfSU5GT1JNQVRJT05fSURcbiAgXCJcIlwiTWVtYmVyc2hpcCBhY2NvdW50IGlzIGluZWxpZ2libGVcIlwiXCJcbiAgTUVNQkVSX0FDQ09VTlRfSU5FTEVHSUJMRVxuICBcIlwiXCJNZW1iZXJzaGlwIG5hbWUgZG9lcyBub3QgbWF0Y2hcIlwiXCJcbiAgTUVNQkVSX05BTUVfTk9UX01BVENISU5HXG59XG5cbnR5cGUgQ3JlZGl0TGltaXRGYWN0b3JUaWxlRWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIFwiXCJcIkNyZWRpdCBMaW1pdCBGYWN0b3IgVGlsZSBOb2RlXCJcIlwiXG4gIG5vZGU6IENyZWRpdExpbWl0RmFjdG9yVGlsZVxufVxuXG50eXBlIERpc2FibGVFeHBlbnNlc1BheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGludGVncmF0aW9uOiBJbnRlZ3JhdGlvblxufVxuXG5lbnVtIENhcmRQYXltZW50RmFpbHVyZVNldmVyaXR5IHtcbiAgRkFUQUxcbiAgTk9ORVxuICBSRUNPVkVSQUJMRVxuICBVTktOT1dOXG59XG5cbmlucHV0IFJlZnVuZFBheW1lbnRJbnB1dCB7XG4gIHBheW1lbnRJZDogSURcbn1cblxudHlwZSBQYXltZW50RGV0YWlsc1RpbGUgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIGJpbGxpbmcgcGVyaW9kLiBSZXNvbHZlZCBieSB0aGUgcHJlc2VudCBzZXJ2aWNlXCJcIlwiXG4gIGN1cnJlbnRCaWxsaW5nUGVyaW9kOiBCaWxsaW5nUGVyaW9kXG4gIFwiXCJcIlRoZSBkZWZhdWx0IGZ1bmRpbmcgc291cmNlLCB0aGlzIHdpbGwgYmUgdXNlZCBmb3IgYXV0b21hdGljIGNvbGxlY3Rpb25zIGFuZCBzY2hlZHVsZWQgY29sbGVjdGlvbnMgd2hlcmUgbm8gZnVuZGluZyBzb3VyY2UgaXMgZXhwbGljaXRseSByZXF1ZXN0ZWRcIlwiXCJcbiAgZGVmYXVsdEZ1bmRpbmdTb3VyY2U6IEZ1bmRpbmdTb3VyY2VcbiAgXCJcIlwiRXN0aW1hdGVkIG5leHQgZHVlIGFtb3VudFwiXCJcIlxuICBlc3RpbWF0ZWROZXh0RHVlQW1vdW50OiBVcGNvbWluZ0R1ZUFtb3VudFxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbn1cblxudHlwZSBTdGF0ZW1lbnRFbnRyeUNvbm5lY3Rpb24ge1xuICBlZGdlczogW1N0YXRlbWVudEVudHJ5RWRnZV1cbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxufVxuXG50eXBlIENvbXBsZXRlUGF5bWVudEFwcHJvdmFsV2l0aFRva2VuUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcGF5bWVudEFwcHJvdmFsOiBQYXltZW50QXBwcm92YWwhXG4gIHBheW1lbnRBcHByb3ZhbFJlc3VsdDogUGF5bWVudEFwcHJvdmFsUmVzdWx0IVxuICBwYXltZW50Q29udGV4dDogRGVwb3NpdHNQYXltZW50IVxufVxuXG50eXBlIENhc2hUcmFuc2FjdGlvblJlY2VpdmFibGVzT2ZmZXJzUmVwYXltZW50RGV0YWlscyB7XG4gIF86IEJvb2xlYW5cbn1cblxuaW5wdXQgSW5wdXRDYXNoVHJhbnNhY3Rpb25BY2hEZWJpdEFyZ3VtZW50cyB7XG4gIFwiXCJcIklEIG9mIGEgY29ubmVjdGVkIGV4dGVybmFsIGJhbmsgYWNjb3VudCB0byBwdWxsIGZ1bmRzIGZyb21cIlwiXCJcbiAgZmluYW5jaWFsQWNjb3VudElkOiBJRCFcbn1cblxudHlwZSBEaXNjb25uZWN0QXBpQ2xpZW50UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBDb2xsZWN0aW9uQXR0ZW1wdFBlZWtEZXRhaWxzIHtcbiAgXCJcIlwiSm91cm5hbCBFbnRyaWVzIGFwcHJveGltYXRlbHkgbGVhZGluZyB0byB0aGlzIHBheW1lbnQgYXR0ZW1wdFwiXCJcIlxuICBjYXJkVHJhbnNhY3Rpb25Kb3VybmFsRW50cmllcyhsaW1pdDogSW50ISk6IFtKb3VybmFsRW50cnldIVxuICBwZXJpb2RFbmRUaW1lOiBUaW1lIVxuICBwZXJpb2RTdGFydFRpbWU6IFRpbWVcbn1cblxuXCJcIlwiZGV0YWlscyBhYm91dCBtYW5hZ2VyIHNldHVwXCJcIlwiXG50eXBlIE1hbmFnZXJTZXR1cFN1bW1hcnkge1xuICBcIlwiXCJoYXMgbWFuYWdlcnMgc2V0dXAgZm9yIGFsbCByZWd1bGFyIHVzZXJzXCJcIlwiXG4gIGhhc0NvbXBsZXRlTWFuYWdlclNldHVwOiBCb29sZWFuXG4gIFwiXCJcImhhcyBzb21lIG1hbmFnZXJzIHNldHVwIGZvciByZWd1bGFyIHVzZXJzXCJcIlwiXG4gIGhhc1NvbWVNYW5hZ2VyczogQm9vbGVhblxufVxuXG5lbnVtIEdldFJmaUlucHV0VHlwZSB7XG4gIEFSRklfQ0FTRV9JRFxuICBBUkZJX0NBU0VfTlVNQkVSXG4gIElEXG59XG5cbmVudW0gQ291bnRyeUFscGhhMyB7XG4gIEJSQlxuICBSV0FcbiAgU0ROXG4gIEdBQlxuICBaV0VcbiAgUENOXG4gIEJSQVxuICBDVVdcbiAgQVRGXG4gIElTUlxuICBDUklcbiAgQlROXG4gIEJXQVxuICBHTUJcbiAgQ0FGXG4gIExDQVxuICBCUk5cbiAgQVJNXG4gIExLQVxuICBOTERcbiAgTUhMXG4gIENBTlxuICBWTk1cbiAgQlZUXG4gIFBSVFxuICBVUllcbiAgVUdBXG4gIEdSQ1xuICBETktcbiAgQ1BWXG4gIE1SVFxuICBNTVJcbiAgVEpLXG4gIENDS1xuICBBTkRcbiAgRlJBXG4gIFNMRVxuICBHQlJcbiAgSkVZXG4gIExCTlxuICBHR1lcbiAgTU5QXG4gIEZKSVxuICBHVU1cbiAgUExXXG4gIEtBWlxuICBNVFFcbiAgQkxNXG4gIEFCV1xuICBMQU9cbiAgR1JMXG4gIENPTFxuICBEWkFcbiAgTUtEXG4gIE5JVVxuICBTVFBcbiAgUFJJXG4gIFRPTlxuICBLSE1cbiAgVkVOXG4gIE5GS1xuICBVWkJcbiAgVFpBXG4gIEFJQVxuICBCSUhcbiAgSFJWXG4gIFZBVFxuICBETUFcbiAgVklSXG4gIExVWFxuICBKT1JcbiAgVU1JXG4gIFBFUlxuICBNTElcbiAgU0pNXG4gIFRHT1xuICBTV1pcbiAgTUNPXG4gIEhNRFxuICBJRE5cbiAgSFRJXG4gIExJRVxuICBWQ1RcbiAgQkdSXG4gIFNHUFxuICBNU1JcbiAgU0xCXG4gIEhORFxuICBHTkJcbiAgWkFGXG4gIFNSQlxuICBBVEdcbiAgTEJZXG4gIEVUSFxuICBVS1JcbiAgU1lDXG4gIE1ZVFxuICBERVVcbiAgVFdOXG4gIEdVRlxuICBWR0JcbiAgTUFSXG4gIExTT1xuICBOUExcbiAgS09SXG4gIEVTVFxuICBGUk9cbiAgSFVOXG4gIFRIQVxuICBTSE5cbiAgS05BXG4gIEJFTlxuICBTUE1cbiAgRUdZXG4gIEJFU1xuICBNTFRcbiAgTUFDXG4gIFRVTlxuICBQWUZcbiAgU1VSXG4gIEtHWlxuICBOQ0xcbiAgRlNNXG4gIFRLTFxuICBST1VcbiAgTklDXG4gIE1XSVxuICBDSEVcbiAgWk1CXG4gIElTTFxuICBJT1RcbiAgR0lOXG4gIEFSR1xuICBHSUJcbiAgSVRBXG4gIEVDVVxuICBHSEFcbiAgUEhMXG4gIFRUT1xuICBRQVRcbiAgVENEXG4gIE5SVVxuICBTWVJcbiAgSlBOXG4gIENITlxuICBLSVJcbiAgTVVTXG4gIEJGQVxuICBBVEFcbiAgQk9MXG4gIEVSSVxuICBPTU5cbiAgR05RXG4gIFRVUlxuICBMVkFcbiAgSkFNXG4gIFdTTVxuICBDT0dcbiAgR1RNXG4gIEFHT1xuICBTVktcbiAgU09NXG4gIExCUlxuICBJUkxcbiAgQ1lQXG4gIEJESVxuICBBUkVcbiAgQ1lNXG4gIFNWTlxuICBHUkRcbiAgQVpFXG4gIEJNVVxuICBBVVNcbiAgVlVUXG4gIFRDQVxuICBDT0RcbiAgTURBXG4gIFBSWVxuICBCTFpcbiAgTkVSXG4gIElNTlxuICBBRkdcbiAgQkhTXG4gIE5BTVxuICBZRU1cbiAgQ0lWXG4gIFNNUlxuICBHRU9cbiAgUE9MXG4gIFNFTlxuICBVU0FcbiAgUEFOXG4gIEdMUFxuICBTU0RcbiAgTURHXG4gIFNXRVxuICBQTkdcbiAgQ09LXG4gIEdVWVxuICBNTkVcbiAgVEtNXG4gIEtXVFxuICBNTkdcbiAgV0xGXG4gIE5PUlxuICBBTEFcbiAgS0VOXG4gIEZMS1xuICBCRUxcbiAgTFRVXG4gIElSUVxuICBUVVZcbiAgTVlTXG4gIFNYTVxuICBOR0FcbiAgQkhSXG4gIEVTUFxuICBNT1pcbiAgUEFLXG4gIFNHU1xuICBBTEJcbiAgU0xWXG4gIENaRVxuICBFU0hcbiAgQ0hMXG4gIE5aTFxuICBCR0RcbiAgTUVYXG4gIE1EVlxuICBCTFJcbiAgUFJLXG4gIEhLR1xuICBSRVVcbiAgQ01SXG4gIERKSVxuICBBVVRcbiAgSU5EXG4gIEFTTVxuICBDT01cbiAgVExTXG4gIENYUlxuICBET01cbiAgUlVTXG4gIFBTRVxuICBNQUZcbiAgQ1VCXG4gIElSTlxuICBTQVVcbiAgRklOXG59XG5cbnR5cGUgQ3JlYXRlUmVpbWJ1cnNlbWVudFBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHJlaW1idXJzZW1lbnRJdGVtOiBSZWltYnVyc2VtZW50SXRlbSFcbn1cblxuZW51bSBSZXdhcmRzVHJpZ2dlckluc3RhbmNlU3RhdHVzIHtcbiAgQUNUSVZFXG4gIEVYUElSRURcbiAgVFJJR0dFUkVEXG59XG5cbnR5cGUgRGVsZXRlTG9jYXRpb25QYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIEVtYWlsQXNzZXRBdHRhY2htZW50IHtcbiAgYXNzZXQ6IEFzc2V0XG4gIGNvbnRlbnRUeXBlOiBTdHJpbmdcbiAgc2l6ZTogSW50XG59XG5cbmlucHV0IFVwZGF0ZVVzZXJDYXRlZ29yaWVzSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHVzZXJDYXRlZ29yaWVzOiBbVXNlckNhdGVnb3J5SW5wdXRdIVxufVxuXG50eXBlIFNob3VsZFdpdGhkcmF3UG9pbnRzUmVzcG9uc2Uge1xuICBhbGxvd2VkOiBCb29sZWFuIVxufVxuXG5pbnB1dCBHZW5lcmF0ZURlcG9zaXRzVmVyaWZpY2F0aW9uTGV0dGVyRG93bmxvYWRVcmxJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZGVwb3NpdHNBY2NvdW50SWQ6IElEXG59XG5cbmVudW0gRXhwZW5zZXNSdWxlVHlwZSB7XG4gIE1BTkFHRVJfUkVWSUVXXG4gIE1FTU9cbiAgUkVDRUlQVFxuICBSRUpFQ1RJT05cbiAgU1RBTkRBUkRcbn1cblxudHlwZSBFeHRlcm5hbEludGVncmF0aW9uRW50aXR5RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IEV4dGVybmFsSW50ZWdyYXRpb25FbnRpdHlcbn1cblxuXCJcIlwiSVNPeiB0aW1lXCJcIlwiXG5zY2FsYXIgVGltZVxuXG50eXBlIENhbldpdGhkcmF3RnVuZHNSZXNwb25zZSB7XG4gIFwiXCJcIkRheXMgc2luY2UgdGhlIGxhc3QgYWNoIGRlYml0IG9yIGNoZXF1ZSBkZXBvc2l0IHNldHRsZWQgdHJhbnNhY3Rpb25cIlwiXCJcbiAgZGF5c1NpbmNlTGFzdFNldHRsZWRBZGRGdW5kc1RyYW5zYWN0aW9uOiBJbnRcbiAgZGF5c1NpbmNlTGF0ZXN0QWNoRGViaXRTZXR0bGVtZW50OiBJbnRcbiAgZW5hYmxlZDogQm9vbGVhbiFcbiAgaXNzdWVzOiBbRGVwb3NpdHNXaXRoZHJhd0Z1bmRzSXNzdWUhXSFcbn1cblxudHlwZSBDYXJkU3RhdGVtZW50Q29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbQ2FyZFN0YXRlbWVudEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgdG90YWxDb3VudDogSW50IVxufVxuXG5lbnVtIFJlaW1idXJzZW1lbnRBY3Rpb24ge1xuICBBUFBST1ZFXG4gIENBTkNFTFxuICBDT01QTEVURV9QQVlNRU5UXG4gIENSRUFURVxuICBDUkVBVEVfUEFZTUVOVFxuICBGQUlMX1BBWU1FTlRcbiAgSU5WQUxJRFxuICBSRUpFQ1RcbiAgUkVUUllfUEFZTUVOVFxuICBSRVZPS0VcbiAgU1VCTUlUXG4gIFVQREFURVxufVxuXG50eXBlIENhbmNlbFRyYW5zYWN0aW9uUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdHJhbnNhY3Rpb246IERlcG9zaXRzVHJhbnNhY3Rpb24hXG59XG5cbnR5cGUgVmVuZG9ySW5zdGl0dXRpb24ge1xuICBsb2dvQmFzZTY0OiBTdHJpbmdcbiAgbWV0YWRhdGE6IFZlbmRvckluc3RpdHV0aW9uTWV0YWRhdGFcbiAgdmVuZG9yOiBGaW5hbmNpYWxzVmVuZG9yXG59XG5cbnR5cGUgQXBwcm92YWxzUmV2aWV3QXNzaWduZWVFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogQXBwcm92YWxzUmV2aWV3QXNzaWduZWVcbn1cblxudHlwZSBSZXBvcnQge1xuICBmaWxlOiBBc3NldFxuICBmb3JtYXQ6IFJlcG9ydEZvcm1hdFxuICB0eXBlOiBSZXBvcnRUeXBlXG59XG5cbnR5cGUgU2V0UmVjZWl2YWJsZXNPZmZlcnNSZXZlbnVlQWNjZXNzRW5hYmxlZFBheWxvYWQge1xuICBhY2NvdW50OiBSZWNlaXZhYmxlc09mZmVyc0FjY291bnRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5pbnB1dCBEaXNhYmxlRXhwZW5zZXNJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgaWQ6IElEIVxufVxuXG50eXBlIE1vbnRobHlVc2VyQmFsYW5jZSB7XG4gIGFtb3VudFNwZW50OiBJbnQhXG4gIG1vbnRoOiBTdHJpbmchXG4gIHllYXI6IEludCFcbn1cblxudHlwZSBQb3NpdGl2ZVBheUFjY291bnRTZXR0aW5nIGltcGxlbWVudHMgTm9kZSB7XG4gIGFjaENvbXBhbnlJZDogU3RyaW5nIVxuICBkZWxldGVkQXQ6IFRpbWVcbiAgXCJcIlwiVGhlIElEIG9mIGFuIG9iamVjdFwiXCJcIlxuICBpZDogSUQhXG4gIG5hbWU6IFN0cmluZyFcbiAgc3RhdHVzOiBQb3NpdGl2ZVBheUFjY291bnRTZXR0aW5nU3RhdHVzIVxufVxuXG50eXBlIEZpbmljaXR5TWV0YWRhdGEge1xuICBpc09hdXRoOiBCb29sZWFuXG59XG5cbmVudW0gQ29udmVyc2lvbkluZWxpZ2liaWxpdHlSZWFzb24ge1xuICBNQU5VQUxfVU5ERVJXUklUSU5HX1JFUVVJUkVEXG59XG5cbnR5cGUgVXBkYXRlQ29udGFjdERlZmF1bHRFcnBDYXRlZ29yeVBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbmlucHV0IERpc2FibGVJbnRlZ3JhdGlvbklucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpZDogSUQhXG59XG5cbmlucHV0IENEYUlucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIENhcmRQYXltZW50Rm9yd2FyZGVyQmVuZWZpY2lhbE93bmVyIHtcbiAgZmlyc3ROYW1lOiBTdHJpbmdcbiAgbGFzdE5hbWU6IFN0cmluZ1xufVxuXG5cIlwiXCJQYXlsb2FkIGZvciBOZXRzdWl0ZSB2ZW5kb3JzXCJcIlwiXG50eXBlIE5ldHN1aXRlVmVuZG9yIHtcbiAgaXNJbmFjdGl2ZTogQm9vbGVhblxuICBuYW1lOiBTdHJpbmdcbn1cblxudHlwZSBBZG1pblVwZGF0ZUFwcHJvdmFsc1Jldmlld1BheWxvYWQge1xuICBhcHByb3ZhbHNSZXZpZXc6IEFwcHJvdmFsc1Jldmlld1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cbnR5cGUgUmVjdXJyaW5nUnVsZXNBbmRGdXR1cmVEYXRlcyB7XG4gIGZ1dHVyZVBheW1lbnRzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBEZXBvc2l0c1Byb2Nlc3NpbmdBbmRGdXR1cmVQYXltZW50RGF0ZUNvbm5lY3Rpb25cbiAgcmVjdXJyaW5nUnVsZXM6IFJlY3VycmluZ1J1bGVzXG59XG5cbnR5cGUgTWVyY2hhbnRDYXRlZ29yeUVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBNZXJjaGFudENhdGVnb3J5XG59XG5cbmlucHV0IENvbm5lY3RBbWF6b25Nd3NDcmVkZW50aWFsSW5wdXQge1xuICBhdXRoVG9rZW46IFN0cmluZyFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpZDogSUQhXG4gIHNlbGxlcklkOiBTdHJpbmchXG59XG5cbmVudW0gQ291bnRyeUFscGhhMiB7XG4gIENaXG4gIE5MXG4gIEJIXG4gIEtaXG4gIE1DXG4gIExSXG4gIEJWXG4gIFBTXG4gIFNUXG4gIEdRXG4gIFRSXG4gIEJGXG4gIEtHXG4gIEZLXG4gIElEXG4gIFVBXG4gIEVUXG4gIENBXG4gIENJXG4gIEJFXG4gIFZFXG4gIFZJXG4gIFJTXG4gIFpNXG4gIEdMXG4gIEtOXG4gIFRDXG4gIFRMXG4gIENYXG4gIFVTXG4gIFNNXG4gIFRaXG4gIE1UXG4gIEVDXG4gIE1aXG4gIE5GXG4gIFZHXG4gIEdUXG4gIEZNXG4gIEhLXG4gIEJNXG4gIElRXG4gIEtJXG4gIEhUXG4gIFJVXG4gIFRWXG4gIExZXG4gIERLXG4gIFBIXG4gIERNXG4gIEZPXG4gIEFaXG4gIFJPXG4gIEFHXG4gIFlFXG4gIExVXG4gIFZDXG4gIEtFXG4gIEtXXG4gIFpXXG4gIElMXG4gIFBFXG4gIFNOXG4gIEJKXG4gIFBGXG4gIENDXG4gIEFRXG4gIE9NXG4gIENVXG4gIEdBXG4gIFNMXG4gIERPXG4gIFBHXG4gIFVaXG4gIFBOXG4gIFNKXG4gIE5VXG4gIFRLXG4gIE5aXG4gIFNZXG4gIFpBXG4gIE5DXG4gIFROXG4gIEVIXG4gIEJBXG4gIFNLXG4gIEFTXG4gIEFYXG4gIElSXG4gIEdFXG4gIE5JXG4gIFBSXG4gIFVHXG4gIFRUXG4gIEtSXG4gIE1GXG4gIFRHXG4gIE1SXG4gIElPXG4gIE1HXG4gIEpQXG4gIFRGXG4gIEJOXG4gIE1IXG4gIEdEXG4gIE5QXG4gIEJXXG4gIEJPXG4gIEZKXG4gIFFBXG4gIENOXG4gIE5SXG4gIERaXG4gIEFVXG4gIE1OXG4gIEJaXG4gIFZOXG4gIEVFXG4gIEdQXG4gIE5FXG4gIE1PXG4gIEJRXG4gIEFGXG4gIEdGXG4gIERFXG4gIElTXG4gIFZVXG4gIENNXG4gIFRNXG4gIEFJXG4gIFBLXG4gIE1VXG4gIElNXG4gIFVNXG4gIFNHXG4gIEFEXG4gIEFPXG4gIFNIXG4gIENWXG4gIFNFXG4gIEpFXG4gIEFNXG4gIENMXG4gIEdOXG4gIENPXG4gIEtZXG4gIFNDXG4gIEdTXG4gIEdXXG4gIEtNXG4gIFNWXG4gIEZSXG4gIFJFXG4gIEFUXG4gIENGXG4gIEJZXG4gIEFXXG4gIEdSXG4gIE1RXG4gIFNYXG4gIEdIXG4gIFNCXG4gIEdHXG4gIEJCXG4gIE1QXG4gIEpPXG4gIFNPXG4gIEdZXG4gIE1MXG4gIExJXG4gIENEXG4gIEpNXG4gIE5HXG4gIE5BXG4gIExWXG4gIEhNXG4gIFRXXG4gIEhSXG4gIEdCXG4gIExBXG4gIFdGXG4gIEVHXG4gIFNaXG4gIENSXG4gIEJTXG4gIEtIXG4gIE1BXG4gIEJMXG4gIFNEXG4gIE1WXG4gIFNTXG4gIExCXG4gIFNBXG4gIFRPXG4gIFREXG4gIE1YXG4gIFNJXG4gIEdJXG4gIENZXG4gIFBUXG4gIEJUXG4gIE1LXG4gIEJHXG4gIE1NXG4gIFZBXG4gIFBMXG4gIFlUXG4gIEJJXG4gIE1ZXG4gIFRIXG4gIEJSXG4gIFBBXG4gIEhOXG4gIFRKXG4gIENLXG4gIEJEXG4gIE1EXG4gIFBNXG4gIFJXXG4gIEtQXG4gIElFXG4gIExTXG4gIExDXG4gIEdVXG4gIE5PXG4gIEFFXG4gIFBZXG4gIENHXG4gIExUXG4gIElOXG4gIEVTXG4gIERKXG4gIFNSXG4gIEdNXG4gIEhVXG4gIE1FXG4gIEFSXG4gIElUXG4gIENXXG4gIENIXG4gIFBXXG4gIEZJXG4gIExLXG4gIE1TXG4gIFdTXG4gIEFMXG4gIE1XXG4gIFVZXG4gIEVSXG59XG5cbnR5cGUgUmVwbGFjZXNSZWNvcmRDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtSZXBsYWNlc1JlY29yZEVkZ2VdXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbn1cblxudHlwZSBSZWNvbm5lY3RFcnBGZWVkUGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZXJwRmVlZDogRXJwRmVlZFxuICBlcnJvck1lc3NhZ2U6IFN0cmluZ1xuICBzdGF0dXM6IFN0cmluZ1xufVxuXG50eXBlIFVwZGF0ZUNhc2hUcmFuc2FjdGlvblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHRyYW5zYWN0aW9uOiBDYXNoVHJhbnNhY3Rpb24hXG59XG5cbnR5cGUgRGVwYXJ0bWVudCBpbXBsZW1lbnRzIE5vZGUgQGtleShmaWVsZHM6IFwiaWRcIikge1xuICBkZWxldGVkQXQ6IFRpbWVcbiAgZGVzY3JpcHRpb246IFN0cmluZ1xuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgbWVtYmVyc0NvdW50OiBJbnRcbiAgbmFtZTogU3RyaW5nXG4gIHVzZXJzKGFmdGVyOiBTdHJpbmcsIGJlZm9yZTogU3RyaW5nLCBmaXJzdDogSW50LCBsYXN0OiBJbnQpOiBVc2VyQ29ubmVjdGlvblxufVxuXG5pbnB1dCBBcHByb3ZhbHNSb3V0aW5nUnVsZUluZGl2aWR1YWxzVjJJbnB1dCB7XG4gIGluZGl2aWR1YWxUeXBlczogW0FwcHJvdmFsc1VzZXJUeXBlSW5kaXZpZHVhbElucHV0IV0hXG4gIG1hbmFnZXJUeXBlczogW0FwcHJvdmFsc1VzZXJUeXBlTWFuYWdlcklucHV0IV0hXG59XG5cbnR5cGUgQXNjZW5kYU1haW50ZW5hbmNlIHtcbiAgY3JlZGl0aW5nRGVsYXlIb3VyczogSW50XG4gIGVuYWJsZWQ6IEJvb2xlYW4hXG59XG5cbnR5cGUgU2VuZEludm9pY2VQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpbnZvaWNlOiBJbnZvaWNpbmdJbnZvaWNlXG59XG5cbmlucHV0IEFkZHJlc3NJbnB1dCB7XG4gIGFkZHJlc3MxOiBTdHJpbmchXG4gIGFkZHJlc3MyOiBTdHJpbmdcbiAgY2l0eTogU3RyaW5nIVxuICBjb3VudHJ5OiBTdHJpbmchXG4gIHN0YXRlOiBTdHJpbmchXG4gIHppcDogU3RyaW5nIVxufVxuXG5pbnB1dCBTeW5jSW50ZWdyYXRpb25JbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZW5kRGF0ZVJhbmdlOiBUaW1lXG4gIGlkOiBJRCFcbiAgaXNQcmltaXRpdmU6IEJvb2xlYW5cbiAgc3RhcnREYXRlUmFuZ2U6IFRpbWVcbiAgc3RhdGVtZW50RW50cnlUeXBlczogW1N0cmluZ11cbn1cblxudHlwZSBHZW5lcmF0ZURlcG9zaXRzVmVyaWZpY2F0aW9uTGV0dGVyRG93bmxvYWRVcmxQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBkZXBvc2l0c1ZlcmlmaWNhdGlvbkxldHRlckRvd25sb2FkVXJsOiBTdHJpbmchXG59XG5cbnR5cGUgT3B0T3V0T2ZJbmNlbnRpdmVDYW1wYWlnblBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG59XG5cblwiXCJcIlRoZSBzdW1tYXRpb24gb2YgYWxsIGFjdGl2ZSBvZmZlcnMgdGhhdCB0aGUgY3VzdG9tZXIgaGFzIGF2YWlsYWJsZSBhcyBvZiBub3dcIlwiXCJcbnR5cGUgUmVjZWl2YWJsZXNPZmZlcnNDdW11bGF0aXZlT2ZmZXIge1xuICBcIlwiXCJXaGV0aGVyIGFueSBvZiB0aGUgYWN0aXZlIG9mZmVycyBoYXMgYmVlbiBjYXBwZWRcIlwiXCJcbiAgaGFzQmVlbkNhcHBlZDogQm9vbGVhblxuICBcIlwiXCJTdW0gb2YgcHJldmlvdXNseSBhZHZhbmNlZCBhbW91bnRzIGFjcm9zcyBhbGwgYWN0aXZlIG9mZmVyc1wiXCJcIlxuICBzdW1BZHZhbmNlZEFtb3VudDogRmluYW5jaWFsQXNzZXRcbiAgXCJcIlwiU3VtIG9mIGVzdGltYXRlZCBsb2FuIHJlcGF5bWVudHMgYW1vdW50cyBhY3Jvc3MgYWxsIGFjdGl2ZSBvZmZlcnNcIlwiXCJcbiAgc3VtRXN0aW1hdGVkTG9hblJlcGF5bWVudHM6IEZpbmFuY2lhbEFzc2V0XG4gIFwiXCJcIlN1bSBvZiBlc3RpbWF0ZWQgcGF5b3V0IGFtb3VudHMgYWNyb3NzIGFsbCBhY3RpdmUgb2ZmZXJzXCJcIlwiXG4gIHN1bUVzdGltYXRlZFBheW91dDogRmluYW5jaWFsQXNzZXRcbiAgXCJcIlwiU3VtIG9mIGVzdGltYXRlZCByZXNlcnZlIGFtb3VudHMgYWNyb3NzIGFsbCBhY3RpdmUgb2ZmZXJzXCJcIlwiXG4gIHN1bUVzdGltYXRlZFJlc2VydmVBbW91bnQ6IEZpbmFuY2lhbEFzc2V0XG4gIFwiXCJcIlN1bSBvZiBvZmZlciBhbW91bnRzIGFjcm9zcyBhbGwgYWN0aXZlIG9mZmVycyBtaW51cyBhbnkgcGVuZGluZyBiYWxhbmNlIGZyb20gY2FyZCB0cmFuc2FjdGlvbnNcIlwiXCJcbiAgc3VtT2ZmZXJBbW91bnQ6IEZpbmFuY2lhbEFzc2V0XG4gIFwiXCJcIlN1bSBvZiBwYXlvdXQgbmV0IHNhbGVzIGFtb3VudHMgYWNyb3NzIGFsbCBhY3RpdmUgb2ZmZXJzXCJcIlwiXG4gIHN1bVBheW91dE5ldFNhbGVzOiBGaW5hbmNpYWxBc3NldFxuICBcIlwiXCJTdW0gb2YgcGF5b3V0IHJlc2VydmUgY3JlZGl0IGFtb3VudHMgYWNyb3NzIGFsbCBhY3RpdmUgb2ZmZXJzXCJcIlwiXG4gIHN1bVBheW91dFJlc2VydmVDcmVkaXQ6IEZpbmFuY2lhbEFzc2V0XG59XG5cbmlucHV0IFNldEFwcHJvdmFsc1Vuc2FmZUZsYWdJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZmxhZ05hbWU6IFN0cmluZyFcbiAga2V5VHlwZTogQXBwcm92YWxzVW5zYWZlRmxhZ0tleVR5cGUhXG4gIHZhbHVlOiBTdHJpbmchXG59XG5cbmVudW0gU3BlbmRBZ2dyZWdhdGVTb3J0T3JkZXIge1xuICBBU0NcbiAgREVTQ1xuICBJTlZBTElEXG59XG5cblwiXCJcIlRoZSBldmVudCBtZXRhZGF0YSBmb3IgYSBjb21tZW50IGV2ZW50XCJcIlwiXG50eXBlIENhcmRUcmFuc2FjdGlvbnNJbnNpZ2h0Q29tbWVudEV2ZW50TWV0YWRhdGEge1xuICBcIlwiXCJUaGUgY29tbWVudCB0aGUgdXNlciBtYWRlIG9uIHRoaXMgc3BlbmQgYWxlcnRcIlwiXCJcbiAgY29tbWVudDogU3RyaW5nIVxufVxuXG5pbnB1dCBDcmVhdGVDcmVkZW50aWFsSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIHZlbmRvcjogU3RyaW5nIVxufVxuXG50eXBlIEVkaXRQYXltZW50UGF5bG9hZCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgcGF5bWVudDogRGVwb3NpdHNQYXltZW50IVxufVxuXG5pbnB1dCBTZW5kSW52b2ljZUlucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nIVxuICBpbnZvaWNlSWQ6IElEIVxufVxuXG5cIlwiXCJvYmplY3QgY29udGFpbmluZyBpbmZvcm1hdGlvbiBkZXNjcmliaW5nIHRoZSBoZWFsdGggb2YgYSBmdW5kaW5nIHNvdXJjZVwiXCJcIlxudHlwZSBGdW5kaW5nU291cmNlSGVhbHRoIHtcbiAgXCJcIlwiV2hldGhlciB0aGlzIGFjY291bnQgaGFzIGFueSAnc3VjY2Vzc2Z1bCcgb3IgJ2ZhaWxlZCcgY29sbGVjdGlvbnNcIlwiXCJcbiAgaGFzU2V0dGxlZENvbGxlY3Rpb25zOiBCb29sZWFuIVxuICBcIlwiXCJUaGUgbW9zdCByZWNlbnQgZmFpbHVyZSBzZXZlcml0eVwiXCJcIlxuICBtb3N0UmVjZW50RmFpbHVyZVNldmVyaXR5OiBDYXJkUGF5bWVudEZhaWx1cmVTZXZlcml0eVxuICBcIlwiXCJUaGUgbW9zdCByZWNlbnQgZmFpbHVyZSB0eXBlXCJcIlwiXG4gIG1vc3RSZWNlbnRGYWlsdXJlVHlwZTogQ2FyZFBheW1lbnRGYWlsdXJlVHlwZVYzXG4gIFwiXCJcIlRoZSB0aW1lc3RhbXAgb2YgdGhlIG1vc3QgcmVjZW50bHkgc2V0dGxlZCBjb2xsZWN0aW9uXCJcIlwiXG4gIG1vc3RSZWNlbnRTZXR0bGVkQXQ6IFRpbWVcbn1cblxudHlwZSBTdWdnZXN0aW9uIHtcbiAgZmllbGQ6IFN0cmluZyFcbiAgb3B0aW9uczogW1N1Z2dlc3Rpb25UeXBlXSFcbn1cblxudHlwZSBVbmRlcndyaXRpbmdBbmFseXNpc0ZsYWdDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtVbmRlcndyaXRpbmdBbmFseXNpc0ZsYWdFZGdlXVxuICBwYWdlSW5mbzogUGFnZUluZm8hXG59XG5cbnR5cGUgQ3JlYXRlQXBwcm92YWxzUmVxdWVzdFBheWxvYWQge1xuICBhcHByb3ZhbHNSZXF1ZXN0OiBBcHByb3ZhbHNSZXF1ZXN0XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxudHlwZSBDYXNoUmVjdXJyaW5nU2NoZWR1bGVEdXJhdGlvbldpdGhUb3RhbENvdW50IHtcbiAgXCJcIlwiXG4gIEtlZXAgY3JlYXRpbmcgdHJhbnNhY3Rpb25zIHVudGlsIGB0b3RhbF9jb3VudGAgdHJhbnNhY3Rpb25zIGhhdmUgYmVlbiBzY2hlZHVsZWQuXG4gIFdlIG1ha2UgdGhpcyBkaXN0aW5jdGlvbiBiZWNhdXNlIHRyYW5zYWN0aW9ucyBjYW4gYmUgY2FuY2VsbGVkIHdoaWNoIHN0aWxsIGNvdW50IHRvd2FyZHMgdGhlIGB0b3RhbF9jb3VudGAgYW1vdW50LlxuICBcIlwiXCJcbiAgdG90YWxDb3VudDogSW50IVxufVxuXG5cIlwiXCJRdWlja2Jvb2tzIGNyZWRlbnRpYWwgcGF5bG9hZFwiXCJcIlxudHlwZSBDcmVkZW50aWFsUXVpY2tib29rc1BheWxvYWQge1xuICBcIlwiXCJCb29sZWFuIGRlc2NyaWJpbmcgd2hldGhlciB0aGUgY3JlZGVudGlhbCBoYXMgdGhlIHJlcXVpcmVkIHNjb3BlcyBmb3IgZW5hYmxpbmcgYmlsbCBzeW5jXCJcIlwiXG4gIGhhc0JpbGxTeW5jU2NvcGVzOiBCb29sZWFuXG59XG5cbnR5cGUgT25ib2FyZGluZ1BhZ2VNZmEge1xuICBfOiBCb29sZWFuXG4gIGNvbnRlbnQ6IE9uYm9hcmRpbmdGb3JtRW1wdHkhXG59XG5cbnR5cGUgUmVjZWl2YWJsZXNPZmZlcnNPZmZlcnNHcm91cEVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBSZWNlaXZhYmxlc09mZmVyc09mZmVyc0dyb3VwXG59XG5cbnR5cGUgVXBkYXRlQXBwcm92YWxzUmVxdWVzdFBheWxvYWQge1xuICBhcHByb3ZhbHNSZXF1ZXN0OiBBcHByb3ZhbHNSZXF1ZXN0XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbn1cblxuZW51bSBGaW5hbmNpYWxEb2N1bWVudFN0YXR1cyB7XG4gIEFDQ0VQVEVEXG4gIERVUExJQ0FURVxuICBcIlwiXCJVcGxvYWRlZCBzdGF0ZW1lbnRzIGFyZSBkZWZhdWx0ZWQgdG8gYHByb2Nlc3NpbmdgIHN0YXR1c1wiXCJcIlxuICBQUk9DRVNTSU5HXG4gIFJFSkVDVEVEXG59XG5cbmlucHV0IFByb2Nlc3NQYWdlVmlld0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBwYWdlVmlldzogUGFnZVZpZXchXG59XG5cbnVuaW9uIEJ1bGtVc2VySW52aXRlUmVzdWx0ID0gQnVsa1VzZXJJbnZpdGVFcnJvciB8IFVzZXJcblxuaW5wdXQgU2V0UmVjZWl2YWJsZXNPZmZlcnNBdXRvQWR2YW5jZU1vZGVJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgdmFsdWU6IEJvb2xlYW4hXG59XG5cbnR5cGUgUGF5bWVudEFwcHJvdmFsUGF5bWVudENvbnRleHQge1xuICBhbW91bnQ6IEludFxuICBhc3NvY2lhdGlvbklkOiBJRFxuICBcIlwiXCJUaGUgaW5zdGl0dXRpb24ncyBsb2dvIGFzIGEgYmFzZTY0IFBORywgaWYgYXZhaWxhYmxlXCJcIlwiXG4gIGJlbmVmaWNpYXJ5QmFua0xvZ29CYXNlNjQ6IFN0cmluZ1xuICBjb3VudGVycGFydHlMb2NhdGlvbjogQWNjb3VudExvY2F0aW9uXG4gIGNvdW50ZXJwYXJ0eU5hbWU6IFN0cmluZ1xuICBsb2dpY2FsSWQ6IElEIVxuICBwYXltZW50RGVzY3JpcHRpb246IFN0cmluZ1xuICBwYXltZW50SW5pdGlhdG9yRmlyc3ROYW1lOiBTdHJpbmdcbiAgcGF5bWVudEluaXRpYXRvckxhc3ROYW1lOiBTdHJpbmdcbiAgcGF5bWVudFN0YXR1czogRGVwb3NpdHNQYXltZW50U3RhdHVzXG4gIHBheW1lbnRTdGF0dXNSZWFzb246IFN0YXR1c1JlYXNvblxuICBwYXltZW50VHlwZTogUGF5bWVudFJhaWxcbiAgXCJcIlwiUm91dGluZyBudW1iZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSByZWNpcGllbnQgKGNvdW50ZXJwYXJ0eSlcIlwiXCJcbiAgcm91dGluZ051bWJlcjogU3RyaW5nXG59XG5cbnR5cGUgT25ib2FyZGluZ1BhZ2VQZXJpb2RpY1JldmlldyB7XG4gIF86IEJvb2xlYW5cbiAgY29udGVudDogT25ib2FyZGluZ1BhZ2VQZXJpb2RpY1JldmlldyFcbn1cblxudHlwZSBUcmFuc2FjdGlvbk9wZXJhdGlvbkVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBUcmFuc2FjdGlvbk9wZXJhdGlvblxufVxuXG50eXBlIENyZWF0ZUludm9pY2VUZW1wbGF0ZVBheWxvYWQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGludm9pY2VUZW1wbGF0ZTogSW52b2ljZVRlbXBsYXRlXG59XG5cbnR5cGUgTWFya0ludm9pY2VQYXlsb2FkIHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBpbnZvaWNlOiBJbnZvaWNpbmdJbnZvaWNlXG59XG5cbnR5cGUgQWN0aXZhdGVDYXJkUGF5bG9hZCB7XG4gIGNhcmQ6IENhcmRcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG50eXBlIEN1cnJlbnRCYWxhbmNlVGlsZSBpbXBsZW1lbnRzIE5vZGUge1xuICBcIlwiXCJDdXN0b21lcidzIGdsb2JhbCBsaW1pdCBhbmQgYmFsYW5jZSBjb25zdW1wdGlvblwiXCJcIlxuICBiYWxhbmNlU3VtbWFyeTogQWNjb3VudEJhbGFuY2VTdW1tYXJ5IVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbn1cblxuaW5wdXQgVG9nZ2xlUnVsZUZvclN0YXRlbWVudEVudHJ5SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGludGVncmF0aW9uUnVsZUlkOiBJRCFcbiAgc3RhdGVtZW50RW50cnlJZDogSUQhXG59XG5cblwiXCJcIk9uZSBvZiBtYW55IHNlbGxlciBhY2NvdW50cyBhc3NvY2lhdGVkIHdpdGggYSByZWNlaXZhYmxlcyBvZmZlcnMgYWNjb3VudFwiXCJcIlxudHlwZSBSZWNlaXZhYmxlc09mZmVyc1NlbGxlckFjY291bnQgaW1wbGVtZW50cyBOb2RlIHtcbiAgXCJcIlwiVGhlIGRhdGEtaW1wb3J0ZXIgZGF0YSBwcm92aWRlciBpZFwiXCJcIlxuICBkYXRhUHJvdmlkZXJJZDogU3RyaW5nIVxuICBcIlwiXCJUaGUgbGlzdCBvZiBmYWlsaW5nIGNoZWNrcyAoZm9yIHRyaWFsL2Z1bGwgYWNjZXNzLCBvciBvbmdvaW5nIG1vbml0b3JpbmcgY2hlY2tzKVwiXCJcIlxuICBmYWlsaW5nQ2hlY2tzOiBSZWNlaXZhYmxlc09mZmVyc0FjY291bnRGYWlsaW5nQ2hlY2tzIVxuICBcIlwiXCJUaGUgSUQgb2YgYW4gb2JqZWN0XCJcIlwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiVGhlIGludGVncmF0aW9uIGNyZWRlbnRpYWwgaWRcIlwiXCJcbiAgaW50ZWdyYXRpb25DcmVkZW50aWFsSWQ6IFN0cmluZyFcbiAgXCJcIlwiVGhlIHNldHRpbmdzIGZvciB0aGUgc2VsbGVyIGFjY291bnQgKHVzZXItbW9kaWZpYWJsZSlcIlwiXCJcbiAgc2V0dGluZ3M6IFJlY2VpdmFibGVzT2ZmZXJzU2VsbGVyQWNjb3VudFNldHRpbmdzIVxuICBcIlwiXCJUaGUgc3RhdHVzIG9mIHRoZSBzZWxsZXIgYWNjb3VudFwiXCJcIlxuICBzdGF0dXM6IFJlY2VpdmFibGVzT2ZmZXJzQWNjb3VudFN0YXR1cyFcbiAgXCJcIlwiVGhlIHZlbmRvciB0eXBlIChzYWxlcyBwbGF0Zm9ybSwgaS5lLiBBbWF6b24sIFNob3BpZnksIGV0Yy4pXCJcIlwiXG4gIHZlbmRvcjogUmVjZWl2YWJsZXNPZmZlcnNWZW5kb3JUeXBlIVxufVxuXG50eXBlIFJlcGxhY2VkQnlSZWNvcmQge1xuICBjYXJkOiBDYXJkIVxuICBpbnNlcnRlZEF0OiBUaW1lIVxuICByZWFzb246IENhcmRSZXBsYWNlbWVudFJlYXNvbiFcbn1cbiIsCiAgInNlcnZpY2UiIDogImV3b2dJQ0p1WVcxbElpQTZJQ0poY0drdGRqRWlMQW9nSUNKMWNtd2lJRG9nSW1oMGRIQTZMeTloY0drdFptVmtaWEpoZEdsdmJqbzVNREF3TDNZeEwyZHlZWEJvY1d3aUxBb2dJQ0pwYzE5aFkzUnBkbVVpSURvZ2RISjFaU3dLSUNBaWRYQmtZWFJsWkY5aGRGOXpaV052Ym1SeklpQTZJRFEyTEFvZ0lDSnBibk5sY25SbFpGOWhkRjl6WldOdmJtUnpJaUE2SURNNUNuMD0iLAogICJpbnNlcnRlZF9hdF9zZWNvbmRzIiA6IDIwCn0sIHsKICAiaWQiIDogInNtX2NsMTA5d3h4aDAwMGEwZTYwM3Q0bmU4YW4iLAogICJ2ZXJzaW9uIiA6ICI2NmNlMzgzMjhiMjcwOGJmZjQ2OGNlY2RkN2U0ZDhiMGJlOWJlYzg2ZmVkNWM2OTc3NWRkYWU0ZjYzOGQ3ZGI4IiwKICAidHlwZV9kZWZzIiA6ICJcIkRpcmVjdHMgdGhlIGV4ZWN1dG9yIHRvIGluY2x1ZGUgdGhpcyBmaWVsZCBvciBmcmFnbWVudCBvbmx5IHdoZW4gdGhlIGBpZmAgYXJndW1lbnQgaXMgdHJ1ZVwiXG5kaXJlY3RpdmUgQGluY2x1ZGUoXG4gICAgXCJJbmNsdWRlZCB3aGVuIHRydWUuXCJcbiAgICBpZjogQm9vbGVhbiFcbiAgKSBvbiBGSUVMRCB8IEZSQUdNRU5UX1NQUkVBRCB8IElOTElORV9GUkFHTUVOVFxuXG5cIkRpcmVjdHMgdGhlIGV4ZWN1dG9yIHRvIHNraXAgdGhpcyBmaWVsZCBvciBmcmFnbWVudCB3aGVuIHRoZSBgaWZgJ2FyZ3VtZW50IGlzIHRydWUuXCJcbmRpcmVjdGl2ZSBAc2tpcChcbiAgICBcIlNraXBwZWQgd2hlbiB0cnVlLlwiXG4gICAgaWY6IEJvb2xlYW4hXG4gICkgb24gRklFTEQgfCBGUkFHTUVOVF9TUFJFQUQgfCBJTkxJTkVfRlJBR01FTlRcblxuZGlyZWN0aXZlIEBleHRlbmRzIG9uIE9CSkVDVCB8IElOVEVSRkFDRVxuXG5kaXJlY3RpdmUgQGV4dGVybmFsIG9uIEZJRUxEX0RFRklOSVRJT05cblxuZGlyZWN0aXZlIEBrZXkoZmllbGRzOiBfRmllbGRTZXQhKSByZXBlYXRhYmxlIG9uIE9CSkVDVCB8IElOVEVSRkFDRVxuXG5kaXJlY3RpdmUgQHByb3ZpZGVzKGZpZWxkczogX0ZpZWxkU2V0ISkgb24gRklFTERfREVGSU5JVElPTlxuXG5kaXJlY3RpdmUgQHJlcXVpcmVzKGZpZWxkczogX0ZpZWxkU2V0ISkgb24gRklFTERfREVGSU5JVElPTlxuXG5cIk1hcmtzIHRoZSBmaWVsZCwgYXJndW1lbnQsIGlucHV0IGZpZWxkIG9yIGVudW0gdmFsdWUgYXMgZGVwcmVjYXRlZFwiXG5kaXJlY3RpdmUgQGRlcHJlY2F0ZWQoXG4gICAgXCJUaGUgcmVhc29uIGZvciB0aGUgZGVwcmVjYXRpb25cIlxuICAgIHJlYXNvbjogU3RyaW5nID0gXCJObyBsb25nZXIgc3VwcG9ydGVkXCJcbiAgKSBvbiBGSUVMRF9ERUZJTklUSU9OIHwgQVJHVU1FTlRfREVGSU5JVElPTiB8IEVOVU1fVkFMVUUgfCBJTlBVVF9GSUVMRF9ERUZJTklUSU9OXG5cblwiRXhwb3NlcyBhIFVSTCB0aGF0IHNwZWNpZmllcyB0aGUgYmVoYXZpb3VyIG9mIHRoaXMgc2NhbGFyLlwiXG5kaXJlY3RpdmUgQHNwZWNpZmllZEJ5KFxuICAgIFwiVGhlIFVSTCB0aGF0IHNwZWNpZmllcyB0aGUgYmVoYXZpb3VyIG9mIHRoaXMgc2NhbGFyLlwiXG4gICAgdXJsOiBTdHJpbmchXG4gICkgb24gU0NBTEFSXG5cblwiXCJcIlxuVGhlIGludGVyZmFjZSBmb3IgcGFnaW5hdGluZyB0aHJvdWdoIGNvbGxlY3Rpb25zIG9mIGVsZW1lbnRzLlxuRXZlcnkgY29sbGVjdGlvbiBvZiBlbnRpdGllcyBub3QgcmV0dXJuZWQgYnkgYSBtdXRhdGlvbiByZXN1bHQgc2hvdWxkXG5wYWdpbmF0ZSB0aHJvdWdoIGEgY29ubmVjdGlvbi4gVGhhdCBpcywgYHR5cGVzYCB3aXRoIGEgZmllbGQgdGhhdCBpc1xuYW4gYGFycmF5YCBzaG91bGQgYmUgZXhjZWVkaW5nbHkgcmFyZS5cbldlIHdhbnQgYWxsIGNvbGxlY3Rpb25zIG9mIHRoaW5ncyB0byBiZSBwYWdpbmF0ZWQuXG5cIlwiXCJcbmludGVyZmFjZSBDb25uZWN0aW9uIHtcbiAgXCJQYWdlIGluZm9ybWF0aW9uIGZvciBhZGRpdGlvbmFsIG5hdmlnYXRpb24gdGhyb3VnaCB0aGlzIGNvbm5lY3Rpb24uXCJcbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxuICBcIlwiXCJcbiAgVGhlIHRvdGFsIGNvdW50IG9mIGl0ZW1zIG1hdGNoaW5nIHRoZSBmaWx0ZXIgY3JpdGVyaWEgc3BlY2lmaWVkIGZvciB0aGlzIGNvbm5lY3Rpb24uXG4gIFRoaXMgdmFsdWUgbWF5IGJlIGFwcHJveGltYXRlLiBBbmQgdGhpcyB2YWx1ZSBtYXkgbm90IGJlIHByb3ZpZGVkIGF0IGFsbC4gTm90IGFsbCBjb25uZWN0aW9uc1xuICBjYW4gYmUgY291bnRlZCBlYXNpbHkuXG4gIFwiXCJcIlxuICB0b3RhbENvdW50OiBJbnRcbn1cblxuXCJBIHNpbmdsZSBub2RlIGluIGEgcG9saWN5IGdyYXBoLiBUaGlzIGludGVyZmFjZSBpcyBpbXBsZW1lbnRlZCBieSBydWxlcywgcnVsZSBncm91cHMuXCJcbmludGVyZmFjZSBQb2xpY3lOb2RlIHtcbiAgXCJcIlwiXG4gIFRoZSBjaGlsZCBub2RlcyBvZiB0aGlzIHJ1bGUgKCBtYXkgYmUgcnVsZXMgb3IgbW9yZSBncm91cHMpXG4gIElEcyBhcmUgdXNlZCBzbyB0aGF0IGNsaWVudHMgZG9uJ3QgaGF2ZSB0byBtYWtlIHJlY3Vyc2l2ZSBxdWVyaWVzLlxuICBcIlwiXCJcbiAgY2hpbGRJZHM6IFtJRCFdXG4gIFwiVGhlIHVuaXF1ZSBJRCBvZiB0aGUgbm9kZSBpbiB0aGlzIHBvbGljeSBkb2N1bWVudFwiXG4gIG5vZGVJZDogSUQhXG59XG5cbnVuaW9uIFBvbGljeVJlYXNvbiA9IFBvbGljeURvY3VtZW50XG5cblwiQWxsIHBvc3NpYmxlIGZvcm1zIG9mIG1ldGFkYXRhLWJhc2VkIHJ1bGUtZGVmaW5pdGlvblwiXG51bmlvbiBQb2xpY3lSdWxlRGVmaW5pdGlvbiA9IFBvbGljeUN1c3RvbVJ1bGVEZWZpbml0aW9uIHwgUG9saWN5UGVyRGllbVJ1bGVEZWZpbml0aW9uIHwgUG9saWN5UmVpbWJ1cnNlbWVudFJ1bGVEZWZpbml0aW9uIHwgUG9saWN5U3RhbmRhcmRSdWxlRGVmaW5pdGlvbiB8IFBvbGljeVZlbmRvcnNGb3JDYXRlZ29yeVJ1bGVEZWZpbml0aW9uXG5cblwiUG9saWN5UnVsZUdyb3VwcyBlaXRoZXIgaGF2ZSBhIHByZWRlZmluZWQgdHlwZSwgb3IgYSBjdXN0b20gbmFtZVwiXG51bmlvbiBQb2xpY3lSdWxlR3JvdXBEZXNjcmlwdGlvbiA9IEN1c3RvbVJ1bGVHcm91cCB8IFBvbGljeVByZWRlZmluZWRSdWxlR3JvdXBcblxudW5pb24gX0VudGl0eSA9IFBvbGljeSB8IFJlcXVlc3RBY3Rpb25cblxuXCJBIHJ1bGUgZ3JvdXAgd2l0aCBhIGNvbmZpZ3VyZWQgbmFtZS4gVGhpcyBjYW4gYmUgdXNlZCBmb3IgY3VzdG9tIGNhdGVnb3JpZXMsIGFuZCBmb3Igc3ViY2F0ZWdvcmllcy5cIlxudHlwZSBDdXN0b21SdWxlR3JvdXAge1xuICBuYW1lOiBTdHJpbmdcbn1cblxuXCJGaW5hbmNpYWwgQXNzZXQgd3JhcHBlclwiXG50eXBlIEZpbmFuY2lhbEFzc2V0IHtcbiAgXCJUaGUgaW5zdHJ1bWVudCBjb2RlICh1c2QsIGV0Yy4pLiBDdXJyZW50bHksIG9ubHkgdXNkIGlzIHN1cHBvcnRlZC5cIlxuICBpbnN0cnVtZW50Q29kZTogRmluYW5jaWFsSW5zdHJ1bWVudENvZGUhXG4gIFwiVGhlIGFtb3VudCBpbiBjZW50c1wiXG4gIHF1YW50aXR5Q2VudHM6IEludCFcbn1cblxuXCJNdXRhdGlvbnNcIlxudHlwZSBNdXRhdGlvbiB7XG4gIGNyZWF0ZU9yVXBkYXRlRXhwZW5zZVBvbGljeShpbnB1dDogQ3JlYXRlT3JVcGRhdGVFeHBlbnNlUG9saWN5SW5wdXQhKTogUG9saWN5IVxuICBkaXNhYmxlUG9saWN5KGlkOiBJRCEpOiBQb2xpY3khXG4gIGVuYWJsZVBvbGljeShpZDogSUQhKTogUG9saWN5IVxufVxuXG50eXBlIFBhZ2VJbmZvIHtcbiAgXCJXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuXCJcbiAgZW5kQ3Vyc29yOiBTdHJpbmdcbiAgXCJXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zP1wiXG4gIGhhc05leHRQYWdlOiBCb29sZWFuIVxuICBcIldoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zP1wiXG4gIGhhc1ByZXZpb3VzUGFnZTogQm9vbGVhbiFcbiAgXCJXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLlwiXG4gIHN0YXJ0Q3Vyc29yOiBTdHJpbmdcbn1cblxuXCJUb3AgbGV2ZWwgUG9saWN5XCJcbnR5cGUgUG9saWN5IEBrZXkoZmllbGRzIDogXCJpZFwiKSB7XG4gIFwiQW4gb3B0aW9uYWwgY3VzdG9tZXIgc3BlY2lmaWVkIGRlc2NyaXB0aW9uXCJcbiAgZGVzY3JpcHRpb246IFN0cmluZ1xuICBcIkFuIG9wdGlvbmFsIGN1c3RvbWVyIHNwZWNpZmllZCBkaXNwbGF5IG5hbWVcIlxuICBkaXNwbGF5TmFtZTogU3RyaW5nXG4gIFwiVGhlIHBvbGljeSdzIHVuaXF1ZSBJRFwiXG4gIGlkOiBJRCFcbiAgXCJTcGVjaWZpZXMgdGhlIHR5cGUgb2YgcmVxdWVzdCB3aGljaCB0aGlzIHBvbGljeSBvcGVyYXRlcyBvblwiXG4gIHJlcXVlc3RUeXBlOiBSZXF1ZXN0VHlwZSFcbiAgXCJUaGUgYWN0dWFsIGNvbnRlbnQgb2YgdGhlIHBvbGljeSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gcmVuZGVyIHRoZSBwb2xpY3kgZm9yIGEgdXNlciB0byByZWFkLlwiXG4gIHJ1bGVEZXRhaWxzOiBQb2xpY3lEb2N1bWVudFxuICBcIlRoZSBzdGF0dXMgb2YgdGhpcyBwb2xpY3kgKGUuZy4gd2hldGhlciBpdCBpcyBkaXNhYmxlZClcIlxuICBzdGF0dXM6IFBvbGljeVN0YXR1cyFcbn1cblxuXCJBIHBvbGljeSBjb25uZWN0aW9uIGZvciBwb2xpY3kgcGFnaW5hdGlvbi5cIlxudHlwZSBQb2xpY3lDb25uZWN0aW9uIGltcGxlbWVudHMgQ29ubmVjdGlvbiB7XG4gIFwiVGhlIHBvbGljaWVzIGluIHRoZSBjdXJyZW50IHBhZ2Ugb2YgcmVzdWx0cy5cIlxuICBlZGdlczogW1BvbGljeUVkZ2UhXSFcbiAgXCJQYWdlIGluZm9ybWF0aW9uIGZvciBhZGRpdGlvbmFsIG5hdmlnYXRpb24gdGhyb3VnaCB0aGlzIGNvbm5lY3Rpb24uXCJcbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxuICBcIlRoZSB0b3RhbCBjb3VudCBvZiBwb2xpY2llcyBtYXRjaGluZyB0aGUgZmlsdGVyIGNyaXRlcmlhIHNwZWNpZmllZCBmb3IgdGhpcyBjb25uZWN0aW9uLlwiXG4gIHRvdGFsQ291bnQ6IEludFxufVxuXG5cIkEgcnVsZSBmb3Igd2hpY2ggd2Ugd2lsbCBub3QgZ2VuZXJhdGUgdGhlIGRlc2NyaXB0aW9uLiBJbnN0ZWFkLCB3ZSByZWx5IG9uIGEgaGFyZGNvZGVkIG9uZS5cIlxudHlwZSBQb2xpY3lDdXN0b21SdWxlRGVmaW5pdGlvbiB7XG4gIHBvbGljeURlc2NyaXB0aW9uOiBTdHJpbmchXG59XG5cbnR5cGUgUG9saWN5RG9jdW1lbnQgaW1wbGVtZW50cyBQb2xpY3lOb2RlIHtcbiAgXCJcIlwiXG4gIFRoZSAncm9vdCBub2Rlcycgb2YgdGhlIFBvbGljeSBEb2N1bWVudC5cbiAgV2hlbiB1c2VkIHRvIHJlcHJlc2VudCBhIFBvbGljeSwgdGhlcmUgd2lsbCB1c3VhbGx5IGhhdmUgbXVsdGlwbGUgbm9kZXMsIGUuZy4gb25lIGZvciBlYWNoIGNhdGVnb3J5IG9mIHJ1bGVzLlxuICBXaGVuIHVzZWQgdG8gcmVwcmVzZW50IGEgc2luZ2xlIFJ1bGUsIHRoZXJlIHdpbGwgdXN1YWxseSBiZSBqdXN0IGEgc2luZ2xlIHJvb3Qgbm9kZS5cbiAgXCJcIlwiXG4gIGNoaWxkSWRzOiBbSUQhXSFcbiAgXCJUaGUgdW5pcXVlIElEIG9mIHRoZSBub2RlIGluIHRoaXMgcm9vdCBub2RlLlwiXG4gIG5vZGVJZDogSUQhXG4gIFwiXCJcIlxuICBUaGUgbGlzdCBvZiBQb2xpY3kgZWxlbWVudHMgd2hpY2ggZGVzY3JpYmUgYSBwb2xpY3kgKG9yIHBvbGljeSBmcmFnbWVudCkuXG4gIFNpbmNlIGVhY2ggbm9kZSBoYXMgYW4gSUQgYW5kIGEgbGlzdCBvZiBjaGlsZElkcywgdGhleSBmb3JtIGFuIEFkamFjZW5jeSBMaXN0IGdyYXBoLlxuICBcIlwiXCJcbiAgbm9kZXM6IFtQb2xpY3lOb2RlIV0hXG59XG5cblwiQSBQb2xpY3kgZWRnZSBmb3IgUG9saWN5IHBhZ2luYXRpb24uXCJcbnR5cGUgUG9saWN5RWRnZSB7XG4gIFwiVGhlIG9wYXF1ZSBjdXJzb3Igb2YgdGhlIGN1cnJlbnQgZWRnZS5cIlxuICBjdXJzb3I6IFN0cmluZ1xuICBcIlRoZSBwb2xpY3kgYXQgdGhpcyBlZGdlLlwiXG4gIG5vZGU6IFBvbGljeVxufVxuXG5cIkEgJ3ZpcnR1YWwnIGdyb3VwIG9mIG1lcmNoYW50IGNhdGVnb3JpZXMsIHdoaWNoIGNvbWJpbmVzIG11bHRpcGxlIHVuZGVybHlpbmcgbWVyY2hhbnQgY2F0ZWdvcmllcy5cIlxudHlwZSBQb2xpY3lNZXJjaGFudENhdGVnb3J5R3JvdXAge1xuICBpZHM6IFtJRCFdXG4gIG5hbWU6IFN0cmluZyFcbn1cblxuXCJBICd2aXJ0dWFsJyBncm91cCBvZiBtZXJjaGFudHMsIHdoaWNoIGNvbWJpbmVzIG11bHRpcGxlIHVuZGVybHlpbmcgbWVyY2hhbnRzIHdpdGggYSBzaW5nbGUgbmFtZS5cIlxudHlwZSBQb2xpY3lNZXJjaGFudEdyb3VwIHtcbiAgaWRzOiBbSUQhXVxuICBuYW1lOiBTdHJpbmchXG59XG5cblwiQSBydWxlIHdoaWNoIGxpbWl0J3MgYSB1c2VyJ3MgcGVyLWRheSBzcGVuZGluZyBpbiBzcGVjaWZpYyBjYXRlZ29yaWVzXCJcbnR5cGUgUG9saWN5UGVyRGllbVJ1bGVEZWZpbml0aW9uIHtcbiAgXCJJZiB0aGUgdGhyZXNob2xkIGFwcGxpZXMgb25seSB0byBhIHNldCBvZiBtZXJjaGFudCBjYXRlZ29yaWVzLCB0aGV5IGFyZSBsaXN0ZWQgaGVyZVwiXG4gIGluY2x1ZGVkTWVyY2hhbnRDYXRlZ29yaWVzOiBbUG9saWN5TWVyY2hhbnRDYXRlZ29yeUdyb3VwIV0hXG4gIFwiSWYgdGhlIHRocmVzaG9sZCBhcHBsaWVzIG9ubHkgdG8gYSBzZXQgb2YgbWVyY2hhbnRzLCB0aGV5IGFyZSBsaXN0ZWQgaGVyZVwiXG4gIGluY2x1ZGVkTWVyY2hhbnRzOiBbUG9saWN5TWVyY2hhbnRHcm91cCFdIVxuICBcIlRoZSBydWxlIGlzIHRyaWdnZXJlZCBpZiB0aGUgdXNlcidzIGV4cGVuc2VzIGluIGEgc2luZ2xlIGRheSBleGNlZWQgdGhpcyBhbW91bnRcIlxuICBsaW1pdDogRmluYW5jaWFsQXNzZXQhXG59XG5cblwiQSBydWxlIGdyb3VwIHdpdGggYSBzZXQgJ3R5cGUnIHdoaWNoIGNvcnJlc3BvbmRzIHRvIHByZXNldCBkZXNjcmlwdGlvbnMgaW4gY2xpZW50c1wiXG50eXBlIFBvbGljeVByZWRlZmluZWRSdWxlR3JvdXAge1xuICBcIlRoZSAndHlwZScgb2YgdGhlIHJ1bGUgZ3JvdXAuIEVhY2ggdHlwZSBnZW5lcmFsbHkgY29ycmVzcG9uZHMgdG8gYSBzaW5nbGUga2luZCBvZiBSZXF1ZXN0QWN0aW9uLlwiXG4gIHR5cGU6IFBvbGljeVJ1bGVHcm91cFR5cGVcbn1cblxuXCJcIlwiXG5BIHJ1bGUgdGhhdCBkZWFscyB3aXRoIHJlaW1idXJzZW1lbnQgc3VibWlzc2lvbi5cbkV4YW1wbGU6IFJlaW1idXJzZW1lbnRzIG11c3QgYmUgc3VibWl0dGVkIHVwIHRvIDYwIGRheXMgYWZ0ZXIgdGhlIHB1cmNoYXNlLlxuXCJcIlwiXG50eXBlIFBvbGljeVJlaW1idXJzZW1lbnRSdWxlRGVmaW5pdGlvbiB7XG4gIHN1Ym1pc3Npb25EZWFkbGluZURheXNBZnRlclB1cmNoYXNlOiBJbnRcbn1cblxuXCJBIFBvbGljeVJ1bGUgZGVzY3JpYmVzIGEgUG9saWN5IEVuZ2luZSBSdWxlLCB3aGljaCBwZXJmb3JtcyBhY3Rpb25zIHdoZW4gZXhwZW5zZXMgbWVldCBwYXJ0aWN1bGFyIGNvbmRpdGlvbnMuXCJcbnR5cGUgUG9saWN5UnVsZSBpbXBsZW1lbnRzIFBvbGljeU5vZGUge1xuICBcIlRoZSBhY3Rpb25zIHRoYXQgY2FuIGJlIHJldHVybmVkIGJ5IHRoZSBydWxlLlwiXG4gIGFjdGlvblR5cGVzOiBbUmVxdWVzdEFjdGlvblR5cGUhXSFcbiAgXCJcIlwiXG4gIFRoZSBjaGlsZCBub2RlcyBvZiB0aGlzIHJ1bGUgKG1heSBiZSBydWxlcyBvciBtb3JlIGdyb3VwcykuXG4gIE5vdGUgdGhhdCBzdWItcnVsZXMgYXJlIG5vdCBpbXBsZW1lbnRlZCB5ZXQgKGRlYy0yMDIxKSwgZXZlbiB0aG91Z2ggdGhlIEFQSSBzdXBwb3J0cyB0aGVtLlxuICBcIlwiXCJcbiAgY2hpbGRJZHM6IFtJRCFdXG4gIFwiaWYgc2V0LCB0aGlzIGRlc2NyaXB0aW9uIHdpbGwgb3ZlcnJpZGUgdGhlIG1ldGFkYXRhLWdlbmVyYXRlZCBydWxlIGRlc2NyaXB0aW9uIGluIHRoZSBmcm9udGVuZC5cIlxuICBjdXN0b21EZXNjcmlwdGlvbjogUG9saWN5UnVsZURlc2NyaXB0aW9uXG4gIFwiQW4gb2JqZWN0IHdoaWNoIGRlZmluZXMgdGhlIHJ1bGUncyBjb25kaXRpb25zXCJcbiAgZGVmaW5pdGlvbjogUG9saWN5UnVsZURlZmluaXRpb25cbiAgXCJXaGVuIHNwZWNpZmllZCwgdGhpcyBydWxlIG9ubHkgYXBwbGllcyB0byB0aGUgc3BlY2lmaWMgdHlwZXMgb2YgZXhwZW5zZS5cIlxuICBleHBlbnNlVHlwZXM6IFtFeHBlbnNlVHlwZSFdIVxuICBcIlwiXCJcbiAgV2hlbiB0cnVlLCB0aGlzIHJ1bGUgc2hvdWxkIGJlIGRpc3BsYXllZCBhcyBhIFwicHJvaGliaXRpb25cIiAoaS5lLiB5b3UgbWF5IG5vdCBzcGVuZClcbiAgaW5zdGVhZCBvZiBhZHZpc29yeSAoaS5lLiB0aGVzZSB3aWxsIGJlIGZsYWdnZWQgZm9yIHJldmlldylcbiAgXCJcIlwiXG4gIGlzUHJvaGliaXRpb246IEJvb2xlYW5cbiAgXCJUaGUgdW5pcXVlIElEIG9mIHRoZSBub2RlIGluIHRoaXMgcG9saWN5IGRvY3VtZW50LiBNYXkgYWxzbyBiZSB0aGUgSUQgb2YgdGhlIFJ1bGUuXCJcbiAgbm9kZUlkOiBJRCFcbn1cblxuXCJBIGhhcmRjb2RlZCBydWxlIGRlc2NyaXB0aW9uLlwiXG50eXBlIFBvbGljeVJ1bGVEZXNjcmlwdGlvbiB7XG4gIFwiQSBoYXJkY29kZWQgZGVzY3JpcHRpb24gdG8gZXhwbGFpbiBhIHJ1bGUgdG8gdGhlIHVzZXIuXCJcbiAgb3ZlcnJpZGVEZXNjcmlwdGlvbjogU3RyaW5nXG59XG5cblwiQSBQb2xpY3lSdWxlR3JvdXAgcmVmZXJlbmNlcyBydWxlcyBhbmQgc3ViLWdyb3Vwcy4gUG9saWN5UnVsZUdyb3VwcyBhcmUgdXNlZCBib3RoIGZvciB0b3AtbGV2ZWwgY2F0ZWdvcmllcywgYW5kIGZvciBzdWJjYXRlZ29yaWVzLlwiXG50eXBlIFBvbGljeVJ1bGVHcm91cCBpbXBsZW1lbnRzIFBvbGljeU5vZGUge1xuICBcIlRoZSBjaGlsZCBub2RlcyBvZiB0aGlzIGdyb3VwIChtYXkgYmUgcnVsZXMgb3IgbW9yZSBncm91cHMpXCJcbiAgY2hpbGRJZHM6IFtJRCFdIVxuICBcIlRoZSB0eXBlIG9mIGdyb3VwLCBvciBudWxsXCJcbiAgZGVzY3JpcHRpb246IFBvbGljeVJ1bGVHcm91cERlc2NyaXB0aW9uXG4gIFwiXCJcIlxuICBUaGUgdW5pcXVlIElEIG9mIHRoZSBub2RlIGluIHRoaXMgcG9saWN5IGRvY3VtZW50LlxuICBNYXkgYmUgdGhlIElEIG9mIGEgUnVsZSwgb3IgYSBQb2xpY3ksIG9yIGV2ZW4gYSBnZW5lcmF0ZWQgSUQsIGRlcGVuZGluZ1xuICBvbiBob3cgR3JvdXBzIGFyZSBpbXBsZW1lbnRlZC5cbiAgXCJcIlwiXG4gIG5vZGVJZDogSUQhXG59XG5cblwiQSBydWxlIHdoaWNoIHJlc3VsdHMgaW4gYW4gYWN0aW9uIHdoZW4gYWxsIG9mIGl0cyBjb25kaXRpb25zIGFyZSBtZXRcIlxudHlwZSBQb2xpY3lTdGFuZGFyZFJ1bGVEZWZpbml0aW9uIHtcbiAgXCJJZiB0aGUgdGhyZXNob2xkIGFwcGxpZXMgb25seSB0byBhIHNldCBvZiBtZXJjaGFudCBjYXRlZ29yaWVzLCB0aGV5IGFyZSBsaXN0ZWQgaGVyZVwiXG4gIG1lcmNoYW50Q2F0ZWdvcmllczogW1BvbGljeU1lcmNoYW50Q2F0ZWdvcnlHcm91cCFdIVxuICBcIldoaWNoIG9wZXJhdGlvbiB0byBhcHBseSBmb3IgdGhlIGxpc3Qgb2YgbWVyY2hhbnQgY2F0ZWdvcmllcy5cIlxuICBtZXJjaGFudENhdGVnb3JpZXNDb25kaXRpb246IFBvbGljeVN0YW5kYXJkUnVsZUNvbmRpdGlvbk9wZXJhdG9yIVxuICBcIklmIHRoZSB0aHJlc2hvbGQgYXBwbGllcyBvbmx5IHRvIGEgc2V0IG9mIG1lcmNoYW50LCB0aGV5IGFyZSBsaXN0ZWQgaGVyZVwiXG4gIG1lcmNoYW50czogW1BvbGljeU1lcmNoYW50R3JvdXAhXSFcbiAgXCJXaGljaCBvcGVyYXRpb24gdG8gYXBwbHkgZm9yIHRoZSBsaXN0IG9mIG1lcmNoYW50cy5cIlxuICBtZXJjaGFudHNDb25kaXRpb246IFBvbGljeVN0YW5kYXJkUnVsZUNvbmRpdGlvbk9wZXJhdG9yIVxuICBcIlRoZSBydWxlIGlzIHRyaWdnZXJlZCBpZiBhbiBleHBlbnNlIGFtb3VudCBpcyBvdmVyIHRoaXMgYW1vdW50XCJcbiAgdGhyZXNob2xkOiBGaW5hbmNpYWxBc3NldFxufVxuXG5cIlwiXCJcbkEgcnVsZSB3aGljaCBzcGVjaWZpZXMgcGVybWl0dGVkIG1lcmNoYW50cyBmb3Igc3BlY2lmaWMgY2F0ZWdvcmllcy5cbkUuZy4gQWlyZmFyZSBtdXN0IGJlIGJvb2tlZCBpbiBUcmF2ZWxCYW5rLlxuXCJcIlwiXG50eXBlIFBvbGljeVZlbmRvcnNGb3JDYXRlZ29yeVJ1bGVEZWZpbml0aW9uIHtcbiAgXCJUaGUgcnVsZSdzIGFjdGlvbnMgYXJlIHRyaWdnZXJlZCB3aGVuIGV4cGVuc2VzIGluIHRoZSBjYXRlZ29yaWVzIGFyZSBtYWRlIHdpdGggbWVyY2hhbnRzIG5vdCBpbiB0aGlzIGxpc3RcIlxuICBhbGxvd2VkTWVyY2hhbnRzRm9yQ2F0ZWdvcnk6IFtQb2xpY3lNZXJjaGFudEdyb3VwIV0hXG4gIFwiVGhlIGNhdGVnb3J5IGZvciB3aGljaCB3ZSBhcmUgc3BlY2lmeWluZyBtZXJjaGFudHNcIlxuICBtZXJjaGFudENhdGVnb3J5OiBQb2xpY3lNZXJjaGFudENhdGVnb3J5R3JvdXBcbn1cblxuXCJRdWVyaWVzXCJcbnR5cGUgUXVlcnkge1xuICBfZW50aXRpZXMocmVwcmVzZW50YXRpb25zOiBbX0FueSFdISk6IFtfRW50aXR5XSFcbiAgX3NlcnZpY2U6IF9TZXJ2aWNlXG4gIFwiTGlzdCBQb2xpY2llc1wiXG4gIHBvbGljaWVzKGZpbHRlcjogUG9saWN5RmlsdGVySW5wdXQsIHBhZ2U6IFBhZ2luYXRpb25JbnB1dCk6IFBvbGljeUNvbm5lY3Rpb25cbiAgXCJHZXQgYW4gcG9saWN5IGJ5IGlkXCJcbiAgcG9saWN5KGlkOiBJRCEpOiBQb2xpY3lcbiAgXCJHZXQgdGhlIGxvZ2dlZCBpbiBjdXN0b21lciBhY2NvdW50J3Mgcm9vdCBwb2xpY3kgZm9yIHRoZSBnaXZlbiByZXF1ZXN0IHR5cGVcIlxuICByb290UG9saWN5KHJlcXVlc3RUeXBlOiBSZXF1ZXN0VHlwZSEpOiBQb2xpY3lcbn1cblxudHlwZSBSZXF1ZXN0QWN0aW9uIEBleHRlbmRzIEBrZXkoZmllbGRzIDogXCJpZFwiKSB7XG4gIGlkOiBJRCEgQGV4dGVybmFsXG4gIHBvbGljeVJlYXNvbjogUG9saWN5UmVhc29uXG59XG5cbnR5cGUgX1NlcnZpY2Uge1xuICBzZGw6IFN0cmluZyFcbn1cblxuXCJUaGUgdHlwZSBvZiB0aGUgRXhwZW5zZS5cIlxuZW51bSBFeHBlbnNlVHlwZSB7XG4gIFwiQSBiaWxsIHBheSBleHBlbnNlLlwiXG4gIEJJTExQQVlcbiAgXCJBIGNhcmQgZXhwZW5zZS5cIlxuICBDQVJEXG4gIFwiQSByZWltYnVyc2VtZW50IGV4cGVuc2UuXCJcbiAgUkVJTUJVUlNFTUVOVFxufVxuXG5cIlwiXCJcbiBGcm9tIEFQSXYxXG4gaHR0cHM6Ly9naXRodWIuY29tL2JyZXhocS9jcmVkaXRfY2FyZC9ibG9iL21haW4vYXBwcy9hcGkvbGliL2FwaS93ZWIvc2NoZW1hL2ZpbmFuY2lhbF9hc3NldC5leCNMN1xuIGh0dHBzOi8vZ2l0aHViLmNvbS9icmV4aHEvY3JlZGl0X2NhcmQvYmxvYi9tYWluL2xpYnJhcmllcy9icmV4X2ZpbmFuY2lhbF9hc3NldC9saWIvZmluYW5jaWFsX2luc3RydW1lbnRfY29uc3RhbnRzLmV4I0w5NjJcblwiXCJcIlxuZW51bSBGaW5hbmNpYWxJbnN0cnVtZW50Q29kZSB7XG4gIEFFRFxuICBBRk5cbiAgQUxMXG4gIEFNRFxuICBBTkdcbiAgQU9BXG4gIEFSU1xuICBBVURcbiAgQVdHXG4gIEFaTlxuICBCQU1cbiAgQkJEXG4gIEJEVFxuICBCR05cbiAgQkhEXG4gIEJJRlxuICBCTURcbiAgQk5EXG4gIEJPQlxuICBCT1ZcbiAgQlJMXG4gIEJTRFxuICBCVE5cbiAgQldQXG4gIEJZTlxuICBCWkRcbiAgQ0FEXG4gIENERlxuICBDSEVcbiAgQ0hGXG4gIENIV1xuICBDTEZcbiAgQ0xQXG4gIENOWVxuICBDT1BcbiAgQ09VXG4gIENSQ1xuICBDUllQVE9fQlRDXG4gIENSWVBUT19FVEhcbiAgQ1JZUFRPX1VTRENcbiAgQ1VDXG4gIENVUFxuICBDVkVcbiAgQ1pLXG4gIERKRlxuICBES0tcbiAgRE9QXG4gIERaRFxuICBFR1BcbiAgRVJOXG4gIEVUQlxuICBFVVJcbiAgRkpEXG4gIEZLUFxuICBHQlBcbiAgR0VMXG4gIEdIU1xuICBHSVBcbiAgR01EXG4gIEdORlxuICBHVFFcbiAgR1lEXG4gIEhLRFxuICBITkxcbiAgSFJLXG4gIEhUR1xuICBIVUZcbiAgSURSXG4gIElMU1xuICBJTlJcbiAgSVFEXG4gIElSUlxuICBJU0tcbiAgSk1EXG4gIEpPRFxuICBKUFlcbiAgS0VTXG4gIEtHU1xuICBLSFJcbiAgS01GXG4gIEtQV1xuICBLUldcbiAgS1dEXG4gIEtZRFxuICBLWlRcbiAgTEFLXG4gIExCUFxuICBMS1JcbiAgTFJEXG4gIExTTFxuICBMWURcbiAgTUFEXG4gIE1ETFxuICBNR0FcbiAgTUtEXG4gIE1NS1xuICBNTlRcbiAgTU9QXG4gIE1SVVxuICBNVVJcbiAgTVZSXG4gIE1XS1xuICBNWE5cbiAgTVhWXG4gIE1ZUlxuICBNWk5cbiAgTkFEXG4gIE5BU0RBUV9EQUdYWFxuICBOQVNEQVFfREdDWFhcbiAgTkFTREFRX0RHVlhYXG4gIE5BU0RBUV9EUEdYWFxuICBOQVNEQVFfR0dCWFhcbiAgTkFTREFRX0dHRFhYXG4gIE5BU0RBUV9HR1NYWFxuICBOQVNEQVFfR1NCWFhcbiAgTkdOXG4gIE5JT1xuICBOT0tcbiAgTlBSXG4gIE5aRFxuICBPTVJcbiAgUEFCXG4gIFBFTlxuICBQR0tcbiAgUEhQXG4gIFBLUlxuICBQTE5cbiAgUFlHXG4gIFFBUlxuICBST05cbiAgUlNEXG4gIFJVQlxuICBSV0ZcbiAgU0FSXG4gIFNCRFxuICBTQ1JcbiAgU0RHXG4gIFNFS1xuICBTR0RcbiAgU0hQXG4gIFNMTFxuICBTT1NcbiAgU1JEXG4gIFNTUFxuICBTVE5cbiAgU1ZDXG4gIFNZUFxuICBTWkxcbiAgVEhCXG4gIFRKU1xuICBUTVRcbiAgVE5EXG4gIFRPUFxuICBUUllcbiAgVFREXG4gIFRXRFxuICBUWlNcbiAgVUFIXG4gIFVHWFxuICBVU0RcbiAgVVNOXG4gIFVZSVxuICBVWVVcbiAgVVlXXG4gIFVaU1xuICBWRVNcbiAgVk5EXG4gIFZVVlxuICBXU1RcbiAgWEFGXG4gIFhBR1xuICBYQVVcbiAgWEJBXG4gIFhCQlxuICBYQkNcbiAgWEJEXG4gIFhDRFxuICBYRFJcbiAgWE9GXG4gIFhQRFxuICBYUEZcbiAgWFBUXG4gIFhTVVxuICBYVFNcbiAgWFVBXG4gIFhYWFxuICBZRVJcbiAgWkFSXG4gIFpNV1xuICBaV0xcbn1cblxuXCJcIlwiXG5UaW1lIGJ1Y2tldHRpbmcgc3RyYXRlZ3lcbi0gU1RBUlQ6IEJ1Y2tldHMgc3RhcnQgYXQgdGhlIHN0YXJ0c0F0IHRpbWVzdGFtcFxuLSBFTkQ6IEJ1Y2tldHMgc3RhcnQgYXQgdGhlIGVuZHNBdCB0aW1lc3RhbXBcbi0gQ0FMRU5EQVI6IEJ1Y2tldHMgYXJlIGFsaWduZWQgd2l0aCB0aGUgY2FsZW5kYXIgdW5pdHMgKGUuZy4gV0VFS1MpIGJ1dCBjYW4gaW5jbHVkZVxucGFydGlhbCBidWNrZXRzIGJhc2VkIG9uIHRoZSBzdGFydHNBdCBhbmQgZW5kc0F0IHRpbWVidWNrZXRzXG5cIlwiXCJcbmVudW0gSW5zaWdodHNUaW1lQnVja2V0U3RyYXRlZ3kge1xuICBDQUxFTkRBUlxuICBFTkRcbiAgU1RBUlRcbn1cblxuXCJHZW5lcmljIHRpbWUgdW5pdFwiXG5lbnVtIEluc2lnaHRzVGltZVVuaXQge1xuICBEQVlcbiAgTU9OVEhcbiAgUVVBUlRFUlxuICBXRUVLXG4gIFlFQVJcbn1cblxuZW51bSBPcmRlckJ5RGlyZWN0aW9uIHtcbiAgQVNDRU5ESU5HXG4gIERFU0NFTkRJTkdcbn1cblxuZW51bSBQb2xpY3lSdWxlR3JvdXBUeXBlIHtcbiAgXCJBIGdyb3VwIGZvciBydWxlcyB3aGljaCBkZWZpbmUgd2hlbiBtZW1vcyBhcmUgcmVxdWlyZWRcIlxuICBNRU1PU1xuICBcIkEgZ3JvdXAgZm9yIHJ1bGVzIHdoaWNoIGRlZmluZSB3aGVuIHJlY2VpcHRzIGFyZSByZXF1aXJlZFwiXG4gIFJFQ0VJUFRTXG4gIFwiQSBncm91cCBmb3IgcnVsZXMgcHJvaGliaXQgY2VydGFpbiBraW5kcyBvZiBleHBlbnNlc1wiXG4gIFJFU1RSSUNUSU9OU1xuICBcIkEgZ3JvdXAgZm9yIHJ1bGVzIHdoaWNoIGZsYWcgZXhwZW5zZXMgZm9yIHJldmlld1wiXG4gIFJFVklFV1xuICBcIkEgZ3JvdXAgdG8gcmVwcmVzZW50IGEgcm9vdCBwb2xpY3kgdGhhdCBjYWxscyBtYW55IG90aGVyc1wiXG4gIFJPT1RcbiAgXCJBIGdyb3VwIGZvciBydWxlcyB3aGljaCBtb25pdG9yIHRyYXZlbCBleHBlbnNlc1wiXG4gIFRSQVZFTFxufVxuXG5cIkFuIG9wZXJhdGlvbiB0byBiZSB1c2VkIGZvciBhIGxpc3Qgb2Ygc3ViamVjdHMuXCJcbmVudW0gUG9saWN5U3RhbmRhcmRSdWxlQ29uZGl0aW9uT3BlcmF0b3Ige1xuICBBTllfT0ZcbiAgTk9ORV9PRlxufVxuXG5lbnVtIFBvbGljeVN0YXR1cyB7XG4gIENSRUFURURcbiAgRElTQUJMRURcbn1cblxuXCJUaGUgdHlwZSBvZiB0aGUgcmVxdWVzdCBhY3Rpb24uXCJcbmVudW0gUmVxdWVzdEFjdGlvblR5cGUge1xuICBcIkEgbWVtbyBpcyByZXF1ZXN0ZWQuXCJcbiAgTUVNT1xuICBcIkEgcmVjZWlwdCBpcyByZXF1ZXN0ZWQuXCJcbiAgUkVDRUlQVFxuICBcIkEgbWFuYWdlciAob3Igb3RoZXIpIHJldmlldyBpcyByZXF1ZXN0ZWQuXCJcbiAgUkVWSUVXXG59XG5cblwiVGhlIHR5cGUgb2YgdGhlIFJlcXVlc3QuXCJcbmVudW0gUmVxdWVzdFR5cGUge1xuICBcIlRoaXMgaXMgYSBidWRnZXQgcmVxdWVzdC5cIlxuICBCVURHRVRcbiAgXCJUaGlzIGlzIGFuIGV4cGVuc2UgcmVxdWVzdC5cIlxuICBFWFBFTlNFXG59XG5cblwiSVNPeiBkYXRlXCJcbnNjYWxhciBEYXRlXG5cblwiSnNvbiBvYmplY3RcIlxuc2NhbGFyIEpzb25cblxuXCI2NEJpdCBpbnRlZ2VyXCJcbnNjYWxhciBMb25nXG5cblwiSVNPeiB0aW1lXCJcbnNjYWxhciBUaW1lXG5cbnNjYWxhciBfQW55XG5cbnNjYWxhciBfRmllbGRTZXRcblxuXCJJbnB1dCB0eXBlIGZvciBjcmVhdGluZyBvciB1cGRhdGluZyBhbiBleHBlbnNlIHBvbGljeS5cIlxuaW5wdXQgQ3JlYXRlT3JVcGRhdGVFeHBlbnNlUG9saWN5SW5wdXQge1xuICBcIlBhcmFtZXRlcnMgZm9yIGdlbmVyYXRpbmcgdGhlIG5ldyBwb2xpY3kgZGVmaW5pdGlvbi5cIlxuICBnZW5lcmF0ZUV4cGVuc2VQb2xpY3lSZXF1ZXN0OiBHZW5lcmF0ZUV4cGVuc2VQb2xpY3lSZXF1ZXN0IVxuICBcIkEgcG9saWN5IHRoYXQgc2hvdWxkIGJlIHVwZGF0ZWQgd2l0aCB0aGUgbmV3IGRlZmluaXRpb24uIElmIGVtcHR5LCBhIG5ldyBwb2xpY3kgd2lsbCBiZSBjcmVhdGVkLlwiXG4gIHBvbGljeUlkOiBJRFxufVxuXG5cIlwiXCJcbiBGcm9tIEFQSXYxXG4gaHR0cHM6Ly9naXRodWIuY29tL2JyZXhocS9jcmVkaXRfY2FyZC9ibG9iL21haW4vYXBwcy9hcGkvbGliL2FwaS93ZWIvc2NoZW1hL2ZpbmFuY2lhbF9hc3NldC5leCNMMTNcblwiXCJcIlxuaW5wdXQgRmluYW5jaWFsQXNzZXRJbnB1dCB7XG4gIFwiVGhlIGluc3RydW1lbnQgY29kZSAodXNkLCBldGMuKS4gQ3VycmVudGx5LCBvbmx5IHVzZCBpcyBzdXBwb3J0ZWQuXCJcbiAgaW5zdHJ1bWVudENvZGU6IEZpbmFuY2lhbEluc3RydW1lbnRDb2RlID0gVVNEXG4gIFwiVGhlIGFtb3VudCBpbiBjZW50c1wiXG4gIHF1YW50aXR5Q2VudHM6IEludFxufVxuXG5pbnB1dCBGaW5hbmNpYWxBc3NldFJhbmdlSW5wdXQge1xuICBcIkV4Y2x1c2l2ZSwgb25seSBjb25zaWRlcnMgZ2l2ZW4gY3VycmVuY3ksIHJlcXVpcmVkIHRvIGhhdmUgc2FtZSBjdXJyZW5jeSB3aGVuIG1pbkFtb3VudCBpcyBwcm92aWRlZC5cIlxuICBtYXhBbW91bnQ6IEZpbmFuY2lhbEFzc2V0SW5wdXRcbiAgXCJJbmNsdXNpdmUsIG9ubHkgY29uc2lkZXJzIGdpdmVuIGN1cnJlbmN5LCByZXF1aXJlZCB0byBoYXZlIHNhbWUgY3VycmVuY3kgd2hlbiBtYXhBbW91bnQgaXMgcHJvdmlkZWQuXCJcbiAgbWluQW1vdW50OiBGaW5hbmNpYWxBc3NldElucHV0XG59XG5cbmlucHV0IEdlbmVyYXRlRXhwZW5zZVBvbGljeVJlcXVlc3Qge1xuICBcIlwiXCJcbiAgVGhlIGxpc3Qgb2YgYXBwcm92YWwgY2hhaW5zIHRoYXQgc2hvdWxkIGJlIHVzZWQuIFRoZSBjb25kaXRpb25zIGFyZSBldmFsdWF0ZWQgaW4gdGhlIG9yZGVyIHRoZXkgYXJlIGdpdmVuIGFuZCB0aGVcbiAgZmlyc3Qgb25lIHRoYXQgbWF0Y2hlcyB0aGUgZXhwZW5zZSB3aWxsIGJlIHVzZWQgaWYgYSByZXZpZXcgaXMgcmVxdWVzdGVkLlxuICBcIlwiXCJcbiAgYXBwcm92YWxDaGFpbnM6IFtQb2xpY3lBcHByb3ZhbENoYWluSW5wdXQhXSFcbiAgXCJBIG5hbWUgdGhhdCB3aWxsIGFsbG93IHVzZXJzIHRvIGlkZW50aWZ5IHRoaXMgcG9saWN5LlwiXG4gIGRpc3BsYXlOYW1lOiBTdHJpbmchXG4gIFwiQSBjb21wbGV0ZSByZXByZXNlbnRhdGlvbiBvZiBhIHBvbGljeSBnaXZlbiBieSBpdHMgbWV0YWRhdGEuXCJcbiAgcnVsZUdyb3VwOiBQb2xpY3lSdWxlR3JvdXBJbnB1dCFcbn1cblxuXCJcIlwiXG5QYWdpbmF0aW9uIHBhcmFtZXRlcnMgZm9yIGVudW1lcmF0aW5nIGl0ZW1zIGluIGEgY29ubmVjdGlvbi5cbk9ubHkge2ZpcnN0LCBhZnRlcn0gT1Ige2xhc3QsIGJlZm9yZX0gcGFpcnMgY2FuIGJlIHNldC5cbmUuZy4gSWYge2ZpcnN0LCBiZWZvcmV9IGlzIHNldCwgdGhhdCB3aWxsIGNhdXNlIGEgdmFsaWRhdGlvbiBlcnJvci5cblRoZSBjdXJzb3JzIGFyZSBvcHRpb25hbC4gV2l0aG91dCBhIHNwZWNpZmllZCBjdXJzb3IsIGl0IGlzIGFzc3VtZWQgdG8gc3RhcnQgYXRcbnRoZSBmaXJzdCBpdGVtIChmb3IgYGZpcnN0YCkgb3IgbGFzdCBpdGVtIChmb3IgYGxhc3RgKSBvZiB0aGUgY29sbGVjdGlvbi5cblwiXCJcIlxuaW5wdXQgUGFnaW5hdGlvbklucHV0IHtcbiAgXCJUaGUgY3Vyc29yIHRvIHN0YXJ0IHRoZSBwYWdlIGF0IChleGNsdXNpdmUpLlwiXG4gIGFmdGVyOiBTdHJpbmdcbiAgXCJUaGUgY3Vyc29yIHRvIGVuZCB0aGUgcGFnZSBhdCAoZXhjbHVzaXZlKS5cIlxuICBiZWZvcmU6IFN0cmluZ1xuICBcIlRoZSBudW1iZXIgb2YgaXRlbXMgdG8gcmV0dXJuIGluIGEgcGFnZSBhZnRlciB0aGUgYGFmdGVyYCBjdXJzb3IuXCJcbiAgZmlyc3Q6IEludFxuICBcIlRoZSBudW1iZXIgb2YgaXRlbXMgdG8gcmV0dXJuIGluIGEgcGFnZSBwcmlvciB0byB0aGUgYGJlZm9yZWAgY3Vyc29yLlwiXG4gIGxhc3Q6IEludFxufVxuXG5cIkFuIGFjdGlvbiBzZXQgdG8gYmUgcmV0dXJuZWQgYnkgYSBydWxlLlwiXG5pbnB1dCBQb2xpY3lBY3Rpb25TZXRJbnB1dCB7XG4gIFwiQSBzZXQgb2YgZGVzY3JpcHRpb25zIHRvIGluZm9ybSB1c2VycyBhYm91dCB0aGUgYWN0aW9ucyB0aGF0IGFyZSByZXF1aXJlZC5cIlxuICBkZXNjcmlwdGlvbnM6IFtTdHJpbmchXSFcbiAgcmVxdWlyZU1lbW86IFBvbGljeVJlcXVpcmVFeHBlbnNlTWVtb0lucHV0XG4gIHJlcXVpcmVSZWNlaXB0OiBQb2xpY3lSZXF1aXJlRXhwZW5zZVJlY2VpcHRJbnB1dFxuICByZXF1aXJlUmV2aWV3OiBQb2xpY3lSZXF1aXJlUmV2aWV3SW5wdXRcbn1cblxuXCJBIHVzZXIgKG9yIHNldCBvZiB1c2VycykgdGhhdCBhcmUgdGhlIHRhcmdldCBvZiBhbiBhY3Rpb24uXCJcbmlucHV0IFBvbGljeUFjdGlvblRhcmdldElucHV0IHtcbiAgY3VzdG9tZXJVc2VySWQ6IElEXG4gIGhpZXJhcmNoaWVzSGllcmFyY2h5TGV2ZWxJZDogSURcbiAgbWFuYWdlckxldmVsRGlmZmVyZW5jZTogSW50XG59XG5cblwiQW4gYXBwcm92YWwgY2hhaW4sIGluY2x1ZGluZyB0aGUgY29uZGl0aW9uIGZvciBpdCB0byBiZSB1c2VkLlwiXG5pbnB1dCBQb2xpY3lBcHByb3ZhbENoYWluSW5wdXQge1xuICBcIlwiXCJcbiAgQSBydWxlIHRvIGRldGVybWluZSB3aGV0aGVyIHRoaXMgYXBwcm92YWwgY2hhaW4gc2hvdWxkIGJlIHVzZWQuIElmIG51bGwsIHRoZSBhcHByb3ZhbCBjaGFpbiB3aWxsIGFwcGx5IHRvIGFueVxuICBleHBlbnNlLlxuICBcIlwiXCJcbiAgY29uZGl0aW9uOiBQb2xpY3lFeHBlbnNlUnVsZU1ldGFkYXRhSW5wdXRcbiAgXCJUaGUgc3RlcHMgaW4gdGhpcyBhcHByb3ZhbCBjaGFpbi5cIlxuICBzdGVwczogW1BvbGljeUFwcHJvdmFsU3RlcElucHV0IV0hXG59XG5cblwiXCJcIlxuQSBzdGVwIGluIHRoZSBhcHByb3ZhbCBwcm9jZXNzIGNvbnNpc3Rpbmcgb2YgcmV2aWV3cyB0aGF0IGNhbiBiZSByZXF1ZXN0ZWQgaW4gcGFyYWxsZWwuIFRoZSBzdGVwIGlzIG9ubHkgY29tcGxldGVkIG9uY2VcbkFMTCByZXZpZXdzIGFyZSBjb21wbGV0ZWQuXG5cIlwiXCJcbmlucHV0IFBvbGljeUFwcHJvdmFsU3RlcElucHV0IHtcbiAgXCJUaGUgcmV2aWV3cyB0aGF0IG11c3QgYmUgcGVyZm9ybWVkIGJlZm9yZSB0aGUgbmV4dCByZXZpZXcgc3RlcC5cIlxuICByZXZpZXdzOiBbUG9saWN5UmV2aWV3SW5wdXQhXSFcbn1cblxuXCJBIG5vZGUgaW4gdGhlIHRyZWUgc3RydWN0dXJlIHdlIHVzZSB0byByZXByZXNlbnQgYSBwb2xpY3kuIE9ubHkgb25lIG9mIHRoZSBmaWVsZHMgY2FuIGJlIHNldC5cIlxuaW5wdXQgUG9saWN5RXhwZW5zZVBvbGljeU5vZGVJbnB1dCB7XG4gIHJ1bGU6IFBvbGljeVJ1bGVJbnB1dFxuICBydWxlR3JvdXA6IFBvbGljeVJ1bGVHcm91cElucHV0XG59XG5cblwiVGhlIGJhc2UgdHlwZSB0aGF0IGNvbnRhaW5zIHRoZSBzcGVjaWZpYyBraW5kcyBvZiBydWxlIG1ldGFkYXRhLlwiXG5pbnB1dCBQb2xpY3lFeHBlbnNlUnVsZU1ldGFkYXRhSW5wdXQge1xuICBcIkEgZGVzY3JpcHRpb24gdG8gb3ZlcnJpZGUgb3VyIGdlbmVyYXRlZCBleHBsYWluYWJpbGl0eSB0ZXh0LlwiXG4gIGRlc2NyaXB0aW9uOiBQb2xpY3lSdWxlRGVzY3JpcHRpb25JbnB1dFxuICBcIkEgbGlzdCBvZiBleHBlbnNlIHR5cGVzIHRoaXMgcnVsZSBhcHBsaWVzIHRvLlwiXG4gIGV4cGVuc2VUeXBlczogW0V4cGVuc2VUeXBlIV1cbiAgXCJTcGVjaWZpZXMgd2hldGhlciBhIHJ1bGUgaXMgYSBwcm9oaWJpdGlvbiBmb3IgZXhwbGFpbmFiaWxpdHkgcHVycG9zZXMuXCJcbiAgaXNQcm9oaWJpdGlvbjogQm9vbGVhblxuICBwZXJEaWVtTWV0YWRhdGE6IFBvbGljeVBlckRpZW1NZXRhZGF0YUlucHV0XG4gIHJlaW1idXJzZW1lbnRSdWxlTWV0YWRhdGE6IFBvbGljeVJlaW1idXJzZW1lbnRSdWxlTWV0YWRhdGFJbnB1dFxuICBcIlRoZSBkaWZmZXJlbnQgbWV0YWRhdGEgdHlwZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBkZXNjcmliZSBhIHJ1bGUgY29uZGl0aW9uLlwiXG4gIHN0YW5kYXJkUnVsZU1ldGFkYXRhOiBQb2xpY3lTdGFuZGFyZFJ1bGVNZXRhZGF0YUlucHV0XG4gIHZlbmRvcnNJbkNhdGVnb3J5TWV0YWRhdGE6IFBvbGljeVZlbmRvcnNGb3JDYXRlZ29yeU1ldGFkYXRhSW5wdXRcbn1cblxuXCJGaWx0ZXJzIGF2YWlsYWJsZSB0byBjb250cm9sIHdoaWNoIHBvbGljaWVzIGdldCByZXR1cm5lZC5cIlxuaW5wdXQgUG9saWN5RmlsdGVySW5wdXQge1xuICBcIk1hdGNoIElOIHNwZWNpZmljIHR5cGVzLCBtYXRjaCBBTEwgd2hlbiBubyBmaWx0ZXIgaXMgcHJvdmlkZWRcIlxuICByZXF1ZXN0VHlwZXM6IFtSZXF1ZXN0VHlwZSFdXG4gIFwiTWF0Y2ggSU4gc3BlY2lmaWMgc3RhdHVzZXMsIG1hdGNoIEFMTCB3aGVuIG5vIGZpbHRlciBpcyBwcm92aWRlZFwiXG4gIHN0YXR1c2VzOiBbUG9saWN5U3RhdHVzIV1cbn1cblxuXCJcIlwiXG5SZXByZXNlbnRhdGlvbiBvZiBhbnkgYXR0cmlidXRlIHRoYXQgc2hvdWxkIGJlIHJlcHJlc2VudGVkIGFzIGEgTmFtZSBhbmQgYSBzZXQgb2YgSURzLiBFeGFtcGxlcyBhcmUgTWVyY2hhbnQgR3JvdXBzIGFuZFxuTWVyY2hhbnQgQ2F0ZWdvcnkgR3JvdXBzLlxuXCJcIlwiXG5pbnB1dCBQb2xpY3lOYW1lQW5kSWRzSW5wdXQge1xuICBpZHM6IFtJRCFdXG4gIG5hbWU6IFN0cmluZyFcbn1cblxuXCJBIHJ1bGUgdGhhdCBjYXBzIHRoZSB0b3RhbCBhbW91bnQgdGhhdCBjYW4gYmUgc3BlbnQgZGFpbHkuIEN1cnJlbnRseSBjYW4gb25seSBiZSBhcHBsaWVkIGZvciBNZWFscy5cIlxuaW5wdXQgUG9saWN5UGVyRGllbU1ldGFkYXRhSW5wdXQge1xuICBcIlwiXCJcbiAgVGhlIGxpc3Qgb2YgbWVyY2hhbnQgY2F0ZWdvcmllcyBpbiB3aGljaCB0aGlzIHBlciBkaWVtIGFtb3VudCBjYW4gYmUgdXNlZC4gSXQgaXMgbm90IGN1cnJlbnRseSB1c2VkIGluIHRoZSBydWxlXG4gIGl0c2VsZiwgYnV0IHJhdGhlciBhcyBtZXRhZGF0YSBmb3IgZGlzcGxheSBwdXJwb3Nlcy5cbiAgXCJcIlwiXG4gIGluY2x1ZGVkTWVyY2hhbnRDYXRlZ29yaWVzOiBbUG9saWN5TmFtZUFuZElkc0lucHV0IV1cbiAgXCJcIlwiXG4gIFRoZSBsaXN0IG9mIG1lcmNoYW50cyBpbiB3aGljaCB0aGlzIHBlciBkaWVtIGFtb3VudCBjYW4gYmUgdXNlZC4gSXQgaXMgbm90IGN1cnJlbnRseSB1c2VkIGluIHRoZSBydWxlIGl0c2VsZiwgYnV0XG4gIHJhdGhlciBhcyBtZXRhZGF0YSBmb3IgZGlzcGxheSBwdXJwb3Nlcy5cbiAgXCJcIlwiXG4gIGluY2x1ZGVkTWVyY2hhbnRzOiBbUG9saWN5TmFtZUFuZElkc0lucHV0IV1cbiAgXCJUaGUgbWF4aW11bSBhbW91bnQgdGhhdCBjYW4gYmUgc3BlbnQgZGFpbHkgYmVmb3JlIHRoaXMgcnVsZSBpcyB0cmlnZ2VyZWQuXCJcbiAgdGhyZXNob2xkOiBGaW5hbmNpYWxBc3NldElucHV0IVxufVxuXG5cIlwiXCJcbkEgcnVsZSB0aGF0IGRlYWxzIHdpdGggcmVpbWJ1cnNlbWVudCBzdWJtaXNzaW9uLlxuRXhhbXBsZTogUmVpbWJ1cnNlbWVudHMgbXVzdCBiZSBzdWJtaXR0ZWQgdXAgdG8gNjAgZGF5cyBhZnRlciB0aGUgcHVyY2hhc2UuXG5cIlwiXCJcbmlucHV0IFBvbGljeVJlaW1idXJzZW1lbnRSdWxlTWV0YWRhdGFJbnB1dCB7XG4gIFwiVGhlIG1heGltdW0gbnVtYmVyIG9mIGRheXMgYWZ0ZXIgdGhlIHB1cmNoYXNlIGZvciB0aGUgcmVpbWJ1cnNlbWVudCB0byBiZSBzdWJtaXR0ZWQuXCJcbiAgc3VibWlzc2lvbkRlYWRsaW5lRGF5c0FmdGVyUHVyY2hhc2U6IEludFxufVxuXG5cIkFuIGFjdGlvbiBtZWFuaW5nIGEgbWVtbyBtdXN0IGJlIGFkZGVkIHRvIHRoZSBleHBlbnNlLlwiXG5pbnB1dCBQb2xpY3lSZXF1aXJlRXhwZW5zZU1lbW9JbnB1dCB7XG4gIFwiXCJcIlxuICBBIGR1bW15IGZpZWxkIGJlY2F1c2UgaW5wdXQgb2JqZWN0cyBtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIGlucHV0IGZpZWxkLlxuICBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvT2N0b2JlcjIwMjEvI3NlYy1JbnB1dC1PYmplY3RzXG4gIFwiXCJcIlxuICBfOiBCb29sZWFuXG59XG5cblwiQW4gYWN0aW9uIG1lYW5pbmcgYSByZWNlaXB0IG11c3QgYmUgYWRkZWQgdG8gdGhlIGV4cGVuc2UuXCJcbmlucHV0IFBvbGljeVJlcXVpcmVFeHBlbnNlUmVjZWlwdElucHV0IHtcbiAgXCJcIlwiXG4gIEEgZHVtbXkgZmllbGQgYmVjYXVzZSBpbnB1dCBvYmplY3RzIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgaW5wdXQgZmllbGQuXG4gIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9PY3RvYmVyMjAyMS8jc2VjLUlucHV0LU9iamVjdHNcbiAgXCJcIlwiXG4gIF86IEJvb2xlYW5cbn1cblxuXCJBbiBhY3Rpb24gbWVhbmluZyBhIHJldmlldyBpcyByZXF1aXJlZC4gVGhlIG9iamVjdCBoYXMgbm8gZmllbGRzIGJlY2F1c2UgdGhlIHJldmlld2VycyBhcmUgdG8gYmUgc3BlY2lmaWVkIGluIHRoZSByZXZpZXcgY2hhaW4uXCJcbmlucHV0IFBvbGljeVJlcXVpcmVSZXZpZXdJbnB1dCB7XG4gIFwiXCJcIlxuICBBIGR1bW15IGZpZWxkIGJlY2F1c2UgaW5wdXQgb2JqZWN0cyBtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIGlucHV0IGZpZWxkLlxuICBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvT2N0b2JlcjIwMjEvI3NlYy1JbnB1dC1PYmplY3RzXG4gIFwiXCJcIlxuICBfOiBCb29sZWFuXG59XG5cblwiQSBzZXQgb2YgcmV2aWV3ZXJzIHRoYXQgY2FuIHBlcmZvcm0gYSBnaXZlbiByZXZpZXcuIEFuIGFwcHJvdmFsIGJ5IEFOWSBvZiB0aGVtIHdpbGwgY2F1c2UgdGhlIHJldmlldyB0byBiZSBjb21wbGV0ZWQuXCJcbmlucHV0IFBvbGljeVJldmlld0lucHV0IHtcbiAgcmV2aWV3ZXJTZXQ6IFtQb2xpY3lBY3Rpb25UYXJnZXRJbnB1dCFdIVxufVxuXG5cIkEgZGVzY3JpcHRpb24gdGhhdCBvdmVycmlkZXMgb3VyIGdlbmVyYXRlZCBleHBsYWluYWJpbGl0eSB0ZXh0LlwiXG5pbnB1dCBQb2xpY3lSdWxlRGVzY3JpcHRpb25JbnB1dCB7XG4gIGRlc2NyaXB0aW9uOiBTdHJpbmchXG59XG5cblwiQSBsb2dpY2FsIGdyb3VwaW5nIG9mIHJ1bGVzIGZvciBleHBsYWluYWJpbGl0eSBhbmQgY29tcGlsYXRpb24uXCJcbmlucHV0IFBvbGljeVJ1bGVHcm91cElucHV0IHtcbiAgXCJPdGhlciBncm91cHMgb3IgcnVsZXMgbmVzdGVkIGluc2lkZSB0aGlzIHJ1bGUgZ3JvdXAuXCJcbiAgY2hpbGROb2RlczogW1BvbGljeUV4cGVuc2VQb2xpY3lOb2RlSW5wdXQhXSFcbiAgXCJJZiB0aGlzIGlzIGEgY3VzdG9tIGdyb3VwLCBpbmZvcm1hdGlvbiB0byBiZSBzaG93biBpbiB0aGUgVUkuIE90aGVyd2lzZSwgdGhpcyBpcyBpZ25vcmVkLlwiXG4gIGdyb3VwTWV0YWRhdGE6IFBvbGljeVJ1bGVHcm91cE1ldGFkYXRhSW5wdXRcbiAgXCIgVGhlIGtpbmQgb2YgZ3JvdXAuIFVzZWQgYnkgdGhlIGZyb250ZW5kIHRvIGRpc3BsYXkgdGhlIGdyb3VwIGNvcnJlY3RseS4gXCJcbiAgZ3JvdXBUeXBlOiBQb2xpY3lSdWxlR3JvdXBUeXBlIVxufVxuXG5cIkFkZGl0aW9uYWwgbWV0YWRhdGEgZm9yIGEgcnVsZSBncm91cCB0aGF0IGNhbiBiZSBkaXNwbGF5ZWQgaW4gdGhlIFVJLlwiXG5pbnB1dCBQb2xpY3lSdWxlR3JvdXBNZXRhZGF0YUlucHV0IHtcbiAgXCJUaGUgdGV4dCB0byBiZSBzaG93biB0byB1c2Vycy5cIlxuICBkZXNjcmlwdGlvbjogU3RyaW5nIVxufVxuXG5cIkRlZmluaXRpb24gb2YgYSBydWxlIGZvciBleHBsYWluYWJpbGl0eSBhbmQgY29tcGlsYXRpb24uXCJcbmlucHV0IFBvbGljeVJ1bGVJbnB1dCB7XG4gIFwiVGhlIGFjdGlvbnMgdGhhdCBhcmUgcmV0dXJuZWQgaWYgdGhlIGNyaXRlcmlhIGFyZSB0cnVlLlwiXG4gIGFjdGlvbnM6IFtQb2xpY3lBY3Rpb25TZXRJbnB1dCFdXG4gIFwiVGhlIGNvbmRpdGlvbiBmb3IgdGhlIHJ1bGUgdG8gbWF0Y2guXCJcbiAgY29uZGl0aW9uOiBQb2xpY3lFeHBlbnNlUnVsZU1ldGFkYXRhSW5wdXQhXG59XG5cblwiQW4gaW5jbHVzaW9uIG9yIGV4Y2x1c2lvbiBjb25kaXRpb24gZm9yIGFueSBhdHRyaWJ1dGUgdGhhdCBjYW4gYmUgcmVwcmVzZW50ZWQgYnkgdGhlIFBvbGljeU5hbWVBbmRJZHNJbnB1dCB0eXBlLlwiXG5pbnB1dCBQb2xpY3lTdGFuZGFyZFJ1bGVDb25kaXRpb25JbnB1dCB7XG4gIGNvbmRpdGlvbk9wZXJhdG9yOiBQb2xpY3lTdGFuZGFyZFJ1bGVDb25kaXRpb25PcGVyYXRvciFcbiAgc3ViamVjdHM6IFtQb2xpY3lOYW1lQW5kSWRzSW5wdXQhXSFcbn1cblxuXCJBIHNpbXBsZSBydWxlIHdpdGggY29uZGl0aW9ucyBmb3IgYW1vdW50IGFuZCBpbmNsdXNpb24gb3IgZXhjbHVzaW9uIG9mIGJvdGggbWVyY2hhbnRzIGFuZCBjYXRlZ29yaWVzLlwiXG5pbnB1dCBQb2xpY3lTdGFuZGFyZFJ1bGVNZXRhZGF0YUlucHV0IHtcbiAgXCJBIChwb3NzaWJseSBlbXB0eSkgc2V0IG9mIG1lcmNoYW50IGNhdGVnb3JpZXMgdG8gYmUgaW5jbHVkZWQgb3IgZXhjbHVkZWQgZnJvbSB0aGlzIHJ1bGUuXCJcbiAgbWVyY2hhbnRDYXRlZ29yaWVzOiBQb2xpY3lTdGFuZGFyZFJ1bGVDb25kaXRpb25JbnB1dFxuICBcIkEgKHBvc3NpYmx5IGVtcHR5KSBzZXQgb2YgbWVyY2hhbnRzIHRvIGJlIGluY2x1ZGVkIG9yIGV4Y2x1ZGVkIGZyb20gdGhpcyBydWxlLlwiXG4gIG1lcmNoYW50czogUG9saWN5U3RhbmRhcmRSdWxlQ29uZGl0aW9uSW5wdXRcbiAgXCJBbiBhbW91bnQgc3VjaCB0aGF0IGV4cGVuc2VzIE9WRVIgdGhpcyB0aHJlc2hvbGQgd2lsbCB0cmlnZ2VyIHRoZSBydWxlLlwiXG4gIHRocmVzaG9sZDogRmluYW5jaWFsQXNzZXRJbnB1dCFcbn1cblxuXCJcIlwiXG5BIHJ1bGUgdGhhdCByZXN0cmljdHMgZXhwZW5zZXMgaW4gYSBnaXZlbiBjYXRlZ29yeSB0byBhIHByZWRldGVybWluZWQgc2V0IG9mIHZlbmRvcnMuXG5FeGFtcGxlOiBBaXJmYXJlIG11c3QgYmUgYm9va2VkIHRocm91Z2ggVHJhdmVsQmFuay5cblwiXCJcIlxuaW5wdXQgUG9saWN5VmVuZG9yc0ZvckNhdGVnb3J5TWV0YWRhdGFJbnB1dCB7XG4gIFwiVGhlIG1lcmNoYW50cyB0aGF0IGNhbiBiZSB1c2VkIGZvciB0aGlzIGNhdGVnb3J5LlwiXG4gIGFsbG93ZWRNZXJjaGFudHM6IFtQb2xpY3lOYW1lQW5kSWRzSW5wdXQhXSFcbiAgXCJUaGUgY2F0ZWdvcnkgb24gd2hpY2ggc3BlbmRpbmcgaXMgcmVzdHJpY3RlZC5cIlxuICBtZXJjaGFudENhdGVnb3J5OiBQb2xpY3lOYW1lQW5kSWRzSW5wdXQhXG59XG5cbmlucHV0IFRpbWVJbnRlcnZhbElucHV0IHtcbiAgXCJFeGNsdXNpdmUgZW5kIGF0LlwiXG4gIGVuZEF0OiBUaW1lXG4gIFwiSW5jbHVzaXZlIHN0YXJ0IGF0LlwiXG4gIHN0YXJ0QXQ6IFRpbWVcbn1cbiIsCiAgInNlcnZpY2UiIDogImV3b2dJQ0p1WVcxbElpQTZJQ0p3YjJ4cFkybGxjeTFrWjNNaUxBb2dJQ0oxY213aUlEb2dJbWgwZEhBNkx5OXdiMnhwWTJsbGN5MWtaM002T0RBNE1DOTJNUzluY21Gd2FIRnNJaXdLSUNBaWFYTmZZV04wYVhabElpQTZJSFJ5ZFdVc0NpQWdJblZ3WkdGMFpXUmZZWFJmYzJWamIyNWtjeUlnT2lBek5Dd0tJQ0FpYVc1elpYSjBaV1JmWVhSZmMyVmpiMjVrY3lJZ09pQXpOQXA5IiwKICAiaW5zZXJ0ZWRfYXRfc2Vjb25kcyIgOiA0MQp9LCB7CiAgImlkIiA6ICJzbV9jbDEwOXgzbnAwMDBrMGU2MDh5ZGlwanJqIiwKICAidmVyc2lvbiIgOiAiZDM3OWIxNjk0YmQxMzE1NDkyOTY2M2FiOTcwODNmNzUzMGRhMjk0NGYyNTdkNzZiYmU4ZjExODNlMjY0NmZhYSIsCiAgInR5cGVfZGVmcyIgOiAiXCJEaXJlY3RzIHRoZSBleGVjdXRvciB0byBpbmNsdWRlIHRoaXMgZmllbGQgb3IgZnJhZ21lbnQgb25seSB3aGVuIHRoZSBgaWZgIGFyZ3VtZW50IGlzIHRydWVcIlxuZGlyZWN0aXZlIEBpbmNsdWRlKFxuICAgIFwiSW5jbHVkZWQgd2hlbiB0cnVlLlwiXG4gICAgaWY6IEJvb2xlYW4hXG4gICkgb24gRklFTEQgfCBGUkFHTUVOVF9TUFJFQUQgfCBJTkxJTkVfRlJBR01FTlRcblxuXCJEaXJlY3RzIHRoZSBleGVjdXRvciB0byBza2lwIHRoaXMgZmllbGQgb3IgZnJhZ21lbnQgd2hlbiB0aGUgYGlmYCdhcmd1bWVudCBpcyB0cnVlLlwiXG5kaXJlY3RpdmUgQHNraXAoXG4gICAgXCJTa2lwcGVkIHdoZW4gdHJ1ZS5cIlxuICAgIGlmOiBCb29sZWFuIVxuICApIG9uIEZJRUxEIHwgRlJBR01FTlRfU1BSRUFEIHwgSU5MSU5FX0ZSQUdNRU5UXG5cbmRpcmVjdGl2ZSBAZXh0ZW5kcyBvbiBPQkpFQ1QgfCBJTlRFUkZBQ0VcblxuZGlyZWN0aXZlIEBleHRlcm5hbCBvbiBGSUVMRF9ERUZJTklUSU9OXG5cbmRpcmVjdGl2ZSBAa2V5KGZpZWxkczogX0ZpZWxkU2V0ISkgcmVwZWF0YWJsZSBvbiBPQkpFQ1QgfCBJTlRFUkZBQ0VcblxuZGlyZWN0aXZlIEBwcm92aWRlcyhmaWVsZHM6IF9GaWVsZFNldCEpIG9uIEZJRUxEX0RFRklOSVRJT05cblxuZGlyZWN0aXZlIEByZXF1aXJlcyhmaWVsZHM6IF9GaWVsZFNldCEpIG9uIEZJRUxEX0RFRklOSVRJT05cblxuXCJNYXJrcyB0aGUgZmllbGQsIGFyZ3VtZW50LCBpbnB1dCBmaWVsZCBvciBlbnVtIHZhbHVlIGFzIGRlcHJlY2F0ZWRcIlxuZGlyZWN0aXZlIEBkZXByZWNhdGVkKFxuICAgIFwiVGhlIHJlYXNvbiBmb3IgdGhlIGRlcHJlY2F0aW9uXCJcbiAgICByZWFzb246IFN0cmluZyA9IFwiTm8gbG9uZ2VyIHN1cHBvcnRlZFwiXG4gICkgb24gRklFTERfREVGSU5JVElPTiB8IEFSR1VNRU5UX0RFRklOSVRJT04gfCBFTlVNX1ZBTFVFIHwgSU5QVVRfRklFTERfREVGSU5JVElPTlxuXG5cIkV4cG9zZXMgYSBVUkwgdGhhdCBzcGVjaWZpZXMgdGhlIGJlaGF2aW91ciBvZiB0aGlzIHNjYWxhci5cIlxuZGlyZWN0aXZlIEBzcGVjaWZpZWRCeShcbiAgICBcIlRoZSBVUkwgdGhhdCBzcGVjaWZpZXMgdGhlIGJlaGF2aW91ciBvZiB0aGlzIHNjYWxhci5cIlxuICAgIHVybDogU3RyaW5nIVxuICApIG9uIFNDQUxBUlxuXG5cIlwiXCJcblRoZSBpbnRlcmZhY2UgZm9yIHBhZ2luYXRpbmcgdGhyb3VnaCBjb2xsZWN0aW9ucyBvZiBlbGVtZW50cy5cbkV2ZXJ5IGNvbGxlY3Rpb24gb2YgZW50aXRpZXMgbm90IHJldHVybmVkIGJ5IGEgbXV0YXRpb24gcmVzdWx0IHNob3VsZFxucGFnaW5hdGUgdGhyb3VnaCBhIGNvbm5lY3Rpb24uIFRoYXQgaXMsIGB0eXBlc2Agd2l0aCBhIGZpZWxkIHRoYXQgaXNcbmFuIGBhcnJheWAgc2hvdWxkIGJlIGV4Y2VlZGluZ2x5IHJhcmUuXG5XZSB3YW50IGFsbCBjb2xsZWN0aW9ucyBvZiB0aGluZ3MgdG8gYmUgcGFnaW5hdGVkLlxuXCJcIlwiXG5pbnRlcmZhY2UgQ29ubmVjdGlvbiB7XG4gIFwiUGFnZSBpbmZvcm1hdGlvbiBmb3IgYWRkaXRpb25hbCBuYXZpZ2F0aW9uIHRocm91Z2ggdGhpcyBjb25uZWN0aW9uLlwiXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgXCJcIlwiXG4gIFRoZSB0b3RhbCBjb3VudCBvZiBpdGVtcyBtYXRjaGluZyB0aGUgZmlsdGVyIGNyaXRlcmlhIHNwZWNpZmllZCBmb3IgdGhpcyBjb25uZWN0aW9uLlxuICBUaGlzIHZhbHVlIG1heSBiZSBhcHByb3hpbWF0ZS4gQW5kIHRoaXMgdmFsdWUgbWF5IG5vdCBiZSBwcm92aWRlZCBhdCBhbGwuIE5vdCBhbGwgY29ubmVjdGlvbnNcbiAgY2FuIGJlIGNvdW50ZWQgZWFzaWx5LlxuICBcIlwiXCJcbiAgdG90YWxDb3VudDogSW50XG59XG5cbnVuaW9uIEV4cGVuc2VPcmlnaW5hdG9yID0gQ2FyZFRyYW5zYWN0aW9uIHwgUmVpbWJ1cnNlbWVudEl0ZW1cblxudW5pb24gX0VudGl0eSA9IEFjY291bnQgfCBCdWRnZXQgfCBDYXJkIHwgQ2FyZFRyYW5zYWN0aW9uIHwgRGVwYXJ0bWVudCB8IERpc3B1dGUgfCBFbXBsb3llZSB8IEV4cGVuc2UgfCBFeHBlbnNlUmVxdWVzdCB8IExvY2F0aW9uIHwgTWVyY2hhbnQgfCBNZXJjaGFudENhdGVnb3J5IHwgUmVpbWJ1cnNlbWVudEl0ZW0gfCBVc2VyXG5cbnR5cGUgQWNjb3VudCBAZXh0ZW5kcyBAa2V5KGZpZWxkcyA6IFwiaWRcIikge1xuICBpZDogSUQhIEBleHRlcm5hbFxufVxuXG50eXBlIEJ1ZGdldCBAZXh0ZW5kcyBAa2V5KGZpZWxkcyA6IFwiaWRcIikge1xuICBpZDogSUQhIEBleHRlcm5hbFxufVxuXG50eXBlIENhcmQgQGV4dGVuZHMgQGtleShmaWVsZHMgOiBcImlkXCIpIHtcbiAgaWQ6IElEISBAZXh0ZXJuYWxcbn1cblxudHlwZSBDYXJkUGF5bWVudEFjY2VwdG9yIHtcbiAgXCJUaGUgYWRkcmVzcyBvZiB0aGUgYWNjZXB0b3IuXCJcbiAgYWRkcmVzczogU3RyaW5nIVxuICBcIlRoZSBjaXR5IG9mIHRoZSBhY2NlcHRvci5cIlxuICBjaXR5OiBTdHJpbmchXG4gIFwiVGhlIGNvdW50cnkgb2YgdGhlIGFjY2VwdG9yLlwiXG4gIGNvdW50cnk6IFN0cmluZyFcbiAgXCJUaGUgTWVyY2hhbnQgQ2F0ZWdvcnkgQ29kZSBvZiB0aGUgYWNjZXB0b3IuXCJcbiAgbWNjOiBTdHJpbmchXG4gIFwiVGhlIHVuaXF1ZSBJRCBvZiB0aGUgTWVyY2hhbnQgdGhhdCBpcyB0aGUgY2FyZCBhY2NlcHRvci5cIlxuICBtaWQ6IFN0cmluZyFcbiAgXCJUaGUgbmFtZSBvZiB0aGUgYWNjZXB0b3IuXCJcbiAgbmFtZTogU3RyaW5nIVxuICBcIlRoZSBwb3N0YWwgY29kZSBvZiB0aGUgYWNjZXB0b3IuXCJcbiAgcG9zdGFsQ29kZTogU3RyaW5nIVxuICBcIlRoZSBzdGF0ZSBvZiB0aGUgYWNjZXB0b3IuXCJcbiAgc3RhdGU6IFN0cmluZyFcbn1cblxudHlwZSBDYXJkVHJhbnNhY3Rpb24gQGtleShmaWVsZHMgOiBcImlkXCIpIHtcbiAgXCJUaGUgQ2FyZCB0aGUgdHJhbnNhY3Rpb24gd2FzIG1hZGUgb24uXCJcbiAgY2FyZDogQ2FyZFxuICBcIlRoZSBDYXJkIEFjY2VwdG9yIGF0IHdoaWNoIHRoZSB0cmFuc2FjdGlvbiB3YXMgbWFkZVwiXG4gIGNhcmRQYXltZW50QWNjZXB0b3I6IENhcmRQYXltZW50QWNjZXB0b3JcbiAgXCJcIlwiXG4gIERPIE5PVCBVU0UgVEhJUyBGSUVMRCBXSEVOIExJU1RJTkcgRVhQRU5TRVMuIFlPVSBXSUxMIEJSRUFLIFRIRSBEQVNIQk9BUkRcbiAgVGhlIG9wdGlvbmFsIGRpc3B1dGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBDYXJkIFRyYW5zYWN0aW9uLlxuICBcIlwiXCJcbiAgZGlzcHV0ZTogRGlzcHV0ZVxuICBcIlRoZSB1bmlxdWUgVElMTCBQYXltZW50IElEIG9mIHRoZSBDYXJkIFRyYW5zYWN0aW9uLlwiXG4gIGlkOiBJRCFcbiAgXCJUaGUgdW5pcXVlIHByZXNlbnQgdHJhbnNhY3Rpb24gSUQgb2YgdGhlIENhcmQgVHJhbnNhY3Rpb24uXCJcbiAgcHJlc2VudFRyYW5zYWN0aW9uSWQ6IElEIVxufVxuXG50eXBlIENyZWF0ZUV4cGVuc2VzU2VhcmNoUmVwb3J0UmVzdWx0IHtcbiAgXCJUaGUgZXhwZW5zZXMgc2VhcmNoIHJlcG9ydC5cIlxuICByZXBvcnQ6IEV4cGVuc2VzUmVwb3J0IVxufVxuXG50eXBlIERlcGFydG1lbnQgQGV4dGVuZHMgQGtleShmaWVsZHMgOiBcImlkXCIpIHtcbiAgaWQ6IElEISBAZXh0ZXJuYWxcbn1cblxudHlwZSBEaXNwdXRlIEBleHRlbmRzIEBrZXkoZmllbGRzIDogXCJpZFwiKSB7XG4gIGlkOiBJRCEgQGV4dGVybmFsXG59XG5cbnR5cGUgRW1wbG95ZWUgQGV4dGVuZHMgQGtleShmaWVsZHMgOiBcImN1c3RvbWVyVXNlcklkXCIpIHtcbiAgY3VzdG9tZXJVc2VySWQ6IElEIEBleHRlcm5hbFxufVxuXG5cIkFuIEV4cGVuc2UgaW5jdXJyZWQgYnkgYSBjdXN0b21lci5cIlxudHlwZSBFeHBlbnNlIEBrZXkoZmllbGRzIDogXCJpZFwiKSB7XG4gIFwiVGhlIEN1c3RvbWVyIEFjY291bnQgdGhhdCBoYXMgdmlzaWJpbGl0eSB0byB0aGlzIGV4cGVuc2VcIlxuICBhY2NvdW50OiBBY2NvdW50IVxuICBcIlRoZSB0aW1lIG9mIGFjY3J1YWxcIlxuICBhY2NydWVkQXQ6IFRpbWUgQGRlcHJlY2F0ZWQocmVhc29uIDogXCJVc2UgcG9zdGVkQXQgaW5zdGVhZC5cIilcbiAgXCJBbW91bnQgb2YgdGhlIGV4cGVuc2U7IG1heSBiZSBuZWdhdGl2ZVwiXG4gIGFtb3VudDogRmluYW5jaWFsQXNzZXRcbiAgXCJUaGUgYnVkZ2V0IHRvIHdoaWNoIHRoaXMgZXhwZW5zZSBhY2NydWVzIChoYXMgY3VzdG9tZXIgZGVmYXVsdDsgb3B0aW9uYWwgYmVmb3JlIGRlZmF1bHQgYnVkZ2V0cyBleGlzdClcIlxuICBidWRnZXQ6IEJ1ZGdldFxuICBcIlRoZSBjdXN0b20gbWVyY2hhbnQgbmFtZSB0aGF0IHRoZSB1c2VyIG1hbnVhbGx5IHNhdmVkXCJcbiAgY3VzdG9tTWVyY2hhbnQ6IFN0cmluZ1xuICBcIlRoZSBDdXN0b21lciBVc2VyIHdobyBpbmN1cnJlZCB0aGUgZXhwZW5zZVwiXG4gIGN1c3RvbWVyOiBVc2VyIVxuICBcIlRoZSBDdXN0b21lciBEZXBhcnRtZW50IHRvIHdoaWNoIHRoZSBleHBlbnNlIGlzIGF0dHJpYnV0ZWQsIGF1dG8tZGVub3JtYWxpemVkIGZyb20gVXNlclwiXG4gIGRlcGFydG1lbnQ6IERlcGFydG1lbnRcbiAgXCJUaGUgZGlzcGxheSBzdGF0dXMgb2YgdGhlIGV4cGVuc2U7IHRha2VzIGludG8gYWNjb3VudCBwYXltZW50IHN0YXR1cyAmIGRpc3B1dGVzXCJcbiAgZGlzcGxheVN0YXR1czogRXhwZW5zZURpc3BsYXlTdGF0dXNcbiAgXCJUaGUgRW1wbG95ZWUgd2hvIGluY3VycmVkIHRoZSBleHBlbnNlXCJcbiAgZW1wbG95ZWU6IEVtcGxveWVlIVxuICBcIlRoZSB1bmlxdWUgSUQgb2YgdGhlIGV4cGVuc2UuXCJcbiAgaWQ6IElEIVxuICBcIlRoZSBDdXN0b21lciBMb2NhdGlvbiB0byB3aGljaCB0aGUgZXhwZW5zZSBpcyBhdHRyaWJ1dGVkLCBhdXRvLWRlbm9ybWFsaXplZCBmcm9tIFVzZXJcIlxuICBsb2NhdGlvbjogTG9jYXRpb25cbiAgXCJUaGUgbWVtbyBsaW5lXCJcbiAgbWVtbzogU3RyaW5nXG4gIFwiVGhlIG1lcmNoYW50IGNvdW50ZXItcGFydHlcIlxuICBtZXJjaGFudDogTWVyY2hhbnRcbiAgXCJNZXJjaGFudCBhY2N1cmFjeVwiXG4gIG1lcmNoYW50QWNjdXJhY3k6IEJvb2xlYW5cbiAgXCJNZXJjaGFudCBjYXRlZ29yeVwiXG4gIG1lcmNoYW50Q2F0ZWdvcnk6IE1lcmNoYW50Q2F0ZWdvcnlcbiAgXCJFeHBlbnNlIE9yaWdpbmF0b3JcIlxuICBvcmlnaW5hdG9yOiBFeHBlbnNlT3JpZ2luYXRvclxuICBcIlRoZSBwYXJlbnQgZXhwZW5zZSBvZiB0aGlzIGV4cGVuc2VcIlxuICBwYXJlbnRFeHBlbnNlOiBFeHBlbnNlXG4gIFwiVGhlIHBheW1lbnQgc3RhdHVzIHJlYXNvbiBvZiB0aGUgZXhwZW5zZVwiXG4gIHBheW1lbnRTdGF0dXM6IEV4cGVuc2VQYXltZW50U3RhdHVzXG4gIFwiVGhlIHRpbWUgd2hlbiB0aGUgYXNzb2NpYXRlZCBwYXltZW50IGlzIHBvc3RlZFwiXG4gIHBvc3RlZEF0OiBUaW1lXG4gIFwiVGhlIHRpbWUgb2YgcHVyY2hhc2VcIlxuICBwdXJjaGFzZWRBdDogVGltZVxuICBcIkRlbm9ybWFsaXplZCBjb3VudCBvZiByZWNlaXB0cyBmb3IgYW4gZXhwZW5zZVwiXG4gIHJlY2VpcHRDb3VudDogSW50IVxuICBcIlRoZSBjdXJyZW50IGFjdGl2ZSByZXF1ZXN0IHRoYXQgaXMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZXhwZW5zZVwiXG4gIHJlcXVlc3Q6IEV4cGVuc2VSZXF1ZXN0XG4gIFwiVGhlIHN0YXR1cyBvZiB0aGUgZXhwZW5zZVwiXG4gIHN0YXR1czogRXhwZW5zZVN0YXR1cyFcbiAgXCJUaGUgdHlwZSBvZiB0aGUgZXhwZW5zZVwiXG4gIHR5cGU6IEV4cGVuc2VUeXBlIVxufVxuXG5cIkFuIEV4cGVuc2UgY29ubmVjdGlvbiBmb3IgRXhwZW5zZSBwYWdpbmF0aW9uLlwiXG50eXBlIEV4cGVuc2VDb25uZWN0aW9uIGltcGxlbWVudHMgQ29ubmVjdGlvbiB7XG4gIFwiVGhlIGV4cGVuc2VzIGluIHRoZSBjdXJyZW50IHBhZ2Ugb2YgcmVzdWx0cy5cIlxuICBlZGdlczogW0V4cGVuc2VFZGdlIV0hXG4gIFwiUGFnZSBpbmZvcm1hdGlvbiBmb3IgYWRkaXRpb25hbCBuYXZpZ2F0aW9uIHRocm91Z2ggdGhpcyBjb25uZWN0aW9uLlwiXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgXCJUaGUgdG90YWwgY291bnQgb2YgZXhwZW5zZXMgbWF0Y2hpbmcgdGhlIGZpbHRlciBjcml0ZXJpYSBzcGVjaWZpZWQgZm9yIHRoaXMgY29ubmVjdGlvbi5cIlxuICB0b3RhbENvdW50OiBJbnRcbn1cblxuXCJBIEV4cGVuc2UgZWRnZSBmb3IgdGhlIEV4cGVuc2UgY29ubmVjdGlvbi5cIlxudHlwZSBFeHBlbnNlRWRnZSB7XG4gIFwiVGhlIG9wYXF1ZSBjdXJzb3Igb2YgdGhlIGN1cnJlbnQgZWRnZS5cIlxuICBjdXJzb3I6IFN0cmluZ1xuICBcIlRoZSBleHBlbnNlIGF0IHRoaXMgZWRnZS5cIlxuICBub2RlOiBFeHBlbnNlXG59XG5cbnR5cGUgRXhwZW5zZVBheW1lbnRTdGF0dXMge1xuICBcIlwiXCJcbiAgRE8gTk9UIElOQ0xVREUgVEhJUyBGSUVMRCBJTiBBTlkgZXhwZW5zZXMoKSAoTGlzdEV4cGVuc2VzKSBjYWxsLiBDYW4gYmUgdXNlZCBvbmx5IGZvciBleHBlbnNlKCkgKEdldEV4cGVuc2UpLlxuICBcbiAgVGhlIHJlYXNvbiBmb3IgdGhlIHBheWVtbnQgc3RhdHVzIHJlYXNvblxuICBcIlwiXCJcbiAgcmVhc29uOiBFeHBlbnNlUGF5bWVudFN0YXR1c1JlYXNvblxuICBcIlRoZSBleHBlbnNlJ3MgcGF5bWVudCBzdGF0dXMuXCJcbiAgc3RhdHVzVHlwZTogRXhwZW5zZVBheW1lbnRTdGF0dXNUeXBlXG59XG5cbnR5cGUgRXhwZW5zZVJlcXVlc3QgQGV4dGVuZHMgQGtleShmaWVsZHMgOiBcImlkXCIpIHtcbiAgaWQ6IElEISBAZXh0ZXJuYWxcbn1cblxuXCJUaGUgcmVwb3J0IGluY3VycmVkIGJ5IGEgY3VzdG9tZXIuXCJcbnR5cGUgRXhwZW5zZXNSZXBvcnQge1xuICBcIlRoZSBmaWxlIG9mIHRoZSByZXBvcnRcIlxuICBmaWxlOiBFeHBlbnNlc1JlcG9ydEZpbGUhXG59XG5cbnR5cGUgRXhwZW5zZXNSZXBvcnRGaWxlIHtcbiAgXCJUaGUgZmlsZSBkb3dubG9hZCB1cmwgb2YgdGhlIHJlcG9ydC5cIlxuICBkb3dubG9hZFVybDogU3RyaW5nIVxuICBcIlRoZSB1bmlxdWUgSUQgb2YgdGhlIHJlcG9ydCBmaWxlLlwiXG4gIGlkOiBJRCFcbn1cblxuXCJGaW5hbmNpYWwgQXNzZXQgd3JhcHBlclwiXG50eXBlIEZpbmFuY2lhbEFzc2V0IHtcbiAgXCJUaGUgaW5zdHJ1bWVudCBjb2RlICh1c2QsIGV0Yy4pLiBDdXJyZW50bHksIG9ubHkgdXNkIGlzIHN1cHBvcnRlZC5cIlxuICBpbnN0cnVtZW50Q29kZTogRmluYW5jaWFsSW5zdHJ1bWVudENvZGUhXG4gIFwiVGhlIGFtb3VudCBpbiBjZW50c1wiXG4gIHF1YW50aXR5Q2VudHM6IEludCFcbn1cblxudHlwZSBJdGVtaXplRXhwZW5zZVJlc3VsdCB7XG4gIFwiVGhlIGl0ZW1pemVkIGV4cGVuc2VzIHRoYXQgd2VyZSBjcmVhdGVkLlwiXG4gIGV4cGVuc2VzOiBbRXhwZW5zZSFdIVxufVxuXG50eXBlIExvY2F0aW9uIEBleHRlbmRzIEBrZXkoZmllbGRzIDogXCJpZFwiKSB7XG4gIGlkOiBJRCEgQGV4dGVybmFsXG59XG5cbnR5cGUgTWVyY2hhbnQgQGV4dGVuZHMgQGtleShmaWVsZHMgOiBcImlkXCIpIHtcbiAgaWQ6IElEISBAZXh0ZXJuYWxcbn1cblxudHlwZSBNZXJjaGFudENhdGVnb3J5IEBleHRlbmRzIEBrZXkoZmllbGRzIDogXCJpZFwiKSB7XG4gIGlkOiBJRCEgQGV4dGVybmFsXG59XG5cbnR5cGUgTXV0YXRpb24ge1xuICBcIkV4cG9ydHMgZXhwZW5zZXMgZnJvbSBnaXZlbiBleHBlbnNlcyBmaWx0ZXIgc2VhcmNoIHJlcG9ydCBieSByZXF1ZXN0IGZpbGUgdHlwZVwiXG4gIGNyZWF0ZUV4cGVuc2VzU2VhcmNoUmVwb3J0KGlucHV0OiBDcmVhdGVFeHBlbnNlc1NlYXJjaFJlcG9ydElucHV0ISk6IENyZWF0ZUV4cGVuc2VzU2VhcmNoUmVwb3J0UmVzdWx0IVxuICBcIkl0ZW1pemUgZXhwZW5zZVwiXG4gIGl0ZW1pemVFeHBlbnNlKGlucHV0OiBJdGVtaXplRXhwZW5zZUlucHV0ISk6IEl0ZW1pemVFeHBlbnNlUmVzdWx0IVxuICBcIlJldHJ5IHJlaW1idXJzZW1lbnQgcGF5bWVudFwiXG4gIHJldHJ5UmVpbWJ1cnNlbWVudFBheW1lbnQoaW5wdXQ6IFJldHJ5UmVpbWJ1cnNlbWVudFBheW1lbnRJbnB1dCEpOiBSZXRyeVJlaW1idXJzZW1lbnRQYXltZW50UmVzdWx0IVxuICBcIlwiXCJcbiAgVXBkYXRlIGFuIGV4cGVuc2VcbiAgVGhlIG9wZXJhdGlvbiBpc24ndCBndWFyYW50ZWVkIHRvIGJlIGF0b21pYywgYW5kIHNob3VsZCBiZSByZXRyaWVkIHVudGlsIGl0IHN1Y2NlZWRzLlxuICBcIlwiXCJcbiAgdXBkYXRlRXhwZW5zZShpbnB1dDogVXBkYXRlRXhwZW5zZUlucHV0ISk6IFVwZGF0ZUV4cGVuc2VSZXN1bHQhXG4gIFwiVXBkYXRlIG11bHRpcGxlIGV4cGVuc2VzXCJcbiAgdXBkYXRlRXhwZW5zZXMoaW5wdXQ6IFVwZGF0ZUV4cGVuc2VzSW5wdXQhKTogVXBkYXRlRXhwZW5zZXNSZXN1bHQhXG59XG5cbnR5cGUgUGFnZUluZm8ge1xuICBcIldoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS5cIlxuICBlbmRDdXJzb3I6IFN0cmluZ1xuICBcIldoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/XCJcbiAgaGFzTmV4dFBhZ2U6IEJvb2xlYW4hXG4gIFwiV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/XCJcbiAgaGFzUHJldmlvdXNQYWdlOiBCb29sZWFuIVxuICBcIldoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuXCJcbiAgc3RhcnRDdXJzb3I6IFN0cmluZ1xufVxuXG50eXBlIFF1ZXJ5IHtcbiAgX2VudGl0aWVzKHJlcHJlc2VudGF0aW9uczogW19BbnkhXSEpOiBbX0VudGl0eV0hXG4gIF9zZXJ2aWNlOiBfU2VydmljZVxuICBcIkdldCBhbiBleHBlbnNlIGJ5IGlkXCJcbiAgZXhwZW5zZShpZDogSUQhKTogRXhwZW5zZVxuICBcIkxpc3QgZXhwZW5zZXNcIlxuICBleHBlbnNlcyhmaWx0ZXI6IEV4cGVuc2VGaWx0ZXJJbnB1dCwgb3JkZXI6IEV4cGVuc2VPcmRlcklucHV0LCBwYWdlOiBQYWdpbmF0aW9uSW5wdXQpOiBFeHBlbnNlQ29ubmVjdGlvbiFcbiAgXCJQcmV2aWV3IGV4cGVuc2UgbGVuc2VzIHdpdGggYSBuZXcgaW50ZWdyYXRpb24gcnVsZVwiXG4gIHByZXZpZXdFeHBlbnNlTGVuc2VzKGludGVncmF0aW9uSWQ6IElEISwgb21pdFJ1bGVJZDogSUQsIHBhZ2U6IFBhZ2luYXRpb25JbnB1dCwgcnVsZUJvZHk6IFN0cmluZyEpOiBFeHBlbnNlQ29ubmVjdGlvbiFcbiAgXCJMaXN0IHVuZXhwb3J0ZWQgRXhwZW5zZXNcIlxuICB1bmV4cG9ydGVkRXhwZW5zZXMoZW5kRGF0ZTogVGltZSwgZmlsdGVyOiBFeHBlbnNlTGVuc0ZpbHRlcklucHV0LCBpbnRlZ3JhdGlvbklkOiBJRCEsIHBhZ2U6IFBhZ2luYXRpb25JbnB1dCwgc3RhcnREYXRlOiBUaW1lKTogRXhwZW5zZUNvbm5lY3Rpb24hXG59XG5cbnR5cGUgUmVpbWJ1cnNlbWVudEl0ZW0gQGV4dGVuZHMgQGtleShmaWVsZHMgOiBcImlkXCIpIHtcbiAgaWQ6IElEISBAZXh0ZXJuYWxcbn1cblxudHlwZSBSZXRyeVJlaW1idXJzZW1lbnRQYXltZW50UmVzdWx0IHtcbiAgXCJUaGUgZXhwZW5zZSB0aGF0IHdhcyByZXRyaWVkLlwiXG4gIGV4cGVuc2U6IEV4cGVuc2UhXG59XG5cbnR5cGUgVXBkYXRlRXhwZW5zZVJlc3VsdCB7XG4gIFwiVGhlIGV4cGVuc2UgdGhhdCB3YXMgdXBkYXRlZC5cIlxuICBleHBlbnNlOiBFeHBlbnNlIVxufVxuXG50eXBlIFVwZGF0ZUV4cGVuc2VzUmVzdWx0IHtcbiAgXCJUaGUgZXhwZW5zZXMgdGhhdCB3ZXJlIHVwZGF0ZWQuXCJcbiAgZXhwZW5zZXM6IFtFeHBlbnNlIV0hXG59XG5cbnR5cGUgVXNlciBAZXh0ZW5kcyBAa2V5KGZpZWxkcyA6IFwiaWRcIikge1xuICBpZDogSUQhIEBleHRlcm5hbFxufVxuXG50eXBlIF9TZXJ2aWNlIHtcbiAgc2RsOiBTdHJpbmchXG59XG5cblwiVGhlIGRpc3BsYXkgc3RhdHVzIG9mIHRoZSBleHBlbnNlOyB0YWtlcyBpbnRvIGFjY291bnQgcGF5bWVudCBhbmQgZGlzcHV0ZXMuXCJcbmVudW0gRXhwZW5zZURpc3BsYXlTdGF0dXMge1xuICBcIkFuIGFwcHJvdmVkIGV4cGVuc2UgaXMgZXZhbHVhdGVkIHRvIGhhdmUgbWV0IHRoZSBwb2xpY3kgcmVxdWlyZW1lbnRzLlwiXG4gIEFQUFJPVkVEXG4gIFwiVGhlIGV4cGVuc2UgZ290IGNhbmNlbGxlZCAoZnJvbSBhIHN1Ym1pdHRlZCByZWltYnVyc2VtZW50IG9yIHBlbmRpbmcgY2hhcmdlKS5cIlxuICBDQU5DRUxFRFxuICBcIlBheW1lbnQgZm9yIHRoZSBleHBlbnNlIGlzIGEgY2hhcmdlYmFjay5cIlxuICBDSEFSR0VCQUNLXG4gIFwiUGF5bWVudCBmb3IgdGhlIGV4cGVuc2UgZ290IGRlY2xpbmVkLCBhcHBsaWVzIHRvIGNhcmQgZXhwZW5zZSBvbmx5LlwiXG4gIERFQ0xJTkVEXG4gIFwiVGhlIGV4cGVuc2Ugd2FzIHJlamVjdGVkLlwiXG4gIERFTklFRFxuICBcIlwiXCJcbiAgVGhlIGV4cGVuc2UgaXMgZGlzcHV0ZWQuXG4gIFxuICBOT1QgWUVUIFNVUFBPUlRFRFxuICBcIlwiXCJcbiAgRElTUFVURURcbiAgXCJBbiBleHBlbnNlIHRoYXQgaGFzIG5vdCBiZWVuIHN1Ym1pdHRlZCB5ZXQsIGFwcGxpZXMgdG8gcmVpbWJ1cnNlbWVudCBvbmx5LlwiXG4gIERSQUZUXG4gIFwiUGF5bWVudCBmb3IgdGhlIGV4cGVuc2UgY29tcGxldGVkLlwiXG4gIFBBSURcbiAgXCJQYXltZW50IGZvciB0aGUgZXhwZW5zZSBmYWlsZWQgdG8gZ28gdGhyb3VnaC5cIlxuICBQQVlNRU5UX0ZBSUxFRFxuICBcIlRoZSBleHBlbnNlIGhhcyBvcGVuIGFjdGlvbiByZXF1ZXN0cyAtIGNhbiBpbmNsdWRlIHJldmlld3MsIG1lbW9zLCBldGMuXCJcbiAgUEVORElOR19BUFBST1ZBTFxuICBcIlBheW1lbnQgZm9yIHRoZSBleHBlbnNlIGlzIHByb2Nlc3NpbmcuXCJcbiAgUFJPQ0VTU0lOR1xuICBcIlBheW1lbnQgZm9yIHRoZSBleHBlbnNlIGlzIGEgcmVmdW5kLlwiXG4gIFJFRlVORFxufVxuXG5cIlwiXCJcblBheW1lbnQgU3RhdHVzIHJlYXNvbnMgY29tbW9uIGFjcm9zcyBhbGwgcmFpbHNcblxuUmVpbWJ1cnNlbWVudCBQYXltZW50IFN0YXR1cyBSZWFzb25zOiBUT0RPXG5cIlwiXCJcbmVudW0gRXhwZW5zZVBheW1lbnRTdGF0dXNSZWFzb24ge1xuICBBQ0NPVU5UX1NVU1BFTkRFRFxuICBcIkNvbW1vbiBhY3Jvc3MgUGF5bWVudCBUeXBlc1wiXG4gIEFQUFJPVkVEXG4gIEJVREdFVF9BUkNISVZFRFxuICBCVURHRVRfQ0FURUdPUllfUkVTVFJJQ1RJT05cbiAgQlVER0VUX0VYUElSRURcbiAgQlVER0VUX01FUkNIQU5UX1JFU1RSSUNUSU9OXG4gIEJVREdFVF9OT1RfQVBQUk9WRURcbiAgQlVER0VUX05PVF9ZRVRfU1RBUlRFRFxuICBDQVJEX0VYUElSRURcbiAgQ0FSRF9OT1RfQUNUSVZFXG4gIENBUkRfU1VTUEVOREVEXG4gIENBUkRfVEVSTUlOQVRFRFxuICBFWENFRURFRF9CVURHRVRfTElNSVRcbiAgRVhDRUVERURfQ0FSRF9MSU1JVFxuICBFWENFRURFRF9DQVNIX0FEVkFOQ0VfR0xPQkFMX0xJTUlUXG4gIEVYQ0VFREVEX0NBU0hfQURWQU5DRV9VU0VSX0xJTUlUXG4gIEVYQ0VFREVEX0dMT0JBTF9MSU1JVFxuICBFWENFRURFRF9QSU5fQVRURU1QVFNcbiAgRVhDRUVERURfVVNFUl9MSU1JVFxuICBJTlNJREVfU0FOQ1RJT05FRF9DT1VOVFJZXG4gIElOVkFMSURfQklMTElOR19BRERSRVNTXG4gIElOVkFMSURfQ0FSRF9DUkVERU5USUFMU1xuICBJTlZBTElEX0NWVlxuICBcIkNhcmQgUGF5bWVudCBTdGF0dXMgUmVhc29uc1wiXG4gIElOVkFMSURfRVhQSVJBVElPTl9EQVRFXG4gIElOVkFMSURfUElOXG4gIE1DQ19CTE9DS0VEXG4gIE5PX0JVREdFVFxuICBPVEhFUlxuICBTT0ZUX0VYUElSQVRJT05cbiAgU1VTUEVDVEVEX0ZSQVVEXG4gIFVTRVJfU1VTUEVOREVEXG59XG5cblwiVGhlIHN0YXR1cyBvZiB0aGUgZXhwZW5zZSdzIHBheW1lbnQuXCJcbmVudW0gRXhwZW5zZVBheW1lbnRTdGF0dXNUeXBlIHtcbiAgXCJQYXltZW50IGlzIGNhbmNlbGVkLlwiXG4gIENBTkNFTEVEXG4gIFwiXCJcIlxuICBQYXltZW50IGlzIGEgd2l0aGRyYXdhbCwgd2hpY2ggcmVwcmVzZW50cyBhIGNhc2ggYWR2YW5jZS5cbiAgVGhpcyBjb3JyZXNwb25kcyB0byBib3RoIFdJVEhEUkFXSU5HICYgV0lUSERSRVcgb24gdGhlIGJhY2stZW5kLlxuICBcIlwiXCJcbiAgQ0FTSF9BRFZBTkNFXG4gIFwiUGF5bWVudCBjbGVhcmVkLlwiXG4gIENMRUFSRURcbiAgXCJcIlwiXG4gIFBheW1lbnQgaXMgYSBjcmVkaXQgdG8gdGhlIHVzZXIuXG4gIEN1cnJlbnRseSwgdGhpcyBtZWFucyBjaGFyZ2ViYWNrcy5cbiAgXCJcIlwiXG4gIENSRURJVEVEXG4gIFwiUGF5bWVudCBmYWlsZWQgb3IgZ290IGRlY2xpbmVkLlwiXG4gIERFQ0xJTkVEXG4gIFwiUGF5bWVudCBpcyBwcm9jZXNzaW5nLlwiXG4gIFBST0NFU1NJTkdcbiAgXCJQYXltZW50IGlzIGEgY2xlYXJlZCByZWZ1bmQuXCJcbiAgUkVGVU5ERURcbiAgXCJQYXltZW50IGlzIGEgcmVmdW5kIGluIHByb2dyZXNzLlwiXG4gIFJFRlVORElOR1xufVxuXG5cIlRoZSB0eXBlIG9mIHRoZSByZXF1ZXN0IGFjdGlvbi5cIlxuZW51bSBFeHBlbnNlUmVxdWVzdEFjdGlvblR5cGUge1xuICBcIkEgbm90aWZpY2F0aW9uIGlzIHJlcXVlc3RlZC5cIlxuICBOT1RJRllcbiAgXCJBIGp1c3RpZmljYXRpb24gaXMgcmVxdWVzdGVkLlwiXG4gIFJFUVVJUkVfSlVTVElGSUNBVElPTlxuICBcIkEgbWVtbyBpcyByZXF1ZXN0ZWQuXCJcbiAgUkVRVUlSRV9NRU1PXG4gIFwiQSByZWNlaXB0IGlzIHJlcXVlc3RlZC5cIlxuICBSRVFVSVJFX1JFQ0VJUFRcbiAgXCJBIG1hbmFnZXIgKG9yIG90aGVyKSByZXZpZXcgaXMgcmVxdWVzdGVkLlwiXG4gIFJFUVVJUkVfUkVWSUVXXG59XG5cblwiVGhlIHN0YXR1cyBvZiB0aGUgZXhwZW5zZS5cIlxuZW51bSBFeHBlbnNlU3RhdHVzIHtcbiAgXCJBbiBhcHByb3ZlZCBleHBlbnNlIGlzIHB1YmxpYywgd2l0aCBhIHJlcXVlc3QgZXZhbHVhdGVkIHRvIGhhdmUgbWV0IHRoZSBwb2xpY3kgcmVxdWlyZW1lbnRzXCJcbiAgQVBQUk9WRURcbiAgXCJBIGNhbmNlbGVkIGV4cGVuc2UgaXMgYSBwdWJsaWMgZXhwZW5zZSB0aGF0IGRvZXMgbm90IGFjY3J1ZVwiXG4gIENBTkNFTEVEXG4gIFwiQSBkcmFmdCBleHBlbnNlIGlzIHByaXZhdGUgYW5kIG5vdCByZWFkeSBmb3IgcG9saWN5IGV2YWx1YXRpb25cIlxuICBEUkFGVFxuICBcIkFuIG91dCBvZiBwb2xpY3kgZXhwZW5zZSBpcyBwdWJsaWMsIHdpdGggYSByZXF1ZXN0IGV2YWx1YXRlZCB0byBoYXZlIG5vdCBtZXQgdGhlIHBvbGljeSByZXF1aXJlbWVudHNcIlxuICBPVVRfT0ZfUE9MSUNZXG4gIFwiQSBzZXR0bGVkIGV4cGVuc2UgaXMgYW4gYXBwcm92ZWQgZXhwZW5zZSB0ZXJtaW5hbGx5IGxvY2tlZCBmcm9tIG11dGF0aW9uXCJcbiAgU0VUVExFRFxuICBcIkEgc3VibWl0dGVkIGV4cGVuc2UgaXMgcHVibGljLCB3aXRoIGEgcmVxdWVzdCBzdWJtaXR0ZWQgZm9yIHBvbGljeSBldmFsdWF0aW9uXCJcbiAgU1VCTUlUVEVEXG4gIFwiQSB2b2lkIGV4cGVuc2UgaXMgYSBoaWRkZW4gZXhwZW5zZSB0aGF0IGRvZXMgbm90IGFjY3J1ZSAoc29mdC1kZWxldGUpXCJcbiAgVk9JRFxufVxuXG5cIlRoZSB0eXBlIG9mIHRoZSBFeHBlbnNlLlwiXG5lbnVtIEV4cGVuc2VUeXBlIHtcbiAgXCJBIGJpbGwgcGF5IGV4cGVuc2UuXCJcbiAgQklMTFBBWVxuICBcIkEgY2FyZCBleHBlbnNlLlwiXG4gIENBUkRcbiAgXCJBIHJlaW1idXJzZW1lbnQgZXhwZW5zZS5cIlxuICBSRUlNQlVSU0VNRU5UXG59XG5cblwiVGhlIHR5cGUgb2YgcnVsZSBmYWNldC5cIlxuZW51bSBGYWNldFR5cGUge1xuICBcIkNvbmZsaWN0aW5nIHJ1bGUgdHlwZSBmYWNldC5cIlxuICBDT05GTElDVElOR1xuICBcIkN1c3RvbSBydWxlIHR5cGUgZmFjZXQuXCJcbiAgQ1VTVE9NXG4gIFwiSW52YWxpZCBmYWNldCB0eXBlLlwiXG4gIElOVkFMSURcbiAgXCJNZXJjaGFudCBydWxlIHR5cGUgZmFjZXQuXCJcbiAgTUVSQ0hBTlRcbiAgXCJNYW51YWwgb3ZlcnJpZGUgcnVsZSB0eXBlIGZhY2V0LlwiXG4gIE9WRVJSSURFXG59XG5cblwiXCJcIlxuIEZyb20gQVBJdjFcbiBodHRwczovL2dpdGh1Yi5jb20vYnJleGhxL2NyZWRpdF9jYXJkL2Jsb2IvbWFpbi9hcHBzL2FwaS9saWIvYXBpL3dlYi9zY2hlbWEvZmluYW5jaWFsX2Fzc2V0LmV4I0w3XG4gaHR0cHM6Ly9naXRodWIuY29tL2JyZXhocS9jcmVkaXRfY2FyZC9ibG9iL21haW4vbGlicmFyaWVzL2JyZXhfZmluYW5jaWFsX2Fzc2V0L2xpYi9maW5hbmNpYWxfaW5zdHJ1bWVudF9jb25zdGFudHMuZXgjTDk2MlxuXCJcIlwiXG5lbnVtIEZpbmFuY2lhbEluc3RydW1lbnRDb2RlIHtcbiAgQUVEXG4gIEFGTlxuICBBTExcbiAgQU1EXG4gIEFOR1xuICBBT0FcbiAgQVJTXG4gIEFVRFxuICBBV0dcbiAgQVpOXG4gIEJBTVxuICBCQkRcbiAgQkRUXG4gIEJHTlxuICBCSERcbiAgQklGXG4gIEJNRFxuICBCTkRcbiAgQk9CXG4gIEJPVlxuICBCUkxcbiAgQlNEXG4gIEJUTlxuICBCV1BcbiAgQllOXG4gIEJaRFxuICBDQURcbiAgQ0RGXG4gIENIRVxuICBDSEZcbiAgQ0hXXG4gIENMRlxuICBDTFBcbiAgQ05ZXG4gIENPUFxuICBDT1VcbiAgQ1JDXG4gIENSWVBUT19CVENcbiAgQ1JZUFRPX0VUSFxuICBDUllQVE9fVVNEQ1xuICBDVUNcbiAgQ1VQXG4gIENWRVxuICBDWktcbiAgREpGXG4gIERLS1xuICBET1BcbiAgRFpEXG4gIEVHUFxuICBFUk5cbiAgRVRCXG4gIEVVUlxuICBGSkRcbiAgRktQXG4gIEdCUFxuICBHRUxcbiAgR0hTXG4gIEdJUFxuICBHTURcbiAgR05GXG4gIEdUUVxuICBHWURcbiAgSEtEXG4gIEhOTFxuICBIUktcbiAgSFRHXG4gIEhVRlxuICBJRFJcbiAgSUxTXG4gIElOUlxuICBJUURcbiAgSVJSXG4gIElTS1xuICBKTURcbiAgSk9EXG4gIEpQWVxuICBLRVNcbiAgS0dTXG4gIEtIUlxuICBLTUZcbiAgS1BXXG4gIEtSV1xuICBLV0RcbiAgS1lEXG4gIEtaVFxuICBMQUtcbiAgTEJQXG4gIExLUlxuICBMUkRcbiAgTFNMXG4gIExZRFxuICBNQURcbiAgTURMXG4gIE1HQVxuICBNS0RcbiAgTU1LXG4gIE1OVFxuICBNT1BcbiAgTVJVXG4gIE1VUlxuICBNVlJcbiAgTVdLXG4gIE1YTlxuICBNWFZcbiAgTVlSXG4gIE1aTlxuICBOQURcbiAgTkFTREFRX0RBR1hYXG4gIE5BU0RBUV9ER0NYWFxuICBOQVNEQVFfREdWWFhcbiAgTkFTREFRX0RQR1hYXG4gIE5BU0RBUV9HR0JYWFxuICBOQVNEQVFfR0dEWFhcbiAgTkFTREFRX0dHU1hYXG4gIE5BU0RBUV9HU0JYWFxuICBOR05cbiAgTklPXG4gIE5PS1xuICBOUFJcbiAgTlpEXG4gIE9NUlxuICBQQUJcbiAgUEVOXG4gIFBHS1xuICBQSFBcbiAgUEtSXG4gIFBMTlxuICBQWUdcbiAgUUFSXG4gIFJPTlxuICBSU0RcbiAgUlVCXG4gIFJXRlxuICBTQVJcbiAgU0JEXG4gIFNDUlxuICBTREdcbiAgU0VLXG4gIFNHRFxuICBTSFBcbiAgU0xMXG4gIFNPU1xuICBTUkRcbiAgU1NQXG4gIFNUTlxuICBTVkNcbiAgU1lQXG4gIFNaTFxuICBUSEJcbiAgVEpTXG4gIFRNVFxuICBUTkRcbiAgVE9QXG4gIFRSWVxuICBUVERcbiAgVFdEXG4gIFRaU1xuICBVQUhcbiAgVUdYXG4gIFVTRFxuICBVU05cbiAgVVlJXG4gIFVZVVxuICBVWVdcbiAgVVpTXG4gIFZFU1xuICBWTkRcbiAgVlVWXG4gIFdTVFxuICBYQUZcbiAgWEFHXG4gIFhBVVxuICBYQkFcbiAgWEJCXG4gIFhCQ1xuICBYQkRcbiAgWENEXG4gIFhEUlxuICBYT0ZcbiAgWFBEXG4gIFhQRlxuICBYUFRcbiAgWFNVXG4gIFhUU1xuICBYVUFcbiAgWFhYXG4gIFlFUlxuICBaQVJcbiAgWk1XXG4gIFpXTFxufVxuXG5cIlwiXCJcblRpbWUgYnVja2V0dGluZyBzdHJhdGVneVxuLSBTVEFSVDogQnVja2V0cyBzdGFydCBhdCB0aGUgc3RhcnRzQXQgdGltZXN0YW1wXG4tIEVORDogQnVja2V0cyBzdGFydCBhdCB0aGUgZW5kc0F0IHRpbWVzdGFtcFxuLSBDQUxFTkRBUjogQnVja2V0cyBhcmUgYWxpZ25lZCB3aXRoIHRoZSBjYWxlbmRhciB1bml0cyAoZS5nLiBXRUVLUykgYnV0IGNhbiBpbmNsdWRlXG5wYXJ0aWFsIGJ1Y2tldHMgYmFzZWQgb24gdGhlIHN0YXJ0c0F0IGFuZCBlbmRzQXQgdGltZWJ1Y2tldHNcblwiXCJcIlxuZW51bSBJbnNpZ2h0c1RpbWVCdWNrZXRTdHJhdGVneSB7XG4gIENBTEVOREFSXG4gIEVORFxuICBTVEFSVFxufVxuXG5cIkdlbmVyaWMgdGltZSB1bml0XCJcbmVudW0gSW5zaWdodHNUaW1lVW5pdCB7XG4gIERBWVxuICBNT05USFxuICBRVUFSVEVSXG4gIFdFRUtcbiAgWUVBUlxufVxuXG5lbnVtIE9yZGVyQnlEaXJlY3Rpb24ge1xuICBBU0NFTkRJTkdcbiAgREVTQ0VORElOR1xufVxuXG5cIlRoZSB0eXBlcyBvZiByZWxhdGlvbnNoaXBzIGZvciBmaWx0ZXJpbmcgd2hvIGFuIGV4cGVuc2UgaXMgcGVuZGluZyBhcHByb3ZhbCBvbi5cIlxuZW51bSBQZW5kaW5nQXBwcm92YWxGaWx0ZXJJbnB1dCB7XG4gIFwiUGVuZGluZyBhcHByb3ZhbCBvbiB0aGUgbG9nZ2VkIGluIHVzZXJcIlxuICBNRVxuICBcIlBlbmRpbmcgYXBwcm92YWwgb24gYW55b25lIGVsc2UgYnV0IHRoZSBsb2dnZWQgaW4gdXNlclwiXG4gIE9USEVSXG59XG5cblwiVGhlIHR5cGUgb2YgcmVwb3J0IGZpbGUgdHlwZS5cIlxuZW51bSBSZXBvcnRGb3JtYXRUeXBlIHtcbiAgQ1NWXG4gIEhUTUxcbiAgUERGXG4gIFRYVFxuICBYTFNYXG59XG5cblwiVGhlIHR5cGUgb2YgdGhlIHJlcXVlc3QgYWN0aW9uLlwiXG5lbnVtIFJlcXVlc3RBY3Rpb25UeXBlIHtcbiAgXCJBIG1lbW8gaXMgcmVxdWVzdGVkLlwiXG4gIE1FTU9cbiAgXCJBIHJlY2VpcHQgaXMgcmVxdWVzdGVkLlwiXG4gIFJFQ0VJUFRcbiAgXCJBIG1hbmFnZXIgKG9yIG90aGVyKSByZXZpZXcgaXMgcmVxdWVzdGVkLlwiXG4gIFJFVklFV1xufVxuXG5cIlRoZSB0eXBlIG9mIHRoZSBSZXF1ZXN0LlwiXG5lbnVtIFJlcXVlc3RUeXBlIHtcbiAgXCJUaGlzIGlzIGEgYnVkZ2V0IHJlcXVlc3QuXCJcbiAgQlVER0VUXG4gIFwiVGhpcyBpcyBhbiBleHBlbnNlIHJlcXVlc3QuXCJcbiAgRVhQRU5TRVxufVxuXG5cIkF2YWlsYWJsZSBmaWVsZHMgdG8gb3JkZXIgdGhlIEV4cGVuc2UgY29ubmVjdGlvbiBieS5cIlxuZW51bSBTb3J0YWJsZUV4cGVuc2VGaWVsZCB7XG4gIEFDQ1JVRURfQVRcbiAgQU1PVU5UXG4gIFBVUkNIQVNFRF9BVFxufVxuXG5cIklTT3ogZGF0ZVwiXG5zY2FsYXIgRGF0ZVxuXG5cIkpzb24gb2JqZWN0XCJcbnNjYWxhciBKc29uXG5cblwiNjRCaXQgaW50ZWdlclwiXG5zY2FsYXIgTG9uZ1xuXG5cIklTT3ogdGltZVwiXG5zY2FsYXIgVGltZVxuXG5zY2FsYXIgX0FueVxuXG5zY2FsYXIgX0ZpZWxkU2V0XG5cbmlucHV0IENyZWF0ZUV4cGVuc2VzU2VhcmNoUmVwb3J0SW5wdXQge1xuICBcImNsaWVudE11dGF0aW9uSWRcIlxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmdcbiAgXCJUaW1lIHdoZW4gZXhwZW5zZXMgc2VhcmNoIHJlc3VsdHMgd2VyZSBkaXNwbGF5ZWQuXCJcbiAgZGlzcGxheVRpbWU6IFRpbWVcbiAgXCJUaGUgZXhwZW5zZSBmaWx0ZXIgaW5wdXQgdXNlZCB0byBnZXQgdGhlIGxpc3Qgb2YgZXhwZW5zZXMgdG8gYmUgZXhwb3J0ZWQuXCJcbiAgZmlsdGVyOiBFeHBlbnNlRmlsdGVySW5wdXRcbiAgXCJUaGUgcmVwb3J0IGZvcm1hdCB0eXBlIGZvciB0aGUgZXhwb3J0ZWQgZXhwZW5zZXMgc2VhcmNoLlwiXG4gIHJlcG9ydEZvcm1hdDogUmVwb3J0Rm9ybWF0VHlwZVxufVxuXG5cIkZpbHRlcnMgYXZhaWxhYmxlIHRvIGNvbnRyb2wgd2hpY2ggZXhwZW5zZXMgZ2V0IHJldHVybmVkLlwiXG5pbnB1dCBFeHBlbnNlRmlsdGVySW5wdXQge1xuICBcIlJhbmdlIHF1ZXJ5IGZpbHRlciBmb3IgYW1vdW50LlwiXG4gIGFtb3VudEJldHdlZW46IEZpbmFuY2lhbEFzc2V0UmFuZ2VJbnB1dFxuICBcIk1hdGNoIElOIHNwZWNpZmljIGJ1ZGdldHNcIlxuICBidWRnZXRJZHM6IFtJRCFdXG4gIFwiTWF0Y2ggSU4gc3BlY2lmaWMgdXNlcnNcIlxuICBjdXN0b21lclVzZXJJZHM6IFtJRCFdXG4gIFwiTWF0Y2ggSU4gc3BlY2lmaWMgZGVwYXJ0bWVudHNcIlxuICBkZXBhcnRtZW50SWRzOiBbSUQhXVxuICBcIk1hdGNoIElOIHNwZWNpZmljIGRpc3BsYXkgc3RhdHVzZXMsIG1hdGNoIEFMTCB3aGVuIG5vIGZpbHRlciBpcyBwcm92aWRlZFwiXG4gIGRpc3BsYXlTdGF0dXM6IFtFeHBlbnNlRGlzcGxheVN0YXR1cyFdXG4gIFwiV2hldGhlciB0aGUgZXhwZW5zZSBoYXMgYSBtZW1vXCJcbiAgaGFzTWVtbzogQm9vbGVhblxuICBcIldoZXRoZXIgdGhlIGV4cGVuc2UgaGFzIGF0IGxlYXN0IG9uZSBhdHRhY2hlZCByZWNlaXB0XCJcbiAgaGFzUmVjZWlwdDogQm9vbGVhblxuICBcIk1hdGNoIElOIHNwZWNpZmljIG1lcmNoYW50IGNhdGVnb3JpZXNcIlxuICBtZXJjaGFudENhdGVnb3J5SWRzOiBbSUQhXVxuICBcIk1hdGNoIElOIHNwZWNpZmljIG1lcmNoYW50c1wiXG4gIG1lcmNoYW50SWRzOiBbSUQhXVxuICBcIk1hdGNoIElOIHNwZWNpZmljIHBhcmVudCBleHBlbnNlIGlkc1wiXG4gIHBhcmVudEV4cGVuc2VJZHM6IFtJRCFdXG4gIFwiUmFuZ2UgcXVlcnkgZmlsdGVyIGZvciBwYXltZW50UG9zdGVkQXRcIlxuICBwYXltZW50UG9zdGVkQmV0d2VlbjogVGltZUludGVydmFsSW5wdXRcbiAgXCJNYXRjaCBJTiBzcGVjaWZpYyBwYXltZW50IHN0YXR1c2VzLCBtYXRjaCBBTEwgd2hlbiBubyBmaWx0ZXIgaXMgcHJvdmlkZWRcIlxuICBwYXltZW50U3RhdHVzOiBbRXhwZW5zZVBheW1lbnRTdGF0dXNUeXBlIV1cbiAgXCJNYXRjaGVzIGlmIHRoZSBleHBlbnNlIGlzIGN1cnJlbnRseSBwZW5kaW5nIGFwcHJvdmFsIG9uIHlvdXJzZWxmIG9yIG90aGVycy5cIlxuICBwZW5kaW5nQXBwcm92YWw6IFBlbmRpbmdBcHByb3ZhbEZpbHRlcklucHV0XG4gIFwiTWF0Y2hlcyBJTiBvcGVuIGNvbXBsaWFuY2UgcmVxdWVzdCB0eXBlc1wiXG4gIHBlbmRpbmdSZXF1ZXN0QWN0aW9uVHlwZXM6IFtFeHBlbnNlUmVxdWVzdEFjdGlvblR5cGUhXVxuICBcIlJhbmdlIHF1ZXJ5IGZpbHRlciBmb3IgcHVyY2hhc2VBdFwiXG4gIHB1cmNoYXNlZEJldHdlZW46IFRpbWVJbnRlcnZhbElucHV0XG4gIFwiTWF0Y2ggSU4gc3BlY2lmaWMgc3RhdHVzZXMsIG1hdGNoIEFMTCB3aGVuIG5vIGZpbHRlciBpcyBwcm92aWRlZFwiXG4gIHN0YXR1czogW0V4cGVuc2VTdGF0dXMhXVxuICBcIk1hdGNoIElOIHNwZWNpZmljIHR5cGVzLCBtYXRjaCBBTEwgd2hlbiBubyBmaWx0ZXIgaXMgcHJvdmlkZWRcIlxuICB0eXBlczogW0V4cGVuc2VUeXBlIV1cbn1cblxuaW5wdXQgRXhwZW5zZUlucHV0IHtcbiAgXCJUaGUgcmVjZWlwdCBhc3NldHMgdG8gd2hpY2ggdGhlIGV4cGVuc2Ugd2lsbCBjcmVhdGUgYSByZWNlaXB0IGZvciBhbmQgYmUgbGlua2VkIHRvXCJcbiAgYWRkZWRSZWNlaXB0QXNzZXRJZHM6IFtJRCFdXG4gIFwiQW1vdW50IG9mIHRoZSBleHBlbnNlOyBtYXkgYmUgbmVnYXRpdmVcIlxuICBhbW91bnQ6IEZpbmFuY2lhbEFzc2V0SW5wdXRcbiAgXCJUaGUgYnVkZ2V0IHRvIHdoaWNoIHRoaXMgZXhwZW5zZSBhY2NydWVzIChoYXMgY3VzdG9tZXIgZGVmYXVsdDsgb3B0aW9uYWwgYmVmb3JlIGRlZmF1bHQgYnVkZ2V0cyBleGlzdClcIlxuICBidWRnZXRJZDogSURcbiAgXCJUaGUgQ3VzdG9tZXIgRGVwYXJ0bWVudCB0byB3aGljaCB0aGUgZXhwZW5zZSBpcyBhdHRyaWJ1dGVkLCBhdXRvLWRlbm9ybWFsaXplZCBmcm9tIFVzZXJcIlxuICBkZXBhcnRtZW50SWQ6IElEXG4gIFwiVGhlIEN1c3RvbWVyIExvY2F0aW9uIHRvIHdoaWNoIHRoZSBleHBlbnNlIGlzIGF0dHJpYnV0ZWQsIGF1dG8tZGVub3JtYWxpemVkIGZyb20gVXNlclwiXG4gIGxvY2F0aW9uSWQ6IElEXG4gIFwiXCJcIlxuICBUaGUgbWVtbyBsaW5lXG4gIFxuICBVcGRhdGluZyBhbiBleHBlbnNlJ3MgbWVtbyB3aWxsIHJlc29sdmUgYW55IGFzc29jaWF0ZWQgTWVtbyBSZXF1ZXN0IEFjdGlvbi5cbiAgXCJcIlwiXG4gIG1lbW86IFN0cmluZ1xuICBcIlRoZSBjYXRlZ29yeSB0byB3aGljaCB0aGlzIGV4cGVuc2UgYmVsb25ncyB0bywgYXV0by1kZW5vcm1hbGl6ZWQgZnJvbSBNZXJjaGFudFwiXG4gIG1lcmNoYW50Q2F0ZWdvcnlJZDogSURcbiAgXCJUaGUgbWVyY2hhbnQgY291bnRlci1wYXJ0eVwiXG4gIG1lcmNoYW50SWQ6IElEXG4gIFwiVGhlIG1lcmNoYW50IG5hbWVcIlxuICBtZXJjaGFudE5hbWU6IFN0cmluZ1xuICBcIlRoZSB0aW1lIG9mIHB1cmNoYXNlXCJcbiAgcHVyY2hhc2VkQXQ6IFRpbWVcbiAgXCJUaGUgcmVjZWlwdHMgdG8gYmUgdW5saW5rZWQgZnJvbSB0aGUgZXhwZW5zZVwiXG4gIHJlbW92ZWRSZWNlaXB0SWRzOiBbSUQhXVxufVxuXG5pbnB1dCBFeHBlbnNlTGVuc0ZpbHRlcklucHV0IHtcbiAgXCJPcHRpb25hbCBmaWVsZCwgd2hlbiBzZXQgb25seSB0aGUgZXhwZW5zZXMgd2l0aCBleHBlbnNlIGxlbnMgb2YgdGhpcyBmYWNldCB0eXBlIHdpbGwgYmUgcmV0dXJuZWQuXCJcbiAgZmFjZXRUeXBlOiBGYWNldFR5cGVcbiAgXCJPcHRpb25hbCBmaWVsZCwgd2hlbiBzZXQgb25seSB0aGUgZXhwZW5zZXMgd2l0aCBleHBlbnNlIGxlbnMgbWF0Y2hlcyB0aGVzZSBydWxlcyB3aWxsIGJlIHJldHVybmVkLlwiXG4gIHJ1bGVJZHM6IFtJRCFdXG59XG5cblwiRGV0ZXJtaW5lcyB0aGUgb3JkZXIgdGhhdCB0aGUgZXhwZW5zZXMgd2lsbCBiZSByZXR1cm5lZC5cIlxuaW5wdXQgRXhwZW5zZU9yZGVySW5wdXQge1xuICBmaWVsZDogU29ydGFibGVFeHBlbnNlRmllbGQhXG4gIG9yZGVyOiBPcmRlckJ5RGlyZWN0aW9uIVxufVxuXG5cIlwiXCJcbiBGcm9tIEFQSXYxXG4gaHR0cHM6Ly9naXRodWIuY29tL2JyZXhocS9jcmVkaXRfY2FyZC9ibG9iL21haW4vYXBwcy9hcGkvbGliL2FwaS93ZWIvc2NoZW1hL2ZpbmFuY2lhbF9hc3NldC5leCNMMTNcblwiXCJcIlxuaW5wdXQgRmluYW5jaWFsQXNzZXRJbnB1dCB7XG4gIFwiVGhlIGluc3RydW1lbnQgY29kZSAodXNkLCBldGMuKS4gQ3VycmVudGx5LCBvbmx5IHVzZCBpcyBzdXBwb3J0ZWQuXCJcbiAgaW5zdHJ1bWVudENvZGU6IEZpbmFuY2lhbEluc3RydW1lbnRDb2RlID0gVVNEXG4gIFwiVGhlIGFtb3VudCBpbiBjZW50c1wiXG4gIHF1YW50aXR5Q2VudHM6IEludFxufVxuXG5pbnB1dCBGaW5hbmNpYWxBc3NldFJhbmdlSW5wdXQge1xuICBcIkV4Y2x1c2l2ZSwgb25seSBjb25zaWRlcnMgZ2l2ZW4gY3VycmVuY3ksIHJlcXVpcmVkIHRvIGhhdmUgc2FtZSBjdXJyZW5jeSB3aGVuIG1pbkFtb3VudCBpcyBwcm92aWRlZC5cIlxuICBtYXhBbW91bnQ6IEZpbmFuY2lhbEFzc2V0SW5wdXRcbiAgXCJJbmNsdXNpdmUsIG9ubHkgY29uc2lkZXJzIGdpdmVuIGN1cnJlbmN5LCByZXF1aXJlZCB0byBoYXZlIHNhbWUgY3VycmVuY3kgd2hlbiBtYXhBbW91bnQgaXMgcHJvdmlkZWQuXCJcbiAgbWluQW1vdW50OiBGaW5hbmNpYWxBc3NldElucHV0XG59XG5cbmlucHV0IEludGVncmF0aW9uRmllbGRJbnB1dCB7XG4gIFwiUmVxdWlyZWQgZmllbGQsIGV4dGVybmFsIGludGVncmF0aW9uIGZpZWxkIElELlwiXG4gIGZpZWxkSWQ6IElEIVxuICBcIlJlcXVpcmVkIGZpZWxkLCBleHRlcm5hbCBpbnRlZ3JhdGlvbiBlbnRpdHkgSUQuXCJcbiAgZmllbGRWYWx1ZTogSUQhXG59XG5cbmlucHV0IEludGVncmF0aW9uSW5wdXQge1xuICBcIlwiXCJcbiAgT3B0aW9uYWwgZmllbGQsIGJpbGxhYmxlIHN0YXR1cy5cbiAgXG4gIE9uZSBvciBtb3JlIG9mIHRoZXNlIGZpZWxkcyAoaW50ZWdyYXRpb25GaWVsZCwgdXNlckNhdGVnb3J5SWQsIGFuZCBiaWxsYWJsZVN0YXR1cykgbXVzdCBiZSBzZXQuXG4gIFwiXCJcIlxuICBiaWxsYWJsZVN0YXR1czogQm9vbGVhblxuICBcIlwiXCJcbiAgT3B0aW9uYWwgZmllbGQsIGludGVncmF0aW9uIGZpZWxkcy5cbiAgXG4gIE9uZSBvciBtb3JlIG9mIHRoZXNlIGZpZWxkcyAoaW50ZWdyYXRpb25GaWVsZCwgdXNlckNhdGVnb3J5SWQsIGFuZCBiaWxsYWJsZVN0YXR1cykgbXVzdCBiZSBzZXQuXG4gIFwiXCJcIlxuICBpbnRlZ3JhdGlvbkZpZWxkczogW0ludGVncmF0aW9uRmllbGRJbnB1dCFdXG4gIFwiXCJcIlxuICBPcHRpb25hbCBmaWVsZCwgdXNlciBjYXRlZ29yeSBJRC5cbiAgXG4gIE9uZSBvciBtb3JlIG9mIHRoZXNlIGZpZWxkcyAoaW50ZWdyYXRpb25GaWVsZCwgdXNlckNhdGVnb3J5SWQsIGFuZCBiaWxsYWJsZVN0YXR1cykgbXVzdCBiZSBzZXQuXG4gIFwiXCJcIlxuICB1c2VyQ2F0ZWdvcnlJZDogSURcbn1cblxuaW5wdXQgSXRlbWl6ZUV4cGVuc2VJbnB1dCB7XG4gIFwiY2xpZW50TXV0YXRpb25JZFwiXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgXCJUaGUgSUQgb2YgdGhlIGV4cGVuc2UgdG8gaXRlbWl6ZS5cIlxuICBpZDogSUQhXG4gIFwiVGhlIGlucHV0IGZvciB0aGUgaXRlbWl6ZWQgZXhwZW5zZS5cIlxuICBpdGVtaXplZEV4cGVuc2VzOiBbSXRlbWl6ZWRFeHBlbnNlIV0hXG59XG5cbmlucHV0IEl0ZW1pemVkRXhwZW5zZSB7XG4gIFwiQW1vdW50IG9mIHRoZSBleHBlbnNlOyBtYXkgYmUgbmVnYXRpdmVcIlxuICBhbW91bnQ6IEZpbmFuY2lhbEFzc2V0SW5wdXRcbiAgXCJUaGUgY2F0ZWdvcnkgdG8gd2hpY2ggdGhpcyBleHBlbnNlIGJlbG9uZ3MgdG9cIlxuICBtZXJjaGFudENhdGVnb3J5SWQ6IElEXG59XG5cblwiXCJcIlxuUGFnaW5hdGlvbiBwYXJhbWV0ZXJzIGZvciBlbnVtZXJhdGluZyBpdGVtcyBpbiBhIGNvbm5lY3Rpb24uXG5Pbmx5IHtmaXJzdCwgYWZ0ZXJ9IE9SIHtsYXN0LCBiZWZvcmV9IHBhaXJzIGNhbiBiZSBzZXQuXG5lLmcuIElmIHtmaXJzdCwgYmVmb3JlfSBpcyBzZXQsIHRoYXQgd2lsbCBjYXVzZSBhIHZhbGlkYXRpb24gZXJyb3IuXG5UaGUgY3Vyc29ycyBhcmUgb3B0aW9uYWwuIFdpdGhvdXQgYSBzcGVjaWZpZWQgY3Vyc29yLCBpdCBpcyBhc3N1bWVkIHRvIHN0YXJ0IGF0XG50aGUgZmlyc3QgaXRlbSAoZm9yIGBmaXJzdGApIG9yIGxhc3QgaXRlbSAoZm9yIGBsYXN0YCkgb2YgdGhlIGNvbGxlY3Rpb24uXG5cIlwiXCJcbmlucHV0IFBhZ2luYXRpb25JbnB1dCB7XG4gIFwiVGhlIGN1cnNvciB0byBzdGFydCB0aGUgcGFnZSBhdCAoZXhjbHVzaXZlKS5cIlxuICBhZnRlcjogU3RyaW5nXG4gIFwiVGhlIGN1cnNvciB0byBlbmQgdGhlIHBhZ2UgYXQgKGV4Y2x1c2l2ZSkuXCJcbiAgYmVmb3JlOiBTdHJpbmdcbiAgXCJUaGUgbnVtYmVyIG9mIGl0ZW1zIHRvIHJldHVybiBpbiBhIHBhZ2UgYWZ0ZXIgdGhlIGBhZnRlcmAgY3Vyc29yLlwiXG4gIGZpcnN0OiBJbnRcbiAgXCJUaGUgbnVtYmVyIG9mIGl0ZW1zIHRvIHJldHVybiBpbiBhIHBhZ2UgcHJpb3IgdG8gdGhlIGBiZWZvcmVgIGN1cnNvci5cIlxuICBsYXN0OiBJbnRcbn1cblxuaW5wdXQgUmV0cnlSZWltYnVyc2VtZW50UGF5bWVudElucHV0IHtcbiAgXCJjbGllbnRNdXRhdGlvbklkXCJcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBcIlRoZSByZWltYnVyc2VtZW50IElEIHRvIHJldHJ5IHBheW1lbnQuXCJcbiAgaWQ6IElEIVxufVxuXG5pbnB1dCBUaW1lSW50ZXJ2YWxJbnB1dCB7XG4gIFwiRXhjbHVzaXZlIGVuZCBhdC5cIlxuICBlbmRBdDogVGltZVxuICBcIkluY2x1c2l2ZSBzdGFydCBhdC5cIlxuICBzdGFydEF0OiBUaW1lXG59XG5cbmlucHV0IFVwZGF0ZUV4cGVuc2VJbnB1dCB7XG4gIFwiY2xpZW50TXV0YXRpb25JZFwiXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZ1xuICBcIlwiXCJcbiAgVGhlIGlucHV0IGZvciB0aGUgZXhwZW5zZSBvYmplY3QuXG4gIFxuICBFaXRoZXIgRXhwZW5zZUlucHV0IG9yIEludGVncmF0aW9uSW5wdXQgbXVzdCBiZSBzZXQuXG4gIEl0IGlzIG9rYXkgdG8gc2V0IGJvdGggYXJndW1lbnRzLlxuICBcIlwiXCJcbiAgZXhwZW5zZTogRXhwZW5zZUlucHV0XG4gIFwiVGhlIElEIG9mIHRoZSBleHBlbnNlIHRvIHVwZGF0ZS5cIlxuICBpZDogSUQhXG4gIFwiXCJcIlxuICBUaGUgaW5wdXQgZm9yIHRoZSBpbnRlZ3JhdGlvbiBmaWVsZHMuXG4gIFxuICBFaXRoZXIgRXhwZW5zZUlucHV0IG9yIEludGVncmF0aW9uSW5wdXQgbXVzdCBiZSBzZXQuXG4gIEl0IGlzIG9rYXkgdG8gc2V0IGJvdGggYXJndW1lbnRzLlxuICBcIlwiXCJcbiAgaW50ZWdyYXRpb246IEludGVncmF0aW9uSW5wdXRcbn1cblxuaW5wdXQgVXBkYXRlRXhwZW5zZXNJbnB1dCB7XG4gIFwiY2xpZW50TXV0YXRpb25JZFwiXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgXCJBIGxpc3Qgb2YgZXhwZW5zZSBpbnB1dHMuXCJcbiAgdXBkYXRlRXhwZW5zZUlucHV0czogW1VwZGF0ZUV4cGVuc2VJbnB1dCFdIVxufVxuIiwKICAic2VydmljZSIgOiAiZXdvZ0lDSnVZVzFsSWlBNklDSmxlSEJsYm5ObGN5MWtaM01pTEFvZ0lDSjFjbXdpSURvZ0ltaDBkSEE2THk5bGVIQmxibk5sY3kxa1ozTTZPREE0TUM5Mk1TOW5jbUZ3YUhGc0lpd0tJQ0FpYVhOZllXTjBhWFpsSWlBNklIUnlkV1VzQ2lBZ0luVndaR0YwWldSZllYUmZjMlZqYjI1a2N5SWdPaUF6T0N3S0lDQWlhVzV6WlhKMFpXUmZZWFJmYzJWamIyNWtjeUlnT2lBek9BcDkiLAogICJpbnNlcnRlZF9hdF9zZWNvbmRzIiA6IDQ5Cn0sIHsKICAiaWQiIDogInNtX2NsMTA5eG01MTAwMHUwZTYwaGswNHZxOTAiLAogICJ2ZXJzaW9uIiA6ICI0Y2UyNDYwYjc0ZTFmNTMzYWJjYmVkNmIyYzc4MmNjYjI3MjY2ZjY3Yjk2YjJiZWUxNzkyZjJiODVkYzZkNmZlIiwKICAidHlwZV9kZWZzIiA6ICJcIkRpcmVjdHMgdGhlIGV4ZWN1dG9yIHRvIGluY2x1ZGUgdGhpcyBmaWVsZCBvciBmcmFnbWVudCBvbmx5IHdoZW4gdGhlIGBpZmAgYXJndW1lbnQgaXMgdHJ1ZVwiXG5kaXJlY3RpdmUgQGluY2x1ZGUoXG4gICAgXCJJbmNsdWRlZCB3aGVuIHRydWUuXCJcbiAgICBpZjogQm9vbGVhbiFcbiAgKSBvbiBGSUVMRCB8IEZSQUdNRU5UX1NQUkVBRCB8IElOTElORV9GUkFHTUVOVFxuXG5cIkRpcmVjdHMgdGhlIGV4ZWN1dG9yIHRvIHNraXAgdGhpcyBmaWVsZCBvciBmcmFnbWVudCB3aGVuIHRoZSBgaWZgJ2FyZ3VtZW50IGlzIHRydWUuXCJcbmRpcmVjdGl2ZSBAc2tpcChcbiAgICBcIlNraXBwZWQgd2hlbiB0cnVlLlwiXG4gICAgaWY6IEJvb2xlYW4hXG4gICkgb24gRklFTEQgfCBGUkFHTUVOVF9TUFJFQUQgfCBJTkxJTkVfRlJBR01FTlRcblxuZGlyZWN0aXZlIEBleHRlbmRzIG9uIE9CSkVDVCB8IElOVEVSRkFDRVxuXG5kaXJlY3RpdmUgQGV4dGVybmFsIG9uIEZJRUxEX0RFRklOSVRJT05cblxuZGlyZWN0aXZlIEBrZXkoZmllbGRzOiBfRmllbGRTZXQhKSByZXBlYXRhYmxlIG9uIE9CSkVDVCB8IElOVEVSRkFDRVxuXG5kaXJlY3RpdmUgQHByb3ZpZGVzKGZpZWxkczogX0ZpZWxkU2V0ISkgb24gRklFTERfREVGSU5JVElPTlxuXG5kaXJlY3RpdmUgQHJlcXVpcmVzKGZpZWxkczogX0ZpZWxkU2V0ISkgb24gRklFTERfREVGSU5JVElPTlxuXG5cIk1hcmtzIHRoZSBmaWVsZCwgYXJndW1lbnQsIGlucHV0IGZpZWxkIG9yIGVudW0gdmFsdWUgYXMgZGVwcmVjYXRlZFwiXG5kaXJlY3RpdmUgQGRlcHJlY2F0ZWQoXG4gICAgXCJUaGUgcmVhc29uIGZvciB0aGUgZGVwcmVjYXRpb25cIlxuICAgIHJlYXNvbjogU3RyaW5nID0gXCJObyBsb25nZXIgc3VwcG9ydGVkXCJcbiAgKSBvbiBGSUVMRF9ERUZJTklUSU9OIHwgQVJHVU1FTlRfREVGSU5JVElPTiB8IEVOVU1fVkFMVUUgfCBJTlBVVF9GSUVMRF9ERUZJTklUSU9OXG5cblwiRXhwb3NlcyBhIFVSTCB0aGF0IHNwZWNpZmllcyB0aGUgYmVoYXZpb3VyIG9mIHRoaXMgc2NhbGFyLlwiXG5kaXJlY3RpdmUgQHNwZWNpZmllZEJ5KFxuICAgIFwiVGhlIFVSTCB0aGF0IHNwZWNpZmllcyB0aGUgYmVoYXZpb3VyIG9mIHRoaXMgc2NhbGFyLlwiXG4gICAgdXJsOiBTdHJpbmchXG4gICkgb24gU0NBTEFSXG5cblwiXCJcIlxuVGhlIGludGVyZmFjZSBmb3IgcGFnaW5hdGluZyB0aHJvdWdoIGNvbGxlY3Rpb25zIG9mIGVsZW1lbnRzLlxuRXZlcnkgY29sbGVjdGlvbiBvZiBlbnRpdGllcyBub3QgcmV0dXJuZWQgYnkgYSBtdXRhdGlvbiByZXN1bHQgc2hvdWxkXG5wYWdpbmF0ZSB0aHJvdWdoIGEgY29ubmVjdGlvbi4gVGhhdCBpcywgYHR5cGVzYCB3aXRoIGEgZmllbGQgdGhhdCBpc1xuYW4gYGFycmF5YCBzaG91bGQgYmUgZXhjZWVkaW5nbHkgcmFyZS5cbldlIHdhbnQgYWxsIGNvbGxlY3Rpb25zIG9mIHRoaW5ncyB0byBiZSBwYWdpbmF0ZWQuXG5cIlwiXCJcbmludGVyZmFjZSBDb25uZWN0aW9uIHtcbiAgXCJQYWdlIGluZm9ybWF0aW9uIGZvciBhZGRpdGlvbmFsIG5hdmlnYXRpb24gdGhyb3VnaCB0aGlzIGNvbm5lY3Rpb24uXCJcbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxuICBcIlwiXCJcbiAgVGhlIHRvdGFsIGNvdW50IG9mIGl0ZW1zIG1hdGNoaW5nIHRoZSBmaWx0ZXIgY3JpdGVyaWEgc3BlY2lmaWVkIGZvciB0aGlzIGNvbm5lY3Rpb24uXG4gIFRoaXMgdmFsdWUgbWF5IGJlIGFwcHJveGltYXRlLiBBbmQgdGhpcyB2YWx1ZSBtYXkgbm90IGJlIHByb3ZpZGVkIGF0IGFsbC4gTm90IGFsbCBjb25uZWN0aW9uc1xuICBjYW4gYmUgY291bnRlZCBlYXNpbHkuXG4gIFwiXCJcIlxuICB0b3RhbENvdW50OiBJbnRcbn1cblxuXCJNZXJjaGFudCBjYXRlZ29yeSBjb250cm9scyByZWZlcmVuY2UuXCJcbnVuaW9uIE1lcmNoYW50Q2F0ZWdvcnlDb250cm9sUmVmZXJlbmNlID0gTWVyY2hhbnRDYXRlZ29yeUlkQ29udHJvbFJlZmVyZW5jZSB8IE1lcmNoYW50TmFtZUNvbnRyb2xSZWZlcmVuY2VcblxudW5pb24gX0VudGl0eSA9IEFjY291bnQgfCBCdWRnZXQgfCBCdWRnZXRSZXF1ZXN0IHwgQnVkZ2V0VGVtcGxhdGUgfCBDYXJkIHwgRW1wbG95ZWUgfCBNZXJjaGFudCB8IE1lcmNoYW50Q2F0ZWdvcnkgfCBQb2xpY3kgfCBVc2VyXG5cbnR5cGUgQWNjb3VudCBAZXh0ZW5kcyBAa2V5KGZpZWxkcyA6IFwiaWRcIikge1xuICBpZDogSUQhIEBleHRlcm5hbFxufVxuXG5cIlJlc3BvbnNlIHR5cGUgZm9yIGFzc2lnbmluZyBidWRnZXRzIHRvIGNhcmRzLlwiXG50eXBlIEFzc2lnbkJ1ZGdldFRvQ2FyZFJlc3VsdCB7XG4gIGNhcmRCdWRnZXRNYXBwaW5nOiBDYXJkQnVkZ2V0TWFwcGluZyFcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxufVxuXG5cIkEgYnVkZ2V0IHRvIG1hbmFnZSBleHBlbnNlcy5cIlxudHlwZSBCdWRnZXQgQGtleShmaWVsZHMgOiBcImlkXCIpIHtcbiAgXCJUaGUgQ3VzdG9tZXIgQWNjb3VudCB0aGF0IGhhcyB2aXNpYmlsaXR5IHRvIHRoaXMgYnVkZ2V0XCJcbiAgYWNjb3VudDogQWNjb3VudCFcbiAgXCJPcmRlcmVkIGxpc3Qgb2YgYW5jZXN0b3JzXCJcbiAgYW5jZXN0cnlQYXRoOiBbQnVkZ2V0IV0hXG4gIFwiTGlzdCBvZiBjYXJkcyByZWxhdGVkIHRvIHRoZSBCdWRnZXRcIlxuICBjYXJkcyhmaWx0ZXI6IENhcmRGaWx0ZXJJbnB1dCEsIHBhZ2U6IFBhZ2luYXRpb25JbnB1dCk6IEJ1ZGdldENhcmRDb25uZWN0aW9uIVxuICBcIlRoZSBjaGlsZHJlbiBvZiB0aGlzIGJ1ZGdldCwgaWYgYW55XCJcbiAgY2hpbGRyZW4oZmlsdGVyOiBCdWRnZXRGaWx0ZXJJbnB1dCwgb3JkZXI6IEJ1ZGdldE9yZGVySW5wdXQsIHBhZ2U6IFBhZ2luYXRpb25JbnB1dCk6IEJ1ZGdldENvbm5lY3Rpb24hXG4gIFwiVGhlIFVzZXIgd2hvIGNyZWF0ZWQgdGhpcyBidWRnZXRcIlxuICBjcmVhdG9yOiBVc2VyISBAZGVwcmVjYXRlZChyZWFzb24gOiBcIkluY29ycmVjdCBwZXJtaXNzaW9uIHNjb3BpbmcsIHVzZSAnY3JlYXRvckVtcGxveWVlJ1wiKVxuICBcIlRoZSBFbXBsb3llZSB3aG8gY3JlYXRlZCB0aGlzIGJ1ZGdldFwiXG4gIGNyZWF0b3JFbXBsb3llZTogRW1wbG95ZWUhXG4gIFwiQnVkZ2V0IHBlcmlvZCBiYWxhbmNlXCJcbiAgY3VycmVudFBlcmlvZEJhbGFuY2U6IEJ1ZGdldFBlcmlvZEJhbGFuY2VcbiAgXCJUaGUgZGVzY2VuZGFudHMgb2YgdGhpcyBidWRnZXQsIGlmIGFueVwiXG4gIGRlc2NlbmRhbnRzKGZpbHRlcjogQnVkZ2V0RmlsdGVySW5wdXQsIG9yZGVyOiBCdWRnZXRPcmRlcklucHV0LCBwYWdlOiBQYWdpbmF0aW9uSW5wdXQpOiBCdWRnZXRDb25uZWN0aW9uIVxuICBcIkRlc2NyaXB0aW9uIG9mIHdoYXQgdGhlIGJ1ZGdldCBpcyB1c2VkIGZvclwiXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgXCJCdWRnZXQgZWRpdCBwZXJtaXNzaW9uIGdyYW50XCJcbiAgZWRpdFBlcm1pc3Npb25HcmFudDogQnVkZ2V0RWRpdFBlcm1pc3Npb25HcmFudFxuICBcIlRoZSBlbmQgZGF0ZSBvZiB0aGUgYnVkZ2V0LCBpbmNsdXNpdmUuXCJcbiAgZW5kRGF0ZTogRGF0ZVxuICBcIlRoZSBlbmQgZGF0ZXRpbWUgb2YgdGhlIGJ1ZGdldCwgaW5jbHVzaXZlLlwiXG4gIGVuZFRpbWU6IFRpbWVcbiAgXCJUcnVlIGlmIHRoZSBidWRnZXQgbGltaXQgaXMgaGFyZCBlbmZvcmNlZFwiXG4gIGVuZm9yY2VMaW1pdDogQm9vbGVhbiFcbiAgXCJCdWRnZXQgSURcIlxuICBpZDogSUQhXG4gIFwiTWVyY2hhbnQgY2F0ZWdvcnkgY29udHJvbHMsIGluY2x1ZGluZyB0aG9zZSBhbG9uZyBhbmNlc3RyeSBwYXRoLlwiXG4gIGluaGVyaXRlZE1lcmNoYW50Q2F0ZWdvcnlDb250cm9sczogTWVyY2hhbnRDYXRlZ29yeUNvbnRyb2xzXG4gIFwiTGFzdCBzdGF0dXMgdXBkYXRlIGRldGFpbFwiXG4gIGxhc3RTdGF0dXNVcGRhdGVEZXRhaWxzOiBTdGF0dXNVcGRhdGVEZXRhaWxzXG4gIFwiTGltaXQgb24gdGhlIGJ1ZGdldFwiXG4gIGxpbWl0OiBGaW5hbmNpYWxBc3NldCFcbiAgXCJUaGUgZW1wbG95ZWVzIHdobyBhcmUgY29uc2lkZXJlZCBtZW1iZXJzIG9mIHRoaXMgYnVkZ2V0XCJcbiAgbWVtYmVyRW1wbG95ZWVzKGZpbHRlcjogQnVkZ2V0RW1wbG95ZWVGaWx0ZXIsIG9yZGVyOiBCdWRnZXRFbXBsb3llZU9yZGVyLCBwYWdlOiBQYWdpbmF0aW9uSW5wdXQpOiBCdWRnZXRFbXBsb3llZUNvbm5lY3Rpb25cbiAgXCJUaGUgdXNlcnMgd2hvIGFyZSBjb25zaWRlcmVkIG1lbWJlcnMgb2YgdGhpcyBidWRnZXRcIlxuICBtZW1iZXJVc2VycyhwYWdlOiBQYWdpbmF0aW9uSW5wdXQpOiBCdWRnZXRVc2VyQ29ubmVjdGlvbiBAZGVwcmVjYXRlZChyZWFzb24gOiBcIkluY29ycmVjdCBwZXJtaXNzaW9uIHNjb3BpbmcsIHVzZSAnbWVtYmVyRW1wbG95ZWVzJ1wiKVxuICBcIlRoZSB1c2VycyAvIGhpZXJhcmNoeSBncm91cCBhc3NpZ25lZCB0byB0aGUgYnVkZ2V0XCJcbiAgbWVtYmVycyhwYWdlOiBQYWdpbmF0aW9uSW5wdXQpOiBCdWRnZXRQZXJzb25uZWxDb25uZWN0aW9uISBAZGVwcmVjYXRlZChyZWFzb24gOiBcIk5vIGxvbmdlciBzdXBwb3J0ZWRcIilcbiAgXCJOYW1lIG9mIHRoZSBidWRnZXRcIlxuICBuYW1lOiBTdHJpbmchXG4gIFwiVHJ1ZSBpZiBvbmx5IHByb3Zpc2lvbmVkIGNhcmRzIGNhbiBzcGVuZCBmcm9tIHRoaXMgYnVkZ2V0XCJcbiAgb25seVByb3Zpc2lvbmVkQ2FyZFNwZW5kOiBCb29sZWFuIVxuICBcIlRoZSBlbXBsb3llZXMgd2hvIGFyZSBjb25zaWRlcmVkIG93bmVycyBvZiB0aGlzIGJ1ZGdldFwiXG4gIG93bmVyRW1wbG95ZWVzKGZpbHRlcjogQnVkZ2V0RW1wbG95ZWVGaWx0ZXIsIG9yZGVyOiBCdWRnZXRFbXBsb3llZU9yZGVyLCBwYWdlOiBQYWdpbmF0aW9uSW5wdXQpOiBCdWRnZXRFbXBsb3llZUNvbm5lY3Rpb25cbiAgXCJUaGUgdXNlcnMgd2hvIGFyZSBjb25zaWRlcmVkIG93bmVycyBvZiB0aGlzIGJ1ZGdldFwiXG4gIG93bmVyVXNlcnMocGFnZTogUGFnaW5hdGlvbklucHV0KTogQnVkZ2V0VXNlckNvbm5lY3Rpb24gQGRlcHJlY2F0ZWQocmVhc29uIDogXCJJbmNvcnJlY3QgcGVybWlzc2lvbiBzY29waW5nLCB1c2UgJ293bmVyRW1wbG95ZWVzJ1wiKVxuICBcIlRoZSB1c2VycyB3aG8gYXJlIGNvbnNpZGVyZWQgb3duZXJzIG9mIHRoaXMgYnVkZ2V0XCJcbiAgb3duZXJzKHBhZ2U6IFBhZ2luYXRpb25JbnB1dCk6IEJ1ZGdldFBlcnNvbm5lbENvbm5lY3Rpb24hIEBkZXByZWNhdGVkKHJlYXNvbiA6IFwiTm8gbG9uZ2VyIHN1cHBvcnRlZFwiKVxuICBcIlRoZSBwYXJlbnQgb2YgdGhpcyBidWRnZXQsIGlmIGFueVwiXG4gIHBhcmVudDogQnVkZ2V0XG4gIFwiVGhlIGJ1ZGdldCBwZXJpb2RcIlxuICBwZXJpb2Q6IEJ1ZGdldFBlcmlvZCEgQGRlcHJlY2F0ZWQocmVhc29uIDogXCJVc2UgdGhlIGZpZWxkcyBkaXJlY3RseSBvbiBidWRnZXQgc2NoZW1hXCIpXG4gIFwiVGhlIHJlY3VycmluZyBwZXJpb2QgdHlwZSBvZiB0aGUgYnVkZ2V0LlwiXG4gIHBlcmlvZFR5cGU6IEJ1ZGdldFBlcmlvZFR5cGUhXG4gIFwiVGhlIHBvbGljeSB0aGF0IG1hbmFnZXMgZXhwZW5zZXMgZm9yIHRoaXMgYnVkZ2V0XCJcbiAgcG9saWN5OiBQb2xpY3khXG4gIFwiU2V0dGluZ3MgcmVsYXRlZCB0byB0aGUgQnVkZ2V0XCJcbiAgc2V0dGluZ3M6IEJ1ZGdldFNldHRpbmdzISBAZGVwcmVjYXRlZChyZWFzb24gOiBcIlVzZSB0aGUgZmllbGRzIGRpcmVjdGx5IG9uIGJ1ZGdldCBzY2hlbWFcIilcbiAgXCJIb3cgbXVjaCBvZiB0aGUgYnVkZ2V0IGhhcyBiZWVuIHNwZW50XCJcbiAgc3BlbnQ6IEZpbmFuY2lhbEFzc2V0ISBAZGVwcmVjYXRlZChyZWFzb24gOiBcIkRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgYGN1cnJlbnRQZXJpb2RCYWxhbmNlLnNwZW50YFwiKVxuICBcIlRoZSBzdGFydCBkYXRlIG9mIHRoZSBidWRnZXQsIGluY2x1c2l2ZS5cIlxuICBzdGFydERhdGU6IERhdGVcbiAgXCJUaGUgc3RhcnQgdGltZSBvZiB0aGUgYnVkZ2V0LCBpbmNsdXNpdmUuXCJcbiAgc3RhcnRUaW1lOiBUaW1lXG4gIFwiQnVkZ2V0IHN0YXR1c1wiXG4gIHN0YXR1czogQnVkZ2V0U3RhdHVzIVxuICBcIkJ1ZGdldCB2ZXJzaW9uXCJcbiAgdmVyc2lvbjogSW50IVxufVxuXG5cIkEgQ2FyZCBjb25uZWN0aW9uIGZvciBwYWdpbmF0aW9uXCJcbnR5cGUgQnVkZ2V0Q2FyZENvbm5lY3Rpb24gaW1wbGVtZW50cyBDb25uZWN0aW9uIHtcbiAgXCJUaGUgY2FyZHMgaW4gdGhlIGN1cnJlbnQgcGFnZSBvZiByZXN1bHRzLlwiXG4gIGVkZ2VzOiBbQnVkZ2V0Q2FyZEVkZ2UhXSFcbiAgXCJQYWdlIGluZm9ybWF0aW9uIGZvciBhZGRpdGlvbmFsIG5hdmlnYXRpb24gdGhyb3VnaCB0aGlzIGNvbm5lY3Rpb24uXCJcbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxuICBcIlRoZSB0b3RhbCBjb3VudCBvZiBjYXJkcyBtYXRjaGluZyB0aGUgZmlsdGVyIGNyaXRlcmlhIHNwZWNpZmllZCBmb3IgdGhpcyBjb25uZWN0aW9uLlwiXG4gIHRvdGFsQ291bnQ6IEludFxufVxuXG5cIkEgQ2FyZCBlZGdlIGZvciB0aGUgQ2FyZCBjb25uZWN0aW9uLlwiXG50eXBlIEJ1ZGdldENhcmRFZGdlIHtcbiAgXCJUaGUgb3BhcXVlIGN1cnNvciBvZiB0aGUgY3VycmVudCBlZGdlLlwiXG4gIGN1cnNvcjogU3RyaW5nXG4gIFwiVGhlIGNhcmQgYXQgdGhpcyBlZGdlLlwiXG4gIG5vZGU6IENhcmQhXG59XG5cblwiQW4gQnVkZ2V0IGNvbm5lY3Rpb24gZm9yIEJ1ZGdldCBwYWdpbmF0aW9uLlwiXG50eXBlIEJ1ZGdldENvbm5lY3Rpb24gaW1wbGVtZW50cyBDb25uZWN0aW9uIHtcbiAgXCJUaGUgYnVkZ2V0cyBpbiB0aGUgY3VycmVudCBwYWdlIG9mIHJlc3VsdHMuXCJcbiAgZWRnZXM6IFtCdWRnZXRFZGdlIV0hXG4gIFwiUGFnZSBpbmZvcm1hdGlvbiBmb3IgYWRkaXRpb25hbCBuYXZpZ2F0aW9uIHRocm91Z2ggdGhpcyBjb25uZWN0aW9uLlwiXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgXCJUaGUgdG90YWwgY291bnQgb2YgYnVkZ2V0IG1hdGNoaW5nIHRoZSBmaWx0ZXIgY3JpdGVyaWEgc3BlY2lmaWVkIGZvciB0aGlzIGNvbm5lY3Rpb24uXCJcbiAgdG90YWxDb3VudDogSW50XG59XG5cblwiQSBCdWRnZXQgZWRnZSBmb3IgdGhlIEJ1ZGdldCBjb25uZWN0aW9uLlwiXG50eXBlIEJ1ZGdldEVkZ2Uge1xuICBcIlRoZSBvcGFxdWUgY3Vyc29yIG9mIHRoZSBjdXJyZW50IGVkZ2UuXCJcbiAgY3Vyc29yOiBTdHJpbmdcbiAgXCJUaGUgYnVkZ2V0IGF0IHRoaXMgZWRnZS5cIlxuICBub2RlOiBCdWRnZXRcbn1cblxuXCJBIEJ1ZGdldEVtcGxveWVlIGNvbm5lY3Rpb24gZm9yIEJ1ZGdldCBvd25lci9tZW1iZXIgcGFnaW5hdGlvbiBmdXR1cmVwcm9vZmluZ1wiXG50eXBlIEJ1ZGdldEVtcGxveWVlQ29ubmVjdGlvbiBpbXBsZW1lbnRzIENvbm5lY3Rpb24ge1xuICBcIlRoZSBpdGVtcyBpbiB0aGUgY3VycmVudCBwYWdlIG9mIHJlc3VsdHMuXCJcbiAgZWRnZXM6IFtCdWRnZXRFbXBsb3llZUVkZ2VdIVxuICBcIlBhZ2UgaW5mb3JtYXRpb24gZm9yIGFkZGl0aW9uYWwgbmF2aWdhdGlvbiB0aHJvdWdoIHRoaXMgY29ubmVjdGlvbi5cIlxuICBwYWdlSW5mbzogUGFnZUluZm8hXG4gIFwiVGhlIHRvdGFsIGNvdW50IG9mIGl0ZW1zLCBhY3Jvc3MgYWxsIHBhZ2VzLCBtYXRjaGluZyB0aGUgZmlsdGVyIGNyaXRlcmlhIHNwZWNpZmllZCBmb3IgdGhpcyBjb25uZWN0aW9uLlwiXG4gIHRvdGFsQ291bnQ6IEludFxufVxuXG5cIkEgQnVkZ2V0RW1wbG95ZWUgZWRnZSBmb3IgdGhlIEJ1ZGdldEVtcGxveWVlIGNvbm5lY3Rpb24uXCJcbnR5cGUgQnVkZ2V0RW1wbG95ZWVFZGdlIHtcbiAgXCJUaGUgb3BhcXVlIGN1cnNvciBvZiB0aGUgY3VycmVudCBlZGdlLlwiXG4gIGN1cnNvcjogU3RyaW5nXG4gIFwiVGhlIGl0ZW0gYXQgdGhpcyBlZGdlLlwiXG4gIG5vZGU6IEVtcGxveWVlXG59XG5cblwiUmVzdWx0IHR5cGUgZm9yIG1hdGNoZWQgbWVyY2hhbnRzIGFuZCBjYXRlZ29yaWVzLlwiXG50eXBlIEJ1ZGdldE1lcmNoYW50c0FuZENhdGVnb3JpZXNTdWdnZXN0aW9uc1Jlc3VsdCB7XG4gIFwiTWVyY2hhbnQgY2F0ZWdvcmllcy5cIlxuICBtZXJjaGFudENhdGVnb3JpZXM6IFtNZXJjaGFudENhdGVnb3J5IV1cbiAgXCJNZXJjaGFudHMuXCJcbiAgbWVyY2hhbnRzOiBbTWVyY2hhbnQhXVxufVxuXG5cIkEgcGVyaW9kIG9mIHRpbWUgYW5kIGNhZGVuY2UgdGhhdCBhIGJ1ZGdldCBhcHBsaWVzIHRvLlwiXG50eXBlIEJ1ZGdldFBlcmlvZCB7XG4gIFwiVGhlIGVuZCBkYXRlIChZWVlZLU1NLUREKSBvZiB0aGUgYnVkZ2V0LCBpbmNsdXNpdmUuIFNlbWFudGljYWxseSBlbmQgb2YgUFNUIG1pZG5pZ2h0XCJcbiAgZW5kRGF0ZTogRGF0ZVxuICBcIlRoZSBlbmQgZGF0ZXRpbWUgb2YgdGhlIGJ1ZGdldCwgaW5jbHVzaXZlLiAoYWx3YXlzIDc6NTlhbSBVVEMgdGhlIG5leHQgZGF5KVwiXG4gIGVuZFRpbWU6IFRpbWVcbiAgXCJUaGUgcmVjdXJyaW5nIHBlcmlvZCB0eXBlIG9mIHRoZSBidWRnZXQuXCJcbiAgcGVyaW9kVHlwZTogQnVkZ2V0UGVyaW9kVHlwZSFcbiAgXCJUaGUgc3RhcnQgZGF0ZSBvZiB0aGUgYnVkZ2V0LCBpbmNsdXNpdmUuXCJcbiAgc3RhcnREYXRlOiBEYXRlXG4gIFwiVGhlIHN0YXJ0IHRpbWUgb2YgdGhlIGJ1ZGdldCwgaW5jbHVzaXZlLlwiXG4gIHN0YXJ0VGltZTogVGltZVxufVxuXG5cIkJ1ZGdldCBwZXJpb2QgYmFsYW5jZVwiXG50eXBlIEJ1ZGdldFBlcmlvZEJhbGFuY2Uge1xuICBcIkJhbGFuY2UgZW5kIHRpbWVcIlxuICBlbmRUaW1lOiBUaW1lXG4gIFwiQmFsYW5jZSBzcGVudCBhbW91bnRcIlxuICBzcGVudDogRmluYW5jaWFsQXNzZXQhXG4gIFwiQmFsYW5jZSBzdGFydCB0aW1lXCJcbiAgc3RhcnRUaW1lOiBUaW1lXG59XG5cbnR5cGUgQnVkZ2V0UGVyc29ubmVsIHtcbiAgdXNlcnM6IFtVc2VyIV1cbn1cblxuXCJBIEJ1ZGdldFBlcnNvbm5lbCBjb25uZWN0aW9uIGZvciBCdWRnZXRQZXJzb25uZWwgcGFnaW5hdGlvbi5cIlxudHlwZSBCdWRnZXRQZXJzb25uZWxDb25uZWN0aW9uIGltcGxlbWVudHMgQ29ubmVjdGlvbiB7XG4gIFwiVGhlIGl0ZW1zIGluIHRoZSBjdXJyZW50IHBhZ2Ugb2YgcmVzdWx0cy5cIlxuICBlZGdlczogW0J1ZGdldFBlcnNvbm5lbEVkZ2VdIVxuICBcIlBhZ2UgaW5mb3JtYXRpb24gZm9yIGFkZGl0aW9uYWwgbmF2aWdhdGlvbiB0aHJvdWdoIHRoaXMgY29ubmVjdGlvbi5cIlxuICBwYWdlSW5mbzogUGFnZUluZm8hXG4gIFwiVGhlIHRvdGFsIGNvdW50IG9mIGl0ZW1zLCBhY3Jvc3MgYWxsIHBhZ2VzLCBtYXRjaGluZyB0aGUgZmlsdGVyIGNyaXRlcmlhIHNwZWNpZmllZCBmb3IgdGhpcyBjb25uZWN0aW9uLlwiXG4gIHRvdGFsQ291bnQ6IEludFxufVxuXG5cIkEgQnVkZ2V0UGVyc29ubmVsIGVkZ2UgZm9yIHRoZSBCdWRnZXRQZXJzb25uZWwgY29ubmVjdGlvbi5cIlxudHlwZSBCdWRnZXRQZXJzb25uZWxFZGdlIHtcbiAgXCJUaGUgb3BhcXVlIGN1cnNvciBvZiB0aGUgY3VycmVudCBlZGdlLlwiXG4gIGN1cnNvcjogU3RyaW5nXG4gIFwiVGhlIGl0ZW0gYXQgdGhpcyBlZGdlLlwiXG4gIG5vZGU6IEJ1ZGdldFBlcnNvbm5lbFxufVxuXG50eXBlIEJ1ZGdldFJlcXVlc3QgQGV4dGVuZHMgQGtleShmaWVsZHMgOiBcImlkXCIpIHtcbiAgaWQ6IElEISBAZXh0ZXJuYWxcbn1cblxuXCJBIHJlcXVlc3QgdG8gY3JlYXRlIGEgbmV3IGJ1ZGdldFwiXG50eXBlIEJ1ZGdldFJlcXVlc3RFbnRpdHkge1xuICBcIlRoZSBDdXN0b21lciBBY2NvdW50IHRoYXQgaGFzIHZpc2liaWxpdHkgdG8gdGhpcyBidWRnZXRcIlxuICBhY2NvdW50OiBBY2NvdW50IVxuICBcIkJ1ZGdldCB0aGF0IHdhcyBjcmVhdGVkIGZyb20gdGhpcyByZXF1ZXN0XCJcbiAgY3JlYXRlZEJ1ZGdldDogQnVkZ2V0XG4gIFwiRGVzY3JpcHRpb24gb2Ygd2hhdCB0aGlzIGJ1ZGdldCByZXF1ZXN0IGlzIGZvclwiXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmchXG4gIFwiVGhlIGVuZCBkYXRlIG9mIHRoZSBidWRnZXQsIGluY2x1c2l2ZS5cIlxuICBlbmREYXRlOiBEYXRlXG4gIFwiVHJ1ZSBpZiB0aGUgYnVkZ2V0IGxpbWl0IGlzIGhhcmQgZW5mb3JjZWRcIlxuICBlbmZvcmNlTGltaXQ6IEJvb2xlYW4hXG4gIFwiQnVkZ2V0IFJlcXVlc3QgSUQgKHdpdGhpbiBidWRnZXRzIHNlcnZpY2UpXCJcbiAgaWQ6IElEIVxuICBcIkxpbWl0IG9uIHRoZSBidWRnZXRcIlxuICBsaW1pdDogRmluYW5jaWFsQXNzZXQhXG4gIFwiVGhlIGVtcGxveWVlcyB3aG8gYXJlIGNvbnNpZGVyZWQgbWVtYmVycyBvZiB0aGlzIGJ1ZGdldFwiXG4gIG1lbWJlckVtcGxveWVlczogQnVkZ2V0RW1wbG95ZWVDb25uZWN0aW9uIVxuICBcIk5hbWUgb2YgdGhlIGJ1ZGdldFwiXG4gIG5hbWU6IFN0cmluZyFcbiAgXCJUcnVlIGlmIG9ubHkgcHJvdmlzaW9uZWQgY2FyZHMgY2FuIHNwZW5kIGZyb20gdGhpcyBidWRnZXRcIlxuICBvbmx5UHJvdmlzaW9uZWRDYXJkU3BlbmQ6IEJvb2xlYW4hXG4gIFwiVGhlIGVtcGxveWVlcyB3aG8gYXJlIGNvbnNpZGVyZWQgb3duZXJzIG9mIHRoaXMgYnVkZ2V0XCJcbiAgb3duZXJFbXBsb3llZXM6IEJ1ZGdldEVtcGxveWVlQ29ubmVjdGlvbiFcbiAgXCJUaGUgcGFyZW50IG9mIHRoaXMgYnVkZ2V0LCBpZiBhbnlcIlxuICBwYXJlbnQ6IEJ1ZGdldFxuICBcIlRoZSByZWN1cnJpbmcgcGVyaW9kIHR5cGUgb2YgdGhlIGJ1ZGdldC5cIlxuICBwZXJpb2RUeXBlOiBCdWRnZXRQZXJpb2RUeXBlIVxuICBcIlRoZSBwb2xpY3kgdGhhdCBtYW5hZ2VzIGV4cGVuc2VzIGZvciB0aGlzIGJ1ZGdldFwiXG4gIHBvbGljeTogUG9saWN5XG4gIFwiVGhlIGluaXRpYXRlZCByZXF1ZXN0IGluc3RhbmNlIGl0c2VsZlwiXG4gIHJlcXVlc3Q6IEJ1ZGdldFJlcXVlc3RcbiAgXCJUaGUgRW1wbG95ZWUgd2hvIGNyZWF0ZWQgdGhpcyBidWRnZXQgcmVxdWVzdFwiXG4gIHJlcXVlc3RlZEJ5RW1wbG95ZWU6IEVtcGxveWVlIVxuICBcIlRoZSBzdGFydCBkYXRlIG9mIHRoZSBidWRnZXQsIGluY2x1c2l2ZS5cIlxuICBzdGFydERhdGU6IERhdGUhXG4gIFwiVmVyc2lvbiBvZiB0aGUgQnVkZ2V0IFJlcXVlc3RcIlxuICB2ZXJzaW9uOiBJbnQhXG59XG5cbnR5cGUgQnVkZ2V0U2V0dGluZ3Mge1xuICBcIlRydWUgaWYgdGhlIGJ1ZGdldCBsaW1pdCBpcyBoYXJkIGVuZm9yY2VkXCJcbiAgZW5mb3JjZUxpbWl0OiBCb29sZWFuIVxuICBcIlRydWUgaWYgb25seSBwcm92aXNpb25lZCBjYXJkcyBjYW4gc3BlbmQgZnJvbSB0aGlzIGJ1ZGdldFwiXG4gIG9ubHlQcm92aXNpb25lZENhcmRTcGVuZDogQm9vbGVhbiFcbn1cblxuXCIgY3VycmVudGx5IGFzc3VtZWQgdG8gYmUgYSB0b3AtbGV2ZWwgZW50aXR5IGR1ZSB0byB0aGUgZXhpc3RlbmNlIG9mIGFuIElEIGtleS5cIlxudHlwZSBCdWRnZXRUZW1wbGF0ZSBAa2V5KGZpZWxkcyA6IFwiaWRcIikge1xuICBpZDogSUQhXG59XG5cblwiQW4gQnVkZ2V0VGVtcGxhdGUgY29ubmVjdGlvbiBmb3IgQnVkZ2V0VGVtcGxhdGUgcGFnaW5hdGlvbi5cIlxudHlwZSBCdWRnZXRUZW1wbGF0ZUNvbm5lY3Rpb24gaW1wbGVtZW50cyBDb25uZWN0aW9uIHtcbiAgXCJUaGUgYnVkZ2V0IHRlbXBsYXRlcyBpbiB0aGUgY3VycmVudCBwYWdlIG9mIHJlc3VsdHMuXCJcbiAgZWRnZXM6IFtCdWRnZXRUZW1wbGF0ZUVkZ2UhXSFcbiAgXCJQYWdlIGluZm9ybWF0aW9uIGZvciBhZGRpdGlvbmFsIG5hdmlnYXRpb24gdGhyb3VnaCB0aGlzIGNvbm5lY3Rpb24uXCJcbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxuICBcIlRoZSB0b3RhbCBjb3VudCBvZiBidWRnZXQgbWF0Y2hpbmcgdGhlIGZpbHRlciBjcml0ZXJpYSBzcGVjaWZpZWQgZm9yIHRoaXMgY29ubmVjdGlvbi5cIlxuICB0b3RhbENvdW50OiBJbnRcbn1cblxuXCJBIEJ1ZGdldFRlbXBsYXRlIGVkZ2UgZm9yIHRoZSBCdWRnZXRUZW1wbGF0ZSBjb25uZWN0aW9uLlwiXG50eXBlIEJ1ZGdldFRlbXBsYXRlRWRnZSB7XG4gIFwiVGhlIG9wYXF1ZSBjdXJzb3Igb2YgdGhlIGN1cnJlbnQgZWRnZS5cIlxuICBjdXJzb3I6IFN0cmluZ1xuICBcIlRoZSBidWRnZXQgYXQgdGhpcyBlZGdlLlwiXG4gIG5vZGU6IEJ1ZGdldFRlbXBsYXRlXG59XG5cbnR5cGUgQnVkZ2V0VXNlckFtb3VudFNwZW50IHtcbiAgYW1vdW50U3BlbnQ6IEZpbmFuY2lhbEFzc2V0XG4gIGVtcGxveWVlOiBFbXBsb3llZVxuICB1c2VyOiBVc2VyIEBkZXByZWNhdGVkKHJlYXNvbiA6IFwiSW5jb3JyZWN0IHBlcm1pc3Npb24gc2NvcGluZywgdXNlICdlbXBsb3llZScgaW5zdGVhZFwiKVxufVxuXG5cIkEgQnVkZ2V0VXNlciBjb25uZWN0aW9uIGZvciBCdWRnZXQgb3duZXIvbWVtYmVyIHBhZ2luYXRpb24gZnV0dXJlcHJvb2ZpbmdcIlxudHlwZSBCdWRnZXRVc2VyQ29ubmVjdGlvbiBpbXBsZW1lbnRzIENvbm5lY3Rpb24ge1xuICBcIlRoZSBpdGVtcyBpbiB0aGUgY3VycmVudCBwYWdlIG9mIHJlc3VsdHMuXCJcbiAgZWRnZXM6IFtCdWRnZXRVc2VyRWRnZV0hXG4gIFwiUGFnZSBpbmZvcm1hdGlvbiBmb3IgYWRkaXRpb25hbCBuYXZpZ2F0aW9uIHRocm91Z2ggdGhpcyBjb25uZWN0aW9uLlwiXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgXCJUaGUgdG90YWwgY291bnQgb2YgaXRlbXMsIGFjcm9zcyBhbGwgcGFnZXMsIG1hdGNoaW5nIHRoZSBmaWx0ZXIgY3JpdGVyaWEgc3BlY2lmaWVkIGZvciB0aGlzIGNvbm5lY3Rpb24uXCJcbiAgdG90YWxDb3VudDogSW50XG59XG5cblwiQSBCdWRnZXRVc2VyIGVkZ2UgZm9yIHRoZSBCdWRnZXRVc2VyIGNvbm5lY3Rpb24uXCJcbnR5cGUgQnVkZ2V0VXNlckVkZ2Uge1xuICBcIlRoZSBvcGFxdWUgY3Vyc29yIG9mIHRoZSBjdXJyZW50IGVkZ2UuXCJcbiAgY3Vyc29yOiBTdHJpbmdcbiAgXCJUaGUgaXRlbSBhdCB0aGlzIGVkZ2UuXCJcbiAgbm9kZTogVXNlclxufVxuXG50eXBlIENhcmQgQGV4dGVuZHMgQGtleShmaWVsZHMgOiBcImlkXCIpIHtcbiAgYnVkZ2V0OiBCdWRnZXRcbiAgY2FyZEJ1ZGdldE93bmVyc2hpcFR5cGU6IENhcmRCdWRnZXRPd25lcnNoaXBUeXBlXG4gIGlkOiBJRCEgQGV4dGVybmFsXG59XG5cblwiQ2FyZCBCdWRnZXQgTWFwcGluZyBvYmplY3QgdHlwZS5cIlxudHlwZSBDYXJkQnVkZ2V0TWFwcGluZyB7XG4gIGJ1ZGdldDogQnVkZ2V0IVxuICBidWRnZXRNYXBwaW5nRXhwaXJhdGlvbjogQnVkZ2V0TWFwcGluZ0V4cGlyYXRpb24hXG4gIGNhcmQ6IENhcmQhXG4gIGNhcmRCdWRnZXRPd25lcnNoaXBUeXBlOiBDYXJkQnVkZ2V0T3duZXJzaGlwVHlwZSFcbiAgZWZmZWN0aXZlUmFuZ2U6IEVmZmVjdGl2ZVJhbmdlIVxuICBpZDogSUQhXG4gIHR5cGU6IEJ1ZGdldE1hcHBpbmdUeXBlISBAZGVwcmVjYXRlZChyZWFzb24gOiBcIlVzZSBidWRnZXRNYXBwaW5nRXhwaXJhdGlvblwiKVxufVxuXG5cIlJlc3BvbnNlIHR5cGUgZm9yIGEgY29uZmxpY3RpbmcgbWVyY2hhbnQuXCJcbnR5cGUgQ29uZmxpY3RpbmdNZXJjaGFudCB7XG4gIFwiVGhlIG9mZmVuZGluZyBidWRnZXQuXCJcbiAgYnVkZ2V0OiBCdWRnZXRcbiAgXCJUaGUgb2ZmZW5kaW5nIG1lcmNoYW50IGNhdGVnb3J5IGNvbmZpZ3MuXCJcbiAgY29uZmlnczogW01lcmNoYW50Q2F0ZWdvcnlDb25maWchXSFcbiAgXCJDb25mbGljdGluZ01lcmNoYW50IG9iamVjdCBpZC5cIlxuICBpZDogU3RyaW5nIVxuICBcIk1lcmNoYW50IG5hbWUuXCJcbiAgbmFtZTogU3RyaW5nIVxufVxuXG5cIlJlc3BvbnNlIHR5cGUgZm9yIGEgY29uZmxpY3RpbmcgbWVyY2hhbnQgY2F0ZWdvcnkuXCJcbnR5cGUgQ29uZmxpY3RpbmdNZXJjaGFudENhdGVnb3J5IHtcbiAgXCJUaGUgb2ZmZW5kaW5nIGJ1ZGdldC5cIlxuICBidWRnZXQ6IEJ1ZGdldFxuICBcIlRoZSBvZmZlbmRpbmcgbWVyY2hhbnQgY2F0ZWdvcnkgY29uZmlncy5cIlxuICBjb25maWdzOiBbTWVyY2hhbnRDYXRlZ29yeUNvbmZpZyFdIVxuICBcIkNvbmZsaWN0aW5nTWVyY2hhbnRDYXRlZ29yeSBvYmplY3QgaWQuXCJcbiAgaWQ6IFN0cmluZyFcbiAgXCJNZXJjaGFudCBjYXRlZ29yeSBuYW1lLlwiXG4gIG5hbWU6IFN0cmluZyFcbn1cblxuXCJSZXNwb25zZSB0eXBlIGZvciB2YWxpZGF0aW9uIG9mIG1lcmNoYW50IGNhdGVnb3J5IGNvbnRyb2xzLlwiXG50eXBlIENvbmZsaWN0aW5nTWVyY2hhbnRzQ2F0ZWdvcnlSZXN1bHQge1xuICBcIkNvbmZsaWN0aW5nIG1lcmNoYW50IGNhdGVnb3JpZXMuXCJcbiAgbWVyY2hhbnRDYXRlZ29yaWVzOiBbQ29uZmxpY3RpbmdNZXJjaGFudENhdGVnb3J5IV1cbiAgXCJDb25mbGljdGluZyBtZXJjaGFudHMuXCJcbiAgbWVyY2hhbnRzOiBbQ29uZmxpY3RpbmdNZXJjaGFudCFdXG59XG5cbnR5cGUgQ3JlYXRlQnVkZ2V0UmVxdWVzdFJlc3VsdCB7XG4gIFwiVGhlIGJ1ZGdldCB0aGF0IHdhcyBjcmVhdGVkLlwiXG4gIGJ1ZGdldFJlcXVlc3RFbnRpdHk6IEJ1ZGdldFJlcXVlc3RFbnRpdHkhXG59XG5cbnR5cGUgQ3JlYXRlQnVkZ2V0UmVzdWx0IHtcbiAgXCJUaGUgYnVkZ2V0IHRoYXQgd2FzIGNyZWF0ZWQuXCJcbiAgYnVkZ2V0OiBCdWRnZXQhXG4gIFwiVGhlIHJlcXVlc3QgdGhhdCB3YXMgZ2VuZXJhdGVkIHdoZW4gdGhpcyBidWRnZXQgd2FzIGNyZWF0ZWQuXCJcbiAgcmVxdWVzdDogQnVkZ2V0UmVxdWVzdCBAZGVwcmVjYXRlZChyZWFzb24gOiBcIlRoaXMgZmllbGQgaXMgYWx3YXlzIG51bGwuIEJ1ZGdldCBSZXF1ZXN0cyB3ZXJlIG1vdmVkIHRvIGNyZWF0ZUJ1ZGdldFJlcXVlc3QgbXV0YXRpb24uXCIpXG59XG5cbnR5cGUgQ3JlYXRlQnVkZ2V0c1Jlc3VsdCB7XG4gIFwiVGhlIGJ1ZGdldHMgdGhhdCB3ZXJlIGNyZWF0ZWQuXCJcbiAgYnVkZ2V0czogW0NyZWF0ZUJ1ZGdldFJlc3VsdCFdIVxufVxuXG50eXBlIERlbGV0ZUJ1ZGdldFJlc3VsdCB7XG4gIFwiVGhlIHJlc3VsdCBvZiB0aGUgYnVkZ2V0IGRlbGV0aW9uIC0gc3VjY2Vzcy9mYWlsdXJlXCJcbiAgYnVkZ2V0RGVsZXRpb25SZXN1bHQ6IEJvb2xlYW4hXG59XG5cbnR5cGUgRGVsZXRlQnVkZ2V0c1Jlc3VsdCB7XG4gIFwiVGhlIHJlc3VsdCBvZiB0aGUgYnVkZ2V0IGRlbGV0aW9ucyAtIHN1Y2Nlc3MvZmFpbHVyZVwiXG4gIGJ1ZGdldERlbGV0aW9uUmVzdWx0czogW0RlbGV0ZUJ1ZGdldFJlc3VsdCFdIVxufVxuXG5cIkVmZmVjdGl2ZSByYW5nZSB0eXBlLCB1c2VkIGZvciBzcGVjaWZ5aW5nIG1hcHBpbmcgc3RhcnQvZW5kIGRhdGVzLlwiXG50eXBlIEVmZmVjdGl2ZVJhbmdlIHtcbiAgZW5kVGltZTogVGltZVxuICBzdGFydFRpbWU6IFRpbWUhXG59XG5cbnR5cGUgRW1wbG95ZWUgQGV4dGVuZHMgQGtleShmaWVsZHMgOiBcImN1c3RvbWVyVXNlcklkXCIpIHtcbiAgY3VzdG9tZXJVc2VySWQ6IElEIEBleHRlcm5hbFxufVxuXG5cIkZpbmFuY2lhbCBBc3NldCB3cmFwcGVyXCJcbnR5cGUgRmluYW5jaWFsQXNzZXQge1xuICBcIlRoZSBpbnN0cnVtZW50IGNvZGUgKHVzZCwgZXRjLikuIEN1cnJlbnRseSwgb25seSB1c2QgaXMgc3VwcG9ydGVkLlwiXG4gIGluc3RydW1lbnRDb2RlOiBGaW5hbmNpYWxJbnN0cnVtZW50Q29kZSFcbiAgXCJUaGUgYW1vdW50IGluIGNlbnRzXCJcbiAgcXVhbnRpdHlDZW50czogSW50IVxufVxuXG5cIk1lcmNoYW50LlwiXG50eXBlIE1lcmNoYW50IEBleHRlbmRzIEBrZXkoZmllbGRzIDogXCJpZFwiKSB7XG4gIGlkOiBJRCEgQGV4dGVybmFsXG59XG5cblwiTWVyY2hhbnQgY2F0ZWdvcnkuXCJcbnR5cGUgTWVyY2hhbnRDYXRlZ29yeSBAZXh0ZW5kcyBAa2V5KGZpZWxkcyA6IFwiaWRcIikge1xuICBpZDogSUQhIEBleHRlcm5hbFxufVxuXG5cIk1lcmNoYW50IGNhdGVnb3J5IGNvbmZpZy5cIlxudHlwZSBNZXJjaGFudENhdGVnb3J5Q29uZmlnIHtcbiAgY29udHJvbFJlZmVyZW5jZTogTWVyY2hhbnRDYXRlZ29yeUNvbnRyb2xSZWZlcmVuY2UhXG4gIGNvbnRyb2xUeXBlOiBNZXJjaGFudENhdGVnb3J5Q29udHJvbFR5cGUhXG59XG5cblwiTWVyY2hhbnQgY2F0ZWdvcnkgY29udHJvbHMgZnJvbSBnbG9iYWwgYnVkZ2V0LCBhbmNlc3RvciBidWRnZXRzIGFuZCBjdXJyZW50IGJ1ZGdldC5cIlxudHlwZSBNZXJjaGFudENhdGVnb3J5Q29udHJvbHMge1xuICBhbmNlc3RvckJ1ZGdldHNDb25maWdzOiBbTWVyY2hhbnRDYXRlZ29yeUNvbmZpZ11cbiAgY3VycmVudEJ1ZGdldENvbmZpZ3M6IFtNZXJjaGFudENhdGVnb3J5Q29uZmlnXVxuICBnbG9iYWxCdWRnZXRDb25maWdzOiBbTWVyY2hhbnRDYXRlZ29yeUNvbmZpZ11cbn1cblxuXCJNZXJjaGFudCBjYXRlZ29yeSBpZCBjb250cm9sIHJlZmVyZW5jZS5cIlxudHlwZSBNZXJjaGFudENhdGVnb3J5SWRDb250cm9sUmVmZXJlbmNlIHtcbiAgbWVyY2hhbnRDYXRlZ29yeUlkOiBTdHJpbmchXG4gIG1lcmNoYW50Q2F0ZWdvcnlOYW1lOiBTdHJpbmchXG59XG5cblwiTWVyY2hhbnQgbmFtZSBjb250cm9sIHJlZmVyZW5jZS5cIlxudHlwZSBNZXJjaGFudE5hbWVDb250cm9sUmVmZXJlbmNlIHtcbiAgbWVyY2hhbnROYW1lOiBTdHJpbmchXG59XG5cbnR5cGUgTXV0YXRpb24ge1xuICBcIkFzc2lnbiBhIGJ1ZGdldCB0byBhIGNhcmRcIlxuICBhc3NpZ25CdWRnZXRUb0NhcmQoaW5wdXQ6IEFzc2lnbkJ1ZGdldFRvQ2FyZElucHV0ISk6IEFzc2lnbkJ1ZGdldFRvQ2FyZFJlc3VsdCFcbiAgXCJDcmVhdGUgQnVkZ2V0XCJcbiAgY3JlYXRlQnVkZ2V0KGlucHV0OiBDcmVhdGVCdWRnZXRJbnB1dCEpOiBDcmVhdGVCdWRnZXRSZXN1bHQhXG4gIFwiQ3JlYXRlIGEgcmVxdWVzdCBmb3IgYSBuZXcgQnVkZ2V0XCJcbiAgY3JlYXRlQnVkZ2V0UmVxdWVzdChpbnB1dDogQ3JlYXRlQnVkZ2V0UmVxdWVzdElucHV0ISk6IENyZWF0ZUJ1ZGdldFJlcXVlc3RSZXN1bHQhXG4gIFwiQ3JlYXRlIG11bHRpcGxlIGJ1ZGdldHMuXCJcbiAgY3JlYXRlQnVkZ2V0cyhpbnB1dDogW0NyZWF0ZUJ1ZGdldElucHV0IV0hKTogQ3JlYXRlQnVkZ2V0c1Jlc3VsdCFcbiAgXCJEZWxldGUgQnVkZ2V0XCJcbiAgZGVsZXRlQnVkZ2V0KGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZywgaWQ6IElEISk6IERlbGV0ZUJ1ZGdldFJlc3VsdCFcbiAgXCJEZWxldGUgbXVsdGlwbGUgYnVkZ2V0cy5cIlxuICBkZWxldGVCdWRnZXRzKGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZywgaWRzOiBbSUQhXSEpOiBEZWxldGVCdWRnZXRzUmVzdWx0IVxuICBcIlVwZGF0ZSBCdWRnZXRcIlxuICB1cGRhdGVCdWRnZXQoaW5wdXQ6IFVwZGF0ZUJ1ZGdldElucHV0ISk6IFVwZGF0ZUJ1ZGdldFJlc3VsdCFcbiAgXCJVcGRhdGUgbXVsdGlwbGUgYnVkZ2V0cy5cIlxuICB1cGRhdGVCdWRnZXRzKGlucHV0OiBbVXBkYXRlQnVkZ2V0SW5wdXQhXSEpOiBVcGRhdGVCdWRnZXRzUmVzdWx0IVxufVxuXG50eXBlIFBhZ2VJbmZvIHtcbiAgXCJXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuXCJcbiAgZW5kQ3Vyc29yOiBTdHJpbmdcbiAgXCJXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zP1wiXG4gIGhhc05leHRQYWdlOiBCb29sZWFuIVxuICBcIldoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zP1wiXG4gIGhhc1ByZXZpb3VzUGFnZTogQm9vbGVhbiFcbiAgXCJXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLlwiXG4gIHN0YXJ0Q3Vyc29yOiBTdHJpbmdcbn1cblxuXCJFeHRlcm5hbCB0eXBlcyBmb3IgZmVkZXJhdGlvblwiXG50eXBlIFBvbGljeSBAZXh0ZW5kcyBAa2V5KGZpZWxkcyA6IFwiaWRcIikge1xuICBpZDogSUQhIEBleHRlcm5hbFxufVxuXG50eXBlIFF1ZXJ5IHtcbiAgX2VudGl0aWVzKHJlcHJlc2VudGF0aW9uczogW19BbnkhXSEpOiBbX0VudGl0eV0hXG4gIF9zZXJ2aWNlOiBfU2VydmljZVxuICBcIkdldCBhIGJ1ZGdldCBieSBpZFwiXG4gIGJ1ZGdldChpZDogSUQpOiBCdWRnZXRcbiAgXCJMaXN0IGEgYnVkZ2V0J3MgZGVzY2VuZGFudHMgYnkgaWQgdXB0byBvcHRpb25hbCBtYXhpbXVtIGRlcHRoXCJcbiAgYnVkZ2V0RGVzY2VuZGFudHMoaWQ6IElEISwgbWF4RGVwdGg6IEludCk6IFtCdWRnZXRdXG4gIFwiU2VhcmNoIG1lcmNoYW50cyBhbmQgY2F0ZWdvcmllcyBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIHNlYXJjaCB0ZXh0LlwiXG4gIGJ1ZGdldE1lcmNoYW50c0FuZENhdGVnb3JpZXNTdWdnZXN0aW9ucyhzdWdnZXN0aW9uc0lucHV0OiBbQnVkZ2V0TWVyY2hhbnRzQW5kQ2F0ZWdvcmllc1N1Z2dlc3Rpb25zSW5wdXQhXSk6IEJ1ZGdldE1lcmNoYW50c0FuZENhdGVnb3JpZXNTdWdnZXN0aW9uc1Jlc3VsdCFcbiAgXCJcIlwiXG4gIEdldCBCdWRnZXQgVGVtcGxhdGUgKD8pXG4gIFxuICBUT0RPOiBTcGVjaWZpY3MgVEJEXG4gIFwiXCJcIlxuICBidWRnZXRUZW1wbGF0ZShpZDogSUQhKTogQnVkZ2V0VGVtcGxhdGUhXG4gIFwiXCJcIlxuICBMaXN0IEJ1ZGdldCBUZW1wbGF0ZSAoPylcbiAgXG4gIFRPRE86IFNwZWNpZmljcyBUQkRcbiAgXCJcIlwiXG4gIGJ1ZGdldFRlbXBsYXRlcyhwYWdlOiBQYWdpbmF0aW9uSW5wdXQpOiBCdWRnZXRUZW1wbGF0ZUNvbm5lY3Rpb24hXG4gIFwiR2V0IGEgYnVkZ2V0J3MgbWVtYmVyIGFuZCBvd25lciBzcGVuZFwiXG4gIGJ1ZGdldFVzZXJzQW1vdW50U3BlbnQoaWQ6IElEISk6IFtCdWRnZXRVc2VyQW1vdW50U3BlbnRdXG4gIFwiTGlzdCBCdWRnZXRzXCJcbiAgYnVkZ2V0cyhmaWx0ZXI6IEJ1ZGdldEZpbHRlcklucHV0LCBvcmRlcjogQnVkZ2V0T3JkZXJJbnB1dCwgcGFnZTogUGFnaW5hdGlvbklucHV0KTogQnVkZ2V0Q29ubmVjdGlvbiFcbiAgXCJHZXQgdGhlIHRvdGFsIHNwZW5kIGFjcm9zcyBhbGwgdGhlIGJ1ZGdldHMgaW4gdGhlaXIgY3VycmVudCBwZXJpb2RzIHRoYXQgZml0IGEgY2VydGFpbiBmaWx0ZXJcIlxuICBidWRnZXRzVG90YWxTcGVuZEFjcm9zc0N1cnJlbnRQZXJpb2RzKGZpbHRlcjogQnVkZ2V0RmlsdGVySW5wdXQpOiBGaW5hbmNpYWxBc3NldFxuICBcIlZhbGlkYXRlIGNvbmZsaWN0aW5nIG1lcmNoYW50cyBvciBjYXRlZ29yaWVzIHdpdGggYW5jZXN0b3IgYnVkZ2V0cy5cIlxuICBjb25mbGljdGluZ0FuY2VzdG9yQnVkZ2V0TWVyY2hhbnRDYXRlZ29yeUNvbnRyb2xzKG1lcmNoYW50Q2F0ZWdvcnlDb250cm9sczogW0NvbmZsaWN0aW5nQW5jZXN0b3JCdWRnZXRNZXJjaGFudENhdGVnb3J5Q29udHJvbHMhXSk6IENvbmZsaWN0aW5nTWVyY2hhbnRzQ2F0ZWdvcnlSZXN1bHQhXG4gIFwiVmFsaWRhdGUgY29uZmxpY3RpbmcgbWVyY2hhbnRzIG9yIGNhdGVnb3JpZXMgd2l0aCBhbmNlc3RvciBhbmQgZGVzY2VuZGFudCBidWRnZXRzLlwiXG4gIGNvbmZsaWN0aW5nQnVkZ2V0TWVyY2hhbnRDYXRlZ29yeUNvbnRyb2xzKG1lcmNoYW50Q2F0ZWdvcnlDb250cm9sczogW0NvbmZsaWN0aW5nQnVkZ2V0TWVyY2hhbnRDYXRlZ29yeUNvbnRyb2xzIV0pOiBDb25mbGljdGluZ01lcmNoYW50c0NhdGVnb3J5UmVzdWx0IVxuICBcIkdldCBnbG9iYWwgYnVkZ2V0IGZvciBhY2NvdW50XCJcbiAgZ2xvYmFsQnVkZ2V0OiBCdWRnZXRcbn1cblxuXCJEZXRhaWwgYWJvdXQgYW4gc3RhdHVzIHVwZGF0ZS5cIlxudHlwZSBTdGF0dXNVcGRhdGVEZXRhaWxzIHtcbiAgXCJUaW1lIGF0IHdoaWNoIHRoZSBzdGF0dXMgdXBkYXRlIG9jY3VycmVkLlwiXG4gIHVwZGF0ZWRBdDogVGltZVxuICBcIkVtcGxveWVlIHRoYXQgdHJpZ2dlcmVkIHRoZSB1cGRhdGUgLlwiXG4gIHVwZGF0ZWRCeTogRW1wbG95ZWVcbn1cblxudHlwZSBVcGRhdGVCdWRnZXRSZXN1bHQge1xuICBcIlRoZSBidWRnZXQgdGhhdCB3YXMgdXBkYXRlZC5cIlxuICBidWRnZXQ6IEJ1ZGdldCFcbiAgXCJUaGUgcmVxdWVzdCB0aGF0IHdhcyBwb3RlbnRpYWxseSBtb2RpZmVkIHdoZW4gdGhpcyBidWRnZXQgd2FzIHVwZGF0ZWQuXCJcbiAgcmVxdWVzdDogQnVkZ2V0UmVxdWVzdFxufVxuXG50eXBlIFVwZGF0ZUJ1ZGdldHNSZXN1bHQge1xuICBcIlRoZSBidWRnZXQgdGhhdCB3YXMgdXBkYXRlZC5cIlxuICBidWRnZXRzOiBbVXBkYXRlQnVkZ2V0UmVzdWx0IV0hXG59XG5cbnR5cGUgVXNlciBAZXh0ZW5kcyBAa2V5KGZpZWxkcyA6IFwiaWRcIikge1xuICBidWRnZXRBbW91bnRTcGVudEN1cnJlbnRNb250aDogRmluYW5jaWFsQXNzZXRcbiAgaWQ6IElEISBAZXh0ZXJuYWxcbn1cblxudHlwZSBfU2VydmljZSB7XG4gIHNkbDogU3RyaW5nIVxufVxuXG5lbnVtIEJ1ZGdldEVkaXRQZXJtaXNzaW9uR3JhbnQge1xuICBGVUxMXG4gIE5PTkVcbiAgUEFSVElBTFxufVxuXG5lbnVtIEJ1ZGdldE1hcHBpbmdFeHBpcmF0aW9uIHtcbiAgRVhQSVJJTkdcbiAgTk9OX0VYUElSSU5HXG59XG5cbmVudW0gQnVkZ2V0TWFwcGluZ1R5cGUge1xuICBFWFBJUklOR1xuICBOT05fRVhQSVJJTkdcbn1cblxuZW51bSBCdWRnZXRQZXJpb2RUeXBlIHtcbiAgXCJJbnZhbGlkXCJcbiAgSU5WQUxJRFxuICBcIk9ubHkgb25jZVwiXG4gIE9ORV9USU1FXG4gIFwiRXZlcnkgbW9udGhcIlxuICBQRVJfTU9OVEhcbiAgXCJFdmVyeSBxdWFydGVyXCJcbiAgUEVSX1FVQVJURVJcbiAgXCJFdmVyeSB3ZWVrXCJcbiAgUEVSX1dFRUtcbiAgXCJFdmVyeSB5ZWFyXCJcbiAgUEVSX1lFQVJcbn1cblxuZW51bSBCdWRnZXRTdGF0dXMge1xuICBBUFBST1ZFRFxuICBDTE9TRURcbiAgREVMRVRFRFxuICBEUkFGVFxuICBFWFBJUkVEXG4gIFJFSkVDVEVEXG4gIFNVQk1JVFRFRFxuICBURVJNSU5BVEVEXG59XG5cbmVudW0gQ2FyZEJ1ZGdldE93bmVyc2hpcFR5cGUge1xuICBCVURHRVRcbiAgVVNFUlxufVxuXG5cIlRoZSB0eXBlIG9mIHRoZSBFeHBlbnNlLlwiXG5lbnVtIEV4cGVuc2VUeXBlIHtcbiAgXCJBIGJpbGwgcGF5IGV4cGVuc2UuXCJcbiAgQklMTFBBWVxuICBcIkEgY2FyZCBleHBlbnNlLlwiXG4gIENBUkRcbiAgXCJBIHJlaW1idXJzZW1lbnQgZXhwZW5zZS5cIlxuICBSRUlNQlVSU0VNRU5UXG59XG5cblwiXCJcIlxuIEZyb20gQVBJdjFcbiBodHRwczovL2dpdGh1Yi5jb20vYnJleGhxL2NyZWRpdF9jYXJkL2Jsb2IvbWFpbi9hcHBzL2FwaS9saWIvYXBpL3dlYi9zY2hlbWEvZmluYW5jaWFsX2Fzc2V0LmV4I0w3XG4gaHR0cHM6Ly9naXRodWIuY29tL2JyZXhocS9jcmVkaXRfY2FyZC9ibG9iL21haW4vbGlicmFyaWVzL2JyZXhfZmluYW5jaWFsX2Fzc2V0L2xpYi9maW5hbmNpYWxfaW5zdHJ1bWVudF9jb25zdGFudHMuZXgjTDk2MlxuXCJcIlwiXG5lbnVtIEZpbmFuY2lhbEluc3RydW1lbnRDb2RlIHtcbiAgQUVEXG4gIEFGTlxuICBBTExcbiAgQU1EXG4gIEFOR1xuICBBT0FcbiAgQVJTXG4gIEFVRFxuICBBV0dcbiAgQVpOXG4gIEJBTVxuICBCQkRcbiAgQkRUXG4gIEJHTlxuICBCSERcbiAgQklGXG4gIEJNRFxuICBCTkRcbiAgQk9CXG4gIEJPVlxuICBCUkxcbiAgQlNEXG4gIEJUTlxuICBCV1BcbiAgQllOXG4gIEJaRFxuICBDQURcbiAgQ0RGXG4gIENIRVxuICBDSEZcbiAgQ0hXXG4gIENMRlxuICBDTFBcbiAgQ05ZXG4gIENPUFxuICBDT1VcbiAgQ1JDXG4gIENSWVBUT19CVENcbiAgQ1JZUFRPX0VUSFxuICBDUllQVE9fVVNEQ1xuICBDVUNcbiAgQ1VQXG4gIENWRVxuICBDWktcbiAgREpGXG4gIERLS1xuICBET1BcbiAgRFpEXG4gIEVHUFxuICBFUk5cbiAgRVRCXG4gIEVVUlxuICBGSkRcbiAgRktQXG4gIEdCUFxuICBHRUxcbiAgR0hTXG4gIEdJUFxuICBHTURcbiAgR05GXG4gIEdUUVxuICBHWURcbiAgSEtEXG4gIEhOTFxuICBIUktcbiAgSFRHXG4gIEhVRlxuICBJRFJcbiAgSUxTXG4gIElOUlxuICBJUURcbiAgSVJSXG4gIElTS1xuICBKTURcbiAgSk9EXG4gIEpQWVxuICBLRVNcbiAgS0dTXG4gIEtIUlxuICBLTUZcbiAgS1BXXG4gIEtSV1xuICBLV0RcbiAgS1lEXG4gIEtaVFxuICBMQUtcbiAgTEJQXG4gIExLUlxuICBMUkRcbiAgTFNMXG4gIExZRFxuICBNQURcbiAgTURMXG4gIE1HQVxuICBNS0RcbiAgTU1LXG4gIE1OVFxuICBNT1BcbiAgTVJVXG4gIE1VUlxuICBNVlJcbiAgTVdLXG4gIE1YTlxuICBNWFZcbiAgTVlSXG4gIE1aTlxuICBOQURcbiAgTkFTREFRX0RBR1hYXG4gIE5BU0RBUV9ER0NYWFxuICBOQVNEQVFfREdWWFhcbiAgTkFTREFRX0RQR1hYXG4gIE5BU0RBUV9HR0JYWFxuICBOQVNEQVFfR0dEWFhcbiAgTkFTREFRX0dHU1hYXG4gIE5BU0RBUV9HU0JYWFxuICBOR05cbiAgTklPXG4gIE5PS1xuICBOUFJcbiAgTlpEXG4gIE9NUlxuICBQQUJcbiAgUEVOXG4gIFBHS1xuICBQSFBcbiAgUEtSXG4gIFBMTlxuICBQWUdcbiAgUUFSXG4gIFJPTlxuICBSU0RcbiAgUlVCXG4gIFJXRlxuICBTQVJcbiAgU0JEXG4gIFNDUlxuICBTREdcbiAgU0VLXG4gIFNHRFxuICBTSFBcbiAgU0xMXG4gIFNPU1xuICBTUkRcbiAgU1NQXG4gIFNUTlxuICBTVkNcbiAgU1lQXG4gIFNaTFxuICBUSEJcbiAgVEpTXG4gIFRNVFxuICBUTkRcbiAgVE9QXG4gIFRSWVxuICBUVERcbiAgVFdEXG4gIFRaU1xuICBVQUhcbiAgVUdYXG4gIFVTRFxuICBVU05cbiAgVVlJXG4gIFVZVVxuICBVWVdcbiAgVVpTXG4gIFZFU1xuICBWTkRcbiAgVlVWXG4gIFdTVFxuICBYQUZcbiAgWEFHXG4gIFhBVVxuICBYQkFcbiAgWEJCXG4gIFhCQ1xuICBYQkRcbiAgWENEXG4gIFhEUlxuICBYT0ZcbiAgWFBEXG4gIFhQRlxuICBYUFRcbiAgWFNVXG4gIFhUU1xuICBYVUFcbiAgWFhYXG4gIFlFUlxuICBaQVJcbiAgWk1XXG4gIFpXTFxufVxuXG5cIlwiXCJcblRpbWUgYnVja2V0dGluZyBzdHJhdGVneVxuLSBTVEFSVDogQnVja2V0cyBzdGFydCBhdCB0aGUgc3RhcnRzQXQgdGltZXN0YW1wXG4tIEVORDogQnVja2V0cyBzdGFydCBhdCB0aGUgZW5kc0F0IHRpbWVzdGFtcFxuLSBDQUxFTkRBUjogQnVja2V0cyBhcmUgYWxpZ25lZCB3aXRoIHRoZSBjYWxlbmRhciB1bml0cyAoZS5nLiBXRUVLUykgYnV0IGNhbiBpbmNsdWRlXG5wYXJ0aWFsIGJ1Y2tldHMgYmFzZWQgb24gdGhlIHN0YXJ0c0F0IGFuZCBlbmRzQXQgdGltZWJ1Y2tldHNcblwiXCJcIlxuZW51bSBJbnNpZ2h0c1RpbWVCdWNrZXRTdHJhdGVneSB7XG4gIENBTEVOREFSXG4gIEVORFxuICBTVEFSVFxufVxuXG5cIkdlbmVyaWMgdGltZSB1bml0XCJcbmVudW0gSW5zaWdodHNUaW1lVW5pdCB7XG4gIERBWVxuICBNT05USFxuICBRVUFSVEVSXG4gIFdFRUtcbiAgWUVBUlxufVxuXG5cIk1lcmNoYW50IGNhdGVnb3J5IGNvbnRyb2wgdHlwZS5cIlxuZW51bSBNZXJjaGFudENhdGVnb3J5Q29udHJvbFR5cGUge1xuICBBTExPV1xuICBCTE9DS1xufVxuXG5lbnVtIE9yZGVyQnlEaXJlY3Rpb24ge1xuICBBU0NFTkRJTkdcbiAgREVTQ0VORElOR1xufVxuXG5cIlRoZSB0eXBlIG9mIHRoZSByZXF1ZXN0IGFjdGlvbi5cIlxuZW51bSBSZXF1ZXN0QWN0aW9uVHlwZSB7XG4gIFwiQSBtZW1vIGlzIHJlcXVlc3RlZC5cIlxuICBNRU1PXG4gIFwiQSByZWNlaXB0IGlzIHJlcXVlc3RlZC5cIlxuICBSRUNFSVBUXG4gIFwiQSBtYW5hZ2VyIChvciBvdGhlcikgcmV2aWV3IGlzIHJlcXVlc3RlZC5cIlxuICBSRVZJRVdcbn1cblxuXCJUaGUgdHlwZSBvZiB0aGUgUmVxdWVzdC5cIlxuZW51bSBSZXF1ZXN0VHlwZSB7XG4gIFwiVGhpcyBpcyBhIGJ1ZGdldCByZXF1ZXN0LlwiXG4gIEJVREdFVFxuICBcIlRoaXMgaXMgYW4gZXhwZW5zZSByZXF1ZXN0LlwiXG4gIEVYUEVOU0Vcbn1cblxuXCJBdmFpbGFibGUgZmllbGRzIHRvIG9yZGVyIGJ1ZGdldCBlbXBsb3llZXMgYnlcIlxuZW51bSBTb3J0YWJsZUJ1ZGdldEVtcGxveWVlRmllbGQge1xuICBBTU9VTlRfU1BFTlRcbiAgTkFNRVxufVxuXG5cIkF2YWlsYWJsZSBmaWVsZHMgdG8gb3JkZXIgdGhlIEJ1ZGdldCBjb25uZWN0aW9uIGJ5LlwiXG5lbnVtIFNvcnRhYmxlQnVkZ2V0RmllbGQge1xuICBBTU9VTlRfU1BFTlRcbiAgQ1JFQVRFRF9BVFxuICBFTkRfVElNRVxuICBMSU1JVFxuICBOQU1FXG4gIFNUQVJUX1RJTUVcbn1cblxuXCJJU096IGRhdGVcIlxuc2NhbGFyIERhdGVcblxuXCJKc29uIG9iamVjdFwiXG5zY2FsYXIgSnNvblxuXG5cIjY0Qml0IGludGVnZXJcIlxuc2NhbGFyIExvbmdcblxuXCJJU096IHRpbWVcIlxuc2NhbGFyIFRpbWVcblxuc2NhbGFyIF9Bbnlcblxuc2NhbGFyIF9GaWVsZFNldFxuXG5cIklucHV0IHR5cGUgZm9yIGFzc2lnbmluZyBidWRnZXRzIHRvIGNhcmRzLlwiXG5pbnB1dCBBc3NpZ25CdWRnZXRUb0NhcmRJbnB1dCB7XG4gIGJ1ZGdldElkOiBJRCFcbiAgYnVkZ2V0TWFwcGluZ0V4cGlyYXRpb246IEJ1ZGdldE1hcHBpbmdFeHBpcmF0aW9uXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZyFcbiAgZWZmZWN0aXZlUmFuZ2U6IEVmZmVjdGl2ZVJhbmdlSW5wdXRcbiAgbmV0d29ya0NhcmRJZDogSUQhXG4gIHR5cGU6IEJ1ZGdldE1hcHBpbmdUeXBlIEBkZXByZWNhdGVkKHJlYXNvbiA6IFwiVXNlIGJ1ZGdldE1hcHBpbmdFeHBpcmF0aW9uXCIpXG59XG5cbmlucHV0IEJ1ZGdldEVtcGxveWVlRmlsdGVyIHtcbiAgXCJmaWx0ZXIgZm9yIHVzZXJzIGJ5IHRleHRcIlxuICB0ZXh0OiBTdHJpbmchXG59XG5cbmlucHV0IEJ1ZGdldEVtcGxveWVlT3JkZXIge1xuICBcIkRpcmVjdGlvblwiXG4gIGRpcmVjdGlvbjogT3JkZXJCeURpcmVjdGlvbiFcbiAgXCJXaGljaCBmaWVsZCBpcyBiZWluZyBzb3J0ZWQgb25cIlxuICBmaWVsZDogU29ydGFibGVCdWRnZXRFbXBsb3llZUZpZWxkIVxufVxuXG5pbnB1dCBCdWRnZXRGaWx0ZXJJbnB1dCB7XG4gIFwiRmlsdGVyIG91dCBidWRnZXRzIHdpdGggYW4gZW5kIGRhdGUgbGF0ZXIgdGhhbiB0aGlzIHZhbHVlLlwiXG4gIGVuZERhdGVCZWZvcmU6IERhdGVcbiAgXCJXaGV0aGVyIG9yIG5vdCB0aGUgYnVkZ2V0IGhhcyBuZXN0ZWQgYnVkZ2V0c1wiXG4gIGhhc1N1YkJ1ZGdldHM6IEJvb2xlYW5cbiAgXCJNYXRjaCBJTiBzcGVjaWZpYyBtZW1iZXJzXCJcbiAgbWVtYmVyczogQnVkZ2V0UGVyc29ubmVsSW5wdXRcbiAgXCJXaGV0aGVyIG9yIG5vdCB0aGUgYnVkZ2V0IGhhcyBhIHZpcnR1YWwgY2FyZFwiXG4gIG9ubHlQcm92aXNpb25lZENhcmRTcGVuZDogQm9vbGVhblxuICBcIk1hdGNoIElOIHNwZWNpZmljIG93bmVyc1wiXG4gIG93bmVyczogQnVkZ2V0UGVyc29ubmVsSW5wdXRcbiAgXCJMaXN0IGFsbCBidWRnZXRzIGJlbG9uZ2luZyB0byBhIHBhcmVudCBidWRnZXRcIlxuICBwYXJlbnRCdWRnZXRJZDogSURcbiAgXCJTZWFyY2ggYnVkZ2V0cyBieSBuYW1lXCJcbiAgc2VhcmNoOiBTdHJpbmdcbiAgXCJGaWx0ZXIgb3V0IGJ1ZGdldHMgd2l0aCBhIHN0YXJ0IGRhdGUgZWFybGllciB0aGFuIHRoaXMgdmFsdWUuXCJcbiAgc3RhcnREYXRlQWZ0ZXI6IERhdGVcbiAgXCJGaWx0ZXIgb3V0IGJ1ZGdldHMgd2l0aCBhIHN0YXJ0IGRhdGUgbGF0ZXIgdGhhbiB0aGlzIHZhbHVlLlwiXG4gIHN0YXJ0RGF0ZUJlZm9yZTogRGF0ZVxuICBcIkJ1ZGdldCBTdGF0dXMgSU4gc3RhdHVzZXNcIlxuICBzdGF0dXNlczogW0J1ZGdldFN0YXR1cyFdXG59XG5cblwiSW5wdXQgdHlwZSBmb3Igc2VhcmNoaW5nIGZvciBtZXJjaGFudHMgYW5kIGNhdGVnb3JpZXMuXCJcbmlucHV0IEJ1ZGdldE1lcmNoYW50c0FuZENhdGVnb3JpZXNTdWdnZXN0aW9uc0lucHV0IHtcbiAgXCJVc2VyJ3MgaW5wdXQgb2YgbWVyY2hhbnQgY2F0ZWdvcnkgY29udHJvbCB0eXBlLlwiXG4gIGNvbnRyb2xUeXBlOiBNZXJjaGFudENhdGVnb3J5Q29udHJvbFR5cGUhXG4gIFwiVXNlcidzIGlucHV0IG9mIHNlYXJjaCB0ZXh0LlwiXG4gIHNlYXJjaFRleHQ6IFN0cmluZyFcbn1cblxuaW5wdXQgQnVkZ2V0T3JkZXJJbnB1dCB7XG4gIGRpcmVjdGlvbjogT3JkZXJCeURpcmVjdGlvbiFcbiAgZmllbGQ6IFNvcnRhYmxlQnVkZ2V0RmllbGQhXG59XG5cblwiSW5wdXQgdHlwZSBmb3Igc3BlY2lmeWluZyBidWRnZXQgcGVyc29ubmVsIChsaXN0IG9mIHVzZXJzIG9yIGdyb3Vwcywgb3IgYm90aClcIlxuaW5wdXQgQnVkZ2V0UGVyc29ubmVsSW5wdXQge1xuICB1c2VySWRzOiBbSURdXG59XG5cbmlucHV0IENhcmRGaWx0ZXJJbnB1dCB7XG4gIFwiXCJcIlxuICBFeHBlY3RzIGFuIGFycmF5IG9mIENhcmRCdWRnZXRPd25lcnNoaXBUeXBlcywgd2hpY2ggd2lsbCBiZSB1c2VkIHRvIGZpbHRlciBjYXJkcy4gQ2Fubm90IGJlIGVtcHR5LlxuICBUbyBnZXQgYWxsIGNhcmRzIHNpbXBseSBwYXNzIFtDYXJkQnVkZ2V0T3duZXJzaGlwVHlwZS5VU0VSLCBDYXJkQnVkZ2V0T3duZXJzaGlwVHlwZS5CVURHRVRdXG4gIFwiXCJcIlxuICBjYXJkQnVkZ2V0T3duZXJzaGlwVHlwZXM6IFtDYXJkQnVkZ2V0T3duZXJzaGlwVHlwZSFdIVxufVxuXG5cIklucHV0IHR5cGUgZm9yIHZhbGlkYXRpbmcgbWVyY2hhbnRzIGFuZC9vciBjYXRlZ29yaWVzIHdpdGggYW5jZXN0b3IgYnVkZ2V0cy5cIlxuaW5wdXQgQ29uZmxpY3RpbmdBbmNlc3RvckJ1ZGdldE1lcmNoYW50Q2F0ZWdvcnlDb250cm9scyB7XG4gIFwiTWVyY2hhbnQgY2F0ZWdvcnkgY29udHJvbCB0eXBlIChCTE9DSyBvciBBTExPVykuXCJcbiAgY29udHJvbFR5cGU6IE1lcmNoYW50Q2F0ZWdvcnlDb250cm9sVHlwZSFcbiAgXCJNZXJjaGFudCBjYXRlZ29yeSBsaXN0LlwiXG4gIG1lcmNoYW50Q2F0ZWdvcmllczogW01lcmNoYW50Q2F0ZWdvcnlJbnB1dCFdXG4gIFwiTWVyY2hhbnQgbGlzdC5cIlxuICBtZXJjaGFudHM6IFtNZXJjaGFudElucHV0IV1cbiAgXCJQYXJlbnQgYnVkZ2V0IGlkLlwiXG4gIHBhcmVudEJ1ZGdldElkOiBJRCFcbn1cblxuXCJJbnB1dCB0eXBlIGZvciB2YWxpZGF0aW5nIG1lcmNoYW50cyBhbmQvb3IgY2F0ZWdvcmllcyB3aXRoIGFuY2VzdG9yIGFuZCBkZXNjZW5kYW50IGJ1ZGdldHMuXCJcbmlucHV0IENvbmZsaWN0aW5nQnVkZ2V0TWVyY2hhbnRDYXRlZ29yeUNvbnRyb2xzIHtcbiAgXCJCdWRnZXQgaWQuXCJcbiAgYnVkZ2V0SWQ6IElEIVxuICBcIk1lcmNoYW50IGNhdGVnb3J5IGNvbnRyb2wgdHlwZSAoQkxPQ0sgb3IgQUxMT1cpLlwiXG4gIGNvbnRyb2xUeXBlOiBNZXJjaGFudENhdGVnb3J5Q29udHJvbFR5cGUhXG4gIFwiTWVyY2hhbnQgY2F0ZWdvcnkgbGlzdC5cIlxuICBtZXJjaGFudENhdGVnb3JpZXM6IFtNZXJjaGFudENhdGVnb3J5SW5wdXQhXVxuICBcIk1lcmNoYW50IGxpc3QuXCJcbiAgbWVyY2hhbnRzOiBbTWVyY2hhbnRJbnB1dCFdXG59XG5cbmlucHV0IENyZWF0ZUJ1ZGdldEZpZWxkcyB7XG4gIFwiRGVzY3JpcHRpb24gb2Ygd2hhdCB0aGUgYnVkZ2V0IGlzIHVzZWQgZm9yXCJcbiAgZGVzY3JpcHRpb246IFN0cmluZ1xuICBcIlRoZSBlbmQgZGF0ZSBvZiB0aGUgYnVkZ2V0LCBpbmNsdXNpdmUuXCJcbiAgZW5kRGF0ZTogRGF0ZVxuICBcIlRydWUgaWYgdGhlIGJ1ZGdldCBsaW1pdCBpcyBoYXJkIGVuZm9yY2VkXCJcbiAgZW5mb3JjZUxpbWl0OiBCb29sZWFuIVxuICBcIkxpbWl0IG9uIHRoZSBidWRnZXRcIlxuICBsaW1pdDogRmluYW5jaWFsQXNzZXRJbnB1dCFcbiAgXCJUaGUgZW1wbG95ZWVzIHdobyBhcmUgY29uc2lkZXJlZCBtZW1iZXJzIG9mIHRoaXMgYnVkZ2V0XCJcbiAgbWVtYmVyczogW0lEIV0hXG4gIFwiTWVyY2hhbnQgY2F0ZWdvcnkgY29udHJvbHNcIlxuICBtZXJjaGFudENhdGVnb3J5Q29udHJvbHM6IFtNZXJjaGFudENhdGVnb3J5Q29uZmlnSW5wdXQhXVxuICBcIk5hbWUgb2YgdGhlIGJ1ZGdldFwiXG4gIG5hbWU6IFN0cmluZyFcbiAgXCJUcnVlIGlmIG9ubHkgcHJvdmlzaW9uZWQgY2FyZHMgY2FuIHNwZW5kIGZyb20gdGhpcyBidWRnZXRcIlxuICBvbmx5UHJvdmlzaW9uZWRDYXJkU3BlbmQ6IEJvb2xlYW4hXG4gIFwiVGhlIGVtcGxveWVlcyB3aG8gYXJlIGNvbnNpZGVyZWQgb3duZXJzIG9mIHRoaXMgYnVkZ2V0XCJcbiAgb3duZXJzOiBbSUQhXSFcbiAgXCJUaGUgcGFyZW50IG9mIHRoaXMgYnVkZ2V0LCBpZiBhbnlcIlxuICBwYXJlbnQ6IElEIVxuICBcIlRoZSByZWN1cnJpbmcgcGVyaW9kIHR5cGUgb2YgdGhlIGJ1ZGdldC5cIlxuICBwZXJpb2RUeXBlOiBCdWRnZXRQZXJpb2RUeXBlIVxuICBcIlRoZSBwb2xpY3kgdGhhdCBtYW5hZ2VzIGV4cGVuc2VzIGZvciB0aGlzIGJ1ZGdldFwiXG4gIHBvbGljeUlkOiBJRFxuICBcIlRoZSBzdGFydCBkYXRlIG9mIHRoZSBidWRnZXQsIGluY2x1c2l2ZS5cIlxuICBzdGFydERhdGU6IERhdGUhXG59XG5cbmlucHV0IENyZWF0ZUJ1ZGdldElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBmaWVsZHM6IENyZWF0ZUJ1ZGdldEZpZWxkcyFcbn1cblxuXCJGaWVsZHMgbmVlZGVkIHRvIGNyZWF0ZSBhIHJlcXVlc3QgZm9yIGEgYnVkZ2V0LlwiXG5pbnB1dCBDcmVhdGVCdWRnZXRSZXF1ZXN0RmllbGRzIHtcbiAgZGVzY3JpcHRpb246IFN0cmluZyFcbiAgZW5kRGF0ZTogRGF0ZVxuICBsaW1pdDogRmluYW5jaWFsQXNzZXRJbnB1dCFcbiAgbWVtYmVyczogW0lEIV0hXG4gIG5hbWU6IFN0cmluZyFcbiAgb3duZXJzOiBbSUQhXSFcbiAgcGVyaW9kVHlwZTogQnVkZ2V0UGVyaW9kVHlwZSFcbiAgc3RhcnREYXRlOiBEYXRlIVxufVxuXG5cIklucHV0IHRvIGNyZWF0ZSBhIHJlcXVlc3QgZm9yIGEgYnVkZ2V0LlwiXG5pbnB1dCBDcmVhdGVCdWRnZXRSZXF1ZXN0SW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmchXG4gIGZpZWxkczogQ3JlYXRlQnVkZ2V0UmVxdWVzdEZpZWxkcyFcbn1cblxuXCJJbnB1dCBmb3IgZWZmZWN0aXZlIHJhbmdlLlwiXG5pbnB1dCBFZmZlY3RpdmVSYW5nZUlucHV0IHtcbiAgZW5kVGltZTogVGltZVxuICBzdGFydFRpbWU6IFRpbWVcbn1cblxuXCJcIlwiXG4gRnJvbSBBUEl2MVxuIGh0dHBzOi8vZ2l0aHViLmNvbS9icmV4aHEvY3JlZGl0X2NhcmQvYmxvYi9tYWluL2FwcHMvYXBpL2xpYi9hcGkvd2ViL3NjaGVtYS9maW5hbmNpYWxfYXNzZXQuZXgjTDEzXG5cIlwiXCJcbmlucHV0IEZpbmFuY2lhbEFzc2V0SW5wdXQge1xuICBcIlRoZSBpbnN0cnVtZW50IGNvZGUgKHVzZCwgZXRjLikuIEN1cnJlbnRseSwgb25seSB1c2QgaXMgc3VwcG9ydGVkLlwiXG4gIGluc3RydW1lbnRDb2RlOiBGaW5hbmNpYWxJbnN0cnVtZW50Q29kZSA9IFVTRFxuICBcIlRoZSBhbW91bnQgaW4gY2VudHNcIlxuICBxdWFudGl0eUNlbnRzOiBJbnRcbn1cblxuaW5wdXQgRmluYW5jaWFsQXNzZXRSYW5nZUlucHV0IHtcbiAgXCJFeGNsdXNpdmUsIG9ubHkgY29uc2lkZXJzIGdpdmVuIGN1cnJlbmN5LCByZXF1aXJlZCB0byBoYXZlIHNhbWUgY3VycmVuY3kgd2hlbiBtaW5BbW91bnQgaXMgcHJvdmlkZWQuXCJcbiAgbWF4QW1vdW50OiBGaW5hbmNpYWxBc3NldElucHV0XG4gIFwiSW5jbHVzaXZlLCBvbmx5IGNvbnNpZGVycyBnaXZlbiBjdXJyZW5jeSwgcmVxdWlyZWQgdG8gaGF2ZSBzYW1lIGN1cnJlbmN5IHdoZW4gbWF4QW1vdW50IGlzIHByb3ZpZGVkLlwiXG4gIG1pbkFtb3VudDogRmluYW5jaWFsQXNzZXRJbnB1dFxufVxuXG5cIklucHV0IGZvciBtZXJjaGFudCBjYXRlZ29yeSBjb25maWcuXCJcbmlucHV0IE1lcmNoYW50Q2F0ZWdvcnlDb25maWdJbnB1dCB7XG4gIGNvbnRyb2xSZWZlcmVuY2U6IE1lcmNoYW50Q29udHJvbFJlZmVyZW5jZUlucHV0IVxuICBjb250cm9sVHlwZTogTWVyY2hhbnRDYXRlZ29yeUNvbnRyb2xUeXBlIVxufVxuXG5cIklucHV0IGZvciB2YWxpZGF0aW5nIGEgc2luZ2xlIG1lcmNoYW50IG9yIG1lcmNoYW50IGNhdGVnb3J5LlwiXG5pbnB1dCBNZXJjaGFudENhdGVnb3J5SW5wdXQge1xuICBcIk1lcmNoYW50IGNhdGVnb3J5IGlkLlwiXG4gIGlkOiBTdHJpbmchXG4gIFwiTWVyY2hhbnQgY2F0ZWdvcnkgbmFtZS5cIlxuICBuYW1lOiBTdHJpbmchXG59XG5cblwiTWVyY2hhbnQgY29udHJvbCByZWZlcmVuY2UgaW5wdXQuXCJcbmlucHV0IE1lcmNoYW50Q29udHJvbFJlZmVyZW5jZUlucHV0IHtcbiAgbWVyY2hhbnRDYXRlZ29yeUlkOiBTdHJpbmdcbiAgbWVyY2hhbnROYW1lOiBTdHJpbmdcbn1cblxuXCJJbnB1dCBmb3IgdmFsaWRhdGluZyBhIHNpbmdsZSBtZXJjaGFudCBvciBtZXJjaGFudCBjYXRlZ29yeS5cIlxuaW5wdXQgTWVyY2hhbnRJbnB1dCB7XG4gIFwiTWVyY2hhbnQgY2F0ZWdvcnkuXCJcbiAgY2F0ZWdvcnk6IE1lcmNoYW50Q2F0ZWdvcnlJbnB1dCFcbiAgXCJNZXJjaGFudCBpZC5cIlxuICBpZDogU3RyaW5nXG4gIFwiTWVyY2hhbnQgbmFtZS5cIlxuICBuYW1lOiBTdHJpbmchXG59XG5cblwiXCJcIlxuUGFnaW5hdGlvbiBwYXJhbWV0ZXJzIGZvciBlbnVtZXJhdGluZyBpdGVtcyBpbiBhIGNvbm5lY3Rpb24uXG5Pbmx5IHtmaXJzdCwgYWZ0ZXJ9IE9SIHtsYXN0LCBiZWZvcmV9IHBhaXJzIGNhbiBiZSBzZXQuXG5lLmcuIElmIHtmaXJzdCwgYmVmb3JlfSBpcyBzZXQsIHRoYXQgd2lsbCBjYXVzZSBhIHZhbGlkYXRpb24gZXJyb3IuXG5UaGUgY3Vyc29ycyBhcmUgb3B0aW9uYWwuIFdpdGhvdXQgYSBzcGVjaWZpZWQgY3Vyc29yLCBpdCBpcyBhc3N1bWVkIHRvIHN0YXJ0IGF0XG50aGUgZmlyc3QgaXRlbSAoZm9yIGBmaXJzdGApIG9yIGxhc3QgaXRlbSAoZm9yIGBsYXN0YCkgb2YgdGhlIGNvbGxlY3Rpb24uXG5cIlwiXCJcbmlucHV0IFBhZ2luYXRpb25JbnB1dCB7XG4gIFwiVGhlIGN1cnNvciB0byBzdGFydCB0aGUgcGFnZSBhdCAoZXhjbHVzaXZlKS5cIlxuICBhZnRlcjogU3RyaW5nXG4gIFwiVGhlIGN1cnNvciB0byBlbmQgdGhlIHBhZ2UgYXQgKGV4Y2x1c2l2ZSkuXCJcbiAgYmVmb3JlOiBTdHJpbmdcbiAgXCJUaGUgbnVtYmVyIG9mIGl0ZW1zIHRvIHJldHVybiBpbiBhIHBhZ2UgYWZ0ZXIgdGhlIGBhZnRlcmAgY3Vyc29yLlwiXG4gIGZpcnN0OiBJbnRcbiAgXCJUaGUgbnVtYmVyIG9mIGl0ZW1zIHRvIHJldHVybiBpbiBhIHBhZ2UgcHJpb3IgdG8gdGhlIGBiZWZvcmVgIGN1cnNvci5cIlxuICBsYXN0OiBJbnRcbn1cblxuaW5wdXQgVGltZUludGVydmFsSW5wdXQge1xuICBcIkV4Y2x1c2l2ZSBlbmQgYXQuXCJcbiAgZW5kQXQ6IFRpbWVcbiAgXCJJbmNsdXNpdmUgc3RhcnQgYXQuXCJcbiAgc3RhcnRBdDogVGltZVxufVxuXG5pbnB1dCBVcGRhdGVCdWRnZXRGaWVsZHMge1xuICBcIkRlc2NyaXB0aW9uIG9mIHdoYXQgdGhlIGJ1ZGdldCBpcyB1c2VkIGZvclwiXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgXCJUaGUgZW5kIGRhdGUgb2YgdGhlIGJ1ZGdldCwgaW5jbHVzaXZlLlwiXG4gIGVuZERhdGU6IERhdGVcbiAgXCJUcnVlIGlmIHRoZSBidWRnZXQgbGltaXQgaXMgaGFyZCBlbmZvcmNlZFwiXG4gIGVuZm9yY2VMaW1pdDogQm9vbGVhblxuICBcIkxpbWl0IG9uIHRoZSBidWRnZXRcIlxuICBsaW1pdDogRmluYW5jaWFsQXNzZXRJbnB1dFxuICBcIlRoZSBlbXBsb3llZXMgd2hvIGFyZSBjb25zaWRlcmVkIG1lbWJlcnMgb2YgdGhpcyBidWRnZXRcIlxuICBtZW1iZXJzOiBbSURdXG4gIFwiTWVyY2hhbnQgY2F0ZWdvcnkgY29udHJvbHNcIlxuICBtZXJjaGFudENhdGVnb3J5Q29udHJvbHM6IFtNZXJjaGFudENhdGVnb3J5Q29uZmlnSW5wdXRdXG4gIFwiTmFtZSBvZiB0aGUgYnVkZ2V0XCJcbiAgbmFtZTogU3RyaW5nXG4gIFwiVHJ1ZSBpZiBvbmx5IHByb3Zpc2lvbmVkIGNhcmRzIGNhbiBzcGVuZCBmcm9tIHRoaXMgYnVkZ2V0XCJcbiAgb25seVByb3Zpc2lvbmVkQ2FyZFNwZW5kOiBCb29sZWFuXG4gIFwiVGhlIGVtcGxveWVlcyB3aG8gYXJlIGNvbnNpZGVyZWQgb3duZXJzIG9mIHRoaXMgYnVkZ2V0XCJcbiAgb3duZXJzOiBbSURdXG4gIFwiVGhlIHJlY3VycmluZyBwZXJpb2QgdHlwZSBvZiB0aGUgYnVkZ2V0LlwiXG4gIHBlcmlvZFR5cGU6IEJ1ZGdldFBlcmlvZFR5cGVcbiAgXCJUaGUgcG9saWN5IHRoYXQgbWFuYWdlcyBleHBlbnNlcyBmb3IgdGhpcyBidWRnZXRcIlxuICBwb2xpY3lJZDogSURcbiAgXCJUaGUgc3RhcnQgZGF0ZSBvZiB0aGUgYnVkZ2V0LCBpbmNsdXNpdmUuXCJcbiAgc3RhcnREYXRlOiBEYXRlXG4gIFwiQnVkZ2V0IFN0YXR1c1wiXG4gIHN0YXR1czogQnVkZ2V0U3RhdHVzXG59XG5cbmlucHV0IFVwZGF0ZUJ1ZGdldElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nIVxuICBmaWVsZHM6IFVwZGF0ZUJ1ZGdldEZpZWxkcyFcbiAgaWQ6IElEIVxufVxuIiwKICAic2VydmljZSIgOiAiZXdvZ0lDSnVZVzFsSWlBNklDSmlkV1JuWlhSekxXUm5jeUlzQ2lBZ0luVnliQ0lnT2lBaWFIUjBjRG92TDJKMVpHZGxkSE10Wkdkek9qZ3dPREF2ZGpFdlozSmhjR2h4YkNJc0NpQWdJbWx6WDJGamRHbDJaU0lnT2lCMGNuVmxMQW9nSUNKMWNHUmhkR1ZrWDJGMFgzTmxZMjl1WkhNaUlEb2dNVElzQ2lBZ0ltbHVjMlZ5ZEdWa1gyRjBYM05sWTI5dVpITWlJRG9nTVRJS2ZRPT0iLAogICJpbnNlcnRlZF9hdF9zZWNvbmRzIiA6IDEzCn0sIHsKICAiaWQiIDogInNtX2NsMTA5eG5oMDAwMTQwZTYwOTlxdnl4YmoiLAogICJ2ZXJzaW9uIiA6ICIzNDhjZTM5ZjJmZjA3ODNjMWI0MWEwMTk3NDNlN2U3ZTcwNTUyYzk3NTZkMzMwNjNiZGFjYTdjMGYxNTk4MTU1IiwKICAidHlwZV9kZWZzIiA6ICJcIkRpcmVjdHMgdGhlIGV4ZWN1dG9yIHRvIGluY2x1ZGUgdGhpcyBmaWVsZCBvciBmcmFnbWVudCBvbmx5IHdoZW4gdGhlIGBpZmAgYXJndW1lbnQgaXMgdHJ1ZVwiXG5kaXJlY3RpdmUgQGluY2x1ZGUoXG4gICAgXCJJbmNsdWRlZCB3aGVuIHRydWUuXCJcbiAgICBpZjogQm9vbGVhbiFcbiAgKSBvbiBGSUVMRCB8IEZSQUdNRU5UX1NQUkVBRCB8IElOTElORV9GUkFHTUVOVFxuXG5cIkRpcmVjdHMgdGhlIGV4ZWN1dG9yIHRvIHNraXAgdGhpcyBmaWVsZCBvciBmcmFnbWVudCB3aGVuIHRoZSBgaWZgJ2FyZ3VtZW50IGlzIHRydWUuXCJcbmRpcmVjdGl2ZSBAc2tpcChcbiAgICBcIlNraXBwZWQgd2hlbiB0cnVlLlwiXG4gICAgaWY6IEJvb2xlYW4hXG4gICkgb24gRklFTEQgfCBGUkFHTUVOVF9TUFJFQUQgfCBJTkxJTkVfRlJBR01FTlRcblxuZGlyZWN0aXZlIEBleHRlbmRzIG9uIE9CSkVDVCB8IElOVEVSRkFDRVxuXG5kaXJlY3RpdmUgQGV4dGVybmFsIG9uIEZJRUxEX0RFRklOSVRJT05cblxuZGlyZWN0aXZlIEBrZXkoZmllbGRzOiBfRmllbGRTZXQhKSByZXBlYXRhYmxlIG9uIE9CSkVDVCB8IElOVEVSRkFDRVxuXG5kaXJlY3RpdmUgQHByb3ZpZGVzKGZpZWxkczogX0ZpZWxkU2V0ISkgb24gRklFTERfREVGSU5JVElPTlxuXG5kaXJlY3RpdmUgQHJlcXVpcmVzKGZpZWxkczogX0ZpZWxkU2V0ISkgb24gRklFTERfREVGSU5JVElPTlxuXG5cIk1hcmtzIHRoZSBmaWVsZCwgYXJndW1lbnQsIGlucHV0IGZpZWxkIG9yIGVudW0gdmFsdWUgYXMgZGVwcmVjYXRlZFwiXG5kaXJlY3RpdmUgQGRlcHJlY2F0ZWQoXG4gICAgXCJUaGUgcmVhc29uIGZvciB0aGUgZGVwcmVjYXRpb25cIlxuICAgIHJlYXNvbjogU3RyaW5nID0gXCJObyBsb25nZXIgc3VwcG9ydGVkXCJcbiAgKSBvbiBGSUVMRF9ERUZJTklUSU9OIHwgQVJHVU1FTlRfREVGSU5JVElPTiB8IEVOVU1fVkFMVUUgfCBJTlBVVF9GSUVMRF9ERUZJTklUSU9OXG5cblwiRXhwb3NlcyBhIFVSTCB0aGF0IHNwZWNpZmllcyB0aGUgYmVoYXZpb3VyIG9mIHRoaXMgc2NhbGFyLlwiXG5kaXJlY3RpdmUgQHNwZWNpZmllZEJ5KFxuICAgIFwiVGhlIFVSTCB0aGF0IHNwZWNpZmllcyB0aGUgYmVoYXZpb3VyIG9mIHRoaXMgc2NhbGFyLlwiXG4gICAgdXJsOiBTdHJpbmchXG4gICkgb24gU0NBTEFSXG5cblwiXCJcIlxuVGhlIGludGVyZmFjZSBmb3IgcGFnaW5hdGluZyB0aHJvdWdoIGNvbGxlY3Rpb25zIG9mIGVsZW1lbnRzLlxuRXZlcnkgY29sbGVjdGlvbiBvZiBlbnRpdGllcyBub3QgcmV0dXJuZWQgYnkgYSBtdXRhdGlvbiByZXN1bHQgc2hvdWxkXG5wYWdpbmF0ZSB0aHJvdWdoIGEgY29ubmVjdGlvbi4gVGhhdCBpcywgYHR5cGVzYCB3aXRoIGEgZmllbGQgdGhhdCBpc1xuYW4gYGFycmF5YCBzaG91bGQgYmUgZXhjZWVkaW5nbHkgcmFyZS5cbldlIHdhbnQgYWxsIGNvbGxlY3Rpb25zIG9mIHRoaW5ncyB0byBiZSBwYWdpbmF0ZWQuXG5cIlwiXCJcbmludGVyZmFjZSBDb25uZWN0aW9uIHtcbiAgXCJQYWdlIGluZm9ybWF0aW9uIGZvciBhZGRpdGlvbmFsIG5hdmlnYXRpb24gdGhyb3VnaCB0aGlzIGNvbm5lY3Rpb24uXCJcbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxuICBcIlwiXCJcbiAgVGhlIHRvdGFsIGNvdW50IG9mIGl0ZW1zIG1hdGNoaW5nIHRoZSBmaWx0ZXIgY3JpdGVyaWEgc3BlY2lmaWVkIGZvciB0aGlzIGNvbm5lY3Rpb24uXG4gIFRoaXMgdmFsdWUgbWF5IGJlIGFwcHJveGltYXRlLiBBbmQgdGhpcyB2YWx1ZSBtYXkgbm90IGJlIHByb3ZpZGVkIGF0IGFsbC4gTm90IGFsbCBjb25uZWN0aW9uc1xuICBjYW4gYmUgY291bnRlZCBlYXNpbHkuXG4gIFwiXCJcIlxuICB0b3RhbENvdW50OiBJbnRcbn1cblxuXCJBIHJlcXVlc3QgdG8gYWNjb21wbGlzaCBzb21lIHRhc2sgKGUuZy4gYXBwcm92ZSBhbiBleHBlbnNlLCBhcHByb3ZlIGEgYnVkZ2V0LCBldGMuLi4pXCJcbmludGVyZmFjZSBSZXF1ZXN0IHtcbiAgXCJcIlwiXG4gIEZldGNoIGFjdGlvbnMgb24gdGhlIFJlcXVlc3QuXG4gIENhbiBiZSBmaWx0ZXJlZCBlLmcuIHRvIHNlbGVjdCBvbmx5IHBlbmRpbmcgYWN0aW9uc1xuICBcIlwiXCJcbiAgYWN0aW9ucyhmaWx0ZXI6IFJlcXVlc3RBY3Rpb25GaWx0ZXJJbnB1dCwgb3JkZXI6IFJlcXVlc3RBY3Rpb25PcmRlcklucHV0LCBwYWdlOiBQYWdpbmF0aW9uSW5wdXQpOiBSZXF1ZXN0QWN0aW9uQ29ubmVjdGlvblxuICBcIldoZW4gdGhlIHJlcXVlc3Qgd2FzIGNyZWF0ZWQuXCJcbiAgY3JlYXRlZEF0OiBUaW1lIVxuICBcIlRoZSB1bmlxdWUgSUQgb2YgdGhlIHJlcXVlc3RcIlxuICBpZDogSUQhXG4gIFwiVGhlIHRpbWVzdGFtcCB3aGVuIGEgY29udHJvbGxlciBvdmVycmlkZGVuIHRoZSByZXF1ZXN0XCJcbiAgb3ZlcnJpZGRlbkF0OiBUaW1lXG4gIFwiVGhlIGVtcGxveWVlIHdobyBvdmVycmlkZGVuIHRoZSByZXF1ZXN0LlwiXG4gIG92ZXJyaWRkZW5CeTogRW1wbG95ZWVcbiAgXCJUaGUgdXNlciB3aG8gaW5pdGlhdGVkIHRoZSByZXF1ZXN0XCJcbiAgcmVxdWVzdGVkQnk6IFVzZXIgQGRlcHJlY2F0ZWQocmVhc29uIDogXCJJbmNvcnJlY3QgcGVybWlzc2lvbiBzY29waW5nLCB1c2UgcmVxdWVzdGVkQnlFbXBsb3llZSBpbnN0ZWFkXCIpXG4gIFwiVGhlIGVtcGxveWVlIHdobyBpbml0aWF0ZWQgdGhlIHJlcXVlc3RcIlxuICByZXF1ZXN0ZWRCeUVtcGxveWVlOiBFbXBsb3llZVxuICBcIlRoZSBzdGFnZSBvZiBhcHByb3ZhbCBvZiB0aGUgcmVxdWVzdCwgZS5nLiBjcmVhdGVkLCBhcHByb3ZlZCwgZGVuaWVkXCJcbiAgc3RhdHVzOiBSZXF1ZXN0U3RhdHVzXG4gIFwiXCJcIlxuICBUaGUgdHlwZSBvZiB0aGluZyBiZWluZyByZXF1ZXN0ZWQuXG4gIFxuICBUaGlzIGlzIGEgMToxIG1hcHBpbmcgdG8gX190eXBlbmFtZSwgYnV0IGl0IGV4aXN0cyBmb3IgY29udmVuaWVuY2UgYW5kIGNvbnNpc3RlbmN5LlxuICBcIlwiXCJcbiAgdHlwZTogUmVxdWVzdFR5cGVcbn1cblxuaW50ZXJmYWNlIFJlcXVlc3RBY3Rpb25Pd25lciB7XG4gIFwiQSBlbXBsb3llZSB3aG8gaXMgcmVxdWVzdGVkIHRvIHBlcmZvcm0gdGhpcyBhY3Rpb25cIlxuICBlbXBsb3llZTogRW1wbG95ZWVcbiAgXCJBIHVzZXIgd2hvIGlzIHJlcXVlc3RlZCB0byBwZXJmb3JtIHRoaXMgYWN0aW9uXCJcbiAgdXNlcjogVXNlciBAZGVwcmVjYXRlZChyZWFzb24gOiBcIkluY29ycmVjdCBwZXJtaXNzaW9uIHNjb3BpbmcsIHVzZSBlbXBsb3llZSBpbnN0ZWFkXCIpXG59XG5cbnVuaW9uIF9FbnRpdHkgPSBCdWRnZXQgfCBCdWRnZXRSZXF1ZXN0IHwgRW1wbG95ZWUgfCBFeHBlbnNlIHwgRXhwZW5zZVJlcXVlc3QgfCBSZXF1ZXN0QWN0aW9uIHwgVXNlclxuXG50eXBlIEJ1ZGdldCBAZXh0ZW5kcyBAa2V5KGZpZWxkcyA6IFwiaWRcIikge1xuICBpZDogSUQhIEBleHRlcm5hbFxufVxuXG5cIkEgYnVkZ2V0IHJlcXVlc3QuXCJcbnR5cGUgQnVkZ2V0UmVxdWVzdCBpbXBsZW1lbnRzIFJlcXVlc3QgQGtleShmaWVsZHMgOiBcImlkXCIpIHtcbiAgXCJBY3Rpb25zIGZvciB0aGUgYnVkZ2V0IHJlcXVlc3QuXCJcbiAgYWN0aW9ucyhmaWx0ZXI6IFJlcXVlc3RBY3Rpb25GaWx0ZXJJbnB1dCwgb3JkZXI6IFJlcXVlc3RBY3Rpb25PcmRlcklucHV0LCBwYWdlOiBQYWdpbmF0aW9uSW5wdXQpOiBSZXF1ZXN0QWN0aW9uQ29ubmVjdGlvblxuICBcIlwiXCJcbiAgVGhlIEJ1ZGdldCB3aGljaCB0aGlzIFJlcXVlc3Qgd2FzIGNyZWF0ZWQgdG8gZ2V0IGFwcHJvdmFsIGZvclxuICBUaGUgQnVkZ2V0J3Mgc3RhdHVzIHdpbGwgYmUgJ3BlbmRpbmdfYXBwcm92YWwnIHdoaWxlIHRoZSByZXF1ZXN0IGlzICdwZW5kaW5nJ1xuICBcIlwiXCJcbiAgYnVkZ2V0OiBCdWRnZXRcbiAgXCJXaGVuIHRoZSByZXF1ZXN0IHdhcyBjcmVhdGVkLlwiXG4gIGNyZWF0ZWRBdDogVGltZSFcbiAgXCJUaGUgdW5pcXVlIElEIG9mIHRoZSBidWRnZXQgcmVxdWVzdC5cIlxuICBpZDogSUQhXG4gIFwiVGhlIHRpbWVzdGFtcCB3aGVuIGEgY29udHJvbGxlciBvdmVycmlkZGVuIHRoZSByZXF1ZXN0LlwiXG4gIG92ZXJyaWRkZW5BdDogVGltZVxuICBcIlRoZSBlbXBsb3llZSB3aG8gb3ZlcnJpZGRlbiB0aGUgcmVxdWVzdC5cIlxuICBvdmVycmlkZGVuQnk6IEVtcGxveWVlXG4gIFwiVGhlIHVzZXIgd2hvIHJlcXVlc3RlZCB0aGUgYnVkZ2V0LlwiXG4gIHJlcXVlc3RlZEJ5OiBVc2VyIEBkZXByZWNhdGVkKHJlYXNvbiA6IFwiSW5jb3JyZWN0IHBlcm1pc3Npb24gc2NvcGluZywgdXNlIHJlcXVlc3RlZEJ5RW1wbG95ZWUgaW5zdGVhZFwiKVxuICBcIlRoZSBlbXBsb3llZSB3aG8gaW5pdGlhdGVkIHRoZSByZXF1ZXN0LlwiXG4gIHJlcXVlc3RlZEJ5RW1wbG95ZWU6IEVtcGxveWVlXG4gIFwiVGhlIHN0YWdlIG9mIGFwcHJvdmFsIG9mIHRoZSByZXF1ZXN0LCBlLmcuIGNyZWF0ZWQsIGFwcHJvdmVkLCBkZW5pZWRcIlxuICBzdGF0dXM6IFJlcXVlc3RTdGF0dXNcbiAgXCJXaWxsIGFsd2F5cyBtYXAgdG8gQlVER0VUIGZvciBhIEJ1ZGdldFJlcXVlc3QuXCJcbiAgdHlwZTogUmVxdWVzdFR5cGVcbn1cblxudHlwZSBFbXBsb3llZSBAZXh0ZW5kcyBAa2V5KGZpZWxkcyA6IFwiY3VzdG9tZXJVc2VySWRcIikge1xuICBjdXN0b21lclVzZXJJZDogSUQgQGV4dGVybmFsXG59XG5cblwiXCJcIlxuIFRPRE86IHRoaXMgd2lsbCBiZSBkb25lIGFmdGVyIGhpZXJhY2hpZXMgYXJlIGltcGxlbWVudGVkXG5leHRlbmQgdHlwZSBUaXRsZSBAa2V5KGZpZWxkczogXCJpZFwiKSB7XG4gICBpZDogSUQhIEBleHRlcm5hbFxufVxuXCJcIlwiXG50eXBlIEV4cGVuc2UgQGV4dGVuZHMgQGtleShmaWVsZHMgOiBcImlkXCIpIHtcbiAgaWQ6IElEISBAZXh0ZXJuYWxcbiAgXCJBIGhpc3Rvcnkgb2YgdGhlIHJlcXVlc3RzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXhwZW5zZS5cIlxuICByZXF1ZXN0SGlzdG9yeTogRXhwZW5zZVJlcXVlc3RDb25uZWN0aW9uXG59XG5cblwiQW4gZXhwZW5zZSByZXF1ZXN0LlwiXG50eXBlIEV4cGVuc2VSZXF1ZXN0IGltcGxlbWVudHMgUmVxdWVzdCBAa2V5KGZpZWxkcyA6IFwiaWRcIikge1xuICBcIkFjdGlvbnMgZm9yIHRoZSBleHBlbnNlIHJlcXVlc3QuXCJcbiAgYWN0aW9ucyhmaWx0ZXI6IFJlcXVlc3RBY3Rpb25GaWx0ZXJJbnB1dCwgb3JkZXI6IFJlcXVlc3RBY3Rpb25PcmRlcklucHV0LCBwYWdlOiBQYWdpbmF0aW9uSW5wdXQpOiBSZXF1ZXN0QWN0aW9uQ29ubmVjdGlvblxuICBcIldoZW4gdGhlIHJlcXVlc3Qgd2FzIGNyZWF0ZWQuXCJcbiAgY3JlYXRlZEF0OiBUaW1lIVxuICBcIlwiXCJcbiAgVGhlIEV4cGVuc2Ugd2hpY2ggdGhpcyBSZXF1ZXN0IHdhcyBjcmVhdGVkIHRvIGdldCBhcHByb3ZhbCBmb3JcbiAgVGhlIEV4cGVuc2UncyBzdGF0dXMgd2lsbCBiZSAnc3VibWl0dGVkJyBvciAnb3V0X29mX3BvbGljeScgd2hpbGUgdGhlIHJlcXVlc3QgaXMgJ3BlbmRpbmcnXG4gIFwiXCJcIlxuICBleHBlbnNlOiBFeHBlbnNlXG4gIFwiVGhlIHVuaXF1ZSBJRCBvZiB0aGUgZXhwZW5zZSByZXF1ZXN0LlwiXG4gIGlkOiBJRCFcbiAgXCJUaGUgdGltZXN0YW1wIHdoZW4gYSBjb250cm9sbGVyIG92ZXJyaWRkZW4gdGhlIHJlcXVlc3RcIlxuICBvdmVycmlkZGVuQXQ6IFRpbWVcbiAgXCJUaGUgZW1wbG95ZWUgd2hvIG92ZXJyaWRkZW4gdGhlIHJlcXVlc3QuXCJcbiAgb3ZlcnJpZGRlbkJ5OiBFbXBsb3llZVxuICBcIlRoZSB1c2VyIHdobyBpbml0aWF0ZWQgdGhlIHJlcXVlc3QgLSBnZW5lcmFsbHkgdGhlIHVzZXIgd2hvIGNyZWF0ZWQgdGhlIGV4cGVuc2UuXCJcbiAgcmVxdWVzdGVkQnk6IFVzZXIgQGRlcHJlY2F0ZWQocmVhc29uIDogXCJJbmNvcnJlY3QgcGVybWlzc2lvbiBzY29waW5nLCB1c2UgcmVxdWVzdGVkQnlFbXBsb3llZSBpbnN0ZWFkXCIpXG4gIFwiVGhlIGVtcGxveWVlIHdobyBpbml0aWF0ZWQgdGhlIHJlcXVlc3RcIlxuICByZXF1ZXN0ZWRCeUVtcGxveWVlOiBFbXBsb3llZVxuICBcIlRoZSBzdGFnZSBvZiBhcHByb3ZhbCBvZiB0aGUgcmVxdWVzdCwgZS5nLiBjcmVhdGVkLCBhcHByb3ZlZCwgZGVuaWVkXCJcbiAgc3RhdHVzOiBSZXF1ZXN0U3RhdHVzXG4gIFwiV2lsbCBhbHdheXMgbWFwIHRvIEVYUEVOU0UgZm9yIGFuIEV4cGVuc2VSZXF1ZXN0LlwiXG4gIHR5cGU6IFJlcXVlc3RUeXBlXG59XG5cblwiQW4gZXhwZW5zZSByZXF1ZXN0IGNvbm5lY3Rpb24gZm9yIHRoZSBleHBlbnNlIHJlcXVlc3QgcGFnaW5hdGlvbi5cIlxudHlwZSBFeHBlbnNlUmVxdWVzdENvbm5lY3Rpb24gaW1wbGVtZW50cyBDb25uZWN0aW9uIHtcbiAgXCJUaGUgcmVxdWVzdHMgaW4gdGhlIGN1cnJlbnQgcGFnZSBvZiByZXN1bHRzLlwiXG4gIGVkZ2VzOiBbRXhwZW5zZVJlcXVlc3RFZGdlIV0hXG4gIFwiUGFnZSBpbmZvcm1hdGlvbiBmb3IgYWRkaXRpb25hbCBuYXZpZ2F0aW9uIHRocm91Z2ggdGhpcyBjb25uZWN0aW9uLlwiXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgXCJUaGUgdG90YWwgY291bnQgb2YgcmVxdWVzdHMgbWF0Y2hpbmcgdGhlIGZpbHRlciBjcml0ZXJpYSBzcGVjaWZpZWQgZm9yIHRoaXMgY29ubmVjdGlvbi5cIlxuICB0b3RhbENvdW50OiBJbnRcbn1cblxuXCJBIFJlcXVlc3QgZWRnZSBmb3IgUmVxdWVzdCBwYWdpbmF0aW9uLlwiXG50eXBlIEV4cGVuc2VSZXF1ZXN0RWRnZSB7XG4gIFwiVGhlIG9wYXF1ZSBjdXJzb3Igb2YgdGhlIGN1cnJlbnQgZWRnZS5cIlxuICBjdXJzb3I6IFN0cmluZ1xuICBcIlRoZSByZXF1ZXN0IGF0IHRoaXMgZWRnZS5cIlxuICBub2RlOiBFeHBlbnNlUmVxdWVzdFxufVxuXG5cIkZpbmFuY2lhbCBBc3NldCB3cmFwcGVyXCJcbnR5cGUgRmluYW5jaWFsQXNzZXQge1xuICBcIlRoZSBpbnN0cnVtZW50IGNvZGUgKHVzZCwgZXRjLikuIEN1cnJlbnRseSwgb25seSB1c2QgaXMgc3VwcG9ydGVkLlwiXG4gIGluc3RydW1lbnRDb2RlOiBGaW5hbmNpYWxJbnN0cnVtZW50Q29kZSFcbiAgXCJUaGUgYW1vdW50IGluIGNlbnRzXCJcbiAgcXVhbnRpdHlDZW50czogSW50IVxufVxuXG50eXBlIE11dGF0aW9uIHtcbiAgXCJVcGRhdGUgYSBSZXF1ZXN0LlwiXG4gIHVwZGF0ZVJlcXVlc3QoaW5wdXQ6IFVwZGF0ZVJlcXVlc3RJbnB1dCEpOiBVcGRhdGVSZXF1ZXN0UmVzdWx0IVxuICBcIlVwZGF0ZSBhIHJlcXVlc3QgYWN0aW9uLlwiXG4gIHVwZGF0ZVJlcXVlc3RBY3Rpb24oaW5wdXQ6IFVwZGF0ZVJlcXVlc3RBY3Rpb25JbnB1dCEpOiBVcGRhdGVSZXF1ZXN0QWN0aW9uUmVzdWx0IVxuICBcIlVwZGF0ZSBtdWx0aXBsZSByZXF1ZXN0IGFjdGlvbnMgYXQgb25jZS5cIlxuICB1cGRhdGVSZXF1ZXN0QWN0aW9ucyhpbnB1dDogVXBkYXRlUmVxdWVzdEFjdGlvbnNJbnB1dCEpOiBVcGRhdGVSZXF1ZXN0QWN0aW9uUmVzdWx0cyFcbiAgXCJVcGRhdGUgbXVsdGlwbGUgUmVxdWVzdHMgYXQgb25jZS5cIlxuICB1cGRhdGVSZXF1ZXN0cyhpbnB1dDogVXBkYXRlUmVxdWVzdHNJbnB1dCEpOiBVcGRhdGVSZXF1ZXN0UmVzdWx0cyFcbn1cblxudHlwZSBQYWdlSW5mbyB7XG4gIFwiV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLlwiXG4gIGVuZEN1cnNvcjogU3RyaW5nXG4gIFwiV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz9cIlxuICBoYXNOZXh0UGFnZTogQm9vbGVhbiFcbiAgXCJXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz9cIlxuICBoYXNQcmV2aW91c1BhZ2U6IEJvb2xlYW4hXG4gIFwiV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS5cIlxuICBzdGFydEN1cnNvcjogU3RyaW5nXG59XG5cbnR5cGUgUXVlcnkge1xuICBfZW50aXRpZXMocmVwcmVzZW50YXRpb25zOiBbX0FueSFdISk6IFtfRW50aXR5XSFcbiAgX3NlcnZpY2U6IF9TZXJ2aWNlXG4gIFwiR2V0IGEgcmVxdWVzdCBieSBpZFwiXG4gIHJlcXVlc3QoaWQ6IElEKTogUmVxdWVzdFxuICBcIkdldCBhIHNpbmdsZSBSZXF1ZXN0IEFjdGlvbiBieSBJRFwiXG4gIHJlcXVlc3RBY3Rpb24oaWQ6IElEISk6IFJlcXVlc3RBY3Rpb25cbiAgXCJHZXQgYSBsaXN0IG9mIFJlcXVlc3RzXCJcbiAgcmVxdWVzdHMoZmlsdGVyOiBSZXF1ZXN0RmlsdGVySW5wdXQsIHBhZ2U6IFBhZ2luYXRpb25JbnB1dCk6IFJlcXVlc3RDb25uZWN0aW9uIVxufVxuXG5cIkFuIGFjdGlvbiB3aGljaCBuZWVkcyAob3IgbmVlZGVkKSB0byBiZSB0YWtlbiBvbiBhIFJlcXVlc3RcIlxudHlwZSBSZXF1ZXN0QWN0aW9uIEBrZXkoZmllbGRzIDogXCJpZFwiKSB7XG4gIFwiVGhlIHVuaXF1ZSBJRCBvZiB0aGUgUmVxdWVzdEFjdGlvblwiXG4gIGlkOiBJRCFcbiAgXCJcIlwiXG4gIEEgbGlzdCBvZiB0aGUgdXNlcnMgd2hvIGhhdmUgYmVlbiByZXF1ZXN0ZWQgdG8gdGFrZSB0aGlzIGFjdGlvbixcbiAgYWxvbmdzaWRlIGluZm9ybWF0aW9uIGFib3V0IHdoeSB0aGV5IGFyZSB0aGUgb3duZXJzLlxuICBGb3IgUmVjZWlwdC9NZW1vIHJlcXVlc3RzLCB0aGlzIHdpbGwgZ2VuZXJhbGx5IGJlIHRoZSByZXF1ZXN0ZXJcbiAgXCJcIlwiXG4gIG93bmVyczogW1JlcXVlc3RBY3Rpb25Pd25lciFdIVxuICBcIlRoZSBSZXF1ZXN0IHdoaWNoIHRoaXMgYWN0aW9uIG11c3QgYmUgcGVyZm9ybWVkIGZvclwiXG4gIHJlcXVlc3Q6IFJlcXVlc3RcbiAgXCJcIlwiXG4gIFRoZSBjb21tZW50IGxlZnQgYnkgdGhlIHBlcnNvbiB3aG8gcmVzb2x2ZWQgdGhlIGFjdGlvbi5cbiAgXG4gIC0gSWYgdGhpcyB3YXMgYW4gQXBwcm92YWwgYWN0aW9uLCB0aGlzIHdvdWxkIGJlIHRoZSBhcHByb3ZlclxuICAtIElmIHRoaXMgd2FzIGEgSnVzdGlmaWNhdGlvbiBhY3Rpb24sIHRoaXMgd291bGQgYmUgdGhlIGp1c3RpZmllclxuICBcIlwiXCJcbiAgcmVzb2x1dGlvbkNvbW1lbnQ6IFN0cmluZ1xuICBcIlRoZSB0aW1lIHRoYXQgdGhlIGFjdGlvbiB3YXMgcmVzb2x2ZWQgYXQuXCJcbiAgcmVzb2x2ZWRBdDogVGltZVxuICBcIlRoZSB1c2VyIHdobyByZXNvbHZlZCB0aGUgcmVxdWVzdCBhY3Rpb24gKGFuZCB0aGUgcmVhc29uIHRoZXkgd2VyZSBhYmxlIHRvIHJlc29sdmUgaXQpXCJcbiAgcmVzb2x2ZWRCeTogUmVxdWVzdEFjdGlvbk93bmVyXG4gIFwiVGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSByZXF1ZXN0IGFjdGlvbiBlLmcuIHdoZXRoZXIgaXQgaGFzIGJlZW4gcGVyZm9ybWVkXCJcbiAgc3RhdHVzOiBSZXF1ZXN0QWN0aW9uU3RhdHVzXG4gIFwiVGhlIHR5cGUgb2YgYWN0aW9uIHRvIGJlIHBlcmZvcm1lZFwiXG4gIHR5cGU6IFJlcXVlc3RBY3Rpb25UeXBlXG59XG5cblwiQSByZXF1ZXN0IGFjdGlvbiBjb25uZWN0aW9uIGZvciB0aGUgcmVxdWVzdCBhY3Rpb24gcGFnaW5hdGlvbi5cIlxudHlwZSBSZXF1ZXN0QWN0aW9uQ29ubmVjdGlvbiBpbXBsZW1lbnRzIENvbm5lY3Rpb24ge1xuICBcIlRoZSByZXF1ZXN0IGFjdGlvbnMgaW4gdGhlIGN1cnJlbnQgcGFnZSBvZiByZXN1bHRzLlwiXG4gIGVkZ2VzOiBbUmVxdWVzdEFjdGlvbkVkZ2UhXSFcbiAgXCJQYWdlIGluZm9ybWF0aW9uIGZvciBhZGRpdGlvbmFsIG5hdmlnYXRpb24gdGhyb3VnaCB0aGlzIGNvbm5lY3Rpb24uXCJcbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxuICBcIlRoZSB0b3RhbCBjb3VudCBvZiByZXF1ZXN0IGFjdGlvbnMgbWF0Y2hpbmcgdGhlIGZpbHRlciBjcml0ZXJpYSBzcGVjaWZpZWQgZm9yIHRoaXMgY29ubmVjdGlvbi5cIlxuICB0b3RhbENvdW50OiBJbnRcbn1cblxuXCJBIFJlcXVlc3RBY3Rpb24gZWRnZSBmb3IgdGhlIFJlcXVlc3RBY3Rpb24gcGFnaW5hdGlvbi5cIlxudHlwZSBSZXF1ZXN0QWN0aW9uRWRnZSB7XG4gIFwiVGhlIG9wYXF1ZSBjdXJzb3Igb2YgdGhlIGN1cnJlbnQgZWRnZS5cIlxuICBjdXJzb3I6IFN0cmluZ1xuICBcIlRoZSByZXF1ZXN0IGFjdGlvbiBhdCB0aGlzIGVkZ2UuXCJcbiAgbm9kZTogUmVxdWVzdEFjdGlvblxufVxuXG50eXBlIFJlcXVlc3RBY3Rpb25NYW5hZ2VyRGlmZmVyZW5jZSBpbXBsZW1lbnRzIFJlcXVlc3RBY3Rpb25Pd25lciB7XG4gIFwiXCJcIlxuICBBIGVtcGxveWVlIHdobyBpcyAob3Igd2FzLCBpZiB0aGUgUmVxdWVzdCBpcyByZXNvbHZlZCkgJ2xldmVsRGlmZmVyZW5jZScgbGV2ZWxzIHVwIHRoZSBtYW5hZ2VyIGhpZXJhcmNoeSBmcm9tIHRoZVxuICByZXF1ZXN0ZXIsIGFuZCBpcyB0aGVyZWZvcmUgcmVxdWVzdGVkIHRvIHRha2UgYWN0aW9uLlxuICBcIlwiXCJcbiAgZW1wbG95ZWU6IEVtcGxveWVlXG4gIFwiXCJcIlxuICBUaGUgYWN0aW9uL3JldmlldyB3YXMgcmVxdWVzdGVkIGZyb20gdGhlIG1hbmFnZXIgTi1sZXZlbHMgdXAgdGhlIG1hbmFnZXIgY2hhaW4uXG4gIFxuICBGb3IgZXhhbXBsZSwgTj0xID0gdGhlIHJlcXVlc3RlcidzIG1hbmFnZXIuIE49MiA9IHRoZSByZXF1ZXN0ZXIncyBtYW5hZ2VyJ3MgbWFuYWdlci5cbiAgXCJcIlwiXG4gIGxldmVsRGlmZmVyZW5jZTogSW50IVxuICBcIlwiXCJcbiAgQSB1c2VyIHdobyBpcyAob3Igd2FzLCBpZiB0aGUgUmVxdWVzdCBpcyByZXNvbHZlZCkgJ2xldmVsRGlmZmVyZW5jZScgbGV2ZWxzIHVwIHRoZSBtYW5hZ2VyIGhpZXJhcmNoeSBmcm9tIHRoZVxuICByZXF1ZXN0ZXIsIGFuZCBpcyB0aGVyZWZvcmUgcmVxdWVzdGVkIHRvIHRha2UgYWN0aW9uLlxuICBcIlwiXCJcbiAgdXNlcjogVXNlciBAZGVwcmVjYXRlZChyZWFzb24gOiBcIkluY29ycmVjdCBwZXJtaXNzaW9uIHNjb3BpbmcsIHVzZSBlbXBsb3llZSBpbnN0ZWFkXCIpXG59XG5cbnR5cGUgUmVxdWVzdEFjdGlvblNwZWNpZmljT3duZXIgaW1wbGVtZW50cyBSZXF1ZXN0QWN0aW9uT3duZXIge1xuICBcIlwiXCJcbiAgVGhlIHBvbGljeSBzcGVjaWZpZWQgdGhhdCB0aGlzIGV4YWN0IGVtcGxveWVlIGlzIHJlcXVlc3RlZCB0byB0YWtlIGFjdGlvbi5cbiAgT2Z0ZW4gdGhpcyB3aWxsIGJlIHRoZSByZXF1ZXN0ZXIsIGUuZy4gZm9yIHJlcXVlc3RzIHRvIHVwbG9hZCBNZW1vcy9SZWNlaXB0c1xuICBcIlwiXCJcbiAgZW1wbG95ZWU6IEVtcGxveWVlXG4gIFwiXCJcIlxuICBUaGUgcG9saWN5IHNwZWNpZmllZCB0aGF0IHRoaXMgZXhhY3QgdXNlciBpcyByZXF1ZXN0ZWQgdG8gdGFrZSBhY3Rpb24uXG4gIE9mdGVuIHRoaXMgd2lsbCBiZSB0aGUgcmVxdWVzdGVyLCBlLmcuIGZvciByZXF1ZXN0cyB0byB1cGxvYWQgTWVtb3MvUmVjZWlwdHNcbiAgXCJcIlwiXG4gIHVzZXI6IFVzZXIgQGRlcHJlY2F0ZWQocmVhc29uIDogXCJJbmNvcnJlY3QgcGVybWlzc2lvbiBzY29waW5nLCB1c2UgZW1wbG95ZWUgaW5zdGVhZFwiKVxufVxuXG50eXBlIFJlcXVlc3RBY3Rpb25UaXRsZU93bmVyIGltcGxlbWVudHMgUmVxdWVzdEFjdGlvbk93bmVyIHtcbiAgXCJBIGVtcGxveWVlIHdobyBob2xkcyAob3IgaGVsZCwgaWYgdGhlIFJlcXVlc3QgaXMgcmVzb2x2ZWQpIHRoZSB0aGUgdGl0bGUgc3BlY2lmaWVkIGJ5IHRoZSBwb2xpY3kgdG8gdGFrZSBhY3Rpb24uXCJcbiAgZW1wbG95ZWU6IEVtcGxveWVlXG4gIFwiQSB1c2VyIHdobyBob2xkcyAob3IgaGVsZCwgaWYgdGhlIFJlcXVlc3QgaXMgcmVzb2x2ZWQpIHRoZSB0aGUgdGl0bGUgc3BlY2lmaWVkIGJ5IHRoZSBwb2xpY3kgdG8gdGFrZSBhY3Rpb24uXCJcbiAgdXNlcjogVXNlciBAZGVwcmVjYXRlZChyZWFzb24gOiBcIkluY29ycmVjdCBwZXJtaXNzaW9uIHNjb3BpbmcsIHVzZSBlbXBsb3llZSBpbnN0ZWFkXCIpXG59XG5cblwiQSByZXF1ZXN0IGNvbm5lY3Rpb24gZm9yIHRoZSByZXF1ZXN0IHBhZ2luYXRpb24uXCJcbnR5cGUgUmVxdWVzdENvbm5lY3Rpb24gaW1wbGVtZW50cyBDb25uZWN0aW9uIHtcbiAgXCJUaGUgcmVxdWVzdHMgaW4gdGhlIGN1cnJlbnQgcGFnZSBvZiByZXN1bHRzLlwiXG4gIGVkZ2VzOiBbUmVxdWVzdEVkZ2UhXSFcbiAgXCJQYWdlIGluZm9ybWF0aW9uIGZvciBhZGRpdGlvbmFsIG5hdmlnYXRpb24gdGhyb3VnaCB0aGlzIGNvbm5lY3Rpb24uXCJcbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxuICBcIlRoZSB0b3RhbCBjb3VudCBvZiByZXF1ZXN0cyBtYXRjaGluZyB0aGUgZmlsdGVyIGNyaXRlcmlhIHNwZWNpZmllZCBmb3IgdGhpcyBjb25uZWN0aW9uLlwiXG4gIHRvdGFsQ291bnQ6IEludFxufVxuXG5cIkEgUmVxdWVzdCBlZGdlIGZvciBSZXF1ZXN0IHBhZ2luYXRpb24uXCJcbnR5cGUgUmVxdWVzdEVkZ2Uge1xuICBcIlRoZSBvcGFxdWUgY3Vyc29yIG9mIHRoZSBjdXJyZW50IGVkZ2UuXCJcbiAgY3Vyc29yOiBTdHJpbmdcbiAgXCJUaGUgcmVxdWVzdCBhdCB0aGlzIGVkZ2UuXCJcbiAgbm9kZTogUmVxdWVzdFxufVxuXG50eXBlIFVwZGF0ZVJlcXVlc3RBY3Rpb25SZXN1bHQge1xuICBcIlRoZSBSZXF1ZXN0QWN0aW9uIHdoaWNoIHdhcyB1cGRhdGVkXCJcbiAgcmVxdWVzdEFjdGlvbjogUmVxdWVzdEFjdGlvbiFcbn1cblxudHlwZSBVcGRhdGVSZXF1ZXN0QWN0aW9uUmVzdWx0cyB7XG4gIFwiVGhlIFJlcXVlc3RBY3Rpb24gd2hpY2ggd2VyZSB1cGRhdGVkXCJcbiAgcmVzdWx0czogW1VwZGF0ZVJlcXVlc3RBY3Rpb25SZXN1bHQhXSFcbn1cblxudHlwZSBVcGRhdGVSZXF1ZXN0UmVzdWx0IHtcbiAgXCJUaGUgUmVxdWVzdCB3aGljaCB3YXMgdXBkYXRlZFwiXG4gIHJlcXVlc3Q6IFJlcXVlc3QhXG59XG5cbnR5cGUgVXBkYXRlUmVxdWVzdFJlc3VsdHMge1xuICBcIlRoZSBSZXF1ZXN0cyB3aGljaCB3ZXJlIHVwZGF0ZWRcIlxuICByZXN1bHRzOiBbVXBkYXRlUmVxdWVzdFJlc3VsdCFdIVxufVxuXG5cIiBGZWRlcmF0aW9uIFR5cGVzXCJcbnR5cGUgVXNlciBAZXh0ZW5kcyBAa2V5KGZpZWxkcyA6IFwiaWRcIikge1xuICBpZDogSUQhIEBleHRlcm5hbFxufVxuXG50eXBlIF9TZXJ2aWNlIHtcbiAgc2RsOiBTdHJpbmchXG59XG5cblwiVGhlIHR5cGVzIG9mIHJlbGF0aW9uc2hpcHMgZm9yIGZpbHRlcmluZyB3aG8gaXMgYXNzaWduZWQgYSByZXF1ZXN0LlwiXG5lbnVtIEFzc2lnbmVkVG9GaWx0ZXJJbnB1dCB7XG4gIFwiQXNzaWduZWQgdG8gYW55b25lIGluIHRoZSB1c2VyJ3MgY29tcGFueVwiXG4gIENPTVBBTllcbiAgXCJBc3NpZ25lZCB0byB0aGUgbG9nZ2VkIGluIHVzZXJcIlxuICBNRVxuICBcIkFzc2lnbmVkIHRvIGFueW9uZSBleGNlcHQgdGhlIGxvZ2dlZCBpbiB1c2VyXCJcbiAgT1RIRVJTXG59XG5cblwiVGhlIHR5cGUgb2YgdGhlIEV4cGVuc2UuXCJcbmVudW0gRXhwZW5zZVR5cGUge1xuICBcIkEgYmlsbCBwYXkgZXhwZW5zZS5cIlxuICBCSUxMUEFZXG4gIFwiQSBjYXJkIGV4cGVuc2UuXCJcbiAgQ0FSRFxuICBcIkEgcmVpbWJ1cnNlbWVudCBleHBlbnNlLlwiXG4gIFJFSU1CVVJTRU1FTlRcbn1cblxuXCJcIlwiXG4gRnJvbSBBUEl2MVxuIGh0dHBzOi8vZ2l0aHViLmNvbS9icmV4aHEvY3JlZGl0X2NhcmQvYmxvYi9tYWluL2FwcHMvYXBpL2xpYi9hcGkvd2ViL3NjaGVtYS9maW5hbmNpYWxfYXNzZXQuZXgjTDdcbiBodHRwczovL2dpdGh1Yi5jb20vYnJleGhxL2NyZWRpdF9jYXJkL2Jsb2IvbWFpbi9saWJyYXJpZXMvYnJleF9maW5hbmNpYWxfYXNzZXQvbGliL2ZpbmFuY2lhbF9pbnN0cnVtZW50X2NvbnN0YW50cy5leCNMOTYyXG5cIlwiXCJcbmVudW0gRmluYW5jaWFsSW5zdHJ1bWVudENvZGUge1xuICBBRURcbiAgQUZOXG4gIEFMTFxuICBBTURcbiAgQU5HXG4gIEFPQVxuICBBUlNcbiAgQVVEXG4gIEFXR1xuICBBWk5cbiAgQkFNXG4gIEJCRFxuICBCRFRcbiAgQkdOXG4gIEJIRFxuICBCSUZcbiAgQk1EXG4gIEJORFxuICBCT0JcbiAgQk9WXG4gIEJSTFxuICBCU0RcbiAgQlROXG4gIEJXUFxuICBCWU5cbiAgQlpEXG4gIENBRFxuICBDREZcbiAgQ0hFXG4gIENIRlxuICBDSFdcbiAgQ0xGXG4gIENMUFxuICBDTllcbiAgQ09QXG4gIENPVVxuICBDUkNcbiAgQ1JZUFRPX0JUQ1xuICBDUllQVE9fRVRIXG4gIENSWVBUT19VU0RDXG4gIENVQ1xuICBDVVBcbiAgQ1ZFXG4gIENaS1xuICBESkZcbiAgREtLXG4gIERPUFxuICBEWkRcbiAgRUdQXG4gIEVSTlxuICBFVEJcbiAgRVVSXG4gIEZKRFxuICBGS1BcbiAgR0JQXG4gIEdFTFxuICBHSFNcbiAgR0lQXG4gIEdNRFxuICBHTkZcbiAgR1RRXG4gIEdZRFxuICBIS0RcbiAgSE5MXG4gIEhSS1xuICBIVEdcbiAgSFVGXG4gIElEUlxuICBJTFNcbiAgSU5SXG4gIElRRFxuICBJUlJcbiAgSVNLXG4gIEpNRFxuICBKT0RcbiAgSlBZXG4gIEtFU1xuICBLR1NcbiAgS0hSXG4gIEtNRlxuICBLUFdcbiAgS1JXXG4gIEtXRFxuICBLWURcbiAgS1pUXG4gIExBS1xuICBMQlBcbiAgTEtSXG4gIExSRFxuICBMU0xcbiAgTFlEXG4gIE1BRFxuICBNRExcbiAgTUdBXG4gIE1LRFxuICBNTUtcbiAgTU5UXG4gIE1PUFxuICBNUlVcbiAgTVVSXG4gIE1WUlxuICBNV0tcbiAgTVhOXG4gIE1YVlxuICBNWVJcbiAgTVpOXG4gIE5BRFxuICBOQVNEQVFfREFHWFhcbiAgTkFTREFRX0RHQ1hYXG4gIE5BU0RBUV9ER1ZYWFxuICBOQVNEQVFfRFBHWFhcbiAgTkFTREFRX0dHQlhYXG4gIE5BU0RBUV9HR0RYWFxuICBOQVNEQVFfR0dTWFhcbiAgTkFTREFRX0dTQlhYXG4gIE5HTlxuICBOSU9cbiAgTk9LXG4gIE5QUlxuICBOWkRcbiAgT01SXG4gIFBBQlxuICBQRU5cbiAgUEdLXG4gIFBIUFxuICBQS1JcbiAgUExOXG4gIFBZR1xuICBRQVJcbiAgUk9OXG4gIFJTRFxuICBSVUJcbiAgUldGXG4gIFNBUlxuICBTQkRcbiAgU0NSXG4gIFNER1xuICBTRUtcbiAgU0dEXG4gIFNIUFxuICBTTExcbiAgU09TXG4gIFNSRFxuICBTU1BcbiAgU1ROXG4gIFNWQ1xuICBTWVBcbiAgU1pMXG4gIFRIQlxuICBUSlNcbiAgVE1UXG4gIFRORFxuICBUT1BcbiAgVFJZXG4gIFRURFxuICBUV0RcbiAgVFpTXG4gIFVBSFxuICBVR1hcbiAgVVNEXG4gIFVTTlxuICBVWUlcbiAgVVlVXG4gIFVZV1xuICBVWlNcbiAgVkVTXG4gIFZORFxuICBWVVZcbiAgV1NUXG4gIFhBRlxuICBYQUdcbiAgWEFVXG4gIFhCQVxuICBYQkJcbiAgWEJDXG4gIFhCRFxuICBYQ0RcbiAgWERSXG4gIFhPRlxuICBYUERcbiAgWFBGXG4gIFhQVFxuICBYU1VcbiAgWFRTXG4gIFhVQVxuICBYWFhcbiAgWUVSXG4gIFpBUlxuICBaTVdcbiAgWldMXG59XG5cblwiXCJcIlxuVGltZSBidWNrZXR0aW5nIHN0cmF0ZWd5XG4tIFNUQVJUOiBCdWNrZXRzIHN0YXJ0IGF0IHRoZSBzdGFydHNBdCB0aW1lc3RhbXBcbi0gRU5EOiBCdWNrZXRzIHN0YXJ0IGF0IHRoZSBlbmRzQXQgdGltZXN0YW1wXG4tIENBTEVOREFSOiBCdWNrZXRzIGFyZSBhbGlnbmVkIHdpdGggdGhlIGNhbGVuZGFyIHVuaXRzIChlLmcuIFdFRUtTKSBidXQgY2FuIGluY2x1ZGVcbnBhcnRpYWwgYnVja2V0cyBiYXNlZCBvbiB0aGUgc3RhcnRzQXQgYW5kIGVuZHNBdCB0aW1lYnVja2V0c1xuXCJcIlwiXG5lbnVtIEluc2lnaHRzVGltZUJ1Y2tldFN0cmF0ZWd5IHtcbiAgQ0FMRU5EQVJcbiAgRU5EXG4gIFNUQVJUXG59XG5cblwiR2VuZXJpYyB0aW1lIHVuaXRcIlxuZW51bSBJbnNpZ2h0c1RpbWVVbml0IHtcbiAgREFZXG4gIE1PTlRIXG4gIFFVQVJURVJcbiAgV0VFS1xuICBZRUFSXG59XG5cbmVudW0gT3JkZXJCeURpcmVjdGlvbiB7XG4gIEFTQ0VORElOR1xuICBERVNDRU5ESU5HXG59XG5cblwiVGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSByZXF1ZXN0IGFjdGlvbi5cIlxuZW51bSBSZXF1ZXN0QWN0aW9uU3RhdHVzIHtcbiAgXCJBbiBhY3Rpb24gd2hpY2ggaXMgbm90IHJlYWR5IHRvIGJlIHRha2VuIGJlY2F1c2UgaXRzIGRlcGVuZGVuY2llcyBhcmUgdW5yZXNvbHZlZFwiXG4gIEJMT0NLRURcbiAgXCJUaGUgYWN0aW9uJ3MgcmVxdWVzdCB3YXMgY2FuY2VsZWRcIlxuICBDQU5DRUxFRFxuICBcIlRoZSBkZXNpcmVkIGFjdGlvbiB3YXMgdGFrZW4gYnkgdGhlIG93bmVyXCJcbiAgQ09NUExFVEVEXG4gIFwiVGhlIGFjdGlvbiB3YXMgbWFya2VkIGFzIG5vdCBuZWVkZWRcIlxuICBESVNNSVNTRURcbiAgXCJBbiBhY3Rpb24gd2hpY2ggaXMgcmVhZHkgdG8gYmUgdGFrZW4gKG5vIGRlcGVuZGVuY2llcywgb3IgYWxsIGRlcGVuZGVuY2llcyBhcmUgcmVzb2x2ZWQpXCJcbiAgUEVORElOR1xuICBcIlwiXCJcbiAgVGhlIG93bmVyIGV4cGxpY2l0bHkgcmVmdXNlcyB0byB0YWtlIGFuIGFjdGlvbiwgZS5nLiBhcHByb3ZpbmcgYW4gZXhwZW5zZS5cbiAgTm90IGFsbCBSZXF1ZXN0IEFjdGlvbnMgY2FuIGJlIFJFSkVDVEVELlxuICBcIlwiXCJcbiAgUkVKRUNURURcbn1cblxuZW51bSBSZXF1ZXN0QWN0aW9uU3RhdHVzSW5wdXQge1xuICBcIkFwcHJvdmUgYSByZXF1ZXN0IGFjdGlvbiwgYXBwcm92aW5nIHRoZSByZXF1ZXN0IGlmIHRoaXMgd2FzIHRoZSBsYXN0IGFjdGlvblwiXG4gIENPTVBMRVRFRFxuICBcIlRoZSBhY3Rpb24gd2FzIG1hcmtlZCBhcyBub3QgbmVlZGVkXCJcbiAgRElTTUlTU0VEXG4gIFwiUmVqZWN0IGEgcmVxdWVzdCBhY3Rpb24sIHRoZXJlZm9yZSByZWplY3RpbmcgdGhlIHdob2xlIHJlcXVlc3RcIlxuICBSRUpFQ1RFRFxufVxuXG5cIlRoZSB0eXBlIG9mIHRoZSByZXF1ZXN0IGFjdGlvbi5cIlxuZW51bSBSZXF1ZXN0QWN0aW9uVHlwZSB7XG4gIFwiQSBtZW1vIGlzIHJlcXVlc3RlZC5cIlxuICBNRU1PXG4gIFwiQSByZWNlaXB0IGlzIHJlcXVlc3RlZC5cIlxuICBSRUNFSVBUXG4gIFwiQSBtYW5hZ2VyIChvciBvdGhlcikgcmV2aWV3IGlzIHJlcXVlc3RlZC5cIlxuICBSRVZJRVdcbn1cblxuXCJUaGUgc3RhdHVzIG9mIGEgUmVxdWVzdC5cIlxuZW51bSBSZXF1ZXN0U3RhdHVzIHtcbiAgXCJcIlwiXG4gIFdoZW4gYWxsIHJlcXVlc3QgYWN0aW9ucyBhc3NvY2lhdGVkIHdpdGggdGhpcyByZXF1ZXN0IGFyZSBhcHByb3ZlZC9kaXNtaXNzZWQsXG4gIG9yIGFuIGFkbWluIGRpcmVjdGx5IG92ZXJyb2RlIHRoZSByZXF1ZXN0IHdpdGggYW4gYXBwcm92YWxcbiAgXCJcIlwiXG4gIEFQUFJPVkVEXG4gIFwiXCJcIlxuICBXaGVuIGEgcmVxdWVzdCB3YXMgY2FuY2VsZWQgYnkgdGhlIHJlcXVlc3RlclxuICBcbiAgVE9ETzogZG8gd2UgbmVlZCB0byBkaWZmZXJlbnRpYXRlIGJldHdlZW4gJ3VzZXInLWNhbmNlbGVkIHZzICdzeXN0ZW0nLWNhbmNlbGVkPyAoZS5nLiBWT0lEKVxuICBcIlwiXCJcbiAgQ0FOQ0VMRURcbiAgXCJSZXF1ZXN0cyBhcmUgY3JlYXRlZCBhcyBwZW5kaW5nXCJcbiAgUEVORElOR1xuICBcIldoZW4gb25lIG9mIHRoZSBhY3Rpb25zIHdhcyByZWplY3RlZFwiXG4gIFJFSkVDVEVEXG59XG5cbmVudW0gUmVxdWVzdFN0YXR1c0lucHV0IHtcbiAgXCJGb3JjZSBhIHJlcXVlc3QgdG8gYmUgYXBwcm92ZWQsIGV2ZW4gaWYgaXRzIGFjdGlvbnMgaGF2ZSBub3QgYmVlbiBjb21wbGV0ZWRcIlxuICBBUFBST1ZFRFxuICBcIkNhbmNlbCBhIHJlcXVlc3Qgd2hpY2ggaXMgbm8gbG9uZ2VyIG5lZWRlZFwiXG4gIENBTkNFTEVEXG4gIFwiQ29tcGxldGVseSByZWplY3QgYSByZXF1ZXN0LCBldmVuIGlmIGl0IGRpZG4ndCBhc2sgZm9yIHlvdXIgYXBwcm92YWxcIlxuICBSRUpFQ1RFRFxufVxuXG5cIlRoZSB0eXBlIG9mIHRoZSBSZXF1ZXN0LlwiXG5lbnVtIFJlcXVlc3RUeXBlIHtcbiAgXCJUaGlzIGlzIGEgYnVkZ2V0IHJlcXVlc3QuXCJcbiAgQlVER0VUXG4gIFwiVGhpcyBpcyBhbiBleHBlbnNlIHJlcXVlc3QuXCJcbiAgRVhQRU5TRVxufVxuXG5cIlRoZSB0eXBlcyBvZiByZWxhdGlvbnNoaXBzIGZvciBmaWx0ZXJpbmcgd2hvIHJlcXVlc3RlZCBhIHJlcXVlc3QuXCJcbmVudW0gUmVxdWVzdGVkQnlGaWx0ZXJJbnB1dCB7XG4gIFwiQ3JlYXRlZCBieSBhbnlvbmUgaW4gdGhlIHVzZXIncyBjb21wYW55XCJcbiAgQ09NUEFOWVxuICBcIkNyZWF0ZWQgYnkgdGhlIGxvZ2dlZCBpbiB1c2VyXCJcbiAgTUVcbiAgXCJDcmVhdGVkIGJ5IGFueW9uZSBpbiB0aGUgdXNlcidzIHRlYW1cIlxuICBURUFNXG59XG5cblwiQXZhaWxhYmxlIGZpZWxkcyB0byBvcmRlciB0aGUgRXhwZW5zZSBjb25uZWN0aW9uIGJ5LlwiXG5lbnVtIFNvcnRhYmxlUmVxdWVzdEFjdGlvbkZpZWxkIHtcbiAgRVhFQ1VUSU9OX09SREVSXG59XG5cblwiSVNPeiBkYXRlXCJcbnNjYWxhciBEYXRlXG5cblwiSnNvbiBvYmplY3RcIlxuc2NhbGFyIEpzb25cblxuXCI2NEJpdCBpbnRlZ2VyXCJcbnNjYWxhciBMb25nXG5cblwiSVNPeiB0aW1lXCJcbnNjYWxhciBUaW1lXG5cbnNjYWxhciBfQW55XG5cbnNjYWxhciBfRmllbGRTZXRcblxuXCJcIlwiXG4gRnJvbSBBUEl2MVxuIGh0dHBzOi8vZ2l0aHViLmNvbS9icmV4aHEvY3JlZGl0X2NhcmQvYmxvYi9tYWluL2FwcHMvYXBpL2xpYi9hcGkvd2ViL3NjaGVtYS9maW5hbmNpYWxfYXNzZXQuZXgjTDEzXG5cIlwiXCJcbmlucHV0IEZpbmFuY2lhbEFzc2V0SW5wdXQge1xuICBcIlRoZSBpbnN0cnVtZW50IGNvZGUgKHVzZCwgZXRjLikuIEN1cnJlbnRseSwgb25seSB1c2QgaXMgc3VwcG9ydGVkLlwiXG4gIGluc3RydW1lbnRDb2RlOiBGaW5hbmNpYWxJbnN0cnVtZW50Q29kZSA9IFVTRFxuICBcIlRoZSBhbW91bnQgaW4gY2VudHNcIlxuICBxdWFudGl0eUNlbnRzOiBJbnRcbn1cblxuaW5wdXQgRmluYW5jaWFsQXNzZXRSYW5nZUlucHV0IHtcbiAgXCJFeGNsdXNpdmUsIG9ubHkgY29uc2lkZXJzIGdpdmVuIGN1cnJlbmN5LCByZXF1aXJlZCB0byBoYXZlIHNhbWUgY3VycmVuY3kgd2hlbiBtaW5BbW91bnQgaXMgcHJvdmlkZWQuXCJcbiAgbWF4QW1vdW50OiBGaW5hbmNpYWxBc3NldElucHV0XG4gIFwiSW5jbHVzaXZlLCBvbmx5IGNvbnNpZGVycyBnaXZlbiBjdXJyZW5jeSwgcmVxdWlyZWQgdG8gaGF2ZSBzYW1lIGN1cnJlbmN5IHdoZW4gbWF4QW1vdW50IGlzIHByb3ZpZGVkLlwiXG4gIG1pbkFtb3VudDogRmluYW5jaWFsQXNzZXRJbnB1dFxufVxuXG5cIlwiXCJcblBhZ2luYXRpb24gcGFyYW1ldGVycyBmb3IgZW51bWVyYXRpbmcgaXRlbXMgaW4gYSBjb25uZWN0aW9uLlxuT25seSB7Zmlyc3QsIGFmdGVyfSBPUiB7bGFzdCwgYmVmb3JlfSBwYWlycyBjYW4gYmUgc2V0LlxuZS5nLiBJZiB7Zmlyc3QsIGJlZm9yZX0gaXMgc2V0LCB0aGF0IHdpbGwgY2F1c2UgYSB2YWxpZGF0aW9uIGVycm9yLlxuVGhlIGN1cnNvcnMgYXJlIG9wdGlvbmFsLiBXaXRob3V0IGEgc3BlY2lmaWVkIGN1cnNvciwgaXQgaXMgYXNzdW1lZCB0byBzdGFydCBhdFxudGhlIGZpcnN0IGl0ZW0gKGZvciBgZmlyc3RgKSBvciBsYXN0IGl0ZW0gKGZvciBgbGFzdGApIG9mIHRoZSBjb2xsZWN0aW9uLlxuXCJcIlwiXG5pbnB1dCBQYWdpbmF0aW9uSW5wdXQge1xuICBcIlRoZSBjdXJzb3IgdG8gc3RhcnQgdGhlIHBhZ2UgYXQgKGV4Y2x1c2l2ZSkuXCJcbiAgYWZ0ZXI6IFN0cmluZ1xuICBcIlRoZSBjdXJzb3IgdG8gZW5kIHRoZSBwYWdlIGF0IChleGNsdXNpdmUpLlwiXG4gIGJlZm9yZTogU3RyaW5nXG4gIFwiVGhlIG51bWJlciBvZiBpdGVtcyB0byByZXR1cm4gaW4gYSBwYWdlIGFmdGVyIHRoZSBgYWZ0ZXJgIGN1cnNvci5cIlxuICBmaXJzdDogSW50XG4gIFwiVGhlIG51bWJlciBvZiBpdGVtcyB0byByZXR1cm4gaW4gYSBwYWdlIHByaW9yIHRvIHRoZSBgYmVmb3JlYCBjdXJzb3IuXCJcbiAgbGFzdDogSW50XG59XG5cblwiRmlsdGVycyBhdmFpbGFibGUgdG8gY29udHJvbCB3aGljaCByZXF1ZXN0IGFjdGlvbnMgZ2V0IHJldHVybmVkLlwiXG5pbnB1dCBSZXF1ZXN0QWN0aW9uRmlsdGVySW5wdXQge1xuICBcIk1hdGNoIElOIHNwZWNpZmljIHN0YXR1ZXMsIG1hdGNoIEFMTCB3aGVuIG5vIGZpbHRlciBpcyBwcm92aWRlZFwiXG4gIHN0YXR1czogW1JlcXVlc3RBY3Rpb25TdGF0dXMhXVxufVxuXG5pbnB1dCBSZXF1ZXN0QWN0aW9uSW5wdXQge1xuICBcIlwiXCJcbiAgVGhlIHN0YXR1cyBvZiB0aGUgcmVxdWVzdCBhY3Rpb24uXG4gIE5vdGU6IE9ubHkgUkVWSUVXIHJlcXVlc3QgYWN0aW9ucyBjYW4gYmUgQ09NUExFVEVEIG9yIFJFSkVDVEVELlxuICBOb3RlOiBBbnkgcmVxdWVzdCBhY3Rpb24gY2FuIGJlIERJU01JU1NFRC5cbiAgXCJcIlwiXG4gIHN0YXR1czogUmVxdWVzdEFjdGlvblN0YXR1c0lucHV0XG59XG5cblwiRGV0ZXJtaW5lcyB0aGUgb3JkZXIgdGhhdCB0aGUgcmVxdWVzdHMgd2lsbCBiZSByZXR1cm5lZC5cIlxuaW5wdXQgUmVxdWVzdEFjdGlvbk9yZGVySW5wdXQge1xuICBmaWVsZDogU29ydGFibGVSZXF1ZXN0QWN0aW9uRmllbGQhXG4gIG9yZGVyOiBPcmRlckJ5RGlyZWN0aW9uIVxufVxuXG5cIkZpbHRlcnMgYXZhaWxhYmxlIHRvIGNvbnRyb2wgd2hpY2ggcmVxdWVzdHMgZ2V0IHJldHVybmVkIGluIGEgY29ubmVjdGlvbi5cIlxuaW5wdXQgUmVxdWVzdEZpbHRlcklucHV0IHtcbiAgXCJTZWxlY3QgcmVxdWVzdHMgYnkgb25lIG9yIG1vcmUgdHlwZXNcIlxuICByZXF1ZXN0VHlwZXM6IFtSZXF1ZXN0VHlwZSFdXG4gIFwiTWF0Y2ggSU4gc3BlY2lmaWMgc3RhdHVzZXMsIG1hdGNoIEFMTCB3aGVuIG5vIGZpbHRlciBpdCBwcm92aWRlZFwiXG4gIHN0YXR1czogW1JlcXVlc3RTdGF0dXMhXVxufVxuXG5pbnB1dCBSZXF1ZXN0SW5wdXQge1xuICBcIlRoZSBzdGF0dXMgb2YgdGhlIHJlcXVlc3QuXCJcbiAgc3RhdHVzOiBSZXF1ZXN0U3RhdHVzXG59XG5cbmlucHV0IFRpbWVJbnRlcnZhbElucHV0IHtcbiAgXCJFeGNsdXNpdmUgZW5kIGF0LlwiXG4gIGVuZEF0OiBUaW1lXG4gIFwiSW5jbHVzaXZlIHN0YXJ0IGF0LlwiXG4gIHN0YXJ0QXQ6IFRpbWVcbn1cblxuaW5wdXQgVXBkYXRlUmVxdWVzdEFjdGlvbklucHV0IHtcbiAgXCJjbGllbnRNdXRhdGlvbklkXCJcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nXG4gIFwiVGhlIElEIG9mIHRoZSByZXF1ZXN0IGFjdGlvbiB0byB1cGRhdGUuXCJcbiAgaWQ6IElEIVxuICBcIlRoZSBpbnB1dCBmb3IgdGhlIHJlcXVlc3QgYWN0aW9uIG9iamVjdC5cIlxuICByZXF1ZXN0QWN0aW9uOiBSZXF1ZXN0QWN0aW9uSW5wdXQhXG59XG5cbmlucHV0IFVwZGF0ZVJlcXVlc3RBY3Rpb25zSW5wdXQge1xuICBcImNsaWVudE11dGF0aW9uSWRcIlxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmdcbiAgXCJBIGxpc3Qgb2YgaW5kaXZpZHVhbCB1cGRhdGUgcmVxdWVzdCBpbnB1dFwiXG4gIHVwZGF0ZVJlcXVlc3RBY3Rpb25JbnB1dHM6IFtVcGRhdGVSZXF1ZXN0QWN0aW9uSW5wdXQhXSFcbn1cblxuaW5wdXQgVXBkYXRlUmVxdWVzdElucHV0IHtcbiAgXCJjbGllbnRNdXRhdGlvbklkXCJcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nXG4gIFwiVGhlIElEIG9mIHRoZSByZXF1ZXN0IHRvIHVwZGF0ZS5cIlxuICBpZDogSUQhXG4gIFwiVGhlIGlucHV0IGZvciB0aGUgcmVxdWVzdCBvYmplY3QuXCJcbiAgcmVxdWVzdDogUmVxdWVzdElucHV0IVxufVxuXG5pbnB1dCBVcGRhdGVSZXF1ZXN0c0lucHV0IHtcbiAgXCJjbGllbnRNdXRhdGlvbklkXCJcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nXG4gIFwiQSBsaXN0IG9mIGluZGl2aWR1YWwgdXBkYXRlIHJlcXVlc3QgaW5wdXRcIlxuICB1cGRhdGVSZXF1ZXN0SW5wdXRzOiBbVXBkYXRlUmVxdWVzdElucHV0IV0hXG59XG4iLAogICJzZXJ2aWNlIiA6ICJld29nSUNKdVlXMWxJaUE2SUNKeVpYRjFaWE4wY3kxa1ozTWlMQW9nSUNKMWNtd2lJRG9nSW1oMGRIQTZMeTl5WlhGMVpYTjBjeTFrWjNNNk9EQTRNQzkyTVM5bmNtRndhSEZzSWl3S0lDQWlhWE5mWVdOMGFYWmxJaUE2SUhSeWRXVXNDaUFnSW5Wd1pHRjBaV1JmWVhSZmMyVmpiMjVrY3lJZ09pQTVMQW9nSUNKcGJuTmxjblJsWkY5aGRGOXpaV052Ym1SeklpQTZJRGtLZlE9PSIsCiAgImluc2VydGVkX2F0X3NlY29uZHMiIDogMTQKfSwgewogICJpZCIgOiAic21fY2wxMDl5MmVoMDAxbzBlNjA4d2l1cjlycSIsCiAgInZlcnNpb24iIDogIjNmZjQzYjhjNjNkYzZlNjIyYzc1ZmNjMzVjM2FjNDI0ZDY0YzA3NWRmZmU5ZTUxZjIwN2ZiZjY5MTJkNjYzMDQiLAogICJ0eXBlX2RlZnMiIDogIlwiRGlyZWN0cyB0aGUgZXhlY3V0b3IgdG8gaW5jbHVkZSB0aGlzIGZpZWxkIG9yIGZyYWdtZW50IG9ubHkgd2hlbiB0aGUgYGlmYCBhcmd1bWVudCBpcyB0cnVlXCJcbmRpcmVjdGl2ZSBAaW5jbHVkZShcbiAgICBcIkluY2x1ZGVkIHdoZW4gdHJ1ZS5cIlxuICAgIGlmOiBCb29sZWFuIVxuICApIG9uIEZJRUxEIHwgRlJBR01FTlRfU1BSRUFEIHwgSU5MSU5FX0ZSQUdNRU5UXG5cblwiRGlyZWN0cyB0aGUgZXhlY3V0b3IgdG8gc2tpcCB0aGlzIGZpZWxkIG9yIGZyYWdtZW50IHdoZW4gdGhlIGBpZmAnYXJndW1lbnQgaXMgdHJ1ZS5cIlxuZGlyZWN0aXZlIEBza2lwKFxuICAgIFwiU2tpcHBlZCB3aGVuIHRydWUuXCJcbiAgICBpZjogQm9vbGVhbiFcbiAgKSBvbiBGSUVMRCB8IEZSQUdNRU5UX1NQUkVBRCB8IElOTElORV9GUkFHTUVOVFxuXG5kaXJlY3RpdmUgQGV4dGVuZHMgb24gT0JKRUNUIHwgSU5URVJGQUNFXG5cbmRpcmVjdGl2ZSBAZXh0ZXJuYWwgb24gRklFTERfREVGSU5JVElPTlxuXG5kaXJlY3RpdmUgQGtleShmaWVsZHM6IF9GaWVsZFNldCEpIHJlcGVhdGFibGUgb24gT0JKRUNUIHwgSU5URVJGQUNFXG5cbmRpcmVjdGl2ZSBAcHJvdmlkZXMoZmllbGRzOiBfRmllbGRTZXQhKSBvbiBGSUVMRF9ERUZJTklUSU9OXG5cbmRpcmVjdGl2ZSBAcmVxdWlyZXMoZmllbGRzOiBfRmllbGRTZXQhKSBvbiBGSUVMRF9ERUZJTklUSU9OXG5cblwiTWFya3MgdGhlIGZpZWxkLCBhcmd1bWVudCwgaW5wdXQgZmllbGQgb3IgZW51bSB2YWx1ZSBhcyBkZXByZWNhdGVkXCJcbmRpcmVjdGl2ZSBAZGVwcmVjYXRlZChcbiAgICBcIlRoZSByZWFzb24gZm9yIHRoZSBkZXByZWNhdGlvblwiXG4gICAgcmVhc29uOiBTdHJpbmcgPSBcIk5vIGxvbmdlciBzdXBwb3J0ZWRcIlxuICApIG9uIEZJRUxEX0RFRklOSVRJT04gfCBBUkdVTUVOVF9ERUZJTklUSU9OIHwgRU5VTV9WQUxVRSB8IElOUFVUX0ZJRUxEX0RFRklOSVRJT05cblxuXCJFeHBvc2VzIGEgVVJMIHRoYXQgc3BlY2lmaWVzIHRoZSBiZWhhdmlvdXIgb2YgdGhpcyBzY2FsYXIuXCJcbmRpcmVjdGl2ZSBAc3BlY2lmaWVkQnkoXG4gICAgXCJUaGUgVVJMIHRoYXQgc3BlY2lmaWVzIHRoZSBiZWhhdmlvdXIgb2YgdGhpcyBzY2FsYXIuXCJcbiAgICB1cmw6IFN0cmluZyFcbiAgKSBvbiBTQ0FMQVJcblxuXCJcIlwiXG5UaGUgaW50ZXJmYWNlIGZvciBwYWdpbmF0aW5nIHRocm91Z2ggY29sbGVjdGlvbnMgb2YgZWxlbWVudHMuXG5FdmVyeSBjb2xsZWN0aW9uIG9mIGVudGl0aWVzIG5vdCByZXR1cm5lZCBieSBhIG11dGF0aW9uIHJlc3VsdCBzaG91bGRcbnBhZ2luYXRlIHRocm91Z2ggYSBjb25uZWN0aW9uLiBUaGF0IGlzLCBgdHlwZXNgIHdpdGggYSBmaWVsZCB0aGF0IGlzXG5hbiBgYXJyYXlgIHNob3VsZCBiZSBleGNlZWRpbmdseSByYXJlLlxuV2Ugd2FudCBhbGwgY29sbGVjdGlvbnMgb2YgdGhpbmdzIHRvIGJlIHBhZ2luYXRlZC5cblwiXCJcIlxuaW50ZXJmYWNlIENvbm5lY3Rpb24ge1xuICBcIlBhZ2UgaW5mb3JtYXRpb24gZm9yIGFkZGl0aW9uYWwgbmF2aWdhdGlvbiB0aHJvdWdoIHRoaXMgY29ubmVjdGlvbi5cIlxuICBwYWdlSW5mbzogUGFnZUluZm8hXG4gIFwiXCJcIlxuICBUaGUgdG90YWwgY291bnQgb2YgaXRlbXMgbWF0Y2hpbmcgdGhlIGZpbHRlciBjcml0ZXJpYSBzcGVjaWZpZWQgZm9yIHRoaXMgY29ubmVjdGlvbi5cbiAgVGhpcyB2YWx1ZSBtYXkgYmUgYXBwcm94aW1hdGUuIEFuZCB0aGlzIHZhbHVlIG1heSBub3QgYmUgcHJvdmlkZWQgYXQgYWxsLiBOb3QgYWxsIGNvbm5lY3Rpb25zXG4gIGNhbiBiZSBjb3VudGVkIGVhc2lseS5cbiAgXCJcIlwiXG4gIHRvdGFsQ291bnQ6IEludFxufVxuXG51bmlvbiBfRW50aXR5ID0gQ29zdENlbnRlciB8IERlcGFydG1lbnQgfCBFbXBsb3llZSB8IExlZ2FsRW50aXR5IHwgTG9jYXRpb24gfCBUaXRsZVxuXG5cIkFuIGVtcGxveWVlJ3MgY29zdCBjZW50ZXIgZGVmaW5lZCB3aXRoaW4gYSBjb21wYW55J3Mgb3JnYW5pemF0aW9uIGhpZXJhcmNoeS5cIlxudHlwZSBDb3N0Q2VudGVyIEBrZXkoZmllbGRzIDogXCJpZFwiKSB7XG4gIFwiVGhlIG5hbWUgb2YgdGhlIGNvc3QgY2VudGVyIGRlZmluZWQgYnkgdGhlIGN1c3RvbWVyXCJcbiAgZGlzcGxheU5hbWU6IFN0cmluZyFcbiAgXCJUaGUgdW5pcXVlIElEIG9mIHRoZSB0aXRsZS5cIlxuICBpZDogSUQhXG4gIFwiTnVtYmVyIG9mIGVtcGxveWVlcyBhc3NvY2lhdGVkIHdpdGggdGhlIGNvc3QgY2VudGVyXCJcbiAgbWVtYmVyQ291bnQ6IEludFxufVxuXG5cIkNvc3QgY2VudGVyIGNvbm5lY3Rpb24gZm9yIHBhZ2luYXRpb25cIlxudHlwZSBDb3N0Q2VudGVyQ29ubmVjdGlvbiBpbXBsZW1lbnRzIENvbm5lY3Rpb24ge1xuICBlZGdlczogW0Nvc3RDZW50ZXJFZGdlIV0hXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgdG90YWxDb3VudDogSW50XG59XG5cblwiQ29zdCBjZW50ZXIgZWRnZSBmb3IgdGhlIGNvc3QgY2VudGVyIGNvbm5lY3Rpb24uXCJcbnR5cGUgQ29zdENlbnRlckVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBDb3N0Q2VudGVyXG59XG5cbnR5cGUgQ3JlYXRlQ29zdENlbnRlclJlc3VsdCB7XG4gIFwiQ29zdCBjZW50ZXIgdGhhdCB3YXMgY3JlYXRlZC5cIlxuICBjb3N0Q2VudGVyOiBDb3N0Q2VudGVyIVxufVxuXG50eXBlIENyZWF0ZUVtcGxveWVlUmVzdWx0IHtcbiAgXCJUaGUgZW1wbG95ZWUgdGhhdCB3YXMgY3JlYXRlZC5cIlxuICBlbXBsb3llZTogRW1wbG95ZWUhXG59XG5cbnR5cGUgQ3JlYXRlTGVnYWxFbnRpdHlSZXN1bHQge1xuICBcIkxlZ2FsIGVudGl0eSB0aGF0IHdhcyBjcmVhdGVkLlwiXG4gIGxlZ2FsRW50aXR5OiBMZWdhbEVudGl0eSFcbn1cblxudHlwZSBEZWxldGVDb3N0Q2VudGVyUmVzdWx0IHtcbiAgXCJJRCBvZiB0aGUgY29zdCBjZW50ZXIgdGhhdCB3YXMgZGVsZXRlZC5cIlxuICBpZDogSUQhXG59XG5cbnR5cGUgRGVsZXRlTGVnYWxFbnRpdHlSZXN1bHQge1xuICBcIklEIG9mIHRoZSBsZWdhbCBlbnRpdHkgdGhhdCB3YXMgZGVsZXRlZC5cIlxuICBpZDogSUQhXG59XG5cbnR5cGUgRGVsZXRlVGl0bGVSZXN1bHQge1xuICBcIklEIG9mIHRoZSB0aXRsZSB0aGF0IHdhcyBkZWxldGVkLlwiXG4gIGlkOiBJRCFcbn1cblxudHlwZSBEZXBhcnRtZW50IEBleHRlbmRzIEBrZXkoZmllbGRzIDogXCJpZFwiKSB7XG4gIGlkOiBJRCEgQGV4dGVybmFsXG59XG5cblwiQW4gRW1wbG95ZWUgZGVmaW5lZCB3aXRoaW4gYSBjb21wYW55J3Mgb3JnYW5pemF0aW9uIGhpZXJhcmNoeS5cIlxudHlwZSBFbXBsb3llZSBAa2V5KGZpZWxkcyA6IFwiaWRcIikgQGtleShmaWVsZHMgOiBcImN1c3RvbWVyVXNlcklkXCIpIHtcbiAgXCJEaXNwbGF5IG5hbWUgb2YgdGhlIGNvc3QgY2VudGVyLlwiXG4gIGNvc3RDZW50ZXJEaXNwbGF5TmFtZTogU3RyaW5nXG4gIFwiVGhlIGNvc3QgY2VudGVyIHRoZSBlbXBsb3llZSByZXBvcnRzIHdpdGhpbi4gRGVmaW5lZCBpbiB0aGUgM3JkIHBhcnR5IEhSSVMgc3lzdGVtLlwiXG4gIGNvc3RDZW50ZXJJZDogSURcbiAgXCJDdXN0b21lciBJRCwgbnVsbCBpZiB0aGlzIGVtcGxveWVlIGlzIG5vdCB5ZXQgYSBCcmV4IHVzZXIuXCJcbiAgY3VzdG9tZXJVc2VySWQ6IElEXG4gIFwiRGVwYXJ0bWVudCB0aGUgZW1wbG95ZWUgYmVsb25ncyB0b1wiXG4gIGRlcGFydG1lbnQ6IERlcGFydG1lbnRcbiAgXCJGdWxsIG5hbWUgb2YgdGhlIGVtcGxveWVlLlwiXG4gIGRpc3BsYXlOYW1lOiBTdHJpbmchXG4gIFwiRW1haWwgb2YgdGhlIGVtcGxveWVlLlwiXG4gIGVtYWlsOiBTdHJpbmchXG4gIFwiRW1wbG95bWVudCB0eXBlIG9mIHRoZSBlbXBsb3llZS5cIlxuICBlbXBsb3ltZW50VHlwZTogRW1wbG95bWVudFR5cGVcbiAgXCJUaGUgdW5pcXVlIElEIG9mIHRoZSBlbXBsb3llZS5cIlxuICBpZDogSUQhXG4gIFwiV2hldGhlciBvciBub3QgdGhlIGVtcGxveWVlIGlzIGEgbWFuYWdlci5cIlxuICBpc01hbmFnZXI6IEJvb2xlYW5cbiAgXCJEaXNwbGF5IG5hbWUgb2YgdGhlIGxlZ2FsIGVudGl0eS5cIlxuICBsZWdhbEVudGl0eURpc3BsYXlOYW1lOiBTdHJpbmdcbiAgXCJUaGUgbGVnYWwgZW50aXR5IHRoZSBlbXBsb3llZSByZXBvcnRzIHdpdGhpbi4gRGVmaW5lZCBpbiB0aGUgM3JkIHBhcnR5IEhSSVMgc3lzdGVtLlwiXG4gIGxlZ2FsRW50aXR5SWQ6IElEXG4gIFwiTG9jYXRpb24gdGhlIGVtcGxveWVlIGJlbG9uZ3MgdG9cIlxuICBsb2NhdGlvbjogTG9jYXRpb25cbiAgXCJFbXBsb3llZSdzIG1hbmFnZXIncyBmdWxsIG5hbWUuXCJcbiAgbWFuYWdlckRpc3BsYXlOYW1lOiBTdHJpbmdcbiAgXCJJRCBvZiB0aGlzIGVtcGxveWVlJ3MgbWFuYWdlci5cIlxuICBtYW5hZ2VyRW1wbG95ZWVJZDogSURcbiAgXCJJRCBvZiB0aGlzIGVtcGxveWVlIGluIHRoZSAzcmQgcGFydHkgSFJJUyBzeXN0ZW0uXCJcbiAgcmVtb3RlSWQ6IElEXG4gIFwiVGhlIFVzZXJSb2xlIG9mIHRoZSBlbXBsb3llZVwiXG4gIHJvbGU6IFVzZXJSb2xlXG4gIFwiRGlzcGxheSBuYW1lIG9mIHRoaXMgZW1wbG95ZWUncyB0aXRsZS5cIlxuICB0aXRsZURpc3BsYXlOYW1lOiBTdHJpbmdcbiAgXCJJRCBvZiB0aGlzIGVtcGxveWVlJ3MgdGl0bGUuXCJcbiAgdGl0bGVJZDogSURcbn1cblxuXCJFbXBsb3llZSBjb25uZWN0aW9uIGZvciBwYWdpbmF0aW9uXCJcbnR5cGUgRW1wbG95ZWVDb25uZWN0aW9uIGltcGxlbWVudHMgQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbRW1wbG95ZWVFZGdlIV0hXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgdG90YWxDb3VudDogSW50XG59XG5cblwiRW1wbG95ZWUgZWRnZSBmb3IgdGhlIEVtcGxveWVlIGNvbm5lY3Rpb24uXCJcbnR5cGUgRW1wbG95ZWVFZGdlIHtcbiAgY3Vyc29yOiBTdHJpbmdcbiAgbm9kZTogRW1wbG95ZWVcbn1cblxudHlwZSBFbXBsb3llZUVycm9yIHtcbiAgZGVzY3JpcHRpb246IFN0cmluZyFcbiAgZW1wbG95ZWVJZDogSUQhXG59XG5cblwiRmluYW5jaWFsIEFzc2V0IHdyYXBwZXJcIlxudHlwZSBGaW5hbmNpYWxBc3NldCB7XG4gIFwiVGhlIGluc3RydW1lbnQgY29kZSAodXNkLCBldGMuKS4gQ3VycmVudGx5LCBvbmx5IHVzZCBpcyBzdXBwb3J0ZWQuXCJcbiAgaW5zdHJ1bWVudENvZGU6IEZpbmFuY2lhbEluc3RydW1lbnRDb2RlIVxuICBcIlRoZSBhbW91bnQgaW4gY2VudHNcIlxuICBxdWFudGl0eUNlbnRzOiBJbnQhXG59XG5cbnR5cGUgSW1wb3J0RW1wbG95ZWVSZXN1bHQge1xuICBlcnJvcnM6IFtFbXBsb3llZUVycm9yIV0hXG59XG5cblwiQW4gZW1wbG95ZWUncyBsZWdhbCBlbnRpdHkgZGVmaW5lZCB3aXRoaW4gYSBjb21wYW55J3Mgb3JnYW5pemF0aW9uIGhpZXJhcmNoeS5cIlxudHlwZSBMZWdhbEVudGl0eSBAa2V5KGZpZWxkcyA6IFwiaWRcIikge1xuICBcIlRoZSBuYW1lIG9mIHRoZSBsZWdhbCBlbnRpdHkgZGVmaW5lZCBieSB0aGUgY3VzdG9tZXJcIlxuICBkaXNwbGF5TmFtZTogU3RyaW5nIVxuICBcIlRoZSB1bmlxdWUgSUQgb2YgdGhlIHRpdGxlLlwiXG4gIGlkOiBJRCFcbiAgXCJOdW1iZXIgb2YgZW1wbG95ZWVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgbGVnYWwgZW50aXR5XCJcbiAgbWVtYmVyQ291bnQ6IEludFxufVxuXG5cIkxlZ2FsIGVudGl0eSBjb25uZWN0aW9uIGZvciBwYWdpbmF0aW9uXCJcbnR5cGUgTGVnYWxFbnRpdHlDb25uZWN0aW9uIGltcGxlbWVudHMgQ29ubmVjdGlvbiB7XG4gIGVkZ2VzOiBbTGVnYWxFbnRpdHlFZGdlIV0hXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgdG90YWxDb3VudDogSW50XG59XG5cblwiTGVnYWwgZW50aXR5IGVkZ2UgZm9yIHRoZSBjb3N0IGNlbnRlciBjb25uZWN0aW9uLlwiXG50eXBlIExlZ2FsRW50aXR5RWRnZSB7XG4gIGN1cnNvcjogU3RyaW5nXG4gIG5vZGU6IExlZ2FsRW50aXR5XG59XG5cbnR5cGUgTG9jYXRpb24gQGV4dGVuZHMgQGtleShmaWVsZHMgOiBcImlkXCIpIHtcbiAgaWQ6IElEISBAZXh0ZXJuYWxcbn1cblxudHlwZSBNdXRhdGlvbiB7XG4gIFwiQ3JlYXRlIGEgY29zdCBjZW50ZXJcIlxuICBjcmVhdGVDb3N0Q2VudGVyKGlucHV0OiBDcmVhdGVDb3N0Q2VudGVySW5wdXQhKTogQ3JlYXRlQ29zdENlbnRlclJlc3VsdFxuICBcIkNyZWF0ZSBhIG5ldyBlbXBsb3llZVwiXG4gIGNyZWF0ZUVtcGxveWVlKGlucHV0OiBDcmVhdGVFbXBsb3llZUlucHV0ISk6IENyZWF0ZUVtcGxveWVlUmVzdWx0IVxuICBcIkNyZWF0ZSBhIGxlZ2FsIGVudGl0eVwiXG4gIGNyZWF0ZUxlZ2FsRW50aXR5KGlucHV0OiBDcmVhdGVMZWdhbEVudGl0eUlucHV0ISk6IENyZWF0ZUxlZ2FsRW50aXR5UmVzdWx0XG4gIFwiRGVsZXRlIGEgY29zdCBjZW50ZXJcIlxuICBkZWxldGVDb3N0Q2VudGVyKGlucHV0OiBEZWxldGVDb3N0Q2VudGVySW5wdXQhKTogRGVsZXRlQ29zdENlbnRlclJlc3VsdFxuICBcIkRlbGV0ZSBhIGxlZ2FsIGVudGl0eVwiXG4gIGRlbGV0ZUxlZ2FsRW50aXR5KGlucHV0OiBEZWxldGVMZWdhbEVudGl0eUlucHV0ISk6IERlbGV0ZUxlZ2FsRW50aXR5UmVzdWx0XG4gIFwiRGVsZXRlIGEgdGl0bGVcIlxuICBkZWxldGVUaXRsZShpbnB1dDogRGVsZXRlVGl0bGVJbnB1dCEpOiBEZWxldGVDb3N0Q2VudGVyUmVzdWx0XG4gIFwiSW1wb3J0IGVtcGxveWVlcyBmcm9tIGFuIEhSSVMgY29ubmVjdGlvbi5cIlxuICBpbXBvcnRFbXBsb3llZXMoaW5wdXQ6IEltcG9ydEVtcGxveWVlSW5wdXQhKTogSW1wb3J0RW1wbG95ZWVSZXN1bHQhXG4gIFwiU3VzcGVuZCB1c2Vyc1wiXG4gIHN1c3BlbmRVc2VycyhpbnB1dDogU3VzcGVuZFVzZXJzSW5wdXQhKTogU3VzcGVuZFVzZXJzUmVzdWx0XG4gIFwiVXBkYXRlIGEgY29zdCBjZW50ZXJcIlxuICB1cGRhdGVDb3N0Q2VudGVyKGlucHV0OiBVcGRhdGVDb3N0Q2VudGVySW5wdXQhKTogVXBkYXRlQ29zdENlbnRlclJlc3VsdFxuICBcIlVwZGF0ZSBhbiBFbXBsb3llZS5cIlxuICB1cGRhdGVFbXBsb3llZShpbnB1dDogVXBkYXRlRW1wbG95ZWVJbnB1dCEpOiBVcGRhdGVFbXBsb3llZVJlc3VsdFxuICBcIlVwZGF0ZSBhIGxlZ2FsIGVudGl0eVwiXG4gIHVwZGF0ZUxlZ2FsRW50aXR5KGlucHV0OiBVcGRhdGVMZWdhbEVudGl0eUlucHV0ISk6IFVwZGF0ZUxlZ2FsRW50aXR5UmVzdWx0XG59XG5cbnR5cGUgUGFnZUluZm8ge1xuICBcIldoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS5cIlxuICBlbmRDdXJzb3I6IFN0cmluZ1xuICBcIldoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/XCJcbiAgaGFzTmV4dFBhZ2U6IEJvb2xlYW4hXG4gIFwiV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/XCJcbiAgaGFzUHJldmlvdXNQYWdlOiBCb29sZWFuIVxuICBcIldoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuXCJcbiAgc3RhcnRDdXJzb3I6IFN0cmluZ1xufVxuXG50eXBlIFF1ZXJ5IHtcbiAgX2VudGl0aWVzKHJlcHJlc2VudGF0aW9uczogW19BbnkhXSEpOiBbX0VudGl0eV0hXG4gIF9zZXJ2aWNlOiBfU2VydmljZVxuICBcIkdldCBjb3N0IGNlbnRlciBieSBpZGVudGlmaWVyXCJcbiAgY29zdENlbnRlcihpZGVudGlmaWVyOiBDb3N0Q2VudGVySWRlbnRpZmllciEpOiBDb3N0Q2VudGVyXG4gIFwiTGlzdCBjb3N0IGNlbnRlcnNcIlxuICBjb3N0Q2VudGVycyhwYWdlOiBQYWdpbmF0aW9uSW5wdXQpOiBDb3N0Q2VudGVyQ29ubmVjdGlvblxuICBcIlwiXCJcbiAgR2V0IGFuIGVtcGxveWVlIGJ5IGlkIG9yIGN1c3RvbWVyIHVzZXIgaWQuXG4gIE9yLCBpZiBubyBpZCBpcyBwcm92aWRlZCwgZ2V0IHRoZSBlbXBsb3llZSBhc3NvY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgQnJleENvbnRleHQuXG4gIFwiXCJcIlxuICBlbXBsb3llZShpZGVudGlmaWVyOiBFbXBsb3llZUlkZW50aWZpZXIpOiBFbXBsb3llZVxuICBcIkxpc3QgZW1wbG95ZWVzXCJcbiAgZW1wbG95ZWVzKGZpbHRlcjogRW1wbG95ZWVGaWx0ZXJJbnB1dCwgcGFnZTogUGFnaW5hdGlvbklucHV0KTogRW1wbG95ZWVDb25uZWN0aW9uXG4gIFwiTGlzdCBsZWdhbCBlbnRpdGllc1wiXG4gIGxlZ2FsRW50aXRpZXMocGFnZTogUGFnaW5hdGlvbklucHV0KTogTGVnYWxFbnRpdHlDb25uZWN0aW9uXG4gIFwiR2V0IGxlZ2FsIGVudGl0eSBieSBpZGVudGlmaWVyXCJcbiAgbGVnYWxFbnRpdHkoaWRlbnRpZmllcjogTGVnYWxFbnRpdHlJZGVudGlmaWVyISk6IExlZ2FsRW50aXR5XG4gIFwiTGlzdCB0aXRsZXNcIlxuICB0aXRsZXMocGFnZTogUGFnaW5hdGlvbklucHV0KTogVGl0bGVDb25uZWN0aW9uXG59XG5cbnR5cGUgU3VzcGVuZFVzZXJzUmVzdWx0IHtcbiAgZXJyb3JzOiBbVXNlckVycm9yIV0hXG59XG5cblwiQW4gZW1wbG95ZWUncyB0aXRsZSBkZWZpbmVkIHdpdGhpbiBhIGNvbXBhbnkncyBvcmdhbml6YXRpb24gaGllcmFyY2h5LlwiXG50eXBlIFRpdGxlIEBrZXkoZmllbGRzIDogXCJpZFwiKSB7XG4gIFwiVGhlIG5hbWUgb2YgdGhlIHRpdGxlIGRlZmluZWQgYnkgdGhlIGN1c3RvbWVyXCJcbiAgZGlzcGxheVRpdGxlOiBTdHJpbmchXG4gIFwiVGhlIHVuaXF1ZSBJRCBvZiB0aGUgdGl0bGUuXCJcbiAgaWQ6IElEIVxuICBcIk51bWJlciBvZiBlbXBsb3llZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSB0aXRsZVwiXG4gIG1lbWJlckNvdW50OiBJbnRcbiAgXCJcIlwiXG4gIFdoZXJlIGluIHRoZSBvcmdhbml6YXRpb25hbCBoaWVyYXJjaHkgdGhpcyB0aXRsZSBzaXRzLiBMb3dlciByYW5rIGlzIGhpZ2hlciB1cCwgZm9yIGV4YW1wbGUgdGhlIENFTyBtaWdodCBiZSByYW5rIDAuXG4gIE51bGwgaWYgbm90IHNldC5cbiAgXCJcIlwiXG4gIHJhbms6IEludFxufVxuXG5cIlRpdGxlIGNvbm5lY3Rpb24gZm9yIHBhZ2luYXRpb25cIlxudHlwZSBUaXRsZUNvbm5lY3Rpb24gaW1wbGVtZW50cyBDb25uZWN0aW9uIHtcbiAgZWRnZXM6IFtUaXRsZUVkZ2UhXSFcbiAgcGFnZUluZm86IFBhZ2VJbmZvIVxuICB0b3RhbENvdW50OiBJbnRcbn1cblxuXCJUaXRsZSBlZGdlIGZvciB0aGUgVGl0bGUgY29ubmVjdGlvbi5cIlxudHlwZSBUaXRsZUVkZ2Uge1xuICBjdXJzb3I6IFN0cmluZ1xuICBub2RlOiBUaXRsZVxufVxuXG50eXBlIFVwZGF0ZUNvc3RDZW50ZXJSZXN1bHQge1xuICBcIkNvc3QgY2VudGVyIHRoYXQgd2FzIHVwZGF0ZWQuXCJcbiAgY29zdENlbnRlcjogQ29zdENlbnRlciFcbn1cblxudHlwZSBVcGRhdGVFbXBsb3llZVJlc3VsdCB7XG4gIFwiVGhlIGVtcGxveWVlIHRoYXQgd2FzIHVwZGF0ZWQuXCJcbiAgZW1wbG95ZWU6IEVtcGxveWVlIVxufVxuXG50eXBlIFVwZGF0ZUxlZ2FsRW50aXR5UmVzdWx0IHtcbiAgXCJMZWdhbCBlbnRpdHkgdGhhdCB3YXMgdXBkYXRlZC5cIlxuICBsZWdhbEVudGl0eTogTGVnYWxFbnRpdHkhXG59XG5cbnR5cGUgVXNlckVycm9yIHtcbiAgZGVzY3JpcHRpb246IFN0cmluZyFcbiAgdXNlcklkOiBJRCFcbn1cblxudHlwZSBfU2VydmljZSB7XG4gIHNkbDogU3RyaW5nIVxufVxuXG5lbnVtIENvc3RDZW50ZXJJZGVudGlmaWVyVHlwZSB7XG4gIERJU1BMQVlfTkFNRVxuICBJRFxufVxuXG5lbnVtIEVtcGxveWVlSWRlbnRpZmllclR5cGUge1xuICBDVVNUT01FUl9VU0VSX0lEXG4gIEVNQUlMXG4gIElEXG4gIFJFTU9URV9JRFxufVxuXG5lbnVtIEVtcGxveWVlU3RhdHVzRmlsdGVyIHtcbiAgVE9fQkVfRElTQUJMRURcbiAgVE9fQkVfSU5WSVRFRFxufVxuXG5lbnVtIEVtcGxveW1lbnRTdGF0dXMge1xuICBBQ1RJVkVcbiAgSU5BQ1RJVkVcbiAgUEVORElOR1xufVxuXG5lbnVtIEVtcGxveW1lbnRUeXBlIHtcbiAgQ09OVFJBQ1RPUlxuICBGUkVFTEFOQ0VcbiAgRlVMTF9USU1FXG4gIElOVEVSTlxuICBQQVJUX1RJTUVcbn1cblxuXCJUaGUgdHlwZSBvZiB0aGUgRXhwZW5zZS5cIlxuZW51bSBFeHBlbnNlVHlwZSB7XG4gIFwiQSBiaWxsIHBheSBleHBlbnNlLlwiXG4gIEJJTExQQVlcbiAgXCJBIGNhcmQgZXhwZW5zZS5cIlxuICBDQVJEXG4gIFwiQSByZWltYnVyc2VtZW50IGV4cGVuc2UuXCJcbiAgUkVJTUJVUlNFTUVOVFxufVxuXG5cIlwiXCJcbiBGcm9tIEFQSXYxXG4gaHR0cHM6Ly9naXRodWIuY29tL2JyZXhocS9jcmVkaXRfY2FyZC9ibG9iL21haW4vYXBwcy9hcGkvbGliL2FwaS93ZWIvc2NoZW1hL2ZpbmFuY2lhbF9hc3NldC5leCNMN1xuIGh0dHBzOi8vZ2l0aHViLmNvbS9icmV4aHEvY3JlZGl0X2NhcmQvYmxvYi9tYWluL2xpYnJhcmllcy9icmV4X2ZpbmFuY2lhbF9hc3NldC9saWIvZmluYW5jaWFsX2luc3RydW1lbnRfY29uc3RhbnRzLmV4I0w5NjJcblwiXCJcIlxuZW51bSBGaW5hbmNpYWxJbnN0cnVtZW50Q29kZSB7XG4gIEFFRFxuICBBRk5cbiAgQUxMXG4gIEFNRFxuICBBTkdcbiAgQU9BXG4gIEFSU1xuICBBVURcbiAgQVdHXG4gIEFaTlxuICBCQU1cbiAgQkJEXG4gIEJEVFxuICBCR05cbiAgQkhEXG4gIEJJRlxuICBCTURcbiAgQk5EXG4gIEJPQlxuICBCT1ZcbiAgQlJMXG4gIEJTRFxuICBCVE5cbiAgQldQXG4gIEJZTlxuICBCWkRcbiAgQ0FEXG4gIENERlxuICBDSEVcbiAgQ0hGXG4gIENIV1xuICBDTEZcbiAgQ0xQXG4gIENOWVxuICBDT1BcbiAgQ09VXG4gIENSQ1xuICBDUllQVE9fQlRDXG4gIENSWVBUT19FVEhcbiAgQ1JZUFRPX1VTRENcbiAgQ1VDXG4gIENVUFxuICBDVkVcbiAgQ1pLXG4gIERKRlxuICBES0tcbiAgRE9QXG4gIERaRFxuICBFR1BcbiAgRVJOXG4gIEVUQlxuICBFVVJcbiAgRkpEXG4gIEZLUFxuICBHQlBcbiAgR0VMXG4gIEdIU1xuICBHSVBcbiAgR01EXG4gIEdORlxuICBHVFFcbiAgR1lEXG4gIEhLRFxuICBITkxcbiAgSFJLXG4gIEhUR1xuICBIVUZcbiAgSURSXG4gIElMU1xuICBJTlJcbiAgSVFEXG4gIElSUlxuICBJU0tcbiAgSk1EXG4gIEpPRFxuICBKUFlcbiAgS0VTXG4gIEtHU1xuICBLSFJcbiAgS01GXG4gIEtQV1xuICBLUldcbiAgS1dEXG4gIEtZRFxuICBLWlRcbiAgTEFLXG4gIExCUFxuICBMS1JcbiAgTFJEXG4gIExTTFxuICBMWURcbiAgTUFEXG4gIE1ETFxuICBNR0FcbiAgTUtEXG4gIE1NS1xuICBNTlRcbiAgTU9QXG4gIE1SVVxuICBNVVJcbiAgTVZSXG4gIE1XS1xuICBNWE5cbiAgTVhWXG4gIE1ZUlxuICBNWk5cbiAgTkFEXG4gIE5BU0RBUV9EQUdYWFxuICBOQVNEQVFfREdDWFhcbiAgTkFTREFRX0RHVlhYXG4gIE5BU0RBUV9EUEdYWFxuICBOQVNEQVFfR0dCWFhcbiAgTkFTREFRX0dHRFhYXG4gIE5BU0RBUV9HR1NYWFxuICBOQVNEQVFfR1NCWFhcbiAgTkdOXG4gIE5JT1xuICBOT0tcbiAgTlBSXG4gIE5aRFxuICBPTVJcbiAgUEFCXG4gIFBFTlxuICBQR0tcbiAgUEhQXG4gIFBLUlxuICBQTE5cbiAgUFlHXG4gIFFBUlxuICBST05cbiAgUlNEXG4gIFJVQlxuICBSV0ZcbiAgU0FSXG4gIFNCRFxuICBTQ1JcbiAgU0RHXG4gIFNFS1xuICBTR0RcbiAgU0hQXG4gIFNMTFxuICBTT1NcbiAgU1JEXG4gIFNTUFxuICBTVE5cbiAgU1ZDXG4gIFNZUFxuICBTWkxcbiAgVEhCXG4gIFRKU1xuICBUTVRcbiAgVE5EXG4gIFRPUFxuICBUUllcbiAgVFREXG4gIFRXRFxuICBUWlNcbiAgVUFIXG4gIFVHWFxuICBVU0RcbiAgVVNOXG4gIFVZSVxuICBVWVVcbiAgVVlXXG4gIFVaU1xuICBWRVNcbiAgVk5EXG4gIFZVVlxuICBXU1RcbiAgWEFGXG4gIFhBR1xuICBYQVVcbiAgWEJBXG4gIFhCQlxuICBYQkNcbiAgWEJEXG4gIFhDRFxuICBYRFJcbiAgWE9GXG4gIFhQRFxuICBYUEZcbiAgWFBUXG4gIFhTVVxuICBYVFNcbiAgWFVBXG4gIFhYWFxuICBZRVJcbiAgWkFSXG4gIFpNV1xuICBaV0xcbn1cblxuZW51bSBJbXBvcnRSdWxlVHlwZSB7XG4gIEFVVE9cbiAgTUFOVUFMXG59XG5cblwiXCJcIlxuVGltZSBidWNrZXR0aW5nIHN0cmF0ZWd5XG4tIFNUQVJUOiBCdWNrZXRzIHN0YXJ0IGF0IHRoZSBzdGFydHNBdCB0aW1lc3RhbXBcbi0gRU5EOiBCdWNrZXRzIHN0YXJ0IGF0IHRoZSBlbmRzQXQgdGltZXN0YW1wXG4tIENBTEVOREFSOiBCdWNrZXRzIGFyZSBhbGlnbmVkIHdpdGggdGhlIGNhbGVuZGFyIHVuaXRzIChlLmcuIFdFRUtTKSBidXQgY2FuIGluY2x1ZGVcbnBhcnRpYWwgYnVja2V0cyBiYXNlZCBvbiB0aGUgc3RhcnRzQXQgYW5kIGVuZHNBdCB0aW1lYnVja2V0c1xuXCJcIlwiXG5lbnVtIEluc2lnaHRzVGltZUJ1Y2tldFN0cmF0ZWd5IHtcbiAgQ0FMRU5EQVJcbiAgRU5EXG4gIFNUQVJUXG59XG5cblwiR2VuZXJpYyB0aW1lIHVuaXRcIlxuZW51bSBJbnNpZ2h0c1RpbWVVbml0IHtcbiAgREFZXG4gIE1PTlRIXG4gIFFVQVJURVJcbiAgV0VFS1xuICBZRUFSXG59XG5cbmVudW0gTGVnYWxFbnRpdHlJZGVudGlmaWVyVHlwZSB7XG4gIERJU1BMQVlfTkFNRVxuICBJRFxufVxuXG5lbnVtIE9yZGVyQnlEaXJlY3Rpb24ge1xuICBBU0NFTkRJTkdcbiAgREVTQ0VORElOR1xufVxuXG5cIlRoZSB0eXBlIG9mIHRoZSByZXF1ZXN0IGFjdGlvbi5cIlxuZW51bSBSZXF1ZXN0QWN0aW9uVHlwZSB7XG4gIFwiQSBtZW1vIGlzIHJlcXVlc3RlZC5cIlxuICBNRU1PXG4gIFwiQSByZWNlaXB0IGlzIHJlcXVlc3RlZC5cIlxuICBSRUNFSVBUXG4gIFwiQSBtYW5hZ2VyIChvciBvdGhlcikgcmV2aWV3IGlzIHJlcXVlc3RlZC5cIlxuICBSRVZJRVdcbn1cblxuXCJUaGUgdHlwZSBvZiB0aGUgUmVxdWVzdC5cIlxuZW51bSBSZXF1ZXN0VHlwZSB7XG4gIFwiVGhpcyBpcyBhIGJ1ZGdldCByZXF1ZXN0LlwiXG4gIEJVREdFVFxuICBcIlRoaXMgaXMgYW4gZXhwZW5zZSByZXF1ZXN0LlwiXG4gIEVYUEVOU0Vcbn1cblxuZW51bSBVc2VyUm9sZSB7XG4gIEFDQ09VTlRfQURNSU5cbiAgQVBfQ0xFUktcbiAgQk9PS0tFRVBFUlxuICBDQVJEX0FETUlOXG4gIEVNUExPWUVFXG4gIEVNUExPWUVFX1dJVEhPVVRfQ09SUF9DQVJEU1xufVxuXG5cIklTT3ogZGF0ZVwiXG5zY2FsYXIgRGF0ZVxuXG5cIkpzb24gb2JqZWN0XCJcbnNjYWxhciBKc29uXG5cblwiNjRCaXQgaW50ZWdlclwiXG5zY2FsYXIgTG9uZ1xuXG5cIklTT3ogdGltZVwiXG5zY2FsYXIgVGltZVxuXG5zY2FsYXIgX0FueVxuXG5zY2FsYXIgX0ZpZWxkU2V0XG5cbmlucHV0IENvc3RDZW50ZXJJZGVudGlmaWVyIHtcbiAgZGlzcGxheU5hbWU6IFN0cmluZ1xuICBpZDogSURcbiAgdHlwZTogQ29zdENlbnRlcklkZW50aWZpZXJUeXBlIVxufVxuXG5pbnB1dCBDb3N0Q2VudGVySW5wdXQge1xuICBcIk5hbWUgb2YgdGhlIGNvc3QgY2VudGVyLlwiXG4gIG5hbWU6IFN0cmluZ1xufVxuXG5pbnB1dCBDcmVhdGVDb3N0Q2VudGVySW5wdXQge1xuICBcImNsaWVudE11dGF0aW9uSWRcIlxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmdcbiAgXCJOYW1lIG9mIHRoZSBjb3N0IGNlbnRlci5cIlxuICBuYW1lOiBTdHJpbmchXG59XG5cbmlucHV0IENyZWF0ZUVtcGxveWVlSW5wdXQge1xuICBcIlRoZSBhZ2dyZWdhdG9ySWQgZm9yIHRoZSBlbXBsb3llZS5cIlxuICBhZ2dyZWdhdG9ySWQ6IFN0cmluZ1xuICBcIlRoZSBjb3N0Q2VudGVySWQgZm9yIHRoZSBlbXBsb3llZS5cIlxuICBjb3N0Q2VudGVySWQ6IFN0cmluZ1xuICBcIlRoZSBkZXBhcnRtZW50SWQgZm9yIHRoZSBlbXBsb3llZS5cIlxuICBkZXBhcnRtZW50SWQ6IFN0cmluZ1xuICBcIlRoZSBlbWFpbCBmb3IgdGhlIGVtcGxveWVlLlwiXG4gIGVtYWlsOiBTdHJpbmchXG4gIFwiVGhlIGVtcGxveW1lbnQgc3RhdHVzIGZvciB0aGUgZW1wbG95ZWVcIlxuICBlbXBsb3ltZW50U3RhdHVzOiBFbXBsb3ltZW50U3RhdHVzXG4gIFwiVGhlIGVtcGxveW1lbnQgdHlwZSBmb3IgdGhlIGVtcGxveWVlLlwiXG4gIGVtcGxveW1lbnRUeXBlOiBFbXBsb3ltZW50VHlwZVxuICBcIlRoZSBmaXJzdCBuYW1lIGZvciB0aGUgZW1wbG95ZWUuXCJcbiAgZmlyc3ROYW1lOiBTdHJpbmchXG4gIFwiVGhlIGxhc3QgbmFtZSBmb3IgdGhlIGVtcGxveWVlLlwiXG4gIGxhc3ROYW1lOiBTdHJpbmchXG4gIFwiVGhlIGxlZ2FsRW50aXR5SWQgZm9yIHRoZSBlbXBsb3llZS5cIlxuICBsZWdhbEVudGl0eUlkOiBTdHJpbmdcbiAgXCJUaGUgbG9jYXRpb25JZCBmb3IgdGhlIGVtcGxveWVlLlwiXG4gIGxvY2F0aW9uSWQ6IFN0cmluZ1xuICBcIlRoZSBtYW5hZ2VyIGVtcGxveWVlIGlkIGZvciB0aGUgZW1wbG95ZWUuXCJcbiAgbWFuYWdlckVtcGxveWVlSWQ6IFN0cmluZ1xuICBcIlRoZSByZW1vdGVJZCBmb3IgdGhlIGVtcGxveWVlLlwiXG4gIHJlbW90ZUlkOiBTdHJpbmdcbiAgXCJUaGUgSUQgb2YgdGhlIGVtcGxveWVlJ3MgdGl0bGUuXCJcbiAgdGl0bGVJZDogU3RyaW5nXG4gIFwiVGhlIHVzZXIncyBzZXR0aW5ncyBpbmNsdWRpbmcgdGhlIHVzZXIgcm9sZSBmb3IgdGhlIGVtcGxveWVlXCJcbiAgdXNlclNldHRpbmc6IFVzZXJTZXR0aW5nXG59XG5cbmlucHV0IENyZWF0ZUxlZ2FsRW50aXR5SW5wdXQge1xuICBcImNsaWVudE11dGF0aW9uSWRcIlxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmdcbiAgXCJOYW1lIG9mIHRoZSBsZWdhbCBlbnRpdHkuXCJcbiAgbmFtZTogU3RyaW5nIVxufVxuXG5pbnB1dCBEZWxldGVDb3N0Q2VudGVySW5wdXQge1xuICBcImNsaWVudE11dGF0aW9uSWRcIlxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmdcbiAgXCJUaGUgSUQgb2YgdGhlIGNvc3QgY2VudGVyIHRvIGRlbGV0ZS5cIlxuICBpZDogSUQhXG59XG5cbmlucHV0IERlbGV0ZUxlZ2FsRW50aXR5SW5wdXQge1xuICBcImNsaWVudE11dGF0aW9uSWRcIlxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmdcbiAgXCJUaGUgSUQgb2YgdGhlIGxlZ2FsIGVudGl0eSB0byBkZWxldGUuXCJcbiAgaWQ6IElEIVxufVxuXG5pbnB1dCBEZWxldGVUaXRsZUlucHV0IHtcbiAgXCJjbGllbnRNdXRhdGlvbklkXCJcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nXG4gIFwiVGhlIElEIG9mIHRoZSB0aXRsZSB0byBkZWxldGUuXCJcbiAgaWQ6IElEIVxufVxuXG5cIkZpbHRlcnMgZm9yIGxpc3QgZW1wbG95ZWVzIHF1ZXJ5LiBSZWNvcmRzIHJldHVybmVkIHdpbGwgbWF0Y2ggQUxMIGZpbHRlcnMuXCJcbmlucHV0IEVtcGxveWVlRmlsdGVySW5wdXQge1xuICBlbXBsb3llZVN0YXR1c0ZpbHRlcjogRW1wbG95ZWVTdGF0dXNGaWx0ZXJcbiAgaWRlbnRpZmllcnM6IFtFbXBsb3llZUlkZW50aWZpZXIhXVxuICBtYW5hZ2VyRW1wbG95ZWVJZHM6IFtJRCFdXG4gIG5hbWU6IFN0cmluZ1xuICB0aXRsZUlkczogW0lEIV1cbn1cblxuaW5wdXQgRW1wbG95ZWVJZGVudGlmaWVyIHtcbiAgY3VzdG9tZXJVc2VySWQ6IElEXG4gIGVtYWlsOiBTdHJpbmdcbiAgaWQ6IElEXG4gIHJlbW90ZUlkOiBJRFxuICB0eXBlOiBFbXBsb3llZUlkZW50aWZpZXJUeXBlIVxufVxuXG5pbnB1dCBFbXBsb3llZVVwZGF0ZUlucHV0IHtcbiAgXCJUaGUgbmV3IGFnZ3JlZ2F0b3JJZCBmb3IgdGhlIGVtcGxveWVlLlwiXG4gIGFnZ3JlZ2F0b3JJZDogSURcbiAgXCJUaGUgbmV3IGNvc3RDZW50ZXJJZCBmb3IgdGhlIGVtcGxveWVlLlwiXG4gIGNvc3RDZW50ZXJJZDogSURcbiAgXCJUaGUgbmV3IGRlcGFydG1lbnRJZCBmb3IgdGhlIGVtcGxveWVlLlwiXG4gIGRlcGFydG1lbnRJZDogSURcbiAgXCJUaGUgbmV3IGVtYWlsIGZvciB0aGUgZW1wbG95ZWUuXCJcbiAgZW1haWw6IFN0cmluZ1xuICBcIlRoZSBuZXcgZW1wbG95bWVudCB0eXBlIGZvciB0aGUgZW1wbG95ZWUuXCJcbiAgZW1wbG95bWVudFR5cGU6IEVtcGxveW1lbnRUeXBlXG4gIFwiVGhlIG5ldyBmaXJzdCBuYW1lIGZvciB0aGUgZW1wbG95ZWUuXCJcbiAgZmlyc3ROYW1lOiBTdHJpbmdcbiAgXCJUaGUgbmV3IGxhc3QgbmFtZSBmb3IgdGhlIGVtcGxveWVlLlwiXG4gIGxhc3ROYW1lOiBTdHJpbmdcbiAgXCJUaGUgbmV3IGxlZ2FsRW50aXR5SWQgZm9yIHRoZSBlbXBsb3llZS5cIlxuICBsZWdhbEVudGl0eUlkOiBJRFxuICBcIlRoZSBuZXcgbG9jYXRpb25JZCBmb3IgdGhlIGVtcGxveWVlLlwiXG4gIGxvY2F0aW9uSWQ6IElEXG4gIFwiVGhlIG5ldyBtYW5hZ2VyIGVtcGxveWVlIGlkIGZvciB0aGUgZW1wbG95ZWUuXCJcbiAgbWFuYWdlckVtcGxveWVlSWQ6IElEXG4gIFwiVGhlIG5ldyByZW1vdGVJZCBmb3IgdGhlIGVtcGxveWVlLlwiXG4gIHJlbW90ZUlkOiBJRFxuICBcIlRoZSBuZXcgdGl0bGUgKGRpc3BsYXkgdmFsdWUsIG5vdCBpZCkgZm9yIHRoZSBlbXBsb3llZS5cIlxuICB0aXRsZTogU3RyaW5nXG4gIFwiTk9URTogTm90IGN1cnJlbnRseSBpbXBsZW1lbnRlZCBvbiB0aGUgYmFja2VuZCBhbmQgbWF5IGJlIGRlcHJlY2F0ZWQgZW50aXJlbHkuXCJcbiAgdXNlclNldHRpbmc6IFVzZXJTZXR0aW5nXG59XG5cblwiXCJcIlxuIEZyb20gQVBJdjFcbiBodHRwczovL2dpdGh1Yi5jb20vYnJleGhxL2NyZWRpdF9jYXJkL2Jsb2IvbWFpbi9hcHBzL2FwaS9saWIvYXBpL3dlYi9zY2hlbWEvZmluYW5jaWFsX2Fzc2V0LmV4I0wxM1xuXCJcIlwiXG5pbnB1dCBGaW5hbmNpYWxBc3NldElucHV0IHtcbiAgXCJUaGUgaW5zdHJ1bWVudCBjb2RlICh1c2QsIGV0Yy4pLiBDdXJyZW50bHksIG9ubHkgdXNkIGlzIHN1cHBvcnRlZC5cIlxuICBpbnN0cnVtZW50Q29kZTogRmluYW5jaWFsSW5zdHJ1bWVudENvZGUgPSBVU0RcbiAgXCJUaGUgYW1vdW50IGluIGNlbnRzXCJcbiAgcXVhbnRpdHlDZW50czogSW50XG59XG5cbmlucHV0IEZpbmFuY2lhbEFzc2V0UmFuZ2VJbnB1dCB7XG4gIFwiRXhjbHVzaXZlLCBvbmx5IGNvbnNpZGVycyBnaXZlbiBjdXJyZW5jeSwgcmVxdWlyZWQgdG8gaGF2ZSBzYW1lIGN1cnJlbmN5IHdoZW4gbWluQW1vdW50IGlzIHByb3ZpZGVkLlwiXG4gIG1heEFtb3VudDogRmluYW5jaWFsQXNzZXRJbnB1dFxuICBcIkluY2x1c2l2ZSwgb25seSBjb25zaWRlcnMgZ2l2ZW4gY3VycmVuY3ksIHJlcXVpcmVkIHRvIGhhdmUgc2FtZSBjdXJyZW5jeSB3aGVuIG1heEFtb3VudCBpcyBwcm92aWRlZC5cIlxuICBtaW5BbW91bnQ6IEZpbmFuY2lhbEFzc2V0SW5wdXRcbn1cblxuaW5wdXQgSW1wb3J0RW1wbG95ZWVJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZ1xuICBjb25uZWN0aW9uSWQ6IElEIVxuICBydWxlOiBJbXBvcnRSdWxlIVxuICBzZXR0aW5nOiBVc2VyU2V0dGluZyFcbn1cblxuaW5wdXQgSW1wb3J0UnVsZSB7XG4gIGVtcGxveW1lbnRUeXBlczogW0VtcGxveW1lbnRUeXBlIV1cbiAgaWRzOiBbSUQhXVxuICB0eXBlOiBJbXBvcnRSdWxlVHlwZSFcbn1cblxuaW5wdXQgTGVnYWxFbnRpdHlJZGVudGlmaWVyIHtcbiAgZGlzcGxheU5hbWU6IFN0cmluZ1xuICBpZDogSURcbiAgdHlwZTogTGVnYWxFbnRpdHlJZGVudGlmaWVyVHlwZSFcbn1cblxuaW5wdXQgTGVnYWxFbnRpdHlJbnB1dCB7XG4gIFwiTmFtZSBvZiB0aGUgbGVnYWwgZW50aXR5LlwiXG4gIG5hbWU6IFN0cmluZ1xufVxuXG5cIlwiXCJcblBhZ2luYXRpb24gcGFyYW1ldGVycyBmb3IgZW51bWVyYXRpbmcgaXRlbXMgaW4gYSBjb25uZWN0aW9uLlxuT25seSB7Zmlyc3QsIGFmdGVyfSBPUiB7bGFzdCwgYmVmb3JlfSBwYWlycyBjYW4gYmUgc2V0LlxuZS5nLiBJZiB7Zmlyc3QsIGJlZm9yZX0gaXMgc2V0LCB0aGF0IHdpbGwgY2F1c2UgYSB2YWxpZGF0aW9uIGVycm9yLlxuVGhlIGN1cnNvcnMgYXJlIG9wdGlvbmFsLiBXaXRob3V0IGEgc3BlY2lmaWVkIGN1cnNvciwgaXQgaXMgYXNzdW1lZCB0byBzdGFydCBhdFxudGhlIGZpcnN0IGl0ZW0gKGZvciBgZmlyc3RgKSBvciBsYXN0IGl0ZW0gKGZvciBgbGFzdGApIG9mIHRoZSBjb2xsZWN0aW9uLlxuXCJcIlwiXG5pbnB1dCBQYWdpbmF0aW9uSW5wdXQge1xuICBcIlRoZSBjdXJzb3IgdG8gc3RhcnQgdGhlIHBhZ2UgYXQgKGV4Y2x1c2l2ZSkuXCJcbiAgYWZ0ZXI6IFN0cmluZ1xuICBcIlRoZSBjdXJzb3IgdG8gZW5kIHRoZSBwYWdlIGF0IChleGNsdXNpdmUpLlwiXG4gIGJlZm9yZTogU3RyaW5nXG4gIFwiVGhlIG51bWJlciBvZiBpdGVtcyB0byByZXR1cm4gaW4gYSBwYWdlIGFmdGVyIHRoZSBgYWZ0ZXJgIGN1cnNvci5cIlxuICBmaXJzdDogSW50XG4gIFwiVGhlIG51bWJlciBvZiBpdGVtcyB0byByZXR1cm4gaW4gYSBwYWdlIHByaW9yIHRvIHRoZSBgYmVmb3JlYCBjdXJzb3IuXCJcbiAgbGFzdDogSW50XG59XG5cbmlucHV0IFN1c3BlbmRVc2Vyc0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nXG4gIHVzZXJJZHM6IFtJRCFdIVxufVxuXG5pbnB1dCBUaW1lSW50ZXJ2YWxJbnB1dCB7XG4gIFwiRXhjbHVzaXZlIGVuZCBhdC5cIlxuICBlbmRBdDogVGltZVxuICBcIkluY2x1c2l2ZSBzdGFydCBhdC5cIlxuICBzdGFydEF0OiBUaW1lXG59XG5cbmlucHV0IFVwZGF0ZUNvc3RDZW50ZXJJbnB1dCB7XG4gIFwiY2xpZW50TXV0YXRpb25JZFwiXG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZ1xuICBcIkFsbCBmaWVsZHMgYXJlIG9wdGlvbmFsLiBPbmx5IHRob3NlIHByb3ZpZGVkIHdpbGwgYmUgdXBkYXRlZC5cIlxuICBjb3N0Q2VudGVyOiBDb3N0Q2VudGVySW5wdXQhXG4gIFwiVGhlIElEIG9mIHRoZSBjb3N0IGNlbnRlciB0byB1cGRhdGUuXCJcbiAgaWQ6IElEIVxufVxuXG5pbnB1dCBVcGRhdGVFbXBsb3llZUlucHV0IHtcbiAgXCJjbGllbnRNdXRhdGlvbklkXCJcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nXG4gIFwiVGhlIGlucHV0IGZvciB0aGUgcmVxdWVzdCBvYmplY3QuIEFsbCBmaWVsZHMgYXJlIG9wdGlvbmFsLiBPbmx5IHRob3NlIHByb3ZpZGVkIHdpbGwgYmUgdXBkYXRlZC5cIlxuICBlbXBsb3llZTogRW1wbG95ZWVVcGRhdGVJbnB1dCFcbiAgXCJUaGUgSUQgb2YgdGhlIGVtcGxveWVlIHRvIHVwZGF0ZS5cIlxuICBpZDogSUQhXG59XG5cbmlucHV0IFVwZGF0ZUxlZ2FsRW50aXR5SW5wdXQge1xuICBcImNsaWVudE11dGF0aW9uSWRcIlxuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmdcbiAgXCJUaGUgSUQgb2YgdGhlIGxlZ2FsIGVudGl0eSB0byB1cGRhdGUuXCJcbiAgaWQ6IElEIVxuICBcIkFsbCBmaWVsZHMgYXJlIG9wdGlvbmFsLiBPbmx5IHRob3NlIHByb3ZpZGVkIHdpbGwgYmUgdXBkYXRlZC5cIlxuICBsZWdhbEVudGl0eTogTGVnYWxFbnRpdHlJbnB1dCFcbn1cblxuaW5wdXQgVXNlclNldHRpbmcge1xuICBcIk1vbnRobHkgbGltaXQgZm9yIHRoZSBlbXBsb3llZSBpbiBjZW50cy5cIlxuICBtb250aGx5TGltaXRBbW91bnQ6IEZpbmFuY2lhbEFzc2V0SW5wdXRcbiAgXCJSb2xlIHRoYXQgZW1wbG95ZWVzIHdpbGwgYmUgaW52aXRlZCBhc1wiXG4gIHJvbGU6IFVzZXJSb2xlXG59XG4iLAogICJzZXJ2aWNlIiA6ICJld29nSUNKdVlXMWxJaUE2SUNKb2FXVnlZWEpqYUdsbGN5MWtaM01pTEFvZ0lDSjFjbXdpSURvZ0ltaDBkSEE2THk5b2FXVnlZWEpqYUdsbGN5MWtaM002T0RBNE1DOTJNUzluY21Gd2FIRnNJaXdLSUNBaWFYTmZZV04wYVhabElpQTZJSFJ5ZFdVc0NpQWdJblZ3WkdGMFpXUmZZWFJmYzJWamIyNWtjeUlnT2lBeExBb2dJQ0pwYm5ObGNuUmxaRjloZEY5elpXTnZibVJ6SWlBNklERUtmUT09IiwKICAiaW5zZXJ0ZWRfYXRfc2Vjb25kcyIgOiAzNAp9LCB7CiAgImlkIiA6ICJzbV9jbDEwYTFxNjgwMDF5MGU2MGtwYWR0M3BqIiwKICAidmVyc2lvbiIgOiAiOWZkNzUzNjJiY2YxNmEwNDc5MjRlNzBjYWMzMWIwMDczYzRhOGI2MDI3ODEzYmZiNTcwOTEyNDFmNzM1ODU1NyIsCiAgInR5cGVfZGVmcyIgOiAiXCJEaXJlY3RzIHRoZSBleGVjdXRvciB0byBpbmNsdWRlIHRoaXMgZmllbGQgb3IgZnJhZ21lbnQgb25seSB3aGVuIHRoZSBgaWZgIGFyZ3VtZW50IGlzIHRydWVcIlxuZGlyZWN0aXZlIEBpbmNsdWRlKFxuICAgIFwiSW5jbHVkZWQgd2hlbiB0cnVlLlwiXG4gICAgaWY6IEJvb2xlYW4hXG4gICkgb24gRklFTEQgfCBGUkFHTUVOVF9TUFJFQUQgfCBJTkxJTkVfRlJBR01FTlRcblxuXCJEaXJlY3RzIHRoZSBleGVjdXRvciB0byBza2lwIHRoaXMgZmllbGQgb3IgZnJhZ21lbnQgd2hlbiB0aGUgYGlmYCdhcmd1bWVudCBpcyB0cnVlLlwiXG5kaXJlY3RpdmUgQHNraXAoXG4gICAgXCJTa2lwcGVkIHdoZW4gdHJ1ZS5cIlxuICAgIGlmOiBCb29sZWFuIVxuICApIG9uIEZJRUxEIHwgRlJBR01FTlRfU1BSRUFEIHwgSU5MSU5FX0ZSQUdNRU5UXG5cbmRpcmVjdGl2ZSBAZXh0ZW5kcyBvbiBPQkpFQ1QgfCBJTlRFUkZBQ0VcblxuZGlyZWN0aXZlIEBleHRlcm5hbCBvbiBGSUVMRF9ERUZJTklUSU9OXG5cbmRpcmVjdGl2ZSBAa2V5KGZpZWxkczogX0ZpZWxkU2V0ISkgcmVwZWF0YWJsZSBvbiBPQkpFQ1QgfCBJTlRFUkZBQ0VcblxuZGlyZWN0aXZlIEBwcm92aWRlcyhmaWVsZHM6IF9GaWVsZFNldCEpIG9uIEZJRUxEX0RFRklOSVRJT05cblxuZGlyZWN0aXZlIEByZXF1aXJlcyhmaWVsZHM6IF9GaWVsZFNldCEpIG9uIEZJRUxEX0RFRklOSVRJT05cblxuXCJNYXJrcyB0aGUgZmllbGQsIGFyZ3VtZW50LCBpbnB1dCBmaWVsZCBvciBlbnVtIHZhbHVlIGFzIGRlcHJlY2F0ZWRcIlxuZGlyZWN0aXZlIEBkZXByZWNhdGVkKFxuICAgIFwiVGhlIHJlYXNvbiBmb3IgdGhlIGRlcHJlY2F0aW9uXCJcbiAgICByZWFzb246IFN0cmluZyA9IFwiTm8gbG9uZ2VyIHN1cHBvcnRlZFwiXG4gICkgb24gRklFTERfREVGSU5JVElPTiB8IEFSR1VNRU5UX0RFRklOSVRJT04gfCBFTlVNX1ZBTFVFIHwgSU5QVVRfRklFTERfREVGSU5JVElPTlxuXG5cIkV4cG9zZXMgYSBVUkwgdGhhdCBzcGVjaWZpZXMgdGhlIGJlaGF2aW91ciBvZiB0aGlzIHNjYWxhci5cIlxuZGlyZWN0aXZlIEBzcGVjaWZpZWRCeShcbiAgICBcIlRoZSBVUkwgdGhhdCBzcGVjaWZpZXMgdGhlIGJlaGF2aW91ciBvZiB0aGlzIHNjYWxhci5cIlxuICAgIHVybDogU3RyaW5nIVxuICApIG9uIFNDQUxBUlxuXG5cIlwiXCJcblRoZSBpbnRlcmZhY2UgZm9yIHBhZ2luYXRpbmcgdGhyb3VnaCBjb2xsZWN0aW9ucyBvZiBlbGVtZW50cy5cbkV2ZXJ5IGNvbGxlY3Rpb24gb2YgZW50aXRpZXMgbm90IHJldHVybmVkIGJ5IGEgbXV0YXRpb24gcmVzdWx0IHNob3VsZFxucGFnaW5hdGUgdGhyb3VnaCBhIGNvbm5lY3Rpb24uIFRoYXQgaXMsIGB0eXBlc2Agd2l0aCBhIGZpZWxkIHRoYXQgaXNcbmFuIGBhcnJheWAgc2hvdWxkIGJlIGV4Y2VlZGluZ2x5IHJhcmUuXG5XZSB3YW50IGFsbCBjb2xsZWN0aW9ucyBvZiB0aGluZ3MgdG8gYmUgcGFnaW5hdGVkLlxuXCJcIlwiXG5pbnRlcmZhY2UgQ29ubmVjdGlvbiB7XG4gIFwiUGFnZSBpbmZvcm1hdGlvbiBmb3IgYWRkaXRpb25hbCBuYXZpZ2F0aW9uIHRocm91Z2ggdGhpcyBjb25uZWN0aW9uLlwiXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgXCJcIlwiXG4gIFRoZSB0b3RhbCBjb3VudCBvZiBpdGVtcyBtYXRjaGluZyB0aGUgZmlsdGVyIGNyaXRlcmlhIHNwZWNpZmllZCBmb3IgdGhpcyBjb25uZWN0aW9uLlxuICBUaGlzIHZhbHVlIG1heSBiZSBhcHByb3hpbWF0ZS4gQW5kIHRoaXMgdmFsdWUgbWF5IG5vdCBiZSBwcm92aWRlZCBhdCBhbGwuIE5vdCBhbGwgY29ubmVjdGlvbnNcbiAgY2FuIGJlIGNvdW50ZWQgZWFzaWx5LlxuICBcIlwiXCJcbiAgdG90YWxDb3VudDogSW50XG59XG5cbnVuaW9uIEluc2lnaHRzU2NlbmFyaW9FdmVudERldGFpbHMgPSBJbnNpZ2h0c0Z1bmRyYWlzaW5nRXZlbnREZXRhaWxzIHwgSW5zaWdodHNHZW5lcmljRXZlbnREZXRhaWxzIHwgSW5zaWdodHNIaXJpbmdFdmVudERldGFpbHNcblxudW5pb24gX0VudGl0eSA9IEFjY291bnQgfCBVc2VyXG5cblwiIC0tLVsgRXh0ZW5zaW9ucyBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tXCJcbnR5cGUgQWNjb3VudCBAZXh0ZW5kcyBAa2V5KGZpZWxkcyA6IFwiaWRcIikge1xuICBpZDogSUQhIEBleHRlcm5hbFxufVxuXG50eXBlIENyZWF0ZUluc2lnaHRzU2NlbmFyaW9FdmVudFJlc3BvbnNlIHtcbiAgXCJDcmVhdGVkIHNjZW5hcmlvIGV2ZW50XCJcbiAgZXZlbnQ6IEluc2lnaHRzU2NlbmFyaW9FdmVudCFcbn1cblxudHlwZSBDcmVhdGVJbnNpZ2h0c1NjZW5hcmlvRXZlbnRzUmVzcG9uc2Uge1xuICBcIkNyZWF0ZWQgZXZlbnRzXCJcbiAgZXZlbnRzOiBbSW5zaWdodHNTY2VuYXJpb0V2ZW50IV0hXG59XG5cbnR5cGUgQ3JlYXRlSW5zaWdodHNTY2VuYXJpb1Jlc3BvbnNlIHtcbiAgXCJDcmVhdGVkIHNjZW5hcmlvXCJcbiAgc2NlbmFyaW86IEluc2lnaHRzU2NlbmFyaW8hXG59XG5cbnR5cGUgRGVsZXRlSW5zaWdodHNTY2VuYXJpb0V2ZW50UmVzcG9uc2Uge1xuICBcIlRoZSByZXN1bHQgb2YgdGhlIFNjZW5hcmlvRXZlbnQgZXZlbnQgZGVsZXRpb24gLSBzdWNjZXNzL2ZhaWx1cmVcIlxuICBzdWNjZXNzOiBCb29sZWFuIVxufVxuXG50eXBlIERlbGV0ZUluc2lnaHRzU2NlbmFyaW9FdmVudHNSZXNwb25zZSB7XG4gIFwiVGhlIHJlc3VsdCBvZiB0aGUgU2NlbmFyaW9FdmVudCBldmVudCBkZWxldGlvbnMgLSBzdWNjZXNzL2ZhaWx1cmVcIlxuICBzdWNjZXNzOiBCb29sZWFuIVxufVxuXG50eXBlIERlbGV0ZUluc2lnaHRzU2NlbmFyaW9SZXNwb25zZSB7XG4gIFwiVGhlIHJlc3VsdCBvZiB0aGUgc2NlbmFyaW8gZGVsZXRpb24gLSBzdWNjZXNzL2ZhaWx1cmVcIlxuICBzdWNjZXNzOiBCb29sZWFuIVxufVxuXG5cIkZpbmFuY2lhbCBBc3NldCB3cmFwcGVyXCJcbnR5cGUgRmluYW5jaWFsQXNzZXQge1xuICBcIlRoZSBpbnN0cnVtZW50IGNvZGUgKHVzZCwgZXRjLikuIEN1cnJlbnRseSwgb25seSB1c2QgaXMgc3VwcG9ydGVkLlwiXG4gIGluc3RydW1lbnRDb2RlOiBGaW5hbmNpYWxJbnN0cnVtZW50Q29kZSFcbiAgXCJUaGUgYW1vdW50IGluIGNlbnRzXCJcbiAgcXVhbnRpdHlDZW50czogSW50IVxufVxuXG5cIkFtb3VudCAoVVNEKSBzbmFwc2hvdCBmb3IgYSBnaXZlbiB0aW1lXCJcbnR5cGUgSW5zaWdodHNDYXNoQWNjb3VudEF2YWlsYWJsZUJhbGFuY2VTbmFwc2hvdCB7XG4gIFwiQXZhaWxhYmxlIHNuYXBzaG90IHZhbHVlIChVU0QpXCJcbiAgYW1vdW50VXNkQ2VudHM6IExvbmchXG4gIFwiVGltZXN0YW1wIG9mIHRoZSBzbmFwc2hvdCB2YWx1ZVwiXG4gIHRpbWVzdGFtcDogVGltZSFcbn1cblxuXCJDYXNoIGZsb3cgYWdncmVnYXRlIGZvciBhIGdpdmVuIHRpbWUgcmFuZ2VcIlxudHlwZSBJbnNpZ2h0c0Nhc2hGbG93QWdncmVnYXRlRGF0YVBvaW50IHtcbiAgXCJCYWxhbmNlIChVU0QpIGluIHRoZSBhY2NvdW50IGF0IHRoZSBlbmQgb2YgdGhlIHRpbWUgcmFuZ2UgKGVuZEF0KVwiXG4gIGJhbGFuY2VVc2RDZW50czogTG9uZyFcbiAgXCJUaGUgY2FzaCB0aGUgYnVzaW5lc3MgaXMgYnVybmluZyB3aXRoaW4gdGhlIHRpbWUgcGVyaW9kXCJcbiAgYnVyblJhdGU6IExvbmchXG4gIFwiRW5kIG9mIHRoZSBhZ2dyZWdhdGUgdGltZSByYW5nZSAoZXhjbHVzaXZlKVwiXG4gIGVuZEF0OiBUaW1lIVxuICBcIkFtb3VudCAoVVNEKSB0aGF0IHdpbGwgYmUgYnJvdWdodCBpbnRvIHRoZSBhY2NvdW50IGR1cmluZyB0aGUgdGltZSByYW5nZVwiXG4gIG1vbmV5SW5Vc2RDZW50czogTG9uZyFcbiAgXCJBbW91bnQgKFVTRCkgdGhhdCB3aWxsIGxlYXZlIHRoZSBhY2NvdW50IGR1cmluZyB0aGUgdGltZSByYW5nZVwiXG4gIG1vbmV5T3V0VXNkQ2VudHM6IExvbmchXG4gIFwiU3RhcnQgb2YgdGhlIGFnZ3JlZ2F0ZSB0aW1lIHJhbmdlIChpbmNsdXNpdmUpXCJcbiAgc3RhcnRBdDogVGltZSFcbn1cblxudHlwZSBJbnNpZ2h0c0Z1bmRyYWlzaW5nRXZlbnREZXRhaWxzIHtcbiAgXCJGdW5kcmFpc2luZyBhbW91bnQgaW4gVVNEIGNlbnRzXCJcbiAgYW1vdW50VXNkQ2VudHM6IExvbmchXG59XG5cbnR5cGUgSW5zaWdodHNHZW5lcmljRXZlbnREZXRhaWxzIHtcbiAgXCJJbml0aWFsIGFtb3VudCBpbiBVU0QgY2VudHNcIlxuICBpbml0aWFsQW1vdW50VXNkQ2VudHM6IExvbmchXG4gIFwiXCJcIlxuICBJZiByZWN1cnJpbmdfY2FkZW5jZSBpcyBkZWZpbmVkLCBhcHBseSB0aGlzIGFtb3VudCBmb3IgZWFjaCByZWN1cnJpbmdfY2FkZW5jZVxuICBpbnN0YW5jZSBiZXR3ZWVuIHRoZSBldmVudCdzIFtzdGFydERhdGUsIGVuZERhdGUpIHBlcmlvZFxuICBcIlwiXCJcbiAgcmVjdXJyaW5nQW1vdW50VXNkQ2VudHM6IExvbmdcbiAgXCJJZiBzZXQsIHRoZSBjYWRlbmNlIG9mIHRoZSByZWN1cnJpbmcgY29zdFwiXG4gIHJlY3VycmluZ0NhZGVuY2U6IEluc2lnaHRzR2VuZXJpY0V2ZW50UmVjdXJyaW5nQ2FkZW5jZVxuICBcIkdlbmVyaWMgZXZlbnQgdGl0bGVcIlxuICB0aXRsZTogU3RyaW5nIVxufVxuXG50eXBlIEluc2lnaHRzSGlyaW5nRXZlbnREZXRhaWxzIHtcbiAgXCJCZW5lZml0cyBwb3J0aW9uIG9mIHRoZSBoaXJpbmcgY29zdCBicmVha2Rvd24gaW4gVVNEIGNlbnRzXCJcbiAgYmVuZWZpdHNBbW91bnRVc2RDZW50czogTG9uZyFcbiAgXCJIb3cgbWFueSBlbXBsb3llZXMgYXJlIHBsYW5uZWQgdG8gYmUgaGlyZWRcIlxuICBlbXBsb3llZUNvdW50OiBJbnQhXG4gIFwiVGhlIGxvY2F0aW9uIHRoZSBlbXBsb3llZSB3aWxsIGJlIGhpcmVkIGF0XCJcbiAgZW1wbG95ZWVMb2NhdGlvbjogU3RyaW5nIVxuICBcIkVtcGxveWVlIHRpdGxlXCJcbiAgZW1wbG95ZWVUaXRsZTogU3RyaW5nIVxuICBcIkVxdWlwbWVudCBwb3J0aW9uIG9mIHRoZSBoaXJpbmcgY29zdCBicmVha2Rvd24gaW4gVVNEIGNlbnRzXCJcbiAgZXF1aXBtZW50QW1vdW50VXNkQ2VudHM6IExvbmchXG4gIFwiTWlzY2VsbGFuZW91cyBwb3J0aW9uIG9mIHRoZSBoaXJpbmcgY29zdCBicmVha2Rvd24gaW4gVVNEIGNlbnRzXCJcbiAgbWlzY2VsbGFuZW91c0Ftb3VudFVzZENlbnRzOiBMb25nIVxuICBcIlJlY3J1aXRpbmcgcG9ydGlvbiBvZiB0aGUgaGlyaW5nIGNvc3QgYnJlYWtkb3duIGluIFVTRCBjZW50c1wiXG4gIHJlY3J1aXRpbmdBbW91bnRVc2RDZW50czogTG9uZyFcbiAgXCJTYWxhcnkgcG9ydGlvbiBvZiB0aGUgaGlyaW5nIGNvc3QgYnJlYWtkb3duIGluIFVTRCBjZW50c1wiXG4gIHNhbGFyeUFtb3VudFVzZENlbnRzOiBMb25nIVxuICBcIlNpZ24tT24gYm9udXMgcG9ydGlvbiBvZiB0aGUgaGlyaW5nIGNvc3QgYnJlYWtkb3duIGluIFVTRCBjZW50c1wiXG4gIHNpZ25PbkJvbnVzQW1vdW50VXNkQ2VudHM6IExvbmchXG59XG5cblwiQSBzY2VuYXJpbyBldmVudCB0aGF0IGNhbiBpbXBhY3QgcnVud2F5IHByb2plY3Rpb25zXCJcbnR5cGUgSW5zaWdodHNSdW53YXlJbnNpZ2h0cyB7XG4gIFwiVGltZXNlcmllcyBvZiBwcm9qZWN0ZWQgY2FzaCBmbG93IGRhdGFcIlxuICBjYXNoRmxvd1Byb2plY3Rpb25zOiBbSW5zaWdodHNDYXNoRmxvd0FnZ3JlZ2F0ZURhdGFQb2ludCFdIVxuICBcIkEgcm91Z2ggZXN0aW1hdGUgb2Ygd2hlbiB0aGUgYWNjb3VudCB3aWxsIGJlIG91dCBvZiBjYXNoXCJcbiAgZXN0aW1hdGVkQ2FzaE91dERhdGU6IERhdGVcbiAgXCJcIlwiXG4gIFVzaW5nIHRoZSBidXJuIHJhdGUgcHJvamVjdGlvbiwgZXN0aW1hdGUgd2hlbiB0aGUgY29tcGFueVxuICBtaWdodCBuZWVkIHRvIHJhaXNlIGZ1bmRyYWlzaW5nIG1vbmV5XG4gIFwiXCJcIlxuICBzdWdnZXN0ZWRGdW5kcmFpc2luZ0RhdGU6IERhdGVcbn1cblxuXCJTY2VuYXJpbyBQbGFubmluZyBzY2VuYXJpb3MgZm9yIHJ1bndheSBwcm9qZWN0aW9uc1wiXG50eXBlIEluc2lnaHRzU2NlbmFyaW8ge1xuICBcIlRoZSBjdXN0b21lciBhY2NvdW50IHRoYXQgb3ducyB0aGlzIHNjZW5hcmlvXCJcbiAgYWNjb3VudDogQWNjb3VudCFcbiAgXCJXaGVuIHRoZSBzY2VuYXJpbyB3YXMgY3JlYXRlZFwiXG4gIGNyZWF0ZWRBdDogVGltZSFcbiAgXCJUaGUgdXNlciB3aG8gY3JlYXRlZCB0aGUgc2NlbmFyaW9cIlxuICBjcmVhdG9yOiBVc2VyIVxuICBcIkxpc3QgdGhlIHNjZW5hcmlvIGV2ZW50c1wiXG4gIGV2ZW50czogW0luc2lnaHRzU2NlbmFyaW9FdmVudCFdIVxuICBcIlNjZW5hcmlvIElEXCJcbiAgaWQ6IElEIVxuICBcIldoZW4gdGhlIHNjZW5hcmlvIHdhcyBsYXN0IHVwZGF0ZWRcIlxuICBsYXN0VXBkYXRlZEF0OiBUaW1lIVxuICBcIlNjZW5hcmlvIG5hbWVcIlxuICBuYW1lOiBTdHJpbmchXG4gIFwiRmV0Y2ggc2NlbmFyaW8gcnVud2F5IGluc2lnaHRzXCJcbiAgcnVud2F5SW5zaWdodHMoZW5kRGF0ZTogRGF0ZSEsIHN0YXJ0RGF0ZTogRGF0ZSEsIHRpbWVCdWNrZXQ6IEluc2lnaHRzVGltZVVuaXQhLCB0aW1lQnVja2V0U3RyYXRlZ3k6IEluc2lnaHRzVGltZUJ1Y2tldFN0cmF0ZWd5ISk6IEluc2lnaHRzUnVud2F5SW5zaWdodHMhXG59XG5cblwiSW5zaWdodHNTY2VuYXJpb3MgY29ubmVjdGlvblwiXG50eXBlIEluc2lnaHRzU2NlbmFyaW9Db25uZWN0aW9uIGltcGxlbWVudHMgQ29ubmVjdGlvbiB7XG4gIFwiVGhlIGl0ZW1zIGluIHRoZSBjdXJyZW50IHBhZ2Ugb2YgcmVzdWx0cy5cIlxuICBlZGdlczogW0luc2lnaHRzU2NlbmFyaW9FZGdlIV0hXG4gIFwiUGFnZSBpbmZvcm1hdGlvbiBmb3IgYWRkaXRpb25hbCBuYXZpZ2F0aW9uIHRocm91Z2ggdGhpcyBjb25uZWN0aW9uLlwiXG4gIHBhZ2VJbmZvOiBQYWdlSW5mbyFcbiAgXCJUaGUgdG90YWwgY291bnQgb2YgaXRlbXMsIGFjcm9zcyBhbGwgcGFnZXMsIG1hdGNoaW5nIHRoZSBmaWx0ZXIgY3JpdGVyaWEgc3BlY2lmaWVkIGZvciB0aGlzIGNvbm5lY3Rpb24uXCJcbiAgdG90YWxDb3VudDogSW50IVxufVxuXG5cIkluc2lnaHRzU2NlbmFyaW9Db25uZWN0aW9uIGVkZ2VcIlxudHlwZSBJbnNpZ2h0c1NjZW5hcmlvRWRnZSB7XG4gIFwiVGhlIG9wYXF1ZSBjdXJzb3Igb2YgdGhlIGN1cnJlbnQgZWRnZS5cIlxuICBjdXJzb3I6IFN0cmluZ1xuICBcIlRoZSBzY2VuYXJpbyBhdCB0aGlzIGVkZ2UuXCJcbiAgbm9kZTogSW5zaWdodHNTY2VuYXJpbyFcbn1cblxuXCJBIHNjZW5hcmlvIGV2ZW50IHRoYXQgY2FuIGltcGFjdCBydW53YXkgcHJvamVjdGlvbnNcIlxudHlwZSBJbnNpZ2h0c1NjZW5hcmlvRXZlbnQge1xuICBcIldoZW4gdGhlIHNjZW5hcmlvIGV2ZW50IHdhcyBjcmVhdGVkXCJcbiAgY3JlYXRlZEF0OiBUaW1lIVxuICBcIlRoZSB1c2VyIHdobyBjcmVhdGVkIHRoZSBzY2VuYXJpb1wiXG4gIGNyZWF0b3I6IFVzZXIhXG4gIFwiRXZlbnQgdHlwZSBhbmQgaXRzIHNwZWNpZmljIGRldGFpbHNcIlxuICBkZXRhaWxzOiBJbnNpZ2h0c1NjZW5hcmlvRXZlbnREZXRhaWxzXG4gIFwiVGhlIGVuZERhdGUgb2YgdGhlIGV2ZW50IGlzIEVYQ0xVU0lWRSBhbmQgaWYgc2V0IHRvIE5VTEwgdGhlIGV2ZW50IG5ldmVyIGVuZHNcIlxuICBlbmREYXRlOiBEYXRlXG4gIFwiU2NlbmFyaW9FdmVudCBJRFwiXG4gIGlkOiBJRCFcbiAgXCJJZiBzZXQgdG8gdHJ1ZSwgdGhlIGV2ZW50IHdpbGwgaW1wYWN0IHRoZSBzY2VuYXJpbyBmb3JlY2FzdFwiXG4gIGlzRW5hYmxlZDogQm9vbGVhbiFcbiAgXCJXaGVuIHRoZSBzY2VuYXJpbyBldmVudCB3YXMgbGFzdCB1cGRhdGVkXCJcbiAgbGFzdFVwZGF0ZWRBdDogVGltZSFcbiAgXCJTY2VuYXJpbyB0aGlzIGV2ZW50IGlzIGZvclwiXG4gIHNjZW5hcmlvOiBJbnNpZ2h0c1NjZW5hcmlvIVxuICBcIlwiXCJcbiAgRGF0ZSByYW5nZSB0aGUgZXZlbnQgaXMgYWN0aXZlIGlzIGZvciBbc3RhcnREYXRlLCBlbmREYXRlKVxuICBUaGUgc3RhcnREYXRlIGlzIElOQ0xVU0lWRVxuICBcIlwiXCJcbiAgc3RhcnREYXRlOiBEYXRlIVxufVxuXG5cIiAtLS1bIE11dGF0aW9ucyBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVwiXG50eXBlIE11dGF0aW9uIHtcbiAgXCJDcmVhdGUgYSBuZXcgc2NlbmFyaW9cIlxuICBjcmVhdGVJbnNpZ2h0c1NjZW5hcmlvKGlucHV0OiBDcmVhdGVJbnNpZ2h0c1NjZW5hcmlvSW5wdXQhKTogQ3JlYXRlSW5zaWdodHNTY2VuYXJpb1Jlc3BvbnNlIVxuICBcIkNyZWF0ZSBhIG5ldyBzY2VuYXJpbyBldmVudFwiXG4gIGNyZWF0ZUluc2lnaHRzU2NlbmFyaW9FdmVudChpbnB1dDogQ3JlYXRlSW5zaWdodHNTY2VuYXJpb0V2ZW50SW5wdXQhKTogQ3JlYXRlSW5zaWdodHNTY2VuYXJpb0V2ZW50UmVzcG9uc2UhXG4gIFwiXCJcIlxuICBDcmVhdGUgbXVsdGlwbGUgc2NlbmFyaW8gZXZlbnRzXG4gIFdlIGN1cnJlbnRseSBkb24ndCBkbyBpdCBpbiBhIHRyYW5zYWN0aW9uYWwgd2F5LCBzbyBpZiBhbiBlcnJvciBvY2N1cnMgZXZlbnRzIHdpbGwgYmUgcGFydGlhbGx5IGNyZWF0ZWRcbiAgXCJcIlwiXG4gIGNyZWF0ZUluc2lnaHRzU2NlbmFyaW9FdmVudHMoaW5wdXQ6IENyZWF0ZUluc2lnaHRzU2NlbmFyaW9FdmVudHNJbnB1dCEpOiBDcmVhdGVJbnNpZ2h0c1NjZW5hcmlvRXZlbnRzUmVzcG9uc2UhXG4gIFwiRGVsZXRlIGFuIGV4aXN0aW5nIHNjZW5hcmlvXCJcbiAgZGVsZXRlSW5zaWdodHNTY2VuYXJpbyhpbnB1dDogRGVsZXRlSW5zaWdodHNTY2VuYXJpb0lucHV0ISk6IERlbGV0ZUluc2lnaHRzU2NlbmFyaW9SZXNwb25zZSFcbiAgXCJEZWxldGUgYW4gZXhpc3Rpbmcgc2NlbmFyaW8gZXZlbnRcIlxuICBkZWxldGVJbnNpZ2h0c1NjZW5hcmlvRXZlbnQoaW5wdXQ6IERlbGV0ZUluc2lnaHRzU2NlbmFyaW9FdmVudElucHV0ISk6IERlbGV0ZUluc2lnaHRzU2NlbmFyaW9FdmVudFJlc3BvbnNlIVxuICBcIlwiXCJcbiAgRGVsZXRlcyBtdWx0aXBsZSBleGlzdGluZyBzY2VuYXJpbyBldmVudHNcbiAgV2UgY3VycmVudGx5IGRvbid0IGRvIGl0IGluIGEgdHJhbnNhY3Rpb25hbCB3YXksIHNvIGlmIGFuIGVycm9yIG9jY3VycyBldmVudHMgd2lsbCBiZSBwYXJ0aWFsbHkgZGVsZXRlZFxuICBcIlwiXCJcbiAgZGVsZXRlSW5zaWdodHNTY2VuYXJpb0V2ZW50cyhpbnB1dDogRGVsZXRlSW5zaWdodHNTY2VuYXJpb0V2ZW50c0lucHV0ISk6IERlbGV0ZUluc2lnaHRzU2NlbmFyaW9FdmVudHNSZXNwb25zZSFcbiAgXCJVcGRhdGUgYW4gZXhpc3Rpbmcgc2NlbmFyaW9cIlxuICB1cGRhdGVJbnNpZ2h0c1NjZW5hcmlvKGlucHV0OiBVcGRhdGVJbnNpZ2h0c1NjZW5hcmlvSW5wdXQhKTogVXBkYXRlSW5zaWdodHNTY2VuYXJpb1Jlc3BvbnNlIVxuICBcIlVwZGF0ZSBhbiBleGlzdGluZyBzY2VuYXJpbyBldmVudFwiXG4gIHVwZGF0ZUluc2lnaHRzU2NlbmFyaW9FdmVudChpbnB1dDogVXBkYXRlSW5zaWdodHNTY2VuYXJpb0V2ZW50SW5wdXQhKTogVXBkYXRlSW5zaWdodHNTY2VuYXJpb0V2ZW50UmVzcG9uc2UhXG4gIFwiXCJcIlxuICBVcGRhdGVzIG11bHRpcGxlIGV4aXN0aW5nIHNjZW5hcmlvIGV2ZW50c1xuICBXZSBjdXJyZW50bHkgZG9uJ3QgZG8gaXQgaW4gYSB0cmFuc2FjdGlvbmFsIHdheSwgc28gaWYgYW4gZXJyb3Igb2NjdXJzIGV2ZW50cyB3aWxsIGJlIHBhcnRpYWxseSB1cGRhdGVkXG4gIFwiXCJcIlxuICB1cGRhdGVJbnNpZ2h0c1NjZW5hcmlvRXZlbnRzKGlucHV0OiBVcGRhdGVJbnNpZ2h0c1NjZW5hcmlvRXZlbnRzSW5wdXQhKTogVXBkYXRlSW5zaWdodHNTY2VuYXJpb0V2ZW50c1Jlc3BvbnNlIVxufVxuXG50eXBlIFBhZ2VJbmZvIHtcbiAgXCJXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuXCJcbiAgZW5kQ3Vyc29yOiBTdHJpbmdcbiAgXCJXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zP1wiXG4gIGhhc05leHRQYWdlOiBCb29sZWFuIVxuICBcIldoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zP1wiXG4gIGhhc1ByZXZpb3VzUGFnZTogQm9vbGVhbiFcbiAgXCJXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLlwiXG4gIHN0YXJ0Q3Vyc29yOiBTdHJpbmdcbn1cblxuXCIgLS0tWyBRdWVyaWVzIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cIlxudHlwZSBRdWVyeSB7XG4gIF9lbnRpdGllcyhyZXByZXNlbnRhdGlvbnM6IFtfQW55IV0hKTogW19FbnRpdHldIVxuICBfc2VydmljZTogX1NlcnZpY2VcbiAgXCJBdmFpbGFibGUgYmFsYW5jZSBzbmFwc2hvdHMgZm9yIHRoZSBhY2NvdW50IG9yIGlmIHNwZWNpZmllZCwgYSBzcGVjaWZpYyBkZXBvc2l0cyBhY2NvdW50XCJcbiAgY2FzaEFjY291bnRBdmFpbGFibGVCYWxhbmNlU25hcHNob3RzKGRlcG9zaXRzQWNjb3VudElkOiBJRCwgdGltZXN0YW1wczogW1RpbWUhXSEpOiBbSW5zaWdodHNDYXNoQWNjb3VudEF2YWlsYWJsZUJhbGFuY2VTbmFwc2hvdCFdIVxuICBcIkNhc2ggZmxvdyB0cmFuc2FjdGlvbiBhZ2dyZWdhdGVzIHRpbWVzZXJpZXMgZGF0YVwiXG4gIGNhc2hGbG93VGltZXNlcmllcyhkZXBvc2l0c0FjY291bnRJZDogSUQsIGVuZERhdGU6IERhdGUhLCBzdGFydERhdGU6IERhdGUhLCB0aW1lQnVja2V0OiBJbnNpZ2h0c1RpbWVVbml0ISwgdGltZUJ1Y2tldFN0cmF0ZWd5OiBJbnNpZ2h0c1RpbWVCdWNrZXRTdHJhdGVneSEpOiBbSW5zaWdodHNDYXNoRmxvd0FnZ3JlZ2F0ZURhdGFQb2ludCFdIVxuICBcIkdldCBhIHNjZW5hcmlvIGJ5IGlkXCJcbiAgaW5zaWdodHNTY2VuYXJpbyhpZDogSUQpOiBJbnNpZ2h0c1NjZW5hcmlvIVxuICBcIkxpc3QgU2NlbmFyaW9zXCJcbiAgaW5zaWdodHNTY2VuYXJpb3MocGFnZTogUGFnaW5hdGlvbklucHV0KTogSW5zaWdodHNTY2VuYXJpb0Nvbm5lY3Rpb24hXG4gIFwiRmV0Y2ggcnVud2F5IGluc2lnaHRzXCJcbiAgcnVud2F5SW5zaWdodHMoZW5kRGF0ZTogRGF0ZSEsIHN0YXJ0RGF0ZTogRGF0ZSEsIHRpbWVCdWNrZXQ6IEluc2lnaHRzVGltZVVuaXQhLCB0aW1lQnVja2V0U3RyYXRlZ3k6IEluc2lnaHRzVGltZUJ1Y2tldFN0cmF0ZWd5ISk6IEluc2lnaHRzUnVud2F5SW5zaWdodHMhXG59XG5cbnR5cGUgVXBkYXRlSW5zaWdodHNTY2VuYXJpb0V2ZW50UmVzcG9uc2Uge1xuICBcIlVwZGF0ZWQgZXZlbnRcIlxuICBldmVudDogSW5zaWdodHNTY2VuYXJpb0V2ZW50IVxufVxuXG50eXBlIFVwZGF0ZUluc2lnaHRzU2NlbmFyaW9FdmVudHNSZXNwb25zZSB7XG4gIFwiVXBkYXRlZCBldmVudHNcIlxuICBldmVudHM6IFtJbnNpZ2h0c1NjZW5hcmlvRXZlbnQhXSFcbn1cblxudHlwZSBVcGRhdGVJbnNpZ2h0c1NjZW5hcmlvUmVzcG9uc2Uge1xuICBcIlVwZGF0ZWQgc2NlbmFyaW9cIlxuICBzY2VuYXJpbzogSW5zaWdodHNTY2VuYXJpbyFcbn1cblxuXCIgVXNlciBpcyBkZWZpbmVkIGV4dGVybmFsbHlcIlxudHlwZSBVc2VyIEBleHRlbmRzIEBrZXkoZmllbGRzIDogXCJpZFwiKSB7XG4gIGlkOiBJRCEgQGV4dGVybmFsXG59XG5cbnR5cGUgX1NlcnZpY2Uge1xuICBzZGw6IFN0cmluZyFcbn1cblxuXCJUaGUgdHlwZSBvZiB0aGUgRXhwZW5zZS5cIlxuZW51bSBFeHBlbnNlVHlwZSB7XG4gIFwiQSBiaWxsIHBheSBleHBlbnNlLlwiXG4gIEJJTExQQVlcbiAgXCJBIGNhcmQgZXhwZW5zZS5cIlxuICBDQVJEXG4gIFwiQSByZWltYnVyc2VtZW50IGV4cGVuc2UuXCJcbiAgUkVJTUJVUlNFTUVOVFxufVxuXG5cIlwiXCJcbiBGcm9tIEFQSXYxXG4gaHR0cHM6Ly9naXRodWIuY29tL2JyZXhocS9jcmVkaXRfY2FyZC9ibG9iL21haW4vYXBwcy9hcGkvbGliL2FwaS93ZWIvc2NoZW1hL2ZpbmFuY2lhbF9hc3NldC5leCNMN1xuIGh0dHBzOi8vZ2l0aHViLmNvbS9icmV4aHEvY3JlZGl0X2NhcmQvYmxvYi9tYWluL2xpYnJhcmllcy9icmV4X2ZpbmFuY2lhbF9hc3NldC9saWIvZmluYW5jaWFsX2luc3RydW1lbnRfY29uc3RhbnRzLmV4I0w5NjJcblwiXCJcIlxuZW51bSBGaW5hbmNpYWxJbnN0cnVtZW50Q29kZSB7XG4gIEFFRFxuICBBRk5cbiAgQUxMXG4gIEFNRFxuICBBTkdcbiAgQU9BXG4gIEFSU1xuICBBVURcbiAgQVdHXG4gIEFaTlxuICBCQU1cbiAgQkJEXG4gIEJEVFxuICBCR05cbiAgQkhEXG4gIEJJRlxuICBCTURcbiAgQk5EXG4gIEJPQlxuICBCT1ZcbiAgQlJMXG4gIEJTRFxuICBCVE5cbiAgQldQXG4gIEJZTlxuICBCWkRcbiAgQ0FEXG4gIENERlxuICBDSEVcbiAgQ0hGXG4gIENIV1xuICBDTEZcbiAgQ0xQXG4gIENOWVxuICBDT1BcbiAgQ09VXG4gIENSQ1xuICBDUllQVE9fQlRDXG4gIENSWVBUT19FVEhcbiAgQ1JZUFRPX1VTRENcbiAgQ1VDXG4gIENVUFxuICBDVkVcbiAgQ1pLXG4gIERKRlxuICBES0tcbiAgRE9QXG4gIERaRFxuICBFR1BcbiAgRVJOXG4gIEVUQlxuICBFVVJcbiAgRkpEXG4gIEZLUFxuICBHQlBcbiAgR0VMXG4gIEdIU1xuICBHSVBcbiAgR01EXG4gIEdORlxuICBHVFFcbiAgR1lEXG4gIEhLRFxuICBITkxcbiAgSFJLXG4gIEhUR1xuICBIVUZcbiAgSURSXG4gIElMU1xuICBJTlJcbiAgSVFEXG4gIElSUlxuICBJU0tcbiAgSk1EXG4gIEpPRFxuICBKUFlcbiAgS0VTXG4gIEtHU1xuICBLSFJcbiAgS01GXG4gIEtQV1xuICBLUldcbiAgS1dEXG4gIEtZRFxuICBLWlRcbiAgTEFLXG4gIExCUFxuICBMS1JcbiAgTFJEXG4gIExTTFxuICBMWURcbiAgTUFEXG4gIE1ETFxuICBNR0FcbiAgTUtEXG4gIE1NS1xuICBNTlRcbiAgTU9QXG4gIE1SVVxuICBNVVJcbiAgTVZSXG4gIE1XS1xuICBNWE5cbiAgTVhWXG4gIE1ZUlxuICBNWk5cbiAgTkFEXG4gIE5BU0RBUV9EQUdYWFxuICBOQVNEQVFfREdDWFhcbiAgTkFTREFRX0RHVlhYXG4gIE5BU0RBUV9EUEdYWFxuICBOQVNEQVFfR0dCWFhcbiAgTkFTREFRX0dHRFhYXG4gIE5BU0RBUV9HR1NYWFxuICBOQVNEQVFfR1NCWFhcbiAgTkdOXG4gIE5JT1xuICBOT0tcbiAgTlBSXG4gIE5aRFxuICBPTVJcbiAgUEFCXG4gIFBFTlxuICBQR0tcbiAgUEhQXG4gIFBLUlxuICBQTE5cbiAgUFlHXG4gIFFBUlxuICBST05cbiAgUlNEXG4gIFJVQlxuICBSV0ZcbiAgU0FSXG4gIFNCRFxuICBTQ1JcbiAgU0RHXG4gIFNFS1xuICBTR0RcbiAgU0hQXG4gIFNMTFxuICBTT1NcbiAgU1JEXG4gIFNTUFxuICBTVE5cbiAgU1ZDXG4gIFNZUFxuICBTWkxcbiAgVEhCXG4gIFRKU1xuICBUTVRcbiAgVE5EXG4gIFRPUFxuICBUUllcbiAgVFREXG4gIFRXRFxuICBUWlNcbiAgVUFIXG4gIFVHWFxuICBVU0RcbiAgVVNOXG4gIFVZSVxuICBVWVVcbiAgVVlXXG4gIFVaU1xuICBWRVNcbiAgVk5EXG4gIFZVVlxuICBXU1RcbiAgWEFGXG4gIFhBR1xuICBYQVVcbiAgWEJBXG4gIFhCQlxuICBYQkNcbiAgWEJEXG4gIFhDRFxuICBYRFJcbiAgWE9GXG4gIFhQRFxuICBYUEZcbiAgWFBUXG4gIFhTVVxuICBYVFNcbiAgWFVBXG4gIFhYWFxuICBZRVJcbiAgWkFSXG4gIFpNV1xuICBaV0xcbn1cblxuXCJVc2VkIGluIEdlbmVyaWNFdmVudERldGFpbHMgdG8gZGVmaW5lIHRoZSByZWN1cnJpbmcgY29zdCBzY2hlZHVsZVwiXG5lbnVtIEluc2lnaHRzR2VuZXJpY0V2ZW50UmVjdXJyaW5nQ2FkZW5jZSB7XG4gIERBSUxZXG4gIE1PTlRITFlcbiAgV0VFS0xZXG59XG5cblwiXCJcIlxuVGltZSBidWNrZXR0aW5nIHN0cmF0ZWd5XG4tIFNUQVJUOiBCdWNrZXRzIHN0YXJ0IGF0IHRoZSBzdGFydHNBdCB0aW1lc3RhbXBcbi0gRU5EOiBCdWNrZXRzIHN0YXJ0IGF0IHRoZSBlbmRzQXQgdGltZXN0YW1wXG4tIENBTEVOREFSOiBCdWNrZXRzIGFyZSBhbGlnbmVkIHdpdGggdGhlIGNhbGVuZGFyIHVuaXRzIChlLmcuIFdFRUtTKSBidXQgY2FuIGluY2x1ZGVcbnBhcnRpYWwgYnVja2V0cyBiYXNlZCBvbiB0aGUgc3RhcnRzQXQgYW5kIGVuZHNBdCB0aW1lYnVja2V0c1xuXCJcIlwiXG5lbnVtIEluc2lnaHRzVGltZUJ1Y2tldFN0cmF0ZWd5IHtcbiAgQ0FMRU5EQVJcbiAgRU5EXG4gIFNUQVJUXG59XG5cblwiR2VuZXJpYyB0aW1lIHVuaXRcIlxuZW51bSBJbnNpZ2h0c1RpbWVVbml0IHtcbiAgREFZXG4gIE1PTlRIXG4gIFFVQVJURVJcbiAgV0VFS1xuICBZRUFSXG59XG5cbmVudW0gT3JkZXJCeURpcmVjdGlvbiB7XG4gIEFTQ0VORElOR1xuICBERVNDRU5ESU5HXG59XG5cblwiVGhlIHR5cGUgb2YgdGhlIHJlcXVlc3QgYWN0aW9uLlwiXG5lbnVtIFJlcXVlc3RBY3Rpb25UeXBlIHtcbiAgXCJBIG1lbW8gaXMgcmVxdWVzdGVkLlwiXG4gIE1FTU9cbiAgXCJBIHJlY2VpcHQgaXMgcmVxdWVzdGVkLlwiXG4gIFJFQ0VJUFRcbiAgXCJBIG1hbmFnZXIgKG9yIG90aGVyKSByZXZpZXcgaXMgcmVxdWVzdGVkLlwiXG4gIFJFVklFV1xufVxuXG5cIlRoZSB0eXBlIG9mIHRoZSBSZXF1ZXN0LlwiXG5lbnVtIFJlcXVlc3RUeXBlIHtcbiAgXCJUaGlzIGlzIGEgYnVkZ2V0IHJlcXVlc3QuXCJcbiAgQlVER0VUXG4gIFwiVGhpcyBpcyBhbiBleHBlbnNlIHJlcXVlc3QuXCJcbiAgRVhQRU5TRVxufVxuXG5cIklTT3ogZGF0ZVwiXG5zY2FsYXIgRGF0ZVxuXG5cIkpzb24gb2JqZWN0XCJcbnNjYWxhciBKc29uXG5cblwiNjRCaXQgaW50ZWdlclwiXG5zY2FsYXIgTG9uZ1xuXG5cIklTT3ogdGltZVwiXG5zY2FsYXIgVGltZVxuXG5zY2FsYXIgX0FueVxuXG5zY2FsYXIgX0ZpZWxkU2V0XG5cbmlucHV0IENyZWF0ZUluc2lnaHRzU2NlbmFyaW9FdmVudElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nXG4gIFwiU2NlbmFyaW9FdmVudCBjcmVhdGlvbiBpbnB1dHNcIlxuICBldmVudDogSW5zaWdodHNTY2VuYXJpb0V2ZW50Q3JlYXRpb25JbnB1dCFcbiAgXCJJZGVtcG90ZW5jeSBrZXlcIlxuICBpZGVtcG90ZW5jeUtleTogU3RyaW5nIVxuICBcIlNjZW5hcmlvIHRoaXMgZXZlbnQgaXMgZm9yXCJcbiAgc2NlbmFyaW9JZDogU3RyaW5nIVxufVxuXG5pbnB1dCBDcmVhdGVJbnNpZ2h0c1NjZW5hcmlvRXZlbnRzSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmdcbiAgXCJDcmVhdGUgbXVsdGlwbGUgc2NlbmFyaW8gZXZlbnRzXCJcbiAgaW5wdXRzOiBbQ3JlYXRlSW5zaWdodHNTY2VuYXJpb0V2ZW50SW5wdXQhXSFcbn1cblxuXCIgICB8LS0tWyBRdWVyeSBJbnB1dHMgXS0tLS0tLS0tLS0tLS0tLS1cIlxuaW5wdXQgQ3JlYXRlSW5zaWdodHNTY2VuYXJpb0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nXG4gIFwiSWRlbXBvdGVuY3kga2V5XCJcbiAgaWRlbXBvdGVuY3lLZXk6IFN0cmluZyFcbiAgXCJTY2VuYXJpbyBjcmVhdGlvbiBpbnB1dHNcIlxuICBzY2VuYXJpbzogSW5zaWdodHNTY2VuYXJpb0NyZWF0aW9uSW5wdXQhXG59XG5cbmlucHV0IERlbGV0ZUluc2lnaHRzU2NlbmFyaW9FdmVudElucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nXG4gIFwiSUQgb2YgU2NlbmFyaW9FdmVudCB0byBkZWxldGVcIlxuICBpZDogSUQhXG59XG5cbmlucHV0IERlbGV0ZUluc2lnaHRzU2NlbmFyaW9FdmVudHNJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZ1xuICBcIkRlbGV0ZSBtdWx0aXBsZSBzY2VuYXJpbyBldmVudHMuXCJcbiAgaWRzOiBbSUQhXSFcbn1cblxuaW5wdXQgRGVsZXRlSW5zaWdodHNTY2VuYXJpb0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nXG4gIFwiSUQgb2Ygc2NlbmFyaW8gdG8gZGVsZXRlXCJcbiAgaWQ6IElEIVxufVxuXG5cIlwiXCJcbiBGcm9tIEFQSXYxXG4gaHR0cHM6Ly9naXRodWIuY29tL2JyZXhocS9jcmVkaXRfY2FyZC9ibG9iL21haW4vYXBwcy9hcGkvbGliL2FwaS93ZWIvc2NoZW1hL2ZpbmFuY2lhbF9hc3NldC5leCNMMTNcblwiXCJcIlxuaW5wdXQgRmluYW5jaWFsQXNzZXRJbnB1dCB7XG4gIFwiVGhlIGluc3RydW1lbnQgY29kZSAodXNkLCBldGMuKS4gQ3VycmVudGx5LCBvbmx5IHVzZCBpcyBzdXBwb3J0ZWQuXCJcbiAgaW5zdHJ1bWVudENvZGU6IEZpbmFuY2lhbEluc3RydW1lbnRDb2RlID0gVVNEXG4gIFwiVGhlIGFtb3VudCBpbiBjZW50c1wiXG4gIHF1YW50aXR5Q2VudHM6IEludFxufVxuXG5pbnB1dCBGaW5hbmNpYWxBc3NldFJhbmdlSW5wdXQge1xuICBcIkV4Y2x1c2l2ZSwgb25seSBjb25zaWRlcnMgZ2l2ZW4gY3VycmVuY3ksIHJlcXVpcmVkIHRvIGhhdmUgc2FtZSBjdXJyZW5jeSB3aGVuIG1pbkFtb3VudCBpcyBwcm92aWRlZC5cIlxuICBtYXhBbW91bnQ6IEZpbmFuY2lhbEFzc2V0SW5wdXRcbiAgXCJJbmNsdXNpdmUsIG9ubHkgY29uc2lkZXJzIGdpdmVuIGN1cnJlbmN5LCByZXF1aXJlZCB0byBoYXZlIHNhbWUgY3VycmVuY3kgd2hlbiBtYXhBbW91bnQgaXMgcHJvdmlkZWQuXCJcbiAgbWluQW1vdW50OiBGaW5hbmNpYWxBc3NldElucHV0XG59XG5cbmlucHV0IEluc2lnaHRzRnVuZHJhaXNpbmdFdmVudERldGFpbHNDcmVhdGlvbklucHV0IHtcbiAgXCJGdW5kcmFpc2luZyBhbW91bnQgaW4gVVNEIGNlbnRzXCJcbiAgYW1vdW50VXNkQ2VudHM6IExvbmchXG59XG5cbmlucHV0IEluc2lnaHRzRnVuZHJhaXNpbmdFdmVudERldGFpbHNVcGRhdGVJbnB1dCB7XG4gIFwiRnVuZHJhaXNpbmcgYW1vdW50IGluIFVTRCBjZW50c1wiXG4gIGFtb3VudFVzZENlbnRzOiBMb25nXG59XG5cbmlucHV0IEluc2lnaHRzR2VuZXJpY0V2ZW50RGV0YWlsc0NyZWF0aW9uSW5wdXQge1xuICBcIkluaXRpYWwgYW1vdW50IGluIFVTRCBjZW50c1wiXG4gIGluaXRpYWxBbW91bnRVc2RDZW50czogTG9uZyFcbiAgXCJcIlwiXG4gIElmIHJlY3VycmluZ19jYWRlbmNlIGlzIGRlZmluZWQsIGFwcGx5IHRoaXMgYW1vdW50IGZvciBlYWNoIHJlY3VycmluZ19jYWRlbmNlXG4gIGluc3RhbmNlIGJldHdlZW4gdGhlIGV2ZW50J3MgW3N0YXJ0RGF0ZSwgZW5kRGF0ZSkgcGVyaW9kXG4gIFwiXCJcIlxuICByZWN1cnJpbmdBbW91bnRVc2RDZW50czogTG9uZ1xuICBcIlRoZSBjYWRlbmNlIG9mIHRoZSByZWN1cnJpbmcgY29zdFwiXG4gIHJlY3VycmluZ0NhZGVuY2U6IEluc2lnaHRzR2VuZXJpY0V2ZW50UmVjdXJyaW5nQ2FkZW5jZVxuICBcIkdlbmVyaWMgZXZlbnQgdGl0bGVcIlxuICB0aXRsZTogU3RyaW5nIVxufVxuXG5pbnB1dCBJbnNpZ2h0c0dlbmVyaWNFdmVudERldGFpbHNVcGRhdGVJbnB1dCB7XG4gIFwiSW5pdGlhbCBhbW91bnQgaW4gVVNEIGNlbnRzXCJcbiAgaW5pdGlhbEFtb3VudFVzZENlbnRzOiBMb25nXG4gIFwiXCJcIlxuICBJZiByZWN1cnJpbmdfY2FkZW5jZSBpcyBkZWZpbmVkLCBhcHBseSB0aGlzIGFtb3VudCBmb3IgZWFjaCByZWN1cnJpbmdfY2FkZW5jZVxuICBpbnN0YW5jZSBiZXR3ZWVuIHRoZSBldmVudCdzIFtzdGFydERhdGUsIGVuZERhdGUpIHBlcmlvZFxuICBcIlwiXCJcbiAgcmVjdXJyaW5nQW1vdW50VXNkQ2VudHM6IExvbmdcbiAgXCJUaGUgY2FkZW5jZSBvZiB0aGUgcmVjdXJyaW5nIGNvc3RcIlxuICByZWN1cnJpbmdDYWRlbmNlOiBJbnNpZ2h0c0dlbmVyaWNFdmVudFJlY3VycmluZ0NhZGVuY2VcbiAgXCJHZW5lcmljIGV2ZW50IHRpdGxlXCJcbiAgdGl0bGU6IFN0cmluZ1xufVxuXG5pbnB1dCBJbnNpZ2h0c0hpcmluZ0V2ZW50RGV0YWlsc0NyZWF0aW9uSW5wdXQge1xuICBcIkJlbmVmaXRzIHBvcnRpb24gb2YgdGhlIGhpcmluZyBjb3N0IGJyZWFrZG93biBpbiBVU0QgY2VudHNcIlxuICBiZW5lZml0c0Ftb3VudFVzZENlbnRzOiBMb25nIVxuICBcIkhvdyBtYW55IGVtcGxveWVlcyBhcmUgcGxhbm5lZCB0byBiZSBoaXJlZFwiXG4gIGVtcGxveWVlQ291bnQ6IEludCFcbiAgXCJUaGUgbG9jYXRpb24gdGhlIGVtcGxveWVlIHdpbGwgYmUgaGlyZWQgYXRcIlxuICBlbXBsb3llZUxvY2F0aW9uOiBTdHJpbmchXG4gIFwiRW1wbG95ZWUgdGl0bGVcIlxuICBlbXBsb3llZVRpdGxlOiBTdHJpbmchXG4gIFwiRXF1aXBtZW50IHBvcnRpb24gb2YgdGhlIGhpcmluZyBjb3N0IGJyZWFrZG93biBpbiBVU0QgY2VudHNcIlxuICBlcXVpcG1lbnRBbW91bnRVc2RDZW50czogTG9uZyFcbiAgXCJNaXNjZWxsYW5lb3VzIHBvcnRpb24gb2YgdGhlIGhpcmluZyBjb3N0IGJyZWFrZG93biBpbiBVU0QgY2VudHNcIlxuICBtaXNjZWxsYW5lb3VzQW1vdW50VXNkQ2VudHM6IExvbmchXG4gIFwiUmVjcnVpdGluZyBwb3J0aW9uIG9mIHRoZSBoaXJpbmcgY29zdCBicmVha2Rvd24gaW4gVVNEIGNlbnRzXCJcbiAgcmVjcnVpdGluZ0Ftb3VudFVzZENlbnRzOiBMb25nIVxuICBcIlNhbGFyeSBwb3J0aW9uIG9mIHRoZSBoaXJpbmcgY29zdCBicmVha2Rvd24gaW4gVVNEIGNlbnRzXCJcbiAgc2FsYXJ5QW1vdW50VXNkQ2VudHM6IExvbmchXG4gIFwiU2lnbi1PbiBib251cyBwb3J0aW9uIG9mIHRoZSBoaXJpbmcgY29zdCBicmVha2Rvd24gaW4gVVNEIGNlbnRzXCJcbiAgc2lnbk9uQm9udXNBbW91bnRVc2RDZW50czogTG9uZyFcbn1cblxuaW5wdXQgSW5zaWdodHNIaXJpbmdFdmVudERldGFpbHNVcGRhdGVJbnB1dCB7XG4gIFwiQmVuZWZpdHMgcG9ydGlvbiBvZiB0aGUgaGlyaW5nIGNvc3QgYnJlYWtkb3duIGluIFVTRCBjZW50c1wiXG4gIGJlbmVmaXRzQW1vdW50VXNkQ2VudHM6IExvbmdcbiAgXCJIb3cgbWFueSBlbXBsb3llZXMgYXJlIHBsYW5uZWQgdG8gYmUgaGlyZWRcIlxuICBlbXBsb3llZUNvdW50OiBJbnRcbiAgXCJUaGUgbG9jYXRpb24gdGhlIGVtcGxveWVlIHdpbGwgYmUgaGlyZWQgYXRcIlxuICBlbXBsb3llZUxvY2F0aW9uOiBTdHJpbmdcbiAgXCJFbXBsb3llZSB0aXRsZVwiXG4gIGVtcGxveWVlVGl0bGU6IFN0cmluZ1xuICBcIkVxdWlwbWVudCBwb3J0aW9uIG9mIHRoZSBoaXJpbmcgY29zdCBicmVha2Rvd24gaW4gVVNEIGNlbnRzXCJcbiAgZXF1aXBtZW50QW1vdW50VXNkQ2VudHM6IExvbmdcbiAgXCJNaXNjZWxsYW5lb3VzIHBvcnRpb24gb2YgdGhlIGhpcmluZyBjb3N0IGJyZWFrZG93biBpbiBVU0QgY2VudHNcIlxuICBtaXNjZWxsYW5lb3VzQW1vdW50VXNkQ2VudHM6IExvbmdcbiAgXCJSZWNydWl0aW5nIHBvcnRpb24gb2YgdGhlIGhpcmluZyBjb3N0IGJyZWFrZG93biBpbiBVU0QgY2VudHNcIlxuICByZWNydWl0aW5nQW1vdW50VXNkQ2VudHM6IExvbmdcbiAgXCJTYWxhcnkgcG9ydGlvbiBvZiB0aGUgaGlyaW5nIGNvc3QgYnJlYWtkb3duIGluIFVTRCBjZW50c1wiXG4gIHNhbGFyeUFtb3VudFVzZENlbnRzOiBMb25nXG4gIFwiU2lnbi1PbiBib251cyBwb3J0aW9uIG9mIHRoZSBoaXJpbmcgY29zdCBicmVha2Rvd24gaW4gVVNEIGNlbnRzXCJcbiAgc2lnbk9uQm9udXNBbW91bnRVc2RDZW50czogTG9uZ1xufVxuXG5cIlwiXCJcbiAtLS1bIElucHV0IFR5cGVzIF0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgfC0tLVsgQ3JlYXRpb24gSW5wdXQgVHlwZXMgXS0tLS0tLS0tXG5cIlwiXCJcbmlucHV0IEluc2lnaHRzU2NlbmFyaW9DcmVhdGlvbklucHV0IHtcbiAgXCJTY2VuYXJpbyBuYW1lXCJcbiAgbmFtZTogU3RyaW5nIVxufVxuXG5pbnB1dCBJbnNpZ2h0c1NjZW5hcmlvRXZlbnRDcmVhdGlvbklucHV0IHtcbiAgXCJFdmVudCB0eXBlIGFuZCBpdHMgc3BlY2lmaWMgZGV0YWlsc1wiXG4gIGRldGFpbHM6IEluc2lnaHRzU2NlbmFyaW9FdmVudERldGFpbHNDcmVhdGlvbklucHV0VW5pb24hXG4gIFwiVGhlIGVuZERhdGUgb2YgdGhlIGV2ZW50IGlzIEVYQ0xVU0lWRSBhbmQgaWYgc2V0IHRvIE5VTEwgdGhlIGV2ZW50IG5ldmVyIGVuZHNcIlxuICBlbmREYXRlOiBEYXRlXG4gIFwiSWYgc2V0IHRvIHRydWUsIHRoZSBldmVudCB3aWxsIGltcGFjdCB0aGUgc2NlbmFyaW8gZm9yZWNhc3RcIlxuICBpc0VuYWJsZWQ6IEJvb2xlYW4hXG4gIFwiXCJcIlxuICBEYXRlIHJhbmdlIHRoZSBldmVudCBpcyBhY3RpdmUgaXMgZm9yIFtzdGFydERhdGUsIGVuZERhdGUpXG4gIFRoZSBzdGFydERhdGUgaXMgSU5DTFVTSVZFXG4gIFwiXCJcIlxuICBzdGFydERhdGU6IERhdGUhXG59XG5cblwiXCJcIlxuQWN0cyBhcyBhbiBpbnB1dCB1bmlvbiBkZXBlbmRpbmcgb24gd2hpY2ggZmllbGQgaXMgbm90IE5VTExcbk9uZSBmaWVsZCBpcyByZXF1aXJlZCB0byBiZSBzZXRcblwiXCJcIlxuaW5wdXQgSW5zaWdodHNTY2VuYXJpb0V2ZW50RGV0YWlsc0NyZWF0aW9uSW5wdXRVbmlvbiB7XG4gIGZ1bmRyYWlzaW5nRXZlbnREZXRhaWxzOiBJbnNpZ2h0c0Z1bmRyYWlzaW5nRXZlbnREZXRhaWxzQ3JlYXRpb25JbnB1dFxuICBnZW5lcmljRXZlbnREZXRhaWxzOiBJbnNpZ2h0c0dlbmVyaWNFdmVudERldGFpbHNDcmVhdGlvbklucHV0XG4gIGhpcmluZ0V2ZW50RGV0YWlsczogSW5zaWdodHNIaXJpbmdFdmVudERldGFpbHNDcmVhdGlvbklucHV0XG59XG5cblwiXCJcIlxuQWN0cyBhcyBhbiBpbnB1dCB1bmlvbiBkZXBlbmRpbmcgb24gd2hpY2ggZmllbGQgaXMgbm90IE5VTExcbk9uZSBmaWVsZCBpcyByZXF1aXJlZCB0byBiZSBzZXRcblwiXCJcIlxuaW5wdXQgSW5zaWdodHNTY2VuYXJpb0V2ZW50RGV0YWlsc1VwZGF0ZUlucHV0VW5pb24ge1xuICBmdW5kcmFpc2luZ0V2ZW50RGV0YWlsczogSW5zaWdodHNGdW5kcmFpc2luZ0V2ZW50RGV0YWlsc1VwZGF0ZUlucHV0XG4gIGdlbmVyaWNFdmVudERldGFpbHM6IEluc2lnaHRzR2VuZXJpY0V2ZW50RGV0YWlsc1VwZGF0ZUlucHV0XG4gIGhpcmluZ0V2ZW50RGV0YWlsczogSW5zaWdodHNIaXJpbmdFdmVudERldGFpbHNVcGRhdGVJbnB1dFxufVxuXG5pbnB1dCBJbnNpZ2h0c1NjZW5hcmlvRXZlbnRVcGRhdGVJbnB1dCB7XG4gIFwiRXZlbnQgdHlwZSBhbmQgaXRzIHNwZWNpZmljIGRldGFpbHNcIlxuICBkZXRhaWxzOiBJbnNpZ2h0c1NjZW5hcmlvRXZlbnREZXRhaWxzVXBkYXRlSW5wdXRVbmlvblxuICBcIlRoZSBlbmREYXRlIG9mIHRoZSBldmVudCBpcyBFWENMVVNJVkUgYW5kIGlmIHNldCB0byBOVUxMIHRoZSBldmVudCBuZXZlciBlbmRzXCJcbiAgZW5kRGF0ZTogRGF0ZVxuICBcIklmIHNldCB0byB0cnVlLCB0aGUgZXZlbnQgd2lsbCBpbXBhY3QgdGhlIHNjZW5hcmlvIGZvcmVjYXN0XCJcbiAgaXNFbmFibGVkOiBCb29sZWFuXG4gIFwiXCJcIlxuICBEYXRlIHJhbmdlIHRoZSBldmVudCBpcyBhY3RpdmUgaXMgZm9yIFtzdGFydERhdGUsIGVuZERhdGUpXG4gIFRoZSBzdGFydERhdGUgaXMgSU5DTFVTSVZFXG4gIFwiXCJcIlxuICBzdGFydERhdGU6IERhdGVcbn1cblxuXCIgICB8LS0tWyBVcGRhdGUgSW5wdXQgVHlwZXMgXS0tLS0tLS0tLS1cIlxuaW5wdXQgSW5zaWdodHNTY2VuYXJpb1VwZGF0ZUlucHV0IHtcbiAgXCJTY2VuYXJpbyBuYW1lXCJcbiAgbmFtZTogU3RyaW5nXG59XG5cblwiXCJcIlxuUGFnaW5hdGlvbiBwYXJhbWV0ZXJzIGZvciBlbnVtZXJhdGluZyBpdGVtcyBpbiBhIGNvbm5lY3Rpb24uXG5Pbmx5IHtmaXJzdCwgYWZ0ZXJ9IE9SIHtsYXN0LCBiZWZvcmV9IHBhaXJzIGNhbiBiZSBzZXQuXG5lLmcuIElmIHtmaXJzdCwgYmVmb3JlfSBpcyBzZXQsIHRoYXQgd2lsbCBjYXVzZSBhIHZhbGlkYXRpb24gZXJyb3IuXG5UaGUgY3Vyc29ycyBhcmUgb3B0aW9uYWwuIFdpdGhvdXQgYSBzcGVjaWZpZWQgY3Vyc29yLCBpdCBpcyBhc3N1bWVkIHRvIHN0YXJ0IGF0XG50aGUgZmlyc3QgaXRlbSAoZm9yIGBmaXJzdGApIG9yIGxhc3QgaXRlbSAoZm9yIGBsYXN0YCkgb2YgdGhlIGNvbGxlY3Rpb24uXG5cIlwiXCJcbmlucHV0IFBhZ2luYXRpb25JbnB1dCB7XG4gIFwiVGhlIGN1cnNvciB0byBzdGFydCB0aGUgcGFnZSBhdCAoZXhjbHVzaXZlKS5cIlxuICBhZnRlcjogU3RyaW5nXG4gIFwiVGhlIGN1cnNvciB0byBlbmQgdGhlIHBhZ2UgYXQgKGV4Y2x1c2l2ZSkuXCJcbiAgYmVmb3JlOiBTdHJpbmdcbiAgXCJUaGUgbnVtYmVyIG9mIGl0ZW1zIHRvIHJldHVybiBpbiBhIHBhZ2UgYWZ0ZXIgdGhlIGBhZnRlcmAgY3Vyc29yLlwiXG4gIGZpcnN0OiBJbnRcbiAgXCJUaGUgbnVtYmVyIG9mIGl0ZW1zIHRvIHJldHVybiBpbiBhIHBhZ2UgcHJpb3IgdG8gdGhlIGBiZWZvcmVgIGN1cnNvci5cIlxuICBsYXN0OiBJbnRcbn1cblxuaW5wdXQgVGltZUludGVydmFsSW5wdXQge1xuICBcIkV4Y2x1c2l2ZSBlbmQgYXQuXCJcbiAgZW5kQXQ6IFRpbWVcbiAgXCJJbmNsdXNpdmUgc3RhcnQgYXQuXCJcbiAgc3RhcnRBdDogVGltZVxufVxuXG5pbnB1dCBVcGRhdGVJbnNpZ2h0c1NjZW5hcmlvRXZlbnRJbnB1dCB7XG4gIGNsaWVudE11dGF0aW9uSWQ6IFN0cmluZ1xuICBcIlNjZW5hcmlvRXZlbnQgdXBkYXRlIHZhbHVlc1wiXG4gIGV2ZW50OiBJbnNpZ2h0c1NjZW5hcmlvRXZlbnRVcGRhdGVJbnB1dCFcbiAgXCJJRCBvZiBTY2VuYXJpb0V2ZW50IHRvIHVwZGF0ZVwiXG4gIGlkOiBJRCFcbn1cblxuaW5wdXQgVXBkYXRlSW5zaWdodHNTY2VuYXJpb0V2ZW50c0lucHV0IHtcbiAgY2xpZW50TXV0YXRpb25JZDogU3RyaW5nXG4gIFwiVXBkYXRlIG11bHRpcGxlIHNjZW5hcmlvIGV2ZW50c1wiXG4gIHVwZGF0ZXM6IFtVcGRhdGVJbnNpZ2h0c1NjZW5hcmlvRXZlbnRJbnB1dCFdIVxufVxuXG5pbnB1dCBVcGRhdGVJbnNpZ2h0c1NjZW5hcmlvSW5wdXQge1xuICBjbGllbnRNdXRhdGlvbklkOiBTdHJpbmdcbiAgXCJJRCBvZiBzY2VuYXJpbyB0byB1cGRhdGVcIlxuICBpZDogSUQhXG4gIFwiU2NlbmFyaW8gdXBkYXRlIHZhbHVlc1wiXG4gIHNjZW5hcmlvOiBJbnNpZ2h0c1NjZW5hcmlvVXBkYXRlSW5wdXQhXG59XG4iLAogICJzZXJ2aWNlIiA6ICJld29nSUNKdVlXMWxJaUE2SUNKcGJuTnBaMmgwY3kxa1ozTWlMQW9nSUNKMWNtd2lJRG9nSW1oMGRIQTZMeTlwYm5OcFoyaDBjeTFrWjNNNk9EQTRNQzkyTVM5bmNtRndhSEZzSWl3S0lDQWlhWE5mWVdOMGFYWmxJaUE2SUhSeWRXVXNDaUFnSW5Wd1pHRjBaV1JmWVhSZmMyVmpiMjVrY3lJZ09pQTVMQW9nSUNKcGJuTmxjblJsWkY5aGRGOXpaV052Ym1SeklpQTZJRE1LZlE9PSIsCiAgImluc2VydGVkX2F0X3NlY29uZHMiIDogMjUKfSBd	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
\.


--
-- Name: deployment_records deployment_records_service_id_schema_version_supergraph_id_key; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.deployment_records
    ADD CONSTRAINT deployment_records_service_id_schema_version_supergraph_id_key UNIQUE (service_id, schema_version, supergraph_id);


--
-- Name: flyway_schema_history flyway_schema_history_pk; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.flyway_schema_history
    ADD CONSTRAINT flyway_schema_history_pk PRIMARY KEY (installed_rank);


--
-- Name: schemas schemas_pkey; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.schemas
    ADD CONSTRAINT schemas_pkey PRIMARY KEY (id);


--
-- Name: service_schema_record_activations service_schema_record_activations_service_id_schema_id_key; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.service_schema_record_activations
    ADD CONSTRAINT service_schema_record_activations_service_id_schema_id_key UNIQUE (service_id, schema_id);


--
-- Name: service_schema_records service_schema_records_pkey; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.service_schema_records
    ADD CONSTRAINT service_schema_records_pkey PRIMARY KEY (id);


--
-- Name: services services_name_key; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.services
    ADD CONSTRAINT services_name_key UNIQUE (name);


--
-- Name: services services_pkey; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.services
    ADD CONSTRAINT services_pkey PRIMARY KEY (id);


--
-- Name: supergraph_records supergraph_records_pkey; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.supergraph_records
    ADD CONSTRAINT supergraph_records_pkey PRIMARY KEY (id);


--
-- Name: flyway_schema_history_s_idx; Type: INDEX; Schema: public; Owner: graphql_schema_registry
--

CREATE INDEX flyway_schema_history_s_idx ON public.flyway_schema_history USING btree (success);


--
-- Name: deployment_records deployment_records_fk_service; Type: FK CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.deployment_records
    ADD CONSTRAINT deployment_records_fk_service FOREIGN KEY (service_id) REFERENCES public.services(id);


--
-- Name: schemas schemas_fk_service; Type: FK CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.schemas
    ADD CONSTRAINT schemas_fk_service FOREIGN KEY (service_id) REFERENCES public.services(id);


--
-- Name: service_schema_records service_schema_fk_schema; Type: FK CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.service_schema_records
    ADD CONSTRAINT service_schema_fk_schema FOREIGN KEY (schema_id) REFERENCES public.schemas(id);


--
-- Name: service_schema_records service_schema_fk_service; Type: FK CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.service_schema_records
    ADD CONSTRAINT service_schema_fk_service FOREIGN KEY (service_id) REFERENCES public.services(id);


--
-- Name: service_schema_record_activations service_schema_record_activations_fk_schema; Type: FK CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.service_schema_record_activations
    ADD CONSTRAINT service_schema_record_activations_fk_schema FOREIGN KEY (schema_id) REFERENCES public.schemas(id);


--
-- Name: service_schema_record_activations service_schema_record_activations_fk_service; Type: FK CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.service_schema_record_activations
    ADD CONSTRAINT service_schema_record_activations_fk_service FOREIGN KEY (service_id) REFERENCES public.services(id);


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: graphql_schema_registry
--

REVOKE ALL ON SCHEMA public FROM rdsadmin;
REVOKE ALL ON SCHEMA public FROM PUBLIC;
GRANT ALL ON SCHEMA public TO graphql_schema_registry;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

