--
-- PostgreSQL database dump
--

-- Dumped from database version 13.3
-- Dumped by pg_dump version 13.5 (Debian 13.5-0+deb11u1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: deploymentstatusenum; Type: TYPE; Schema: public; Owner: graphql_schema_registry
--

CREATE TYPE public.deploymentstatusenum AS ENUM (
    'Success',
    'ComposeFailed'
);


ALTER TYPE public.deploymentstatusenum OWNER TO graphql_schema_registry;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: deployment_records; Type: TABLE; Schema: public; Owner: graphql_schema_registry
--

CREATE TABLE public.deployment_records (
    id character varying(255) NOT NULL,
    service_id character varying(255) NOT NULL,
    schema_version character varying(100) NOT NULL,
    supergraph_id character varying(255) NOT NULL,
    deployment_status public.deploymentstatusenum,
    type_defs text,
    inserted_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.deployment_records OWNER TO graphql_schema_registry;

--
-- Name: flyway_schema_history; Type: TABLE; Schema: public; Owner: graphql_schema_registry
--

CREATE TABLE public.flyway_schema_history (
    installed_rank integer NOT NULL,
    version character varying(50),
    description character varying(200) NOT NULL,
    type character varying(20) NOT NULL,
    script character varying(1000) NOT NULL,
    checksum integer,
    installed_by character varying(100) NOT NULL,
    installed_on timestamp without time zone DEFAULT now() NOT NULL,
    execution_time integer NOT NULL,
    success boolean NOT NULL
);


ALTER TABLE public.flyway_schema_history OWNER TO graphql_schema_registry;

--
-- Name: schemas; Type: TABLE; Schema: public; Owner: graphql_schema_registry
--

CREATE TABLE public.schemas (
    id character varying(255) NOT NULL,
    service_id character varying(255) NOT NULL,
    type_defs text,
    inserted_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.schemas OWNER TO graphql_schema_registry;

--
-- Name: service_schema_record_activations; Type: TABLE; Schema: public; Owner: graphql_schema_registry
--

CREATE TABLE public.service_schema_record_activations (
    id character varying(255) NOT NULL,
    service_id character varying(255) NOT NULL,
    schema_id character varying(255) NOT NULL,
    inserted_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.service_schema_record_activations OWNER TO graphql_schema_registry;

--
-- Name: service_schema_records; Type: TABLE; Schema: public; Owner: graphql_schema_registry
--

CREATE TABLE public.service_schema_records (
    id character varying(255) NOT NULL,
    service_id character varying(255) NOT NULL,
    schema_id character varying(255) NOT NULL,
    version character varying(100) NOT NULL,
    inserted_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.service_schema_records OWNER TO graphql_schema_registry;

--
-- Name: services; Type: TABLE; Schema: public; Owner: graphql_schema_registry
--

CREATE TABLE public.services (
    id character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    is_active boolean DEFAULT true NOT NULL,
    inserted_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    url character varying(511) NOT NULL
);


ALTER TABLE public.services OWNER TO graphql_schema_registry;

--
-- Name: supergraph_records; Type: TABLE; Schema: public; Owner: graphql_schema_registry
--

CREATE TABLE public.supergraph_records (
    id character varying(255) NOT NULL,
    encoded_supergraph_schema text,
    inserted_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.supergraph_records OWNER TO graphql_schema_registry;

--
-- Data for Name: flyway_schema_history; Type: TABLE DATA; Schema: public; Owner: graphql_schema_registry
--

COPY public.flyway_schema_history (installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) FROM stdin;
1	1	create demo table	SQL	V1__create_demo_table.sql	-1490168436	graphql_schema_registry	2021-12-07 19:21:17.890783	31	t
2	20210727201559	create schema registry table	SQL	V20210727201559__create_schema_registry_table.sql	861697429	graphql_schema_registry	2021-12-07 19:21:18.000666	57	t
3	20210908110746	add schema uploading tables	SQL	V20210908110746__add_schema_uploading_tables.sql	-848472777	graphql_schema_registry	2021-12-07 19:21:18.103343	51	t
4	20210910000835	make deployment records status enum	SQL	V20210910000835__make_deployment_records_status_enum.sql	239016943	graphql_schema_registry	2021-12-07 19:21:18.189896	27	t
5	20210930165648	add url in services	SQL	V20210930165648__add_url_in_services.sql	-968214937	graphql_schema_registry	2021-12-07 19:21:18.256483	58	t
6	20211022024451	loose supergraph id fk constraint in deployment record	SQL	V20211022024451__loose_supergraph_id_fk_constraint_in_deployment_record.sql	-1045083636	graphql_schema_registry	2021-12-07 19:21:18.348778	14	t
7	20220213174011	add schema record activation record table	SQL	V20220213174011__add_schema_record_activation_record_table.sql	-547518447	graphql_schema_registry	2022-02-25 21:51:05.045212	64	t
\.

COPY public.services (id, name, is_active, inserted_at, updated_at, url) FROM stdin;
sv_ckwwkl97x000a0e42crg0mk0h	expenses-dgs	t	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12	http://expenses-dgs:8080/v1/graphql
sv_ckwwklx3a000c0e42a95s2wzb	requests-dgs	t	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12	http://requests-dgs:8080/v1/graphql
sv_ckwwkmg94000e0e427i4onev8	policies-dgs	t	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12	http://policies-dgs:8080/v1/graphql
sv_ckwwkn11z000g0e425ef0dtpo	hierarchies-dgs	t	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12	http://hierarchies-dgs:8080/v1/graphql
sv_ckwwkkp9l00020e420yyi9lxn	budgets-dgs	t	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12	http://budgets-dgs:8080/v1/graphql
sv_ckwwkjzrg00000e42je5usvpp	api-v1	t	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12	http://api-federation:9000/v1/graphql
sv_cl02z9e17001w0e1884qstooi	insights-dgs	t	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12	http://insights-dgs:8080/v1/graphql
\.


COPY public.service_schema_record_activations (id, service_id, schema_id, inserted_at, updated_at) FROM stdin;
ssra_cl102d7bo001s0h71xe8z4lcq	sv_ckwwkmg94000e0e427i4onev8	sm_cl102d7bn001o0h71mjjubnps	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssra_cl102635g001i0h71kcfzp1ls	sv_cl02z9e17001w0e1884qstooi	sm_cl102635f001e0h7134zw51cl	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssra_cl101z83d00180h71u13wh42q	sv_ckwwkn11z000g0e425ef0dtpo	sm_cl101z83d00140h719i7q5924	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssra_cl101yyka000y0h71jzrf0tyi	sv_ckwwkl97x000a0e42crg0mk0h	sm_cl101yyk9000u0h71c2e86juh	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssra_cl101yvy0000o0h71tq8n44xg	sv_ckwwkkp9l00020e420yyi9lxn	sm_cl101yvy0000k0h71o093drz7	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssra_cl101yrhg000e0h713h14vusm	sv_ckwwklx3a000c0e42a95s2wzb	sm_cl101yrhf000a0h71siwu8ila	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssra_cl101y0gv00040h71efsue20d	sv_ckwwkjzrg00000e42je5usvpp	sm_cl101y0gi00000h71yljjqy80	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
\.


COPY public.service_schema_records (id, service_id, schema_id, version, inserted_at, updated_at) FROM stdin;
ssr_cl101y0gq00020h71btn4pu54	sv_ckwwkjzrg00000e42je5usvpp	sm_cl101y0gi00000h71yljjqy80	ac319f4efa05c6756732c458d2c403c6aa9173bca59b5bfac1cd7837e865a0ed	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssr_cl101yrhg000c0h71xpok68dg	sv_ckwwklx3a000c0e42a95s2wzb	sm_cl101yrhf000a0h71siwu8ila	348ce39f2ff0783c1b41a019743e7e7e70552c9756d33063bdaca7c0f1598155	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssr_cl101yvy0000m0h719ux4wmwi	sv_ckwwkkp9l00020e420yyi9lxn	sm_cl101yvy0000k0h71o093drz7	4ce2460b74e1f533abcbed6b2c782ccb27266f67b96b2bee1792f2b85dc6d6fe	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssr_cl101yyka000w0h714phqo9yc	sv_ckwwkl97x000a0e42crg0mk0h	sm_cl101yyk9000u0h71c2e86juh	d379b1694bd13154929663ab97083f7530da2944f257d76bbe8f1183e2646faa	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssr_cl101z83d00160h717hnjiv0x	sv_ckwwkn11z000g0e425ef0dtpo	sm_cl101z83d00140h719i7q5924	3ff43b8c63dc6e622c75fcc35c3ac424d64c075dffe9e51f207fbf6912d66304	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssr_cl102635g001g0h714btfb499	sv_cl02z9e17001w0e1884qstooi	sm_cl102635f001e0h7134zw51cl	9fd75362bcf16a047924e70cac31b0073c4a8b6027813bfb57091241f7358557	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
ssr_cl102d7bo001q0h71crh5prir	sv_ckwwkmg94000e0e427i4onev8	sm_cl102d7bn001o0h71mjjubnps	66ce38328b2708bff468cecdd7e4d8b0be9bec86fed5c69775ddae4f638d7db8	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
\.


COPY public.schemas (id, service_id, type_defs, inserted_at, updated_at) FROM stdin;
sm_cl101y0gi00000h71yljjqy80	sv_ckwwkjzrg00000e42je5usvpp	schema {
  query: RootQueryType
  mutation: RootMutationType
}

type RootMutationType {
  reconnectErpFeed(input: ReconnectErpFeedInput!): ReconnectErpFeedPayload
  finalizeConnectCredential(input: FinalizeConnectCredentialInput!): FinalizeConnectCredentialPayload
  updateEarlyAccessFeatureJoinStatus(input: UpdateEarlyAccessFeatureJoinStatusInput!): UpdateEarlyAccessFeatureJoinStatusPayload
  cancelCashTransaction(input: CancelCashTransactionInput!): CancelCashTransactionPayload
  processAccountClosure(input: ProcessAccountClosureInput!): ProcessAccountClosurePayload
  createPayment(input: CreatePaymentInput!): CreatePaymentPayload
  """Create a connection with the vendor"""
  createHrisConnection(input: CreateHrisConnectionInput!): CreateHrisConnectionPayload
  updateExpensesSettingAutoDismissMatcherJson(input: UpdateExpensesSettingAutoDismissMatcherJsonInput!): UpdateExpensesSettingAutoDismissMatcherJsonPayload
  redeemForBalance(input: RedeemForBalanceInput!): RedeemForBalancePayload
  """Bulk create contacts"""
  batchCreateContacts(input: BatchCreateContactsInput!): BatchCreateContactsPayload
  setReceivablesOffersOptedOutOfInstantPayouts(input: SetReceivablesOffersOptedOutOfInstantPayoutsInput!): SetReceivablesOffersOptedOutOfInstantPayoutsPayload
  finicityConnectGenerateFixUrl(input: FinicityConnectGenerateFixUrlInput!): FinicityConnectGenerateFixUrlPayload
  createCounterparty(input: CreateCounterpartyInput!): CreateCounterpartyPayload
  enableReimbursements(input: EnableReimbursementsInput!): EnableReimbursementsPayload
  redeemStatementEntryRefund(input: RedeemStatementEntryRefundInput!): RedeemStatementEntryRefundPayload
  deleteDepartment(input: DeleteDepartmentInput!): DeleteDepartmentPayload
  referUser(input: ReferUserInput!): ReferUserPayload
  pullDataAsync(input: PullDataAsyncInput!): PullDataAsyncPayload
  createNonPrimaryDepositsAccount(input: CreateNonPrimaryDepositsAccountInput!): CreateNonPrimaryDepositsAccountPayload
  cancelCashRecurringSchedule(input: CancelCashRecurringScheduleInput!): CancelCashRecurringSchedulePayload
  bulkDisconnectErpFeeds(input: BulkDisconnectErpFeedsInput!): BulkDisconnectErpFeedsPayload
  createPremiumSettingEvent(input: CreatePremiumSettingEventInput!): CreatePremiumSettingEventPayload
  sendMobileChequeDepositNotification(input: SendMobileChequeDepositNotificationInput!): SendMobileChequeDepositNotificationPayload
  """Submits a response to an existing RFI."""
  createResponseToRfi(input: CreateResponseToRfiInput!): CreateResponseToRfiPayload
  """Allows a user to opt into an incentive campaign"""
  optIntoIncentiveCampaign(input: OptIntoIncentiveCampaignInput!): OptIntoIncentiveCampaignPayload
  deleteLocation(input: DeleteLocationInput!): DeleteLocationPayload
  """Disconnected FSP and a client"""
  disconnectFspAndClient(input: DisconnectFspAndClientInput!): DisconnectFspAndClientPayload
  createCredential(input: CreateCredentialInput!): CreateCredentialPayload
  generateDepositsVerificationLetterDownloadUrl(input: GenerateDepositsVerificationLetterDownloadUrlInput!): GenerateDepositsVerificationLetterDownloadUrlPayload
  toggleRuleForStatementEntry(input: ToggleRuleForStatementEntryInput!): ToggleRuleForStatementEntryPayload
  completePendingRecordApprovalLoggedOut(input: CompletePendingRecordApprovalLoggedOutInput!): CompletePendingRecordApprovalLoggedOutPayload
  processDocument(input: ProcessDocumentInput!): ProcessDocumentPayload
  bulkInviteUsers(input: BulkInviteUsersInput!): BulkInviteUsersPayload
  activateIntegration(input: ActivateIntegrationInput!): ActivateIntegrationPayload
  cancelReimbursement(input: CancelReimbursementInput!): CancelReimbursementPayload
  """Removes the policy granting access for a FSP account to a tenant account"""
  removeFspBookkeeper(input: RemoveFspBookkeeperInput!): RemoveFspBookkeeperPayload
  activateCard(input: ActivateCardInput!): ActivateCardPayload
  disableIntegration(input: DisableIntegrationInput!): DisableIntegrationPayload
  updateCardDisplayName(input: UpdateCardDisplayNameInput!): UpdateCardDisplayNamePayload
  resetBackupCodes(input: ResetBackupCodesInput!): ResetBackupCodesPayload
  updateReimbursementMetadata(input: UpdateReimbursementMetadataInput!): UpdateReimbursementMetadataPayload
  withdrawFunds(input: WithdrawFundsInput!): WithdrawFundsPayload
  startDepositsOffboarding(input: StartDepositsOffboardingInput!): StartDepositsOffboardingPayload
  unsuspendCard(input: UnsuspendCardInput!): UnsuspendCardPayload
  createFileUploadUrl(input: CreateFileUploadUrlInput!): CreateFileUploadUrlPayload
  """Note: creates and connects NetSuite credential, no need to call connect_credential afterwards"""
  createNetsuiteCredential(input: CreateNetsuiteCredentialInput!): CreateNetsuiteCredentialPayload
  deleteReceipt(input: DeleteReceiptInput!): DeleteReceiptPayload
  sendBillPayment(input: SendBillPaymentInput!): SendBillPaymentPayload
  """Accepts devportal access agreement"""
  acceptDevAccessAgreement(input: AcceptDevAccessAgreementInput!): AcceptDevAccessAgreementPayload
  setPrimaryFundingSource(input: SetPrimaryFundingSourceInput!): SetPrimaryFundingSourcePayload
  disableReimbursements(input: DisableReimbursementsInput!): DisableReimbursementsPayload
  disableBills(input: DisableBillsInput!): DisableBillsPayload
  createLocation(input: CreateLocationInput!): CreateLocationPayload
  connectCredential(input: ConnectCredentialInput!): ConnectCredentialPayload
  processPageView(input: ProcessPageViewInput!): ProcessPageViewPayload
  """Update permission for user in Medusa"""
  updateUserPermission(input: UpdateUserPermissionInput!): UpdateUserPermissionPayload
  updateIntegrationSyncSettings(input: UpdateIntegrationSyncSettingsInput!): UpdateIntegrationSyncSettingsPayload
  updateExpensesSettingRules(input: UpdateExpensesSettingRulesInput!): UpdateExpensesSettingRulesPayload
  cancelApprovalsRequest(input: CancelApprovalsRequestInput!): CancelApprovalsRequestPayload
  editDepositsPaymentMemo(input: EditDepositsPaymentMemoInput!): EditDepositsPaymentMemoPayload
  """Add a user to the bookkeeper group, granting access to tenants available to the group"""
  addFspBookkeeperUser(input: AddFspBookkeeperUserInput!): AddFspBookkeeperUserPayload
  notifyUserOfCardRequest(input: NotifyUserOfCardRequestInput!): NotifyUserOfCardRequestPayload
  updateIntegrationSettings(input: UpdateIntegrationSettingsInput!): UpdateIntegrationSettingsPayload
  cancelPayment(input: CancelPaymentInput!): CancelPaymentPayload
  updatePaymentSource(input: UpdatePaymentSourceInput!): UpdatePaymentSourcePayload
  deletePaymentInstrument(input: DeletePaymentInstrumentInput!): DeletePaymentInstrumentPayload
  createInvoiceTemplate(input: CreateInvoiceTemplateInput!): CreateInvoiceTemplatePayload
  pushMarketoLeads(input: PushMarketoLeadsInput!): PushMarketoLeadsPayload
  setupMfa(input: SetupMfaInput!): SetupMfaPayload
  """Creates a new developer API token"""
  createDeveloperApiToken(input: CreateDeveloperApiTokenInput!): CreateDeveloperApiTokenPayload
  createCardTransactionInsightEvent(input: CreateCardTransactionInsightEventInput!): CreateCardTransactionInsightEventPayload
  """Updates the calling user''s email and sends a new Welcome email. Will fail if either the account or user is already active."""
  updateUserEmail(input: UpdateUserEmailInput!): UpdateUserEmailPayload
  setReceivablesOffersRevenueAccessEnabled(input: SetReceivablesOffersRevenueAccessEnabledInput!): SetReceivablesOffersRevenueAccessEnabledPayload
  updateCashTransaction(input: UpdateCashTransactionInput!): UpdateCashTransactionPayload
  updateLocation(input: UpdateLocationInput!): UpdateLocationPayload
  """Toggles flag boolean value off"""
  turnOffSeenFlag(input: TurnOffSeenFlagInput!): TurnOffSeenFlagPayload
  syncIntegration(input: SyncIntegrationInput!): SyncIntegrationPayload
  enableUser(input: EnableUserInput!): EnableUserPayload
  """Creates reimbursement csv report"""
  createReimbursementReport(input: CreateReimbursementReportInput!): CreateReimbursementReportPayload
  createReimbursement(input: CreateReimbursementInput!): CreateReimbursementPayload
  suspendCard(input: SuspendCardInput!): SuspendCardPayload
  createSubscription(input: CreateSubscriptionInput!): CreateSubscriptionPayload
  createApprovalsRequest(input: CreateApprovalsRequestInput!): CreateApprovalsRequestPayload
  removeFinancialSource(input: RemoveFinancialSourceInput!): RemoveFinancialSourcePayload
  """Revokes a developer API token"""
  revokeDeveloperApiToken(input: RevokeDeveloperApiTokenInput!): RevokeDeveloperApiTokenPayload
  updatePaymentInstrument(input: UpdatePaymentInstrumentInput!): UpdatePaymentInstrumentPayload
  setReceivablesOffersSellerAccountHasSeenFullAccessConfirmationBanner(input: SetReceivablesOffersSellerAccountHasSeenFullAccessConfirmationBannerInput!): SetReceivablesOffersSellerAccountHasSeenFullAccessConfirmationBannerPayload
  disableNonPrimaryFundingSources(input: DisableNonPrimaryFundingSourcesInput!): DisableNonPrimaryFundingSourcesPayload
  completeOnboarding(input: CompleteOnboardingInput!): CompleteOnboardingPayload
  saveOnboardingInformationRequest(input: SaveOnboardingInformationRequestInput!): SaveOnboardingInformationRequestPayload
  connectTellerInstitution(input: ConnectTellerInstitutionInput!): ConnectTellerInstitutionPayload
  createPhysicalCard(input: CreatePhysicalCardInput!): CreatePhysicalCardPayload
  """disable provided funding source and create a new one with new payload"""
  replaceFundingSource(input: ReplaceFundingSourceInput!): ReplaceFundingSourcePayload
  """Sets the monthly user limit, or removes the limit if nil"""
  setMonthlyUserLimit(input: SetMonthlyUserLimitInput!): SetMonthlyUserLimitPayload
  findOrCreateErpFeed(input: FindOrCreateErpFeedInput!): FindOrCreateErpFeedPayload
  updateCardFraudAlerts(input: UpdateCardFraudAlertsInput!): UpdateCardFraudAlertsPayload
  createFinancialBankStatementForNewAccount(input: CreateFinancialBankStatementForNewAccountInput!): CreateFinancialBankStatementForNewAccountPayload
  updateApprovalsRequest(input: UpdateApprovalsRequestInput!): UpdateApprovalsRequestPayload
  adminUpdateApprovalsReview(input: AdminUpdateApprovalsReviewInput!): AdminUpdateApprovalsReviewPayload
  createPushChannel(input: CreatePushChannelInput!): CreatePushChannelPayload
  resyncReimbursementItems(input: ResyncReimbursementItemsInput!): ResyncReimbursementItemsPayload
  completeCashTransactionApproval(input: CompleteCashTransactionApprovalInput!): CompleteCashTransactionApprovalPayload
  setApprovalsUnsafeFlag(input: SetApprovalsUnsafeFlagInput!): SetApprovalsUnsafeFlagPayload
  replaceCardWithVirtual(input: ReplaceCardWithVirtualInput!): ReplaceCardWithVirtualPayload
  acceptMultipleReceivablesOffersGroups(input: AcceptMultipleReceivablesOffersGroupsInput!): AcceptMultipleReceivablesOffersGroupsPayload
  submitFinancialInformationRequest(input: SubmitFinancialInformationRequestInput!): SubmitFinancialInformationRequestPayload
  """Sets the default accounting category for a given contact on a given integration."""
  updateContactDefaultErpCategory(input: UpdateContactDefaultErpCategoryInput!): UpdateContactDefaultErpCategoryPayload
  disconnectApiClient(input: DisconnectApiClientInput!): DisconnectApiClientPayload
  setReceivablesOffersSellerAccountConfirmedPayoutsRoutedToBrex(input: SetReceivablesOffersSellerAccountConfirmedPayoutsRoutedToBrexInput!): SetReceivablesOffersSellerAccountConfirmedPayoutsRoutedToBrexPayload
  """Toggles flag boolean value off"""
  turnOnSeenFlag(input: TurnOnSeenFlagInput!): TurnOnSeenFlagPayload
  createAutoAddFunds(input: CreateAutoAddFundsInput!): CreateAutoAddFundsPayload
  refreshIntegration(input: RefreshIntegrationInput!): RefreshIntegrationPayload
  setReceivablesOffersPayFeeWithRewards(input: SetReceivablesOffersPayFeeWithRewardsInput!): SetReceivablesOffersPayFeeWithRewardsPayload
  updateCardPin(input: UpdateCardPinInput!): UpdateCardPinPayload
  resetUser(input: ResetUserInput!): ResetUserPayload
  updateAccountAddress(input: UpdateAccountAddressInput!): UpdateAccountAddressPayload
  """Starts an asynchronous integration export"""
  startIntegrationExport(input: StartIntegrationExportInput!): StartIntegrationExportPayload
  convertCardAccountType(input: ConvertCardAccountTypeInput!): ConvertCardAccountTypePayload
  signup(input: SignupInput!): SignupPayload @deprecated(reason: "Use ''softSignup'' instead")
  updateApprovalsReview(input: UpdateApprovalsReviewInput!): UpdateApprovalsReviewPayload
  createCardTransactionInsightMutingPolicy(input: CreateCardTransactionInsightMutingPolicyInput!): CreateCardTransactionInsightMutingPolicyPayload
  connectAmazonMwsCredential(input: ConnectAmazonMwsCredentialInput!): ConnectAmazonMwsCredentialPayload
  """Creates report based on search query of statement entries and returns representative asset"""
  createStatementEntriesSearchReport(input: CreateStatementEntriesSearchReportInput!): CreateStatementEntriesSearchReportPayload
  createOpenidSession(input: CreateOpenidSessionInput!): CreateOpenidSessionPayload
  validateChequeImages(input: ValidateChequeImagesInput!): ValidateChequeImagesPayload
  createPayer(input: CreatePayerInput!): CreatePayerPayload
  bulkCreateSpendAlertEvent(input: BulkCreateSpendAlertEventInput!): BulkCreateSpendAlertEventPayload
  createIntegration(input: CreateIntegrationInput!): CreateIntegrationPayload
  refundPayment(input: RefundPaymentInput!): RefundPaymentPayload
  startResetUser(input: StartResetUserInput!): StartResetUserPayload
  """Deletes a connection if the user decides to disconnect their HRIS connection"""
  deleteHrisConnection(input: DeleteHrisConnectionInput!): DeleteHrisConnectionPayload
  sendInvoice(input: SendInvoiceInput!): SendInvoicePayload
  updateInstitutionLogin(input: UpdateInstitutionLoginInput!): UpdateInstitutionLoginPayload
  createCashTransaction(input: CreateCashTransactionInput!): CreateCashTransactionPayload
  """Disconnect a connected payroll provider integration"""
  disconnectPayrollProviderIntegration(input: DisconnectPayrollProviderIntegrationInput!): DisconnectPayrollProviderIntegrationPayload
  """Resends the user welcome/activation email"""
  resendWelcomeEmail(input: ResendWelcomeEmailInput!): ResendWelcomeEmailPayload
  updateTransactionIntegrationCustomer(input: UpdateTransactionIntegrationCustomerInput!): UpdateTransactionIntegrationCustomerPayload
  connectShopifyCredential(input: ConnectShopifyCredentialInput!): ConnectShopifyCredentialPayload
  createIntegrationRule(input: CreateIntegrationRuleInput!): CreateIntegrationRulePayload
  createFundingSource(input: CreateFundingSourceInput!): CreateFundingSourcePayload
  updateCardMetadata(input: UpdateCardMetadataInput!): UpdateCardMetadataPayload
  replaceCardWithPhysical(input: ReplaceCardWithPhysicalInput!): ReplaceCardWithPhysicalPayload
  advanceToNextStep(input: AdvanceToNextStepInput!): AdvanceToNextStepPayload
  """Enable an integration"""
  enableIntegration(input: EnableIntegrationInput!): EnableIntegrationPayload
  getOrCreatePaymentMethod(input: GetOrCreatePaymentMethodInput!): GetOrCreatePaymentMethodPayload
  completePromotion(input: CompletePromotionInput!): CompletePromotionPayload
  enableBills(input: EnableBillsInput!): EnableBillsPayload
  setAccountRestrictAchDebits(input: SetAccountRestrictAchDebitsInput!): SetAccountRestrictAchDebitsPayload
  """Mark the campaign as watched"""
  recordMarketingRewindWatch(input: RecordMarketingRewindWatchInput!): RecordMarketingRewindWatchPayload
  setReceivablesOffersConfirmedPayoutsRoutedToBrex(input: SetReceivablesOffersConfirmedPayoutsRoutedToBrexInput!): SetReceivablesOffersConfirmedPayoutsRoutedToBrexPayload
  finishChannelVerification(input: FinishChannelVerificationInput!): FinishChannelVerificationPayload
  generateCardStatementDocumentDownloadUrl(input: GenerateCardStatementDocumentDownloadUrlInput!): GenerateCardStatementDocumentDownloadUrlPayload
  updateExpensesSettingStatus(input: UpdateExpensesSettingStatusInput!): UpdateExpensesSettingStatusPayload
  disconnectErpFeed(input: DisconnectErpFeedInput!): DisconnectErpFeedPayload
  deleteCardTransactionInsightMutingPolicy(input: DeleteCardTransactionInsightMutingPolicyInput!): DeleteCardTransactionInsightMutingPolicyPayload
  prepareMultiFeeReceivablesOffersForAcceptance(input: PrepareMultiFeeReceivablesOffersForAcceptanceInput!): PrepareMultiFeeReceivablesOffersForAcceptancePayload
  connectInstitution(input: ConnectInstitutionInput!): ConnectInstitutionPayload
  processInvoice(input: ProcessInvoiceInput!): ProcessInvoicePayload
  updateIntegrationRule(input: UpdateIntegrationRuleInput!): UpdateIntegrationRulePayload
  createFraudDispute(input: CreateFraudDisputeInput!): CreateFraudDisputePayload
  softSignup(input: SoftSignupInput!): SoftSignupPayload
  updateTransactionCategory(input: UpdateTransactionCategoryInput!): UpdateTransactionCategoryPayload
  """Create or update a payment."""
  createOrUpdatePayment(input: CreateOrUpdatePaymentInput!): CreateOrUpdatePaymentPayload
  createAsset(input: CreateAssetInput!): CreateAssetPayload
  updateApprovalsReviews(input: UpdateApprovalsReviewsInput!): UpdateApprovalsReviewsPayload
  finicityConnectGenerateLiteUrl(input: FinicityConnectGenerateLiteUrlInput!): FinicityConnectGenerateLiteUrlPayload
  createDepositsApplication(input: CreateDepositsApplicationInput!): CreateDepositsApplicationPayload
  onboardingInformationRequest(id: ID!): OnboardingInformationRequest
  setReceivablesOffersAutoAdvanceMode(input: SetReceivablesOffersAutoAdvanceModeInput!): SetReceivablesOffersAutoAdvanceModePayload
  submitOnboardingInformationRequest(input: SubmitOnboardingInformationRequestInput!): SubmitOnboardingInformationRequestPayload
  beginChannelVerification(input: BeginChannelVerificationInput!): BeginChannelVerificationPayload
  createMonthlyUserLimitIncrease(input: CreateMonthlyUserLimitIncreaseInput!): CreateMonthlyUserLimitIncreasePayload
  provisionApplePay(input: ProvisionApplePayInput!): ProvisionApplePayPayload
  """For all integrations that match the filters, tests connectivity with integration vendor and updates credential status."""
  refreshIntegrationCredentials(input: RefreshIntegrationCredentialsInput!): RefreshIntegrationCredentialsPayload
  generateReceivablesPayoutReport(input: GenerateReceivablesPayoutReportInput!): GenerateReceivablesPayoutReportPayload
  bulkCreateExpensesItemEvent(input: BulkCreateExpensesItemEventInput!): BulkCreateExpensesItemEventPayload
  setSoftExpirationDate(input: SetSoftExpirationDateInput!): SetSoftExpirationDatePayload
  createExpensesFlagEvent(input: CreateExpensesFlagEventInput!): CreateExpensesFlagEventPayload
  updateTransactionMemo(input: UpdateTransactionMemoInput!): UpdateTransactionMemoPayload
  setReceivablesOffersSellerAccountHasSeenFailingChecksErrorBanner(input: SetReceivablesOffersSellerAccountHasSeenFailingChecksErrorBannerInput!): SetReceivablesOffersSellerAccountHasSeenFailingChecksErrorBannerPayload
  submitReimbursement(input: SubmitReimbursementInput!): SubmitReimbursementPayload
  acceptOffer(input: AcceptOfferInput!): AcceptOfferPayload
  """Mutation for setting specific integration fields. Generates a manual_override rule."""
  setStatementEntryIntegrationField(input: SetStatementEntryIntegrationFieldInput!): SetStatementEntryIntegrationFieldPayload
  setReceivablesOffersIntegrationFinancialAccountMappings(input: SetReceivablesOffersIntegrationFinancialAccountMappingsInput!): SetReceivablesOffersIntegrationFinancialAccountMappingsPayload
  createPhysicalCardV2(input: CreatePhysicalCardV2Input!): CreatePhysicalCardV2Payload
  createFinancialBankStatement(input: CreateFinancialBankStatementInput!): CreateFinancialBankStatementPayload
  createSmsChannel(input: CreateSmsChannelInput!): CreateSmsChannelPayload
  connectWeavCredential(input: ConnectWeavCredentialInput!): ConnectWeavCredentialPayload
  setReceivablesOffersSelectedTrialOnboarding(input: SetReceivablesOffersSelectedTrialOnboardingInput!): SetReceivablesOffersSelectedTrialOnboardingPayload
  activateUser(input: ActivateUserInput!): ActivateUserPayload
  changeInvestmentPolicy(input: ChangeInvestmentPolicyInput!): ChangeInvestmentPolicyPayload
  finicityConnectMigrateAccounts(input: FinicityConnectMigrateAccountsInput!): FinicityConnectMigrateAccountsPayload
  enableExpenses(input: EnableExpensesInput!): EnableExpensesPayload
  """Use to initiate Plaid Link in update mode"""
  updatePlaidLinkToken(input: UpdatePlaidLinkTokenInput!): UpdatePlaidLinkTokenPayload
  dismissPromotion(input: DismissPromotionInput!): DismissPromotionPayload
  """set spend alerts config for the current account"""
  setSpendAlertsConfiguration(input: SetSpendAlertsConfigurationInput!): SetSpendAlertsConfigurationPayload
  createPayrollProvider(input: CreatePayrollProviderInput!): CreatePayrollProviderPayload
  createPaymentInstrument(input: CreatePaymentInstrumentInput!): CreatePaymentInstrumentPayload
  issueCollection(input: IssueCollectionInput!): IssueCollectionPayload
  createEmailChannel(input: CreateEmailChannelInput!): CreateEmailChannelPayload
  completePendingRecordApproval(input: CompletePendingRecordApprovalInput!): CompletePendingRecordApprovalPayload
  setUserRole(input: SetUserRoleInput!): SetUserRolePayload
  createSubscriptions(input: CreateSubscriptionsInput!): CreateSubscriptionsPayload
  """Allows a user to opt into an incentive campaign"""
  optOutOfIncentiveCampaign(input: OptOutOfIncentiveCampaignInput!): OptOutOfIncentiveCampaignPayload
  disableExpenses(input: DisableExpensesInput!): DisableExpensesPayload
  createCashWireDetails(input: CreateCashWireDetailsInput!): CreateCashWireDetailsPayload
  deleteSubscription(input: DeleteSubscriptionInput!): DeleteSubscriptionPayload
  submitOnboardingApplication(input: SubmitOnboardingApplicationInput!): SubmitOnboardingApplicationPayload
  completePaymentApprovalWithToken(input: CompletePaymentApprovalWithTokenInput!): CompletePaymentApprovalWithTokenPayload
  updateTransactionBillableStatus(input: UpdateTransactionBillableStatusInput!): UpdateTransactionBillableStatusPayload
  cDa(input: CDaInput!): CDaPayload @deprecated(reason: "Use ''onboardingCreateApplication'' instead, passing in the blueprint name:''gemini''")
  deleteBill(input: DeleteBillInput!): DeleteBillPayload
  updateAutoAddFunds(input: UpdateAutoAddFundsInput!): UpdateAutoAddFundsPayload
  editPayment(input: EditPaymentInput!): EditPaymentPayload
  terminateCard(input: TerminateCardInput!): TerminateCardPayload
  deleteContact(input: DeleteContactInput!): DeleteContactPayload
  createPeriodicReviewApplication(input: CreatePeriodicReviewApplicationInput!): CreatePeriodicReviewApplicationPayload
  disableUser(input: DisableUserInput!): DisableUserPayload
  createApprovalsPolicies(input: CreateApprovalsPoliciesInput!): CreateApprovalsPoliciesPayload
  submitEarlyAccessFeatureSuggestion(input: SubmitEarlyAccessFeatureSuggestionInput!): SubmitEarlyAccessFeatureSuggestionPayload
  setDepositsTransactionPaymentMemo(input: SetDepositsTransactionPaymentMemoInput!): SetDepositsTransactionPaymentMemoPayload
  setTransactionIntegrationField(input: SetTransactionIntegrationFieldInput!): SetTransactionIntegrationFieldPayload
  markOfferSeen(input: MarkOfferSeenInput!): MarkOfferSeenPayload
  generateDepositsTransactionConfirmationDownloadUrl(input: GenerateDepositsTransactionConfirmationDownloadUrlInput!): GenerateDepositsTransactionConfirmationDownloadUrlPayload
  cancelCollectionIntention(input: CancelCollectionIntentionInput!): CancelCollectionIntentionPayload
  inviteUserWithMonthlyLimit(input: InviteUserWithMonthlyLimitInput!): InviteUserWithMonthlyLimitPayload
  generateReceivablesOffersGroupReport(input: GenerateReceivablesOffersGroupReportInput!): GenerateReceivablesOffersGroupReportPayload
  """Updates a positive pay account setting with the given id, with the provided fields"""
  updatePositivePayAccountSetting(input: UpdatePositivePayAccountSettingInput!): UpdatePositivePayAccountSettingPayload
  depositCheque(input: DepositChequeInput!): DepositChequePayload
  createApprovalsPolicy(input: CreateApprovalsPolicyInput!): CreateApprovalsPolicyPayload
  updateBill(input: UpdateBillInput!): UpdateBillPayload
  connectPlaidInstitution(input: ConnectPlaidInstitutionInput!): ConnectPlaidInstitutionPayload
  """Sends a heartbeat signal to keep the session alive"""
  heartbeat(input: HeartbeatInput!): HeartbeatPayload
  disconnectCredential(input: DisconnectCredentialInput!): DisconnectCredentialPayload
  dismissCardFraudAlerts(input: DismissCardFraudAlertsInput!): DismissCardFraudAlertsPayload
  modifyPreapprovedCardSettings(input: ModifyPreapprovedCardSettingsInput!): ModifyPreapprovedCardSettingsPayload
  createDepartment(input: CreateDepartmentInput!): CreateDepartmentPayload
  deletePositivePayAccountSetting(input: DeletePositivePayAccountSettingInput!): DeletePositivePayAccountSettingPayload
  createTransactionApprovedSubscription(input: CreateTransactionApprovedSubscriptionInput!): CreateTransactionApprovedSubscriptionPayload
  toggleRule(input: ToggleRuleInput!): ToggleRulePayload
  createBill(input: CreateBillInput!): CreateBillPayload
  fakeMutationDoNotUse(input: FakeMutationDoNotUseInput!): FakeMutationDoNotUsePayload @deprecated(reason: "DO NOT USE. This exist just so the enum types can be auto generated in global types file.")
  refreshFinancialSource(input: RefreshFinancialSourceInput!): RefreshFinancialSourcePayload
  setReceivablesOffersAccountOnboardingAction(input: SetReceivablesOffersAccountOnboardingActionInput!): SetReceivablesOffersAccountOnboardingActionPayload
  createAccount(input: CreateAccountInput!): CreateAccountPayload
  createMilesTransfer(input: CreateMilesTransferInput!): CreateMilesTransferPayload
  resyncBills(input: ResyncBillsInput!): ResyncBillsPayload
  confirmMfa(input: ConfirmMfaInput!): ConfirmMfaPayload
  processInvoiceAndCreateBill(input: ProcessInvoiceAndCreateBillInput!): ProcessInvoiceAndCreateBillPayload
  updateUserCategories(input: UpdateUserCategoriesInput!): UpdateUserCategoriesPayload
  updateContact(input: UpdateContactInput!): UpdateContactPayload
  createPositivePayAccountSetting(input: CreatePositivePayAccountSettingInput!): CreatePositivePayAccountSettingPayload
  createExpensesItemEvent(input: CreateExpensesItemEventInput!): CreateExpensesItemEventPayload
  adminUpdateApprovalsReviews(input: AdminUpdateApprovalsReviewsInput!): AdminUpdateApprovalsReviewsPayload
  createExpensesSetting(input: CreateExpensesSettingInput!): CreateExpensesSettingPayload
  createContact(input: CreateContactInput!): CreateContactPayload
  deleteUserInvite(input: DeleteUserInviteInput!): DeleteUserInvitePayload
  inviteUser(input: InviteUserInput!): InviteUserPayload
  triggerErpFeedSync(input: TriggerErpFeedSyncInput!): TriggerErpFeedSyncPayload
  createVirtualCard(input: CreateVirtualCardInput!): CreateVirtualCardPayload
  notifyAllUsersApprovalsEnabled(input: NotifyAllUsersApprovalsEnabledInput!): NotifyAllUsersApprovalsEnabledPayload
  markInvoice(input: MarkInvoiceInput!): MarkInvoicePayload
  createMerchantDispute(input: CreateMerchantDisputeInput!): CreateMerchantDisputePayload
  acceptCreditMarketingOffer(input: AcceptCreditMarketingOfferInput!): AcceptCreditMarketingOfferPayload
  updateDepositsAccount(input: UpdateDepositsAccountInput!): UpdateDepositsAccountPayload
  editInvoice(input: EditInvoiceInput!): EditInvoicePayload
  """Remove a user from the bookkeeper group, revoking access to the tenants available to the group"""
  removeFspBookkeeperUser(input: RemoveFspBookkeeperUserInput!): RemoveFspBookkeeperUserPayload
  deleteIntegrationRule(input: DeleteIntegrationRuleInput!): DeleteIntegrationRulePayload
  createInvoice(input: CreateInvoiceInput!): CreateInvoicePayload
  completePaymentApproval(input: CompletePaymentApprovalInput!): CompletePaymentApprovalPayload
  createTransactionRefusedSubscription(input: CreateTransactionRefusedSubscriptionInput!): CreateTransactionRefusedSubscriptionPayload
  updateDepartment(input: UpdateDepartmentInput!): UpdateDepartmentPayload
  bulkFindOrCreateErpFeeds(input: BulkFindOrCreateErpFeedsInput!): BulkFindOrCreateErpFeedsPayload
  createPaymentEarlyAuthBalanceDecreaseCommitment(input: CreatePaymentEarlyAuthBalanceDecreaseCommitmentInput!): CreatePaymentEarlyAuthBalanceDecreaseCommitmentPayload
  confirmPaymentDraft(input: ConfirmPaymentDraftInput!): ConfirmPaymentDraftPayload
  createReceipt(input: CreateReceiptInput!): CreateReceiptPayload
  """Creates a DocumentOCR entry, and initiates the OCR process on the document."""
  createDocumentOcr(input: CreateDocumentOcrInput!): CreateDocumentOcrPayload
  deleteSubscriptions(input: DeleteSubscriptionsInput!): DeleteSubscriptionsPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  setManager(input: SetManagerInput!): SetManagerPayload
  updateIntegrationCredential(input: UpdateIntegrationCredentialInput!): UpdateIntegrationCredentialPayload
  setReceivablesOffersSellerAccountHasSeenTrialAccessConfirmationBanner(input: SetReceivablesOffersSellerAccountHasSeenTrialAccessConfirmationBannerInput!): SetReceivablesOffersSellerAccountHasSeenTrialAccessConfirmationBannerPayload
  generateDepositsStatementDocumentDownloadUrl(input: GenerateDepositsStatementDocumentDownloadUrlInput!): GenerateDepositsStatementDocumentDownloadUrlPayload
  calculateCreditMarketingOffer(input: CalculateCreditMarketingOfferInput!): CalculateCreditMarketingOfferPayload
  updateTransactionDepartment(input: UpdateTransactionDepartmentInput!): UpdateTransactionDepartmentPayload
  cancelTransaction(input: CancelTransactionInput!): CancelTransactionPayload
  """Creates a product onboarding application following a blueprint of the given name"""
  createOnboardingProductApplication(input: CreateOnboardingProductApplicationInput!): CreateOnboardingProductApplicationPayload
  """Use to initiate Plaid Link"""
  generatePlaidLinkToken(input: GeneratePlaidLinkTokenInput!): GeneratePlaidLinkTokenPayload
  """Adds a policy granting access for a FSP account to a tenant account"""
  addFspBookkeeper(input: AddFspBookkeeperInput!): AddFspBookkeeperPayload
  updateTransactionLocation(input: UpdateTransactionLocationInput!): UpdateTransactionLocationPayload
}

input UpdateIntegrationSettingsInput {
  accountsPayableCategoryId: ID
  clientMutationId: String!
  collectionTargetCategoryId: ID
  id: ID!
  """The GL account id for syncing reimbursements data"""
  reimbursementsUserCategoryId: ID
  rewardsIncomeUserCategoryId: ID
}

union RewardsTriggerPayload = RewardsTriggerCashActivationCardSpendBonus | RewardsTriggerDepositsTransfer | RewardsTriggerLinkedAccountBonus | RewardsTriggerPurchase | RewardsTriggerReferredAmountSpent | RewardsTriggerReferrerAward | RewardsTriggerTopCategoryMultiplier

input DisconnectErpFeedInput {
  clientMutationId: String!
  erpFeedId: ID!
}

input WireReceivingMethodInput {
  accountNumber: String
  beneficiaryName: String
  country: String
  routingNumber: String
}

type ChannelEdge {
  cursor: String
  node: Channel
}

enum FundingSourceStatusChangeReason {
  ACCOUNT_CLOSED
  ACCOUNT_NOT_FOUND
  BACKFILL
  CREATED
  DEPOSITS_ACCOUNT_NOT_ACTIVE
  FINANCIAL_SOURCE_DELETED
  INVALID_ACCOUNT_NUMBER
  MANUAL
  MARKED_AS_PRIMARY
  NON_TRANSACTION_ACCOUNT
  VERIFICATION_COLLECTION_SUCCEEDED
}

input ContactAddressInput {
  """Address 1"""
  address1: String
  """Address 2"""
  address2: String
  """City"""
  city: String
  """Country"""
  country: String
  """First name"""
  firstName: String
  """Last name"""
  lastName: String
  """State"""
  state: String
  """Zip code"""
  zip: String
}

type FinancialInstitutionConnection {
  edges: [FinancialInstitutionEdge]
  pageInfo: PageInfo!
}

type ReferralReward {
  amount: Int!
  type: ReferralRewardType!
}

input ReplaceCardWithPhysicalInput {
  cardId: ID!
  clientMutationId: String!
  holderName: String
  replacementDescription: String
  replacementReason: CardReplacementReason!
  shippingAddress: ShippingAddressInput!
}

input CashTransactionOrderBy {
  orderField: CashTransactionOrderField
  orderType: OrderType
}

type LoyaltyProgram implements Node {
  ascendaDetails: AscendaDetails!
  ascendaProgramId: String!
  config: LoyaltyProgramConfig
  """The ID of an object"""
  id: ID!
  imageUrl: String!
  quote: MilesTransferQuote
}

"""The high level object represents an approval policy"""
input ApprovalsProductPolicy {
  """The approvals policy details"""
  details: ApprovalsPolicyDetailsInput!
  """The product type of this approvals policy"""
  productType: ProductType
}

enum CashTransactionType {
  ACH
  ACH_RETURN
  ADMIN_BALANCE_ADJUSTMENT
  BOOK_TRANSFER
  BREX_OPERATIONAL_TRANSFER
  CARD_COLLECTION
  CHEQUE
  CHEQUE_RETURN
  DIVIDEND
  FBO_TRANSFER
  INTEREST
  INTRA_CUSTOMER_ACCOUNT_BOOK_TRANSFER
  INVALID
  PAYROLL_ESTIMATE
  RECEIVABLES_OFFERS_ADVANCE
  RECEIVABLES_OFFERS_COLLECTION
  RECEIVABLES_OFFERS_REPAYMENT
  REWARDS_REDEMPTION
  WIRE
  WIRE_RETURN
}

input DomesticWirePaymentInstrumentInput {
  accountNumber: String!
  address: AddressInput!
  routingNumber: String!
}

type DeletePaymentInstrumentPayload {
  clientMutationId: String!
}

union EventMetadata = CardTransactionsInsightCommentEventMetadata | CardTransactionsInsightDismissEventMetadata

input CreateHrisConnectionInput {
  clientMutationId: String!
  """The input contain parameters we need to make the connection"""
  createHrisConnectionInput: VendorConnectionCreationInput!
  """The HRIS vendor we want to create a connection w/"""
  hrisAggregatorVendor: HrisAggregatorVendor!
}

type BatchSettings {
  cadence: BatchCadence
  entity: BatchEntity
}

type AccountEligibleForCardAccountType {
  isEligible: Boolean!
}

input DisconnectFspAndClientInput {
  clientCustomerAccountId: String!
  clientMutationId: String!
  fspCustomerAccountId: String!
}

enum CashTransactionApprovalDecision {
  APPROVED
  CANCELLED
  DENIED
  INVALID
  PENDING
}

enum CashTransactionApprovalDecisionReason {
  FRAUDULENT
  INCORRECT
  INVALID
  OTHER
  UNAUTHORIZED
}

type AcceptOfferPayload {
  availableProductOffers: [ProductOffer!]!
  clientMutationId: String!
}

type ExpensesCardMetadata implements Node {
  defaultMemo: String
  """The ID of an object"""
  id: ID!
}

"""Fields for customizing SSU forms"""
type SsuFormCustomization {
  """Call to action"""
  cta: String
  """Indicates whether we know if this application has been incorporated"""
  isIncorporated: Boolean
  """Sub-heading"""
  subheader: String
  """Title"""
  title: String
}

enum SortDirection {
  ASC
  DESC
  INVALID
}

enum IncentivePlacementType {
  BANNER
  CASH_ADD_FUNDS_FLOW_BANNER
  CASH_BALANCE_TOOLTIP
  EMAIL
  HOME_PROMOTION
  INVALID
  REWARDS_PAGE_CHECKBOX
  REWARDS_PAGE_SCALE
  REWARDS_PAGE_THRESHOLD
}

type SetReceivablesOffersAutoAdvanceModePayload {
  account: ReceivablesOffersAccount
  clientMutationId: String!
}

input SetStatementEntryIntegrationFieldInput {
  clientMutationId: String!
  """The ID of the target integration field, or keyword for other things like billable status."""
  field: String!
  statementEntryId: ID!
  """Target value to set the integration field to"""
  value: String!
}

type CardTransactionInsightEdge {
  cursor: String
  node: CardTransactionInsight
}

enum UnderwritingLimitFactorType {
  DTI
  FICO
}

"""
Declarative flags intended to resolve data in the backend
that influences the visibility of nav items (owned by card), and surface
the visibility of those nav items as UX oriented booleans.
"""
type CardNavigation implements Node {
  """The ID of an object"""
  id: ID!
  """Whether card overview nav item is visible"""
  showCardOverview: Boolean!
}

type SubmitReimbursementPayload {
  clientMutationId: String!
  reimbursementItem: ReimbursementItem!
}

type BulkDisconnectErpFeedsPayload {
  clientMutationId: String!
  """list of erp feeds disconnected"""
  erpFeeds: [ErpFeed]
  """Error message describing issue"""
  errorMessage: String
}

enum ApprovalsUnsafeFlagKeyType {
  CUSTOMER_ACCOUNT_ID
  CUSTOMER_USER_ID
  INVALID
}

type SsuPrefillData {
  attributionToken: String
  companyName: String
  companyType: String
  companyUrl: String
  """Form customization field"""
  customization: SsuFormCustomization
  disclaimer: String
  employeeCount: String
  firstName: String
  lastName: String
  partnerLogoUrl: String
  partnerName: String
  workEmail: String
}

input CreateSubscriptionInput {
  channelId: ID!
  clientMutationId: String!
  notificationType: NotificationType!
}

type CompletePendingRecordApprovalLoggedOutPayload {
  clientMutationId: String!
  paymentContext: DepositsPayment!
  pendingRecordApproval: PendingRecordApproval!
}

input CreateFraudDisputeInput {
  cardPossession: DisputeCardPossession!
  clientMutationId: String!
  fraudulentDeclinedTransactionIds: [ID!]
  legitimateTransactionIds: [ID!]
  reason: String!
  transactionIds: [ID!]!
}

input GenerateReceivablesOffersGroupReportInput {
  clientMutationId: String!
  offersGroupId: ID!
}

input FindOrCreateErpFeedInput {
  clientMutationId: String!
  financialAccountId: ID!
  syncFrom: Time!
  type: ErpVendorType!
  vendorOptions: Json
}

"""A cycle reoccurring once a week on a particular day."""
type WeeklyCardStatementPolicyCycle {
  """The day of the week."""
  dayOfWeek: Int
}

"""The high level object represents an approval step"""
type RequiredApprovalStep {
  """A list of review objects can be use to determine whether a step is approved or not, who and when approved it. Do not rely on the approvals_review.assignees field to determine a list of allowed approvers, use approvals_step.approvers instead"""
  reviews: [ApprovalsReview]
  """The step details"""
  stepDetails: ApprovalsStep
}

type CashTransactionTimeline {
  """If not NULL, when the transaction was approved."""
  approvedAt: Time
  """
  If not NULL, this field holds the maximum estimated number of business days for a transaction to process. This is equivalent to the number of business days between `estimated_settled_at_end` and `scheduled_send_at`.
  Useful when providing estimate times for transactions that haven''t been created and don''t have a specified `scheduled_send_at` date
  """
  estimatedNumberBusinessDaysMax: Int
  """
  If not NULL, this field holds the minimum estimated number of business days for a transaction to process. This is equivalent to the number of business days between `estimated_settled_at_start` and `scheduled_send_at`.
  Useful when providing estimate times for transactions that haven''t been created and don''t have a specified `scheduled_send_at` date
  """
  estimatedNumberBusinessDaysMin: Int
  """
  A SCHEDULED or PROCESSING transaction can have an estimated settled at time range of when the
  transaction will be settled. This field stores the end of the estimated settled time range,
  which can hold the same value as estimated_settled_at_start when we have an estimated date
  but not estimated date range.
  Can be NULL when providing estimates to customers in payment flows.
  """
  estimatedSettledAtEnd: Time
  """
  A SCHEDULED or PROCESSING transaction can have an estimated settled at time range of when
  the transaction will be settled. If not NULL, this field stores the start of the estimated
  settled time range. This field can be NULL if the transaction is in a terminal state, whether
  PROCESSED or FAILED.
  Can be NULL when providing estimates to customers in payment flows
  """
  estimatedSettledAtStart: Time
  """
  If not NULL, when the transaction entered the FAILED status,
  Examples include: cancelled by the user, approval denied by an admin, or failed internally.
  """
  failedAt: Time
  """The ID of the transaction, if it exists. This is used for apollo caching."""
  id: ID
  """
  If not NULL, when the transaction entered the PROCESSING status
  This field can always be NULL if the transaction was cancelled before it was initiated.
  """
  initiatedAt: Time
  """If not NULL, when the transaction entered the PROCESSED status and impacted the customer''s balance."""
  processedAt: Time
  """When the transaction was created."""
  scheduledAt: Time
  """When the transaction is scheduled to enter the PROCESSING status."""
  scheduledSendAt: Time
}

type DomesticWirePaymentInstrument {
  accountNumber: String
  address: Address
  """A small logo for the beneficiary bank in base64 format. WARNING: may cause significantly slower response times"""
  beneficiaryBankLogoBase64: String
  """Not yet implemented, will always be null. Is in the schema so the app can use the URL if available, falling back to base64"""
  beneficiaryBankLogoUrl: String
  beneficiaryBankName: String
  routingNumber: String
}

type ExtractedBillFields {
  contact: PaymentContact
  contactCreated: Boolean
  dueAmountCents: Int
  dueAt: Time
  externalInvoiceNumber: String
  paymentInstrument: PaymentInstrument
  paymentSendAt: Time
  transferDescription: String
}

type CreateVirtualCardPayload {
  card: Card
  clientMutationId: String!
}

type GenerateReceivablesPayoutReportPayload {
  clientMutationId: String!
  payoutReportUri: String!
}

enum PaymentRail {
  ACH
  CHEQUE
  WIRE
}

"""Information about the user''s top category bonus in a given period."""
type RewardsTopCategoryBonusInfo {
  """Whether the customer is qualified for the bonus in the given period."""
  hasQualified: Boolean!
  """Whether the customer is in a rewards program that has a multiplier for the top category."""
  isEligible: Boolean!
  """If the customer is not qualified for the bonus, why."""
  notQualifiedReason: [RewardsTopCategoryNotEnabledReason]
  """If eligible, the top category in the given period."""
  topCategory: RewardsTopCategory
  """The number of points we have granted the customer due to the top category multiplier in the given periood."""
  totalBonusAwardedCentipoints: Int!
  """Whether the customer has received any bonus in the given period."""
  wasBonusAwarded: Boolean!
}

type IntegrationRuleEvaluation implements Node {
  """The ID of an object"""
  id: ID!
  key: String
  rule: IntegrationRule
  value: String
}

type IntegrationSettings {
  batchSettings: BatchSettings
  billsEnabled: Boolean
  expensesEnabled: Boolean
  netsuiteSubsidiary: NetsuiteSubsidiary
  """Auto sync reimbursement data to netsuite"""
  reimbursementsEnabled: Boolean
  syncDateRangeEnd: Time
  syncDateRangeStart: Time
  syncFrom: Time
  version: Int
}

enum ReferralStatus {
  COMPLETED
  INVITE_SENT
  PENDING_INVITE
  SIGNED_UP
}

type DepositsPaymentEdge {
  cursor: String
  node: DepositsPayment
}

input AcceptCreditMarketingOfferInput {
  clientMutationId: String!
  offerId: ID!
}

type CompletePendingRecordApprovalPayload {
  clientMutationId: String!
  paymentContext: DepositsPayment!
  pendingRecordApproval: PendingRecordApproval!
}

enum ExpensesItemEventAction {
  COMMENT
  DISMISS
  FLAG
  OPEN
  REVIEW
}

"""The instant payouts advance (one advance is one `offers_group`)"""
type ReceivablesOffersOffersGroup implements Node {
  """Timestamp when this advance was accepted"""
  acceptedAt: Time
  """Whether this offers group was auto advanced"""
  autoAdvanced: Boolean
  """The collection information associated with this advance. This field is very expensive to resolve, so it should not used when getting batches of OffersGroups"""
  collectionInfo: ReceivablesOffersOffersGroupCollectionInfo
  """The ID of an object"""
  id: ID!
  """The list of offers that are part of this offers group"""
  offers: [ReceivablesOffersOffer]
  """Whether the customer opted to pay fee with rewards points at the time of acceptance"""
  payFeeWithRewards: Boolean
  """Timestamp of when the offer was settled"""
  settledAt: Time
  """The current status of the offers group (enum)"""
  status: ReceivablesOffersOffersGroupStatus!
  """Total advance amount that the customer accepted"""
  totalAdvanceAmount: FinancialAsset
  """Total fee amount that the customer will be charged"""
  totalFeeAmount: FinancialAsset
  """Total fee cost in centipoints if the customer opted to pay the fee with rewards points"""
  totalFeeCentipointsCost: Int
}

"""
Atomic element of a Request for information,
defines a type of document / information that is needed
"""
type RfiItem {
  """Key-Value Struct of extra metadata describing the item"""
  details: String
  """Specifies what document / information is being requeste"""
  name: String!
  """Response Item providing information for this specific RFI Item"""
  responseItem: RfiResponseItem
}

type WithdrawFundsPayload {
  clientMutationId: String!
  payment: DepositsPayment!
}

type RewardsRedemptionProgram implements Node {
  description: String!
  """The ID of an object"""
  id: ID!
  name: String!
  rewardsRedemptionOffers(after: String, before: String, first: Int, last: Int, type: [String]): RewardsRedemptionOfferConnection
}

enum ReceivablesOffersOfferStatus {
  CREATED
  INVALID
  NON_PERFORMANT
  PENDING
  SETTLED
}

input EditPaymentInput {
  amount: Int!
  clientMutationId: String!
  consumerSettings: TransactionConsumerSettings
  contactId: ID
  contactVersion: Int
  """Use contact id instead"""
  counterpartyId: ID
  depositsAccountId: ID!
  endsAt: Time
  endsOn: Date
  externalMemo: String
  idempotencyKey: String!
  monthlySchedule: MonthlySchedule
  paymentId: ID!
  paymentInstrumentId: ID
  paymentInstrumentVersion: Int
  sendAt: Time
  sendOn: Date
  totalNumberOfPayments: Int
  weeklySchedule: WeeklySchedule
}

input SuspendCardInput {
  clientMutationId: String!
  id: ID!
  suspendDescription: String
  suspendReason: TerminationReason
}

union CashRecurringScheduleDuration = CashRecurringScheduleDurationWithEndsAt | CashRecurringScheduleDurationWithTotalCount

"""Connection Node Type Most Recent Transactions Tile"""
type CardOverviewInsightsTileConnection {
  edges: [CardOverviewInsightsTileEdge]
  pageInfo: PageInfo!
}

type CreditMarketingOffer implements Node {
  expiresAt: Time
  """The ID of an object"""
  id: ID!
  insertedAt: Time!
  limit: Int
  status: CreditMarketingOfferStatus!
  type: CreditMarketingOfferType!
}

type Cobranding {
  enabled: Boolean
  fullName: String
  name: String
}

type Card implements Node @key(fields: "id") {
  replacedBy: ReplacedByRecord
  expiration: String
  instrumentType: String
  softExpiration: SoftExpirationSummary
  skipUserLimit: Boolean @deprecated(reason: "Use is_preapproved instead")
  """The expiration date derived from the card expiration. Cards always expire on the first day of the month following the expiration month"""
  expiresAt: Time
  """The ID of an object"""
  id: ID!
  network: String
  utilization: Float
  issuedAt: Time
  cvv: String
  """Net amount spent by card this month"""
  amountSpent(timeWindowDays: Int!): Int @deprecated(reason: "Use amount_spent_current_month instead")
  status: String
  first6: String
  isPreapproved: Boolean
  statusView: StatusView
  pan: String
  holderName: String
  recurringMerchants(after: String, before: String, first: Int, last: Int): PerMerchantStatsConnection
  fulfillmentStatus: String
  shippingAddress: ShippingAddress
  """The card pin last updated time"""
  pinUpdatedAt: Time
  billingAddress: Address
  isRoleLocked: Boolean
  customerUserId: ID
  replaces(after: String, before: String, first: Int, last: Int): ReplacesRecordConnection
  providerCardProductId: String
  terminationReason: TerminationReason
  """Net amount spent by card all time"""
  amountSpentAllTime: Int
  user: User
  displayName: String
  applicableLimit: CardLimitSummary
  limit: CardLimitSummary
  """Card shipment details"""
  shipmentDetails: CardShipmentDetails
  companyName: String
  """The bank issuer"""
  issuer: Issuer
  type: String
  """Net amount spent by card this month"""
  amountSpentCurrentMonth: Int
  isAdminLocked: Boolean
  transactions(after: String, before: String, first: Int, last: Int): TransactionConnection
  usage: Int
  expensesCardMetadata: ExpensesCardMetadata
  last4: String
}

type DepositsAccountEdge {
  cursor: String
  node: DepositsAccount
}

input DeleteUserInviteInput {
  clientMutationId: String!
  id: ID!
}

enum HrisStatus {
  DISABLED
  ENABLED
  UNLINKED
}

type Collection {
  type: String
}

type IndustrySearchResultEntryConnection {
  edges: [IndustrySearchResultEntryEdge]
  pageInfo: PageInfo!
}

input CardPaymentForwarderContactInput {
  email: String
  firstName: String
  lastName: String
  phoneNumber: String
}

input ActivateIntegrationInput {
  clientMutationId: String!
  id: ID!
}

type InvoicingInvoiceConnection {
  edges: [InvoicingInvoiceEdge]
  """Next offset. If next_offset < total_count, there are additional results to query."""
  nextOffset: Int!
  pageInfo: PageInfo!
  """Total count of invoices."""
  totalCount: Int!
}

type GetOrCreatePaymentMethodPayload {
  cardId: ID!
}

type ExpensesSettingConnection {
  edges: [ExpensesSettingEdge]
  pageInfo: PageInfo!
}

"""Default set of integration field types"""
enum IntegrationFieldType {
  CODAT_TRACKING_CATEGORY
  NETSUITE_CLASS
  NETSUITE_CUSTOM
  NETSUITE_DEPARTMENT
  NETSUITE_LOCATION
  NETSUITE_VENDOR
  QUICKBOOKS_CLASS
  QUICKBOOKS_CUSTOMER
  QUICKBOOKS_LOCATION
  XERO_TRACKING_CATEGORY
}

"""The metadata for a high spend type"""
type InsightMetadataHighSpend {
  """The average amount"""
  average: Float!
  """What does spend compare against - eg. company, department and etc"""
  compareAgainst: String!
  """The relevant entries that associated with this spend alert"""
  highSpendRelevantEntries: [StatementEntry]
  """The median amount"""
  median: Float!
  """The p25 percentile"""
  p25: Float!
  """The p75 percentile"""
  p75: Float!
  """The percentile rank"""
  percentileRank: Float!
  """The threshold that triggers this alert"""
  threshold: Float!
  """The total amount on the posted date"""
  totalAmountPostedDate: Int!
}

input CancelCashTransactionInput {
  clientMutationId: String!
  id: ID!
}

type RewardsCampaignEdge {
  cursor: String
  node: RewardsCampaign
}

extend type Expense @key(fields: "id") {
  """The calculated integration lens field for this expense"""
  expenseLens(
    """Facet type filter"""
    facetType: FacetType
    integrationId: ID!
    """Rule ID to be omitted whe computing expense lens."""
    omitRuleId: ID
    """Unsaved rule body"""
    ruleBody: Json
    """Rule IDs filter"""
    ruleIds: [ID]
  ): ExpenseLens
  id: ID! @external
  """The receipts associated with this expense"""
  receipts(after: String, before: String, first: Int, last: Int): ReceiptConnection
}

type ExpensesFlagEvent implements Node {
  action: ExpensesFlagEventAction
  description: String
  """The ID of an object"""
  id: ID!
  insertedAt: Time
}

enum JournalOriginatorType {
  BILLING_PAYMENT_INTENT_ALLOCATION
  COLLECT_COLLECTION
  PRESENT_TRANSACTION_OPERATION
  PRESENT_TRANSACTION_OPERATION_SPLIT_ITEM
  RECEIVABLES_OFFER
  RECEIVABLES_OFFER_FEE
  REWARDS_REDEMPTION_INSTANCE
}

input ReferUserInput {
  clientMutationId: String!
  targetEmail: String!
}

type UpdateIntegrationSyncSettingsPayload {
  clientMutationId: String!
  integration: Integration
}

type DepositsTransaction implements Node {
  """The snapshot of the balance across all of the customer''s deposits accounts at the time this transaction was applied."""
  aggregateSnapshotBalance: Int
  amount: Int!
  bill: Bill
  cancellationInitiatedByUser: User
  """Encoded CashTransaction ID"""
  cashTransactionId: ID!
  counterpartyName: String
  """Source deposits account"""
  depositsAccount: DepositsAccount
  """Encoded source deposits account ID"""
  depositsAccountId: ID!
  depositsPayment: DepositsPayment
  depositsTraceId: String!
  details: DepositsTransactionDetails!
  """The ID of an object"""
  id: ID!
  isCancellable: Boolean!
  memo: String
  postedAt: Time!
  recurringPaymentId: ID
  settledAt: Time
  snapshotBalance: Int
  status: Status!
  type: DepositsTransactionType!
}

type CashTransactionApproval {
  decidedByUser: User
  decision: CashTransactionApprovalDecision!
  """Any notes the admin wants to fill in a free form field when processing a draft payment."""
  decisionNotes: String
  decisionReason: CashTransactionApprovalDecisionReason
  transactionId: String
}

enum ContactType {
  INVALID
  INVOICER
  PAYER
}

enum OrderType {
  ASC
  DESC
}

type CreateLocationPayload {
  clientMutationId: String!
  location: Location!
}

enum DocumentOcrStatus {
  """The document has finished processing, and the results are available."""
  COMPLETED
  """The document is still being processed."""
  PENDING
}

input UpdateDepositsAccountInput {
  clientMutationId: String!
  depositsAccountId: ID!
  nickname: String!
}

type FedwireParticipant implements Node {
  changeDate: String
  customerCity: String!
  """The institution''s logo as a base64 PNG, if available"""
  customerLogoBase64: String
  customerName: String!
  customerState: String!
  fundsEligibility: String!
  fundsSettlementOnlyStatus: String
  """The ID of an object"""
  id: ID!
  routingNumber: String!
  securitiesEligibility: String!
  telegraphicName: String!
}

"""Paginated referral records"""
type ReferralRecordsPaginated implements Node {
  """The ID of an object"""
  id: ID!
  """next page token"""
  nextPageToken: String
  """list of referral records"""
  referralRecords: [ReferralRecord]
}

input CreateFileUploadUrlInput {
  clientMutationId: String!
}

type BillSyncErrorEdge {
  cursor: String
  node: BillSyncError
}

type CreateMerchantDisputePayload {
  clientMutationId: String!
  transactions: [Transaction!]!
}

type CashRecurringScheduleWithTimelines {
  """The recurring schedule definition"""
  recurringSchedule: CashRecurringSchedule!
  """Timelines for future scheduled transactions that will be made by this recurring schedule"""
  timelines: [CashTransactionTimeline!]!
}

enum PayrollSource {
  CASH
  FINANCIALS
  USER
}

type UserCategoryEdge {
  cursor: String
  node: UserCategory
}

"""
Split items corresponding to a transaction operation.

There may be multiple split items if, for example, the transaction
is funded by more than one source (Revenue Access project).
"""
type TransactionOperationSplitItem implements Node {
  """Amount (in cents) for this split item."""
  amountCents: Int
  """The ID of an object"""
  id: ID!
  """Payout used to fund this split item (revenue access)"""
  receivablesOffersPayout: ReceivablesOffersPayout
}

type CanOffboardResponse {
  enabled: Boolean!
  issues: [DepositsCloseAccountIssue!]!
}

"""payment source mapping for the account"""
type ReimbursementPaymentSource {
  fundingSource: FundingSource
  updatedBy: String
}

type Summary {
  numValidMetal: Int
  numValidPhysical: Int
  numValidVirtual: Int
  numWaitingActivation: Int
}

"""Booleans expressing whether nav items show for the current user"""
type Navigation implements Node {
  """The slice of the navigation query owned by card"""
  card: CardNavigation
  """The ID of an object"""
  id: ID!
}

enum DepositsAccountsPriority {
  INVALID
  NON_PRIMARY
  PRIMARY
}

type RewardsTopCategoryEdge {
  cursor: String
  node: RewardsTopCategory
}

type UnderwritingAnalysis implements Node {
  flags(after: String, before: String, first: Int, last: Int): UnderwritingAnalysisFlagConnection
  """The ID of an object"""
  id: ID!
}

type ReplaceCardWithPhysicalPayload {
  clientMutationId: String!
  replacedCard: Card
  replacementCard: Card
}

"""Card shipment details"""
type CardShipmentDetails {
  """Estimated delivery date"""
  estimatedDeliveryAt: Time!
}

union ApprovalsRequestMetadata = ApprovalsRequestMonthlyLimitOverride | ApprovalsRequestPreapprovedCard | ApprovalsRequestReimbursement

union NotificationTile = InsufficientFundsTile | LimitUtilizationTile | StatementUploadRequestTile

type ProcessInvoicePayload {
  clientMutationId: String!
  extractedBillFields: ExtractedBillFields!
}

type RewardsAccrualEntry implements Node {
  amount: Int!
  """The ID of an object"""
  id: ID!
  rewardsTrigger: RewardsTrigger
}

type SyncIntegrationPayload {
  clientMutationId: String!
  integration: Integration
}

enum FinancialProductType {
  ECOMMERCE
  LIFESCIENCES
  STARTUP
}

input SubmitEarlyAccessFeatureSuggestionInput {
  clientMutationId: String!
  featureSuggestionText: String!
}

enum SeenFlagKey {
  BILLS_ONBOARDING_FIRST_BILL_CREATED
  ONBOARDING_MEDIUM_RISK_TIER_NUDGE_MODAL_SEEN
  SPEND_REPORTS_INTEGRATION_UPSELL_DISMISSED
  COLUMN_MIGRATION_WALKTHROUGH_STARTED
  SPEND_PREMIUM_SETTINGS_SEEN
  CASH_PAYCHEX_PAYROLL_SETUP_SEEN
  ENGAGEMENT_HOME_SETUP_QUICKBOOKS_TASK_DISMISSED
  SPEND_REQUESTS_SETUP_BANNER_REIMBURSEMENTS_SEEN
  CASH_INTEGRATIONS_ANNOUNCEMENT_INTERACTED
  ENGAGEMENT_HOME_CREATE_EXPENSE_POLICY_TASK_DISMISSED
  SPEND_SETUP_MODAL_SEEN
  SPEND_PREMIUM_FOR_ALL_MODAL_SEEN
  CARD_PREAPPROVED_CARD_REQUEST_APPROVE_MODAL_SEEN
  ONBOARDING_MEDIUM_RISK_TIER_OUTCOME_MODAL_SEEN
  PRIMITIVES_ONBOARDING_INTERACTED
  REWARDS_OVERVIEW_TAB_INTERACTED
  APP_SANCTIONS_POSSIBLY_IMPACTED_BANNER_DISMISSED
  CASH_MULTIPLE_ACCOUNTS_TOOLTIP_SEEN
  SPEND_REQUESTS_ANNOUNCEMENT_INTERACTED
  BILLS_USER_ACCESS_TOOLTIP_DISMISSED
  CASH_FDIC_MMF_ALLOCATION_MODAL_INTERACTED
  ENGAGEMENT_ROLE_NAME_BANNER_SEEN
  CASH_ADP_PAYROLL_SETUP_SEEN
  COLUMN_MIGRATION_WALKTHROUGH_FINISHED
  CAPITAL_INSTANT_PAYOUTS_TAB_INTERACTED
  CASH_RIPPLING_PAYROLL_SETUP_SEEN
  BILLS_PREMIUM_GRANDFATHER_BANNER_CLOSED
  SPEND_REQUESTS_PREMIUM_GRANDFATHER_BANNER_CLOSED
  ENGAGEMENT_Q4_21_PLATFORM_AGREEMENT_UPDATED_MODAL_SEEN
  CARD_EXPIRING_PHYSICAL_CARD_MODAL_DISMISSED
  ENGAGEMENT_USER_ROLE_NAME_BANNER_SEEN
  BILLS_INTEGRATIONS_QBO_ACCOUNT_SET_UP_BANNER_DISMISSED
  CASH_VENDORS_BULK_UPLOAD_TOOLTIP_INTERACTED
  CASH_INSIGHTS_TOOLTIP_DISMISSED
  CASH_ACCOUNT_CLOSED_BANNER_DISMISSED
  SPEND_REVIEW_EXPENSES_TAB_INTERACTED
  RISK_PERIODIC_REVIEW_BLOCKING_EXPERIENCE_SEEN
  CASH_WELCOME_MODAL_SEEN
  ENGAGEMENT_Q4_21_PLATFORM_AGREEMENT_UPDATED_MODAL_INTERACTED
  PRODUCT_LOG_UPDATE_SEEN
  CAPITAL_INSTANT_REVENUE_ANNOUNCEMENT_SEEN
  MOBILE_DOWNLOAD_UPSELL_MODAL_SEEN
  BILLS_DRAG_AND_DROP_TOOLTIP_DISMISSED
  CARD_BANK_CONNECTIONS_SETTING_TAB_SEEN
  CASH_PAYABLES_TAB_INTERACTED
  BILLS_INTEGRATIONS_BILL_SYNC_SET_UP_BANNER_DISMISSED
  PRIMITIVES_ONBOARDING_COMPLETED
  CASH_QUICKBOOKS_PAYROLL_SETUP_SEEN
  UNDERWRITING_CREDIT_JOURNEY_LINK_CLICKED
  CASH_GUSTO_PAYROLL_SETUP_SEEN
  EXPENSES_TOOLKIT_TAB_INTERACTED
  CAPITAL_INSTANT_REVENUE_SUMMARY_STATS_HOW_IT_WORKS_DISMISSED
  SPEND_DISMISS_CONFIRMATION_MODAL_HIDE
  REWARDS_REFERRALS_WELCOME_MODAL_SEEN
  CASH_TRANSACTIONS_TOUR_PROMPT_INTERACTED
  SPEND_ADD_TO_SLACK_CLOSED
  CARD_PREAPPROVED_CARD_REQUEST_DENY_MODAL_SEEN
  COLUMN_MIGRATION_BANNER_DISMISSED
  CASH_FBO_MODAL_INTERACTED
  BILLS_ONBOARDING_MODAL_SEEN
  SPEND_REQUESTS_SETUP_BANNER_CARD_REQUESTS_SEEN
  CASH_INTL_WIRE_BANK_INFO_CHANGED_TO_JPM_INTERACTED
  CASH_VENDORS_TAB_INTERACTED
  CASH_INTL_WIRE_ASK_UPDATE_JPM_COUNTRY_CONFIG_INTERACTED
  SPEND_PREMIUM_FOR_ALL_TOOLTIP_DISMISSED
  CASH_INSIGHTS_SCENARIO_PLANNING_SHOWN
  UNDERWRITING_CREDIT_UPSELL_ANNOUNCEMENT_INTERACTED
  CASH_VENDORS_ANNOUNCEMENT_INTERACTED
  CASH_FTUE_TOUR_COMPLETED
  CASH_INSIGHTS_CSAT_TAKEN
  CASH_MULTIPLE_ACCOUNTS_INTRO_SEEN
  SPEND_REQUESTS_TAB_INTERACTED
  CASH_INSIGHTS_SCENARIO_PLANNING_EVENTS_CLICKED
  BILLS_TAB_INTERACTED
  CASH_TRINET_PAYROLL_SETUP_SEEN
  BILLS_GLOBAL_ONBOARDING_MODAL_SEEN
  SPEND_ALERTS_ONBOARDING_SEEN
  CASH_INSIGHTS_SEEN
  SPEND_MULTIPLAYER_INTRO_MODAL_COMPLETED
  ENGAGEMENT_HOME_ENABLE_SPEND_REQUESTS_TASK_DISMISSED
  BILLS_ONBOARDING_TOOLTIP_DISMISSED
  SPEND_REVIEW_PREMIUM_GRANDFATHER_BANNER_CLOSED
}

"""
Aggregated summary data for a list of receivables_offers_payment_intent allocations.
When paginating, the data should reflect ALL payments, not just the ones being fetched in the current page.
"""
type ReceivablesOffersPaymentIntentAllocationSummary {
  """Total allocation towards Card clearings"""
  totalCardAllocation: FinancialAsset!
  """Total allocation towards Cash Advances (excluding fee)"""
  totalCashAdvanceAllocation: FinancialAsset!
  """Total allocation towards Cash Advance Fees (Cash Breakdown + Centipoints Breakdown in $$)"""
  totalCashAdvanceFeeAllocation: FinancialAsset!
  """The Cash/ACH amount that pays of the Total Cash Advance Fee Allocation"""
  totalCashAdvanceFeeAllocationCashBreakdown: FinancialAsset!
  """The number of Rewards Points that pays off the Total Cash Advance Fee Allocation"""
  totalCashAdvanceFeeAllocationPointsBreakdown: Int!
}

type CreateCardTransactionInsightEventPayload {
  cardTransactionInsight: CardTransactionInsight
  clientMutationId: String!
}

enum HrisSyncStatus {
  DONE
  FAILED
  PULLED_FROM_HRIS
  PULLING_FROM_HRIS
  SYNCING
  WAITING
}

type RewardsTopCategoryConnection {
  edges: [RewardsTopCategoryEdge]
  pageInfo: PageInfo!
}

input CompletePaymentApprovalInput {
  clientMutationId: String!
  decision: PaymentApprovalDecision!
  decisionNotes: String
  decisionReason: PaymentApprovalDecisionReason
  paymentId: ID!
}

"""A cycle reoccurring every month on the same day of the month."""
type MonthlyCardStatementPolicyCycle {
  """The day of the month."""
  dayOfMonth: Int
}

type ExternalIntegrationFieldConnection {
  edges: [ExternalIntegrationFieldEdge]
  pageInfo: PageInfo!
}

input ToggleRuleInput {
  clientMutationId: String!
  """Integration rule id for the toggled rule"""
  integrationRuleId: ID!
  """Source object id for the toggled rule"""
  sourceObjectId: ID!
}

input CreateMonthlyUserLimitIncreaseInput {
  amount: Int!
  clientMutationId: String!
  customerUserId: ID!
  endsAt: Time!
}

type PositivePayAccountSettingConnection {
  edges: [PositivePayAccountSettingEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

union IncentivePlacementViewData = IncentivePlacementViewDataBanner | IncentivePlacementViewDataCashAddFundsFlowBanner | IncentivePlacementViewDataCashBalanceTooltip | IncentivePlacementViewDataRewardsPageCheckbox | IncentivePlacementViewDataRewardsPageScale | IncentivePlacementViewDataRewardsPageThreshold

enum CardReplacementReason {
  DAMAGED
  EXPIRATION
  FRAUD
  INTERNAL
  INVALID
  LOST
  OTHER
}

input ProcessInvoiceInput {
  assetId: ID!
  billId: ID
  clientMutationId: String!
}

type RewardsCampaignConnection {
  edges: [RewardsCampaignEdge]
  pageInfo: PageInfo!
}

enum DepositsAccountStatusReason {
  AUTOMATED_OFFBOARDING
  FRAUD
  MANUAL_OFFBOARDING
  PENDING_VERIFICATION
  REOPEN_RETURN_FUNDS
  TOS_VIOLATION
  USER_INITIATED
}

type UpdateDepositsAccountPayload {
  clientMutationId: String!
  depositsAccount: DepositsAccount!
}

scalar Date

type MonthlyUserLimitOverride {
  amount: Int
  endsAt: Time
}

type CashRecurringSchedule implements Node {
  """
  The duration of the recurring schedule
  
  ends_at
  Keep creating transactions until the `ends_at` date
  
  total_count
  Keep creating transactions until `total_count` transactions have been scheduled.
  We make this distinction because transactions can be cancelled which still count towards the `total_count` amount
  """
  duration: CashRecurringScheduleDuration
  """A human readable string describing when the schedule will end."""
  durationDescription: String!
  """The ID of an object"""
  id: ID!
  """The type of recurring schedule, defining the rules for transaction scheduling"""
  type: CashRecurringScheduleType!
  """A human readable string describing the cadence of the schedule."""
  typeDescription: String!
}

type DateHistogramAggregationField {
  count: Int!
  date: Int!
  sum: Float
}

type ProcessPageViewPayload {
  clientMutationId: String!
  success: Boolean
}

type CountryAddressMetadata {
  """The regular expression corresponding to all po box formats in the country"""
  poBoxRegex: String
  """The regular expression corresponding to all postal codes in the country"""
  postalCodeRegex: String
  """The term used to describe the country''s subregions (ex. state, province, etc.)"""
  subregionLabel: String!
  """The list of provinces/states"""
  subregions: [Subregion!]
}

type ProgramMembership implements Node {
  firstName: String
  """The ID of an object"""
  id: ID!
  lastName: String
  loyaltyProgram: LoyaltyProgram
  membershipId: String
}

type NetsuiteDepartment {
  isInactive: Boolean
  name: String
}

type CardCollectionDetails {
  collectionAttempt: CollectionAttempt!
  collectionId: String!
}

type SetReceivablesOffersSellerAccountConfirmedPayoutsRoutedToBrexPayload {
  clientMutationId: String!
  sellerAccount: ReceivablesOffersSellerAccount
}

input CreatePremiumSettingEventInput {
  action: PremiumSettingEventAction!
  campaign: String
  clientMutationId: String!
  pricingScheme: PremiumSettingPricingScheme!
}

"""A integration field is a mapping from an integration field to an integration entity."""
type IntegrationField implements Node {
  externalIntegrationEntity: ExternalIntegrationEntity
  externalIntegrationField: ExternalIntegrationField
  fieldId: String
  fieldValue: String
  """The ID of an object"""
  id: ID!
}

type ApprovalsReview implements Node {
  assignees(after: String, before: String, first: Int, last: Int): ApprovalsReviewAssigneeConnection
  description: String
  """The ID of an object"""
  id: ID!
  insertedAt: Time
  request: ApprovalsRequest
  reviewedAt: Time
  reviewedBy: ApprovalsUser
  status: ApprovalsReviewStatus
}

type Subregion {
  """ISO 3166-1 alpha-2 representation of a province/state (ex. ''AL'' for Alabama)"""
  alpha2: String!
  """Name of the province/state"""
  name: String!
}

enum CashIntensiveMaxCashHandled {
  INVALID
  LESS_THAN_1000K
  LESS_THAN_2000K
  LESS_THAN_500K
  MORE_THAN_2000K
  NO_CASH
}

enum StatusReason {
  ACCOUNT_CLOSED
  ACCOUNT_NOT_FOUND
  ACH_DEBIT_CAPABILITY_REVOKED
  ADMIN_DENIED_APPROVAL
  BLOCKED_BY_POSITIVE_PAY
  CUSTOMER_EDITED
  FAILED_VERIFICATION
  INSUFFICIENT_FUNDS
  MISSED_SEND_ON
  USER_CANCELLED
}

"""
Represents an updated model for payroll provider supported by the payroll v2 service migration. When the migration is complete, the original
payroll_provider object will be deprecated and removed
"""
type PayrollProviderV2 {
  """
  The account id of the funding source for payroll.
  There are three options: a Brex deposits account, a confirmed external institution, or a detected financial account
  """
  fundingSource: PayrollProviderFundingSource!
  """Represents a single integration with the payroll provider"""
  integration: PayrollProviderIntegration
  """A type-safe enum to represent a payroll provider"""
  type: PayrollProviderType!
}

type LimitPreview {
  amount: Int!
  cardAccountType: CardAccountType!
  isMaxLimit: Boolean!
}

type AchReceivingMethod {
  accountNumber: String
  beneficiaryName: String
  routingNumber: String
}

type IncentivePlacementViewDataEdge {
  cursor: String
  node: IncentivePlacementViewData
}

input ExpensesRuleInput {
  id: ID
  matcherJson: String!
  name: String!
  status: ExpensesRuleStatus
  type: ExpensesRuleType
}

type EditInvoicePayload {
  clientMutationId: String!
  invoice: InvoicingInvoice
}

input AddFspBookkeeperInput {
  bookkeeperAccountId: String!
  clientMutationId: String!
}

type CardTransactionInsightConnection {
  edges: [CardTransactionInsightEdge]
  pageInfo: PageInfo!
  """The total number of spend alerts"""
  totalCount(customerUserIds: [ID], departmentIds: [ID], fromDate: Time, insightTypes: [CardTransactionsInsightType], merchantIds: [ID], searchText: String, status: InsightStatus, toDate: Time): Int!
  """The total spend amount for the alert"""
  totalSpendAmount(customerUserIds: [ID], departmentIds: [ID], fromDate: Time, insightTypes: [CardTransactionsInsightType], merchantIds: [ID], searchText: String, status: InsightStatus, toDate: Time): Int!
}

enum PayrollProviderIntegrationStatus {
  CONNECTED
  DISCONNECTED
  INVALID
  PROCESSING
}

type RewardsTriggerConnection {
  edges: [RewardsTriggerEdge]
  pageInfo: PageInfo!
}

input CreateMilesTransferInput {
  clientMutationId: String!
  loyaltyProgramId: String!
  milesAmount: Int!
  pointsAmount: Int!
  programMembership: ProgramMembershipPayload!
  redemptionOfferId: String!
  toCustomerUserId: String!
}

type CardOverviewInsightsTileEdge {
  cursor: String
  """Most Recent Transactions Tile Node"""
  node: CardOverviewInsightsTile
}

type CashTransactionIntraCuaccBookTransferDetails {
  """The sender account"""
  sourceDepositsAccount: DepositsAccount
  """The recipient account"""
  targetDepositsAccount: DepositsAccount
}

input DeleteReceiptInput {
  clientMutationId: String!
  id: ID!
}

type Channel implements Node {
  """The ID of an object"""
  id: ID!
  notificationSubscriptions(after: String, before: String, first: Int, last: Int): NotificationSubscriptionConnection
  options: ChannelOptions
  status: ChannelStatus
}

enum IncentivePlacementViewDataStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  INVALID
  PENDING
}

input AcceptDevAccessAgreementInput {
  clientMutationId: String!
}

type CreateCardTransactionInsightMutingPolicyPayload {
  cardTransactionInsightMutingPolicies: [CardTransactionInsightMutingPolicy]
  clientMutationId: String!
}

input UpdateApprovalsReviewsInput {
  clientMutationId: String!
  description: String
  requestSnapshots: [ApprovalsRequestInput]
  reviewIds: [ID!]!
  status: ApprovalsReviewStatus!
}

type PaymentEarlyAuthBalanceDecreaseCommitment implements Node {
  expiresAt: Time!
  fundingSourceCommitments: [PaymentFundingSourceBalanceDecreaseCommitment!]!
  """The ID of an object"""
  id: ID!
}

type RuleConnection {
  edges: [RuleEdge]
  pageInfo: PageInfo!
}

type CreateDepartmentPayload {
  clientMutationId: String!
  department: Department!
}

type InvoicingInvoiceEdge {
  cursor: String
  node: InvoicingInvoice
}

type NotifyAllUsersApprovalsEnabledPayload {
  clientMutationId: String!
}

type SetReceivablesOffersSellerAccountHasSeenFailingChecksErrorBannerPayload {
  clientMutationId: String!
  sellerAccount: ReceivablesOffersSellerAccount
}

"""Applications which belong to a specific user, rather than an account"""
enum UserOnboardingBlueprintType {
  """Applications to change the user''s cash role"""
  CHANGE_ROLE
  """Onboarding flows to set up a user''s account"""
  USER_SETUP
}

type AcceptMultipleReceivablesOffersGroupsPayload {
  clientMutationId: String!
  offersGroups: [ReceivablesOffersOffersGroup!]!
}

type StatementUploadRequestTile implements Node {
  """Statement upload request due date in UTC time."""
  dueDate: Time!
  """The ID of an object"""
  id: ID!
}

input GetRfiInput {
  type: GetRfiInputType!
  value: String!
}

type CashTransactionInternationalWireReturnDetails {
  """Details from the transaction this return was for"""
  originalDetails: CashTransactionInternationalWireDetails!
  """The reason why the original transaction was returned"""
  returnReason: CashTransactionWireReturnReason!
}

type DeleteUserInvitePayload {
  clientMutationId: String!
}

type CreateCashWireDetailsPayload {
  clientMutationId: String!
  report: Report!
}

type CurrentBalancePaymentDetails {
  """Sum of all posted balance affecting entries for the customer minus the amount already requested."""
  balanceUsdCents: Int!
  """Time this payment will be processed"""
  processingTime: Time!
}

type CDaPayload {
  clientMutationId: String!
  onboardingApplication: OnboardingApplication!
}

"""Unexported expense count."""
type UnexportedExpenseCount {
  """The result in integer."""
  count: Int
}

input EftReceivingMethodInput {
  accountNumber: String
  beneficiaryName: String
  routingNumber: String
}

input RedeemForBalanceInput {
  clientMutationId: String!
  expectedBalanceAmountCents: Int!
  idempotencyKey: String!
  pointsToRedeem: Int!
  redemptionOfferId: ID!
  targetDepositsAccountId: ID!
}

type InvoicingInvoice implements Node {
  """Creator of the invoice."""
  createdBy: String!
  """Discount amount of the invoice. If any, this is applied to subtotal to calculate the total_amount."""
  discountAmount: FinancialAsset
  """Discount percent of the invoice. If any, this is applied to subtotal to calculate the total_amount. """
  discountPercent: Float
  """Due date of the invoice"""
  dueDate: Date
  """The ID of an object"""
  id: ID!
  """Idempotency key."""
  idempotencyKey: String!
  """The invoice number."""
  invoiceNumber: String!
  """The invoicing account ID of the invoice."""
  invoicingAccountId: String!
  """Issued date of the invoice"""
  issuedDate: Date
  """Invoice line items."""
  lineItems: [InvoiceLineItem]
  """The memo of the invoice."""
  memo: String
  """Payer contact"""
  payer: InvoicingContact
  """The payment terms of the invoice."""
  paymentTerms: String
  """The status of the invoice."""
  status: InvoiceStatus!
  """A list of status change logs."""
  statusLogs: [InvoiceStatusLog]
  """Subtotal of the invoice. This is the amount before any discount is applied."""
  subtotal: FinancialAsset
  """Invoice template."""
  template: InvoiceTemplate
  """The title of the invoice."""
  title: String
  """The total amount of the invoice. This is the final amount after any discount is applied."""
  totalAmount: FinancialAsset
  """Last updator of the invoice."""
  updatedBy: String!
}

type OptIntoIncentiveCampaignPayload {
  clientMutationId: String!
}

type FinancialSourceEdge {
  cursor: String
  node: FinancialSource
}

type PullDataAsyncPayload {
  clientMutationId: String!
  updatedSource: FinancialSource
}

enum ExpensesRuleStatus {
  ACTIVE
  DISABLED
}

"""Representing the default erp category for a given contact and integration"""
type ContactDefaultErpCategory {
  """Integration that the entry is for"""
  integration: Integration!
  """User category the entry is for"""
  userCategory: UserCategory!
}

type RefundTransactionPayload {
  redemptionRate: Float!
}

type CreateExpensesItemEventPayload {
  clientMutationId: String!
  expensesItemEvent: ExpensesItemEvent
}

type DepositsAccount implements Node {
  """Whether funds can be withdrawn during the account closure process"""
  canWithdrawFunds: CanWithdrawFundsResponse
  name: String!
  balance: Int!
  """Deprecated. Use cashTransactions() field instead."""
  payments(after: String, associationCriteria: AssociationCriteria, before: String, endTime: Time, first: Int, last: Int, onlyShowRecurringPayments: Boolean, startTime: Time, status: DepositsPaymentStatus, statuses: [DepositsPaymentStatus!]): DepositsPaymentConnection
  balanceIn(timeWindowDays: Int!): Int! @deprecated(reason: "This is still being called but not used functionally")
  payrollProvider: PayrollProvider
  restrictAchDebits: Boolean!
  """Whether this account can enter the user-initiated offboarding process"""
  canOffboard: CanOffboardResponse!
  """The account number, this will be null for restricted accounts"""
  accountNumber: String
  """Whether the account has a brex originated ach debit"""
  hasBrexOriginatedAchDebit: Boolean!
  """The color that will be associated with the account in the UI"""
  displayColor: DepositsAccountsDisplayColor!
  """The ID of an object"""
  id: ID!
  """Whether the account has a settled external payment"""
  hasSettledExternalPayment: Boolean!
  """Whether the account uses JPM for international wires"""
  usesJpmForInternationalWires: Boolean!
  achDebitLimits: AchDebitLimits!
  balanceBreakdown: BalanceBreakdown
  investmentPolicyBreakdown: InvestmentPolicyBreakdown!
  """List of all transaction types ever recorded in this account"""
  visibleTransactionTypes: [DepositsTransactionType!]!
  statements(after: String, before: String, endTime: Time, first: Int, last: Int, startTime: Time): DepositsStatementConnection
  status: DepositsAccountStatus!
  constants: Constants!
  """Whether the account has access to the international wires feature"""
  canSendInternationalWires: Boolean!
  """Nickname specified by user for the account"""
  nickname: String!
  """This is equivalent to can_add_funds"""
  canSeeCashAccountDetails: Boolean!
  """The withdrawal of the account''s balance initiated during the account closure process"""
  offboardingWithdrawal: DepositsPayment
  balanceOut(timeWindowDays: Int!): Int! @deprecated(reason: "This is still being called but not used functionally")
  """The withdrawal status of a possible offboarding process. Returns null if account is not being offboarded"""
  withdrawalStatus: DepositsAccountsWithdrawalStatus
  """Whether the account has access to the add funds feature"""
  canAddFunds: Boolean!
  chequeDepositLimits: ChequeDepositLimits!
  activatedAt: Time
  counterparties(after: String, before: String, first: Int, last: Int): CounterpartyConnection
  """Total amount that the account has earned from dividend payouts"""
  totalInterestYield: Int!
  interestEarned(timeWindowDays: Int!): Int! @deprecated(reason: "This is still being called but not used functionally")
  """
  Cash transactions belonging to the deposits account. Statuses is the
  only required filter. Supports first: and after: cursor based pagination.
  """
  cashTransactions(after: String, before: String, endInitiatedAt: Time, endProcessedAt: Time, endScheduledSendAt: Time, first: Int, isRecurring: Boolean, last: Int, maxAmountUsdCents: Int, minAmountUsdCents: Int, orderBy: [CashTransactionOrderBy!], origin: CashTransactionOrigin, paymentMethod: CashTransactionPaymentMethod, recurringScheduleId: ID, searchQuery: String, startInitiatedAt: Time, startProcessedAt: Time, startScheduledSendAt: Time, statuses: [CashTransactionStatus!]!, transactionTypes: [CashTransactionType!]): CashTransactionConnection
  """Whether this account is primary or non_primary"""
  priority: DepositsAccountsPriority!
  """Whether the account has access to outgoing ach debits"""
  canAchDebit: Boolean!
  """LendingClub migration status for account"""
  migrationStatus: AccountMigrationStatus
  """Whether the account is allowed to send outgoing ACH/Wire/Cheque"""
  canSendPayment: Boolean!
  """Whether the account is subject to ACH payout delay"""
  hasAchPayoutDelay: Boolean!
  """Whether the account is allowed to apply for Instant Payouts"""
  canApplyForInstantPayouts: Boolean!
  transactions(after: String, before: String, endTime: Time, first: Int, last: Int, origin: Origin, paymentMethod: Method, recurringPaymentId: ID, startTime: Time, status: Status): DepositsTransactionConnection
  """Account''s status reason (optional)"""
  statusReason: DepositsAccountStatusReason
  """Deprecated. Use cashTransactions() field instead."""
  searchDepositsTransactions(after: String, before: String, endTime: Time, first: Int, last: Int, query: String, recurringPaymentId: ID, startTime: Time, status: Status): DepositsTransactionConnection
  """Whether points should be automatically withdrawn during the account closure process"""
  shouldWithdrawPoints: ShouldWithdrawPointsResponse
  routingNumber: String!
  internationalCountriesTransactedWith: [String!]!
}

input CancelCollectionIntentionInput {
  clientMutationId: String!
  id: ID!
}

type InternalEntitySyncErrorEdge {
  cursor: String
  node: InternalEntitySyncError
}

union RewardsRedemptionOfferPayload = AscendaTransferPayload | CashBalancePayload | InstantPayoutsFeePayload | IssuerTransactionPayload | RefundTransactionPayload

input UpdateInstitutionLoginInput {
  clientMutationId: String!
  financialSourceId: ID!
}

input CreateStatementEntriesSearchReportInput {
  clientMutationId: String!
  """Time in user''s timezone that report is generated"""
  displayTime: Time!
  format: ReportFormat!
  statementEntriesFilters: Json!
  type: ReportType
}

type CreateMonthlyUserLimitIncreasePayload {
  clientMutationId: String!
  monthlyUserLimitInfo: MonthlyUserLimitInfo
}

enum FacetType {
  CONFLICTING
  CUSTOM
  INVALID
  MERCHANT
  OVERRIDE
}

union AggregationResult = DateHistogramAggregationResult | GroupAggregationResult | SumAggregationResult

input FinishChannelVerificationInput {
  clientMutationId: String!
  id: ID!
  verificationToken: String!
}

input DisableReimbursementsInput {
  clientMutationId: String!
  id: ID!
}

"""Affiliate bonus"""
type AffiliateBonus implements Node {
  """bonus amount in centi-points if user completes bonus"""
  bonusAmountCentipoints: Int!
  """how much the customer has currently spent (cents)"""
  currentProgress: Int!
  """when the bonus expires"""
  expiresAt: Time
  """The ID of an object"""
  id: ID!
  """when the bonus was payed out"""
  payedOutAt: Time
  """how much the customer has to spend to earn the bonus (cents)"""
  payoutThreshold: Int!
  """Status of affiliate bonus"""
  status: AffiliateBonusStatus!
  """user description"""
  userDescription: String!
}

enum PaymentApprovalDecision {
  APPROVED
  CANCELLED
  DENIED
  PENDING
}

input UpdatePositivePayAccountSettingInput {
  achCompanyId: String
  clientMutationId: String!
  id: ID!
  name: String
  status: PositivePayAccountSettingStatus
}

input CreateApprovalsPoliciesInput {
  approvalsProductPolicies: [ApprovalsProductPolicy!]
  clientMutationId: String!
}

type WireBank {
  beneficiaryAccountNumber: String!
  beneficiaryAccountType: String!
  beneficiaryCity: String!
  beneficiaryName: String!
  beneficiaryState: String!
  beneficiaryStreet: String!
  beneficiarySuite: String!
  beneficiaryZip: String!
  city: String!
  name: String!
  state: String!
  street: String!
  suite: String!
  swiftCode: String!
  zip: String!
}

input ApprovalsRuleGroupInput {
  isDefault: Boolean
  matchers: [ApprovalsRuleGroupMatcherInput!]!
  routingRules: [ApprovalsRoutingRuleInput!]!
}

type UpdateExpensesSettingAutoDismissMatcherJsonPayload {
  clientMutationId: String!
  expensesSetting: ExpensesSetting
}

input SubsidiaryInput {
  name: String!
  vendorInternalId: String!
}

type DisableUserPayload {
  clientMutationId: String!
  user: User
}

enum DepositsAccountStatus {
  ACTIVE
  CLOSED
  REJECTED
  RESTRICTED
  SUSPENDED
}

type DividendDetails {
  forFinancialInstrument: FinancialInstrument
  paidOn: Time
}

type FinancialSource implements Node {
  accounts(after: String, before: String, first: Int, last: Int): FinancialAccountConnection
  fixRequired: Boolean!
  """The ID of an object"""
  id: ID!
  institution: FinancialInstitution
  lastSyncTime: Time
  payload: FinancialSourcePayload!
  status: FinancialSourceStatus!
  vendor: FinancialsVendor!
}

type BillingPaymentConnection {
  edges: [BillingPaymentEdge]
  pageInfo: PageInfo!
}

union InitiatedBy = AutoInitiated | CustomerInitiated | InternalInitiated

type NotificationTileEdge {
  cursor: String
  """Notification Tile Node"""
  node: NotificationTile
}

type CreatePremiumSettingEventPayload {
  clientMutationId: String!
  premiumSetting: PremiumSetting
}

type CreditLimitEducationTile implements Node {
  """Customer''s global limit and balance consumption"""
  balanceSummary: AccountBalanceSummary!
  """Credit Limit Factors Connection"""
  creditLimitFactorTiles(after: String, before: String, first: Int, last: Int): CreditLimitFactorTileConnection
  """The ID of an object"""
  id: ID!
}

input AdvanceToNextStepInput {
  clientMutationId: String!
  completedOfferStep: OfferSetupStepType!
  offerType: OfferType!
}

type FinancialInstitution implements Node {
  """The ID of an object"""
  id: ID!
  imageUrls: FinancialInstitutionImageUrls
  loginFields: [FinancialLoginField]
  loginInstructions: String
  name: String
  order: Int
  status: FinancialInstitutionStatus
  vendorsMapping: [VendorInstitution]
  website: String
}

union CardStatementPolicyCycle = BiweeklyCardStatementPolicyCycle | EveryNDaysCardStatementPolicyCycle | MonthlyCardStatementPolicyCycle | SemiMonthlyCardStatementPolicyCycle | SemiWeeklyCardStatementPolicyCycle | WeeklyCardStatementPolicyCycle

"""Intacct GL account settings"""
type IntacctCategories {
  """Default accounts payable GL account"""
  accountsPayableUserCategory: UserCategory
  """Default collections GL account"""
  collectionTargetUserCategory: UserCategory
  """Default rewards GL account"""
  rewardsIncomeUserCategory: UserCategory
}

input RecordMarketingRewindWatchInput {
  clientMutationId: String!
  year: MarketingRewindYear!
}

"""Configuration for statement informtation requests"""
type FinancialInformationRequestConfigStatement implements Node {
  """The ID of an object"""
  id: ID!
  """The month of the requested statement"""
  requestedMonth: Int!
  """The year of the requested statement"""
  requestedYear: Int!
}

type CreateFinancialBankStatementForNewAccountPayload {
  clientMutationId: String!
}

input UpdateCardDisplayNameInput {
  clientMutationId: String!
  displayName: String!
  id: ID!
}

type WireDetails {
  """For a returned wire, this is the difference between the original wire amount vs what was actually returned back due to the beneficiary bank taking a fee."""
  amountDriftUsdCents: Int
  """The sending bank''s reference number for this wire (F20 of the MT103)"""
  bankReferenceNumber: String
  counterparty: Counterparty!
  endToEndId: String
  estimatedOn: Time!
  estimatedOnLatest: Time
  fedReferenceNumber: String
  imad: String
  initiatorCustomerUser: User
  method: Method!
  mt103: String
  omad: String
  origin: Origin!
  transferDescription: String
}

"""A snapshot of an account available balance at a point in time"""
type InsightsAvailableBalanceSnapshot {
  """Available snapshot value"""
  amountUsdCents: Long!
  """Timestamp of the snapshot value"""
  timestamp: Time!
}

"""View data for cash balance tooltip"""
type IncentivePlacementViewDataCashBalanceTooltip {
  """Message to display in hover state of tooltip"""
  message: String!
  """Placement"""
  placement: IncentivePlacement!
}

enum PromotionsCategory {
  PRODUCT_ANNOUNCEMENT
  PRODUCT_TOUR
  RECOMMENDED_FEATURE
}

type Location implements Node @key(fields: "id") {
  deletedAt: Time
  description: String
  """The ID of an object"""
  id: ID!
  membersCount: Int
  name: String
  users(after: String, before: String, first: Int, last: Int): UserConnection
}

type LoyaltyProgramConfig {
  alliance: LoyaltyProgramAlliance!
  membershipIdRegex: String!
  minimumMiles: Int!
}

enum PaymentStatus {
  FAILED
  PROCESSING
  REVERSED
  SCHEDULED
  SUCCESSFUL
}

union ClosingStrategy = BiweeklyClosingStrategy | EveryNDaysClosingStrategy | MonthlyClosingStrategy | SemiMonthlyClosingStrategy | SemiWeeklyClosingStrategy | WeeklyClosingStrategy

input CreatePositivePayAccountSettingInput {
  achCompanyId: String!
  clientMutationId: String!
  name: String!
  status: PositivePayAccountSettingStatus!
}

enum OnboardingInformationRequestType {
  EXTRA
  INITIAL
}

"""The individual user type"""
type UserTypeIndividual implements Node {
  """The ID of an object"""
  id: ID!
  """The approval user"""
  user: ApprovalsUser!
}

input DeleteHrisConnectionInput {
  clientMutationId: String!
  """The connection id"""
  id: ID!
}

enum CardPaymentForwarderDocumentStatus {
  DELETED
  INVALID
  REQUESTED
  SUBMITTED
}

type FinancialBankStatementDocumentConnection {
  edges: [FinancialBankStatementDocumentEdge]
  pageInfo: PageInfo!
}

type AchReturnDetails {
  counterparty: Counterparty!
  initiatorCustomerUser: User
  method: Method!
  origin: Origin!
  returnReason: ReturnReason!
}

type FinancialBalance implements Node {
  """Time of balance"""
  accrualTime: Time!
  """Amount of balance in cents"""
  amount: Int!
  """The ID of an object"""
  id: ID!
}

"""Default generic history entry payload"""
type RewardsHistoryEntryPayloadGeneric {
  """Direct json from rewards service"""
  payload: Json
}

type ExternalIntegrationFieldEdge {
  cursor: String
  node: ExternalIntegrationField
}

type CardEdge {
  cursor: String
  node: Card
}

input CreateExpensesItemEventInput {
  action: ExpensesItemEventAction!
  clientMutationId: String!
  description: String
  itemId: ID!
}

type CreateDepositsApplicationPayload {
  clientMutationId: String!
  onboardingApplication: OnboardingApplication!
}

"""A request for the user to submit financial documents such as statements"""
type FinancialInformationRequest implements Node {
  config: FinancialInformationRequestConfig!
  """The ID of an object"""
  id: ID!
  status: FinancialInformationRequestStatus!
}

enum UnderwritingAccountStatus {
  APPROVED
  PENDING
  PROVISIONALLY_APPROVED
  REJECTED
}

type RewardsPointsHistoryEntryEdge {
  cursor: String
  node: RewardsPointsHistoryEntry
}

type CreateApprovalsPoliciesPayload {
  approvalsPolicies: [ApprovalsPolicy!]
  clientMutationId: String!
}

type DisconnectFspAndClientPayload {
  clientMutationId: String!
}

enum Origin {
  BREX
  EXTERNAL
}

type SaveOnboardingInformationRequestPayload {
  clientMutationId: String!
  informationRequest: OnboardingInformationRequest!
}

input AchPaymentInstrumentFindInput {
  accountNumber: String!
  routingNumber: String!
}

type CollectionAttemptEdge {
  cursor: String
  node: CollectionAttempt
}

input CreateVirtualCardInput {
  budgetId: ID
  cardLimit: CardLimit
  clientMutationId: String!
  customerUserId: ID
  defaultMemo: String
  displayName: String
  holderName: String!
  isBudgetCard: Boolean
  isPreapproved: Boolean
  softExpiresAt: Time
}

type NetsuiteSubsidiary {
  name: String!
  vendorInternalId: String!
}

type Merchant implements Node @key(fields: "id") {
  """The ID of an object"""
  id: ID!
  merchantCategory: MerchantCategory
  merchantIcon: MerchantIcon
  name: String
  status: String
  website: String
}

input ApprovalsRequestMonthlyLimitOverrideInput {
  amount: Int!
  endsAt: Time!
}

type CashTransactionFboTransferDetails {
  """FBO account type"""
  fboAccountName: String
}

enum InvoicingAccountStatus {
  ACTIVE
  DEACTIVATED
  INVALID
  SUSPENDED
}

type ExpensesSetting implements Node {
  autoDismissMatcherJson: String
  """The ID of an object"""
  id: ID!
  insertedAt: Time
  rules(after: String, before: String, first: Int, last: Int): ExpensesRuleConnection
  status: ExpensesSettingStatus
}

input ConnectCredentialInput {
  clientMutationId: String!
  id: ID!
  redirectUrl: String!
}

input DeletePositivePayAccountSettingInput {
  achCompanyId: ID!
  clientMutationId: String!
}

type CollectionIntentionConnection {
  edges: [CollectionIntentionEdge]
  pageInfo: PageInfo!
}

union RewardsBonus = AffiliateBonus | CashActivationSpendBonus | CashLinkedAccountBonus | IncentivePlacementViewDataBanner | IncentivePlacementViewDataRewardsPageCheckbox | IncentivePlacementViewDataRewardsPageScale | IncentivePlacementViewDataRewardsPageThreshold

type MilesTransfer implements Node {
  failureReasons: [MilesTransferFailureReason]
  """The ID of an object"""
  id: ID!
  initiatedByUser: User
  insertedAt: Time
  loyaltyProgram: LoyaltyProgram
  milesAmount: Int
  pointsAmount: Int
  programMembership: ProgramMembership
  referenceId: String!
  status: MilesTransferStatus
  toUser: User
}

input CreateContactInput {
  clientMutationId: String!
  email: String
  idempotencyKey: String!
  name: String!
  payeeType: PayeeType = VENDOR
  phoneNumber: String
}

type OnboardingApplication implements Node {
  """The blueprint that this application will follow"""
  blueprint: OnboardingBlueprint!
  """The application creator, null when applicant is not an admin"""
  createdByUser: User
  """The ID of an object"""
  id: ID!
  """Information requests to be completed by the applicant"""
  informationRequests(after: String, before: String, first: Int, last: Int): OnboardingInformationRequestConnection
  """The total number of information requests"""
  informationRequestsCount: Int!
  """the timestamp of when this application is inserted into DB"""
  insertedAt: Time
  """For risk evaluation applications this will be true when ready_for_review_at is not empty"""
  isEvidenceResubmission: Boolean
  """Flag that says if the application is submitted or not"""
  isSubmitted: Boolean!
  """Extra state values for an application, for product applications this contains cash/card outcomes"""
  state: OnboardingApplicationState!
  """The status of the application"""
  status: OnboardingApplicationStatus!
  """the submitted timestamp"""
  submittedAt: Time
}

"""Card Overview Page"""
type CardOverviewPage {
  """Card Overview Insights Tiles Connection"""
  cardOverviewInsightsTiles(after: String, before: String, first: Int, last: Int): CardOverviewInsightsTileConnection
  """Card Overview Summary Tiles Connection"""
  cardOverviewSummaryTiles(after: String, before: String, first: Int, last: Int): CardOverviewSummaryTileConnection
  """Education Connection"""
  educationTiles(after: String, before: String, first: Int, last: Int): EducationTileConnection
  """Notifications Connection"""
  notificationTiles(after: String, before: String, first: Int, last: Int): NotificationTileConnection
}

type ContactAddress {
  """Address 1"""
  address1: String!
  """Address 2"""
  address2: String
  """City"""
  city: String!
  """Country"""
  country: String!
  """First name"""
  firstName: String!
  """Last name"""
  lastName: String!
  """State"""
  state: String!
  """Zip code"""
  zip: String!
}

enum InstrumentCode {
  NASDAQ_DAGXX
  NASDAQ_DGCXX
  NASDAQ_DGVXX
  NASDAQ_DPGXX
  NASDAQ_GGBXX
  NASDAQ_GGDXX
  NASDAQ_GGSXX
  NASDAQ_GSBXX
  USD
}

"""Connection Node Type Card Overview Summary Tile"""
type CardOverviewSummaryTileConnection {
  edges: [CardOverviewSummaryTileEdge]
  pageInfo: PageInfo!
}

enum OfferType {
  CASH_FORWARD
  SB30
  SDC
  UNKNOWN
}

"""account-level spend alerts config"""
type SpendAlertsConfigurationDetails {
  """all muting configurations for this account"""
  alertTypeMutingConfigurations: [AlertTypeMutingConfigurations!]!
  """alerts enabled for this account"""
  enabledAlertTypes: [SpendAlertType!]!
  """users muted from all alerts"""
  universallyMutedUserIds: [ID!]!
}

type ChangeInvestmentPolicyPayload {
  clientMutationId: String!
}

input DisconnectApiClientInput {
  clientId: String!
  clientMutationId: String!
}

type RecurringRules {
  ends: String!
  howOften: String!
}

"""Cash Activation Spend Bonus"""
type CashActivationSpendBonus {
  amountSpentRequiredUsdCents: Int!
  amountSpentUsdCents: Int!
  completedAt: Time
  expiresAt: Time
  rewardAmount: Int!
  status: CashBonusStatus!
}

type DismissCardFraudAlertsPayload {
  clientMutationId: String!
  fraudAlerts: [FraudAlert!]!
}

input CreateOrUpdatePaymentInput {
  amount: FinancialAssetInput
  cardId: ID
  description: String
  idempotencyKey: String!
  invoice: CardPaymentForwarderInvoiceInput
  paymentId: ID
  recipient: CardPaymentForwarderRecipientInput
}

"""64Bit integer"""
scalar Long

type ExpensesItemEdge {
  cursor: String
  node: ExpensesItem
}

type CardLimitSummary {
  amount: Int!
  frequency: CardLimitFrequency!
}

type SetUserRolePayload {
  clientMutationId: String!
  user: User
}

type UpdateLocationPayload {
  clientMutationId: String!
  location: Location!
}

input ShippingAddressInput {
  address: AddressInput!
  firstName: String!
  lastName: String!
}

type CredentialSuccessResult {
  credential: Credential
}

enum InsightStatus {
  ARCHIVED
  FOR_REVIEW
  INVALID
}

"""The individual routing rule"""
type ApprovalsRoutingRuleIndividuals implements Node {
  """The ID of an object"""
  id: ID!
  """A list of allowed approver ids"""
  staticAllowedApproverUserIds: [ID!]!
}

input LegalAgreementReference {
  name: String!
  version: String!
}

union ReceivingMethod = AchReceivingMethod | CheckReceivingMethod | EftReceivingMethod | WireReceivingMethod

type CashTransactionOutgoingChequeDetails {
  """The address of the recipient"""
  address: Address
  """The memo found on the physical cheque"""
  chequeMemo: String
  """The cheque number found on the physical cheque"""
  chequeNumber: Int
  """The email of the recipient"""
  email: String
  """Expected delivery date provided from our 3rd party vendor that sends the physical cheques"""
  expectedDeliveryDate: Date
  """When the physical cheque was mailed at by our 3rd party vendor"""
  mailedAt: Time
  """The name of the recipient. This field is used, for example, when sending a cheque"""
  recipientName: String
}

enum BankAccountType {
  CHECKING
  SAVINGS
}

input UpdateUserInput {
  clientMutationId: String!
  departmentId: ID
  firstName: String
  id: ID!
  lastName: String
  locationId: ID
}

"""A cycle reoccurring twice a week on two particular days."""
type SemiWeeklyCardStatementPolicyCycle {
  """The first day of the week."""
  firstDay: Int
  """The second day of the week."""
  secondDay: Int
}

input CreateReimbursementInput {
  clientMutationId: String!
  reimbursementMetadata: ReimbursementMetadataInput!
}

enum EarlyAccessFeatureMediaAssetType {
  IMAGE
  VIDEO
}

enum CashTransactionStatus {
  APPROVAL_REQUIRED
  DELETED
  DRAFT
  FAILED
  INVALID
  PROCESSED
  PROCESSING
  SCHEDULED
}

type CreatePushChannelPayload {
  channel: Channel!
  clientMutationId: String!
}

type WireReceivingMethod {
  accountNumber: String
  beneficiaryName: String
  country: String
  routingNumber: String
}

enum Type {
  CHECKING
  SAVINGS
}

input TurnOnSeenFlagInput {
  clientMutationId: String!
  """Target flag by key"""
  key: SeenFlagKey!
}

type RecordMarketingRewindWatchPayload {
  clientMutationId: String!
  video: MarketingRewindVideo
}

enum BillingPaymentIntentSourceType {
  COLLECT_FUNDING_SOURCE
  DEPOSITS_ACCOUNT
  OFFLINE
  PAYEE_DIRECTORY_PAYMENT_INSTRUMENT
  REWARDS_REDEMPTION
}

enum OrderBy {
  ASC
  DESC
  INVALID
}

input CreateEmailChannelInput {
  clientMutationId: String!
  email: Email!
}

type CreateAutoAddFundsPayload {
  clientMutationId: String!
  payment: DepositsPayment!
}

"""The manager user type"""
type UserTypeManager implements Node {
  """The fallback user id when the request initiator does not have a manager"""
  fallbackUser: ApprovalsUser!
  """The ID of an object"""
  id: ID!
}

input CreateFundingSourceInput {
  bankAccountSource: BankAccountSourceInput!
  clientMutationId: String!
  idempotencyKey: String!
  priority: FundingSourcePriority
  type: String!
}

union UserType = UserTypeIndividual | UserTypeManager

input ApprovalsPolicyDetailsInput {
  ruleGroups: [ApprovalsRuleGroupInput!]!
  version: Int!
}

input CreateLocationInput {
  clientMutationId: String!
  description: String
  name: String!
}

input UpdatePlaidLinkTokenInput {
  clientMutationId: String!
  financialSourceId: ID!
  redirectUri: String
}

type RewardsBonusConnection {
  edges: [RewardsBonusEdge]
  pageInfo: PageInfo!
}

input AdminUpdateApprovalsReviewsInput {
  clientMutationId: String!
  description: String
  requestSnapshots: [ApprovalsRequestInput]
  reviewIds: [ID!]!
  status: ApprovalsReviewStatus!
}

type PaymentFundingSourceBalanceDecreaseCommitment {
  collectFundingSourceId: ID!
  fundingSource: FundingSource!
  maxBalanceDecreaseAmount: FinancialAsset!
}

type UpdateApprovalsReviewPayload {
  approvalsReview: ApprovalsReview
  clientMutationId: String!
}

"""The payout associated with the receivables offers service (i.e., `rodetlpo_`)."""
type ReceivablesOffersPayout implements Node {
  """
  The list of accepted offers that are linked to this payout. This includes both
  cash advances, as well as offers accepted as part of transaction clearings
  """
  acceptedOffers: [ReceivablesOffersOffer]
  """Total of cash advances made on offers based on this payout so far"""
  acceptedOffersCashAdvancedAmount: FinancialAsset
  """Total fee amount for offers based on this payout so far"""
  acceptedOffersCashFeeAmount: FinancialAsset
  """The current active instant payout (generated) offer associated with this payout"""
  activeOffer: ReceivablesOffersOffer
  """The current known amount of the payout. This may change for open payouts as sales accumulate."""
  amount: FinancialAsset
  """Sum of balances across all offers associated with this payout that back card transactions"""
  cardBalance: FinancialAsset
  """Sum of accepted offer amounts across all offers associated with this payout that back card transactions"""
  cardSpend: FinancialAsset
  """JournalEntries to display Revenue Access Card transactions associated with the payout"""
  cardTransactionJournalEntries(limit: Int!): [JournalEntry]!
  """The actual or expected arrival date for the payout"""
  expectedTransferArrivalAt: Time
  """The ID of an object"""
  id: ID!
  """The list of payment intents representing collections on offers linked to this payout"""
  paymentIntents(after: String, before: String, first: Int, last: Int): ReceivablesOffersPaymentIntentConnection
  """The vendor or sales platform, i.e., Amazon, Shopify, etc."""
  vendor: ReceivablesOffersVendor!
  """The id of the payout on the vendor (sales platform, i.e., Amazon, Shopify, etc.)"""
  vendorPayoutId: String!
}

"""The information about an attempt to make a payment"""
type BillingPayment implements Node {
  """The amount of this payment that has been collected"""
  collectedAmount: FinancialAsset!
  """The time at which the payment most recently completed"""
  collectedAt: Time
  """The customer account id of this payment"""
  customerAccountId: String!
  """The cause of failure"""
  failureType: String
  """The ID of an object"""
  id: ID!
  """The time at which the payment was initiated"""
  initiatedAt: Time
  """The details of who/what initiated the payment"""
  initiatedBy: InitiatedBy!
  """The backend data model id of this billing payment"""
  rawId: String!
  """The amount for which this payment was requested"""
  requestedAmount: FinancialAsset!
  """The amount of this payment that has been reversed"""
  reversedAmount: FinancialAsset!
  """The time the payment was scheduled for"""
  scheduledFor: Time!
  """The details about the source of this payment"""
  source: BillingPaymentSource!
  """The life cycle status of this payment"""
  status: PaymentStatus!
}

input ConnectWeavCredentialInput {
  clientMutationId: String!
  fetchPolicy: String
  id: ID!
  platform: WeavSalesPlatform!
  redirectUrl: String!
  shopifyStore: String
}

type WeeklyClosingStrategy {
  dayOfWeek: Int
}

type UpdateUserEmailPayload {
  clientMutationId: String!
  user: User!
}

type CredentialWeavPayload {
  platform: WeavSalesPlatform!
  shopifyStore: String
  vendorId: String
}

"""View data for rewards page checkbox"""
type IncentivePlacementViewDataRewardsPageCheckbox {
  """Bonus if achieved (cents)"""
  bonus: Int!
  """Description of bonus (potentially to put in modal)"""
  description: String!
  """Time when the user was paid the points, null if they haven''t been paid"""
  payedOutAt: Time
  """Placement"""
  placement: IncentivePlacement!
  """Short description (quick summary)"""
  shortDescription: String!
  """Status"""
  status: IncentivePlacementViewDataStatus
  """steps that are supposed to be completed for this reward"""
  steps: [RewardsPageCheckboxStep!]!
  """Title"""
  title: String!
}

input CreateMerchantDisputeInput {
  clientMutationId: String!
  evidenceAssetIds: [ID!]
  expectedAmount: Int
  reason: String!
  relatedTransactionIds: [ID!]
  transactionIds: [ID!]!
}

type ExternallyOriginatedChequeDetails {
  backImageSrc: String
  chequeMemo: String
  frontImageSrc: String
  initiatorCustomerUser: User
  returnReason: ReturnReason
  senderName: String
  type: TxType
}

input FinancialAssetInput {
  """The instrument code (usd, etc.). Currently, only usd is supported."""
  instrumentCode: FinancialInstrumentCode = USD
  """The amount in cents"""
  quantityCents: Int
}

union InsightMetadata = InsightMetadataDuplicateSubscriptions | InsightMetadataHighSpend | InsightMetadataSaasIncrease | InsightMetadataSpendIncrease

input UpdateTransactionCategoryInput {
  clientMutationId: String!
  transactionId: ID!
  userCategoryId: String!
}

enum SortColumn {
  AMOUNT
  DEPARTMENT
  INVALID
  MERCHANT_CATEGORY
  MERCHANT_NAME
  POSTED_AT
  USER_NAME
}

type ChannelConnection {
  edges: [ChannelEdge]
  pageInfo: PageInfo!
}

input CreatePhysicalCardInput {
  budgetId: ID
  clientMutationId: String!
  customerUserId: ID
  defaultMemo: String
  displayName: String
  holderName: String!
  shippingAddress: AddressInput!
}

input ConnectShopifyCredentialInput {
  clientMutationId: String!
  id: ID!
  redirectUrl: String!
  shopName: String!
}

type DepositsMonthlySchedule {
  dayOccurrence: Int
  dayOfMonth: Int
  dayOfWeek: BusinessDays
  nMonths: Int!
  weekOfMonth: Int
}

enum BillableStatus {
  BILLABLE
  HAS_BEEN_BILLED
  NOT_BILLABLE
}

enum ReceivablesOffersOffersGroupStatus {
  ACCEPTED
  ADVANCED
  INVALID
  LIABILITIES_TRACKED
  PREPARED
  SETTLED
}

type IntegrationErrorDetails implements Node {
  count: Int!
  errorMessage: String
  errorSubtype: String
  errorType: String!
  """The ID of an object"""
  id: ID!
  maxPostedAt: Time
  minPostedAt: Time
}

enum Issuer {
  EMIGRANT
  FIFTH_THIRD
  INVALID
  SUTTON
}

input SaveOnboardingInformationRequestInput {
  clientMutationId: String!
  data: Json
  id: ID!
}

type Account implements Node @key(fields: "id") {
  estimatedUpcomingDueAmounts(numDays: Int!): [UpcomingDueAmount]
  """This is actually the enabled funding sources, please use enabled_funding_sources field"""
  fundingSources(after: String, before: String, first: Int, last: Int): FundingSourceConnection
  """
  Duplicated from deposits account level. Retrieves matching payments
  for a given customer account
  """
  payments(after: String, associationCriteria: AssociationCriteria, before: String, depositsAccountId: ID, endTime: Time, first: Int, last: Int, onlyShowRecurringPayments: Boolean, startTime: Time, status: DepositsPaymentStatus, statuses: [DepositsPaymentStatus!]): DepositsPaymentConnection
  """Amount we''re currently trying to collect for this customer"""
  scheduledCollectionAmount: Int
  currentBillingPeriod: BillingPeriod
  """Bill Pay''s unique email for invoice processing"""
  billForwardingEmailAddress: String
  """The journal account corresponding to the primary card loan for this customer"""
  cardCustomerJournalAccount: JournalAccount
  depositsAccounts(after: String, before: String, first: Int, id: ID, last: Int, status: DepositsAccountStatus): DepositsAccountConnection
  """User''s intent for signing up for brex"""
  signupIntent: [String]
  """The external accounts the user had when they signed up (e.g. Shopify, Amazon, etc)"""
  externalAccounts: [String]
  users(after: String, before: String, first: Int, last: Int): UserConnection
  companyType: CompanyType
  """Total amount of transactions by customer that have had auth but no clearing event"""
  balancePending: Int
  legalName: String
  """Number of points available to account"""
  pointsBalance: Int
  """The ID of an object"""
  id: ID!
  """Is inviting users on the account allowed"""
  canInviteUsers: Boolean!
  """Billing payments made by this customer account"""
  billingPayments(after: String, before: String, cardPaymentsOnly: Boolean, first: Int, from: String, last: Int, scheduledForOrder: OrderBy, status: PaymentStatus, to: String): BillingPaymentConnection
  """Returns the type of the accepted product offer for this account"""
  acceptedProductOfferType: OfferType!
  allowUserManualPayment: Boolean
  """Total amount of money that customer owes Brex, including entries that aren''t due yet"""
  balanceDue: Int
  taxpayerNumber: String
  status: String
  contacts(after: String, before: String, first: Int, last: Int, searchQuery: String): PaymentContactConnection
  """Is this account eligible to be converted to the specified card account type"""
  eligibleForCardAccountType(toCardAccountType: CardAccountType!): AccountEligibleForCardAccountType
  """The default funding source, this will be used for automatic collections and scheduled collections where no funding source is explicitly requested"""
  defaultFundingSource: FundingSource
  """Disable the chat when account is binary fraudulent"""
  chatDisabled: Boolean
  estimatedNextDueAmount: UpcomingDueAmount
  investmentSource: InvestmentSource
  employeeCountRange: EmployeeCountRange
  insertedAt: Time
  financialSources(after: String, before: String, first: Int, last: Int): FinancialSourceConnection
  """Has the customer selected a funding source for autopay?"""
  hasCustomerSelectedAutopayFundingSource: Boolean!
  """Amount we''re currently trying to collect for this customer"""
  outstandingCollectionAmount: Int
  """The risk tier of the account"""
  riskTier: RiskTier
  """Customer''s global limit and balance consumption"""
  balanceSummary: AccountBalanceSummary
  maximumUserInitiatedPaymentAmount: Int
  """Was the account previously suspended and is now active"""
  statusFromSuspendedToActive: Boolean!
  underwriting: UnderwritingAccount
  """Company monthly sales volume from soft signup payload"""
  salesVolume: String
  """Logic to handle whether we should put the user in a blocking waitlisted screen"""
  canSeeApplications: ShouldSeeApplicationResponse!
  cardAccountType: CardAccountType
  """Amount of all pending collections for this customer"""
  pendingCollectionAmount: Int
  """The onboarding product the account was approved for"""
  approvedBlueprintAtOnboarding: String
  currentBillingDelinquency: BillingDelinquency
  systemSettings: AccountSystemSettings
  """Is the customer''s card journal account on Buy Now Pay Later terms"""
  isOnBnplTerms: Boolean
  """Amount of money a customer owes, minus the entries that haven''t become due yet"""
  currentAmountDue: Int
  """
  Cash transactions belonging to the customer account. Statuses is the
  only required filter. Supports first: and after: cursor based pagination.
  """
  cashTransactions(after: String, before: String, depositsAccountId: ID, endInitiatedAt: Time, endProcessedAt: Time, endScheduledSendAt: Time, first: Int, isRecurring: Boolean, last: Int, maxAmountUsdCents: Int, minAmountUsdCents: Int, orderBy: [CashTransactionOrderBy!], origin: CashTransactionOrigin, paymentMethod: CashTransactionPaymentMethod, recurringScheduleId: ID, searchQuery: String, startInitiatedAt: Time, startProcessedAt: Time, startScheduledSendAt: Time, statuses: [CashTransactionStatus!]!, transactionTypes: [CashTransactionType!]): CashTransactionConnection
  """Submission time of the latest product application for this account"""
  latestApprovedProductApplicationSubmittedAt: Time
  """Billing payment intents targeting accounts owned by this customer account"""
  billingPaymentIntents(after: String, before: String, first: Int, hasCanCashAdvanceTarget: Boolean, hasReceivablesOffersTarget: Boolean, last: Int): BillingPaymentIntentConnection
  collectionIntentions(after: String, before: String, first: Int, last: Int): CollectionIntentionConnection
  positivePayAccountSettings(after: String, before: String, first: Int, last: Int, status: PositivePayAccountSettingStatus): PositivePayAccountSettingConnection
  """Find a billing payment made by this customer account"""
  billingPayment(id: String!): BillingPayment
  """Whether the account has any cleared transactions"""
  hasClearedTransaction: Boolean!
  """Rounded amount of money that customer has available to spend"""
  roundedRemainingSpend: Int @deprecated(reason: "Use balance_summary instead")
  lastUserInitiatedCollectionIntention: CollectionIntention
  dateEstablished: Time
  hasProductApplication: Boolean!
  """Initial market segment from segmentation service"""
  initialMarketSegment: String
  """The enabled funding sources for this account"""
  enabledFundingSources(after: String, before: String, first: Int, last: Int): FundingSourceConnection
  """Balance and date to be collected on"""
  currentBalancePaymentDetails: CurrentBalancePaymentDetails!
  """Answers to the business maturity question"""
  maturity: [String]
  """
  Duplicated from deposits account level. Retrieves matching transactions
  for a given customer account
  """
  searchDepositsTransactions(after: String, before: String, depositsAccountId: ID, endTime: Time, first: Int, last: Int, query: String, recurringPaymentId: ID, startTime: Time, status: Status): DepositsTransactionConnection
  """Rounded estimate of the global limit for the customer"""
  roundedGlobalLimit: Int @deprecated(reason: "Use balance_summary instead")
  financialProductType: FinancialProductType
  dbaName: String
  """Is the account in ''Kill Yellow Tier'' experiment''s treatment group?"""
  isInKillYellowTier: Boolean
  cobranding: Cobranding!
  incorporationState: String
  officeAddress: Address
}

type UnderwritingAnalysisFlag implements Node {
  """The ID of an object"""
  id: ID!
  name: UnderwritingAnalysisFlagName!
}

type CreateOpenidSessionPayload {
  clientMutationId: String!
  session: Session
}

enum IncentivePlacementRewardsPageCheckboxViewDataStepStatus {
  ACTIVE
  COMPLETED
  ERROR
  INACTIVE
  INVALID
}

input TransactionConsumerSettings {
  """The recipient notification setting to indicate at what stages we want to send out notifications"""
  recipientNotificationSetting: NotificationSetting
}

type InternationalWireInputField {
  displayName: String!
  forRecipientTypes: [RecipientType!]
  format: String
  maxLength: Int!
  minLength: Int!
  name: String!
  tooltip: String
}

input UpdateApprovalsRequestInput {
  clientMutationId: String!
  description: String
  monthlyLimitOverrideMetadata: ApprovalsRequestMonthlyLimitOverrideInput
  preapprovedCardMetadata: ApprovalsRequestPreapprovedCardInput
  requestId: ID!
}

type UpdateCardMetadataPayload {
  card: Card!
  clientMutationId: String!
}

type AcceptCreditMarketingOfferPayload {
  clientMutationId: String!
  offer: CreditMarketingOffer
  result: AcceptCreditMarketingOfferResult!
}

input CreateTransactionApprovedSubscriptionInput {
  channelId: ID!
  clientMutationId: String!
  isPhysical: Boolean
}

input SendMobileChequeDepositNotificationInput {
  clientMutationId: String!
  phoneNumber: String!
}

type UpdateEarlyAccessFeatureJoinStatusPayload {
  clientMutationId: String!
  earlyAccessFeature: EarlyAccessFeature!
}

type ChannelPushOptions {
  deviceInformation: DeviceInformation
  deviceToken: String
  type: PushProviderType
}

type OnboardingApplicationConnection {
  edges: [OnboardingApplicationEdge]
  pageInfo: PageInfo!
}

type OnboardingFormTerms {
  _: Boolean
}

type InterestDetails {
  paidOn: Time
}

type ReimbursementItemConnection {
  edges: [ReimbursementItemEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

input InternationalWirePaymentInstrumentFindInput {
  iban: String!
  swiftCode: String!
}

type CreateCredentialPayload {
  clientMutationId: String!
  credential: Credential
}

type ConnectShopifyCredentialPayload {
  authenticationResult: CredentialAuthenticationResult
  clientMutationId: String!
}

type ReimbursementItemEventEdge {
  cursor: String
  node: ReimbursementItemEvent
}

type StatementEntry implements Node {
  accrualTime: Time
  """Enumeration indicating the type of business activity that this entry represents"""
  activityType: StatementEntryActivityType!
  amount: Int
  expensesItem: ExpensesItem
  exportItem: ExportItem
  exportedIntegrationFields: StatementEntryIntegrationFields
  """The ID of an object"""
  id: ID!
  integrationStatus: StatementEntryIntegrationStatus
  integrationVendorEntryId: String
  integrationVendorEntryUrl: String
  lens: StatementEntryLens
  operation: TransactionOperation
  originator: StatementEntryOriginator
  originatorType: String @deprecated(reason: "Use activityType instead")
  postedAt: Time
  purchaseTime: Time
  rewardsRedemptionOffer: RewardsOffer
  """Information about how this statement entry was refunded, only non-null for refunded statement entries"""
  rewardsRefund: RewardsRefund
  transaction: Transaction
  userCategory: UserCategory
}

input CreateTransactionRefusedSubscriptionInput {
  channelId: ID!
  clientMutationId: String!
}

enum OneBrexSegment {
  ONE_BREX_SEGMENT_CAPITAL_1_POINT_0
  ONE_BREX_SEGMENT_INVALID
  ONE_BREX_SEGMENT_MID_MARKET
  ONE_BREX_SEGMENT_SMALL_BUSINESS
  ONE_BREX_SEGMENT_VENTURE_BACKED
}

input DeleteLocationInput {
  clientMutationId: String!
  id: ID!
}

type UpdateExpensesSettingRulesPayload {
  clientMutationId: String!
  expensesSetting: ExpensesSetting
}

input CreateOpenidSessionInput {
  clientMutationId: String!
  token: String!
}

input SpendAggregateTimeSeriesFilters {
  cardIds: [String]
  departmentIds: [String]
  from: Time!
  merchantCategoryIds: [String]
  merchantIds: [String]
  to: Time!
  userCategoryIds: [String]
  userIds: [String]
}

input CreateDepartmentInput {
  clientMutationId: String!
  description: String
  name: String!
}

type RewardsTriggerInstance implements Node {
  expiresAt: Time
  """The ID of an object"""
  id: ID!
  state: RewardsTriggerInstanceState!
  status: RewardsTriggerInstanceStatus!
  triggeredAt: Time
}

type UpdateDepartmentPayload {
  clientMutationId: String!
  department: Department!
}

"""The individual routing rule v2"""
type ApprovalsRoutingRuleIndividualsV2 implements Node {
  """The ID of an object"""
  id: ID!
  """A list of approval user types"""
  userTypes: [UserType!]!
}

type ChannelSmsOptions {
  number: PhoneNumber
}

"""QBD credential payload"""
type CredentialQbdPayload {
  """Company ID as generated by Codat - needed for QBD connector"""
  companyId: String
}

type EarlyAccessFeatureMediaAsset implements Node {
  aspectRatioHeight: Int!
  aspectRatioWidth: Int!
  assetType: EarlyAccessFeatureMediaAssetType!
  """The ID of an object"""
  id: ID!
  url: String!
}

type OnboardingPageForm {
  _: Boolean
  content: OnboardingFormJsonSchema!
}

input RemoveFspBookkeeperUserInput {
  bookkeeperUserId: String!
  clientMutationId: String!
}

type FinicityConnectGenerateLiteUrlPayload {
  clientMutationId: String!
  url: String!
}

union OnboardingNonSubmittablePage = OnboardingPagePhotoIdIntro

input CreateNetsuiteCredentialInput {
  accountId: String!
  clientMutationId: String!
  tokenId: String!
  tokenSecret: String!
}

input CancelApprovalsRequestInput {
  clientMutationId: String!
  requestIds: [ID!]
}

type PaymentContact implements Node {
  """Default erp categories"""
  defaultErpCategories(
    """Optional field to filter default erp categories by only active integrations"""
    onlyActiveIntegrations: Boolean = false
  ): [ContactDefaultErpCategory!]
  email: String
  """The ID of an object"""
  id: ID!
  name: String
  paymentInstruments: [PaymentInstrument!]
  phoneNumber: String
  processingAndFuturePayments(after: String, before: String, first: Int, last: Int): DepositsProcessingAndFuturePaymentDateConnection
  version: Int!
}

type ExpensifySetupInstructions {
  copilotEmail: String
}

enum ProductType {
  BILL_PAY_BUSINESS_APPROVAL
  INVALID
  MONTHLY_LIMIT_OVERRIDE
  PREAPPROVED_CARD
  REIMBURSEMENT
}

input StartIntegrationExportInput {
  clientMutationId: String!
  """Time in user''s timezone that report is generated"""
  displayTime: Time!
  """Export STEs before this date"""
  endDateRange: Time
  """Type of export - ''csv'' or ''direct''"""
  exportType: ExportType!
  isPrimitive: Boolean
  """Export STEs after this date"""
  startDateRange: Time
  statementEntryTypes: [String]
}

input UpdateAutoAddFundsInput {
  amount: Int!
  clientMutationId: String!
  depositsAccountId: ID
  endsAt: Time
  financialAccountId: ID!
  id: ID!
  idempotencyKey: String!
  monthlySchedule: MonthlySchedule
  sendAt: Time
  totalNumberOfPayments: Int
  weeklySchedule: WeeklySchedule
}

enum AssociationCriteria {
  EXCLUDE_BILL_PAYMENTS
  ONLY_BILL_PAYMENTS
}

enum ReceivablesOffersOfferNonPerformanceReason {
  DELINQUENT
  EARLY_INITIATED_PAYOUT_INSUFFICIENT
  FAILED_PAYMENT
  FAILED_PAYOUT_STATUS
  INVALID
  INVALID_TARGET_ACCOUNT
  OVER_ALLOCATION
  PAYOUT_INSUFFICIENT
  PAYOUT_NOT_MATCHED
  REVERSED_PAYMENT
  ROUTED_AWAY_FROM_BREX_CASH
  SEVERED_INTEGRATION
  SEVERED_INTEGRATION_AUTO
  SPECIAL
}

input CreateReceiptInput {
  assetId: ID!
  clientMutationId: String!
  transactionId: ID!
}

type ApprovalsUnsafeFlag {
  value: String
}

"""
Request for information. Is a collection of Rfi Items + broader context for the Request,
used to keep track of the exchange of information between requester and responder
"""
type Rfi implements Node {
  """Salesforce ID for the related Case"""
  arfiCaseId: String
  """Salesforce Number for the related case"""
  arfiCaseNumber: String
  """Internal Id for the customer''s account on another service, e.g. undacc_ for underwriting"""
  brexObjectId: String
  """cuacc of the account related to this RFI"""
  customerAccount: Account
  """The ID of an object"""
  id: ID!
  """List of requested items"""
  items: [RfiItem]
  parentCaseId: String
  """Message for the recepient providing context for this RFI"""
  requestMessage: String
  """Internal Id for the requestor who initiated the RFI - either a user (e.g Ops) or a service"""
  requestor: String
  responses: [RfiResponse]
  status: RfiStatus
  """
  Cuuser of the primary recipient of the Request,
  i.e. the user who''s expected to provide the information.
  """
  toCustomerUser: User
}

type SetReceivablesOffersSellerAccountHasSeenTrialAccessConfirmationBannerPayload {
  clientMutationId: String!
  sellerAccount: ReceivablesOffersSellerAccount
}

type PromotionsItem implements Node {
  """The category shown above the item"""
  category: PromotionsCategory!
  """CTA object for the button"""
  cta: PromotionsCta!
  """The main text for the item"""
  description: String!
  """The ID of an object"""
  id: ID!
  """Making this an object so that we can potentially have multiple types of images for different clients"""
  image: PromotionsImage!
  """A name for the item that can be used for analytics calls. Not shown to the user, but is human readable (versus the encoded ID field)"""
  name: String!
  """Boolean for whether the user can click ''not now''"""
  skippable: Boolean
  """Colour scheme"""
  theme: PromotionsTheme!
}

type SumAggregationResult {
  name: String!
  value: Float!
}

type CreatePhysicalCardPayload {
  card: Card
  clientMutationId: String!
}

enum LimitUtilizationStatus {
  """Balance due is exceed of the total limit"""
  EXCEED_LIMIT
  """Balance due is at least 80% of the total limit"""
  NEAR_LIMIT
  """Balance due is greater than or equal to 95% of total limit or total limit - $5000 (whichever is higher)"""
  REACHED_LIMIT
}

"""Runway projection information"""
type InsightsRunwayInsight {
  """A rough estimate of when the account will be out of cash"""
  estimatedCashOutDate: Date
  """Timeseries of projected data related to runway"""
  projectionTimeseries: [InsightsRunwayProjection!]!
  """
  Using the burn rate projection, estimate when the company
  might need to raise fundraising money
  """
  suggestedFundraisingDate: Date
}

input EnableBillsInput {
  clientMutationId: String!
  id: ID!
}

type ReferralConnection {
  edges: [ReferralEdge]
  pageInfo: PageInfo!
}

type CreatePayerPayload {
  clientMutationId: String!
  payer: InvoicingContact
}

enum OfferState {
  ACCEPTED
  DECISION
  DECLINED
  IGNORED
  INELIGIBLE
  INITIALIZED
  REJECTED
}

type CreateInvoicePayload {
  clientMutationId: String!
  invoice: InvoicingInvoice
}

"""Information about the developer API token"""
type DeveloperApiToken {
  """Time the token is created"""
  createdAt: Time
  """Id of the user who created the token"""
  creatorUserId: String!
  """Value of the token, censored for active tokens"""
  displayToken: String!
  """Primary key for the token"""
  id: String!
  """Human-readable name of the token"""
  name: String!
  """Time the token is revoked"""
  revokedAt: Time
  """List of scopes the token is valid for"""
  scopes: [Scope]
}

type UpdateTransactionIntegrationCustomerPayload {
  clientMutationId: String!
  transaction: Transaction
}

input InternationalWirePaymentInstrumentInput {
  address: AddressInput!
  beneficiaryBankAddress: AddressInput
  beneficiaryBankInfo: Json
  beneficiaryBankName: String
  iban: String!
  swiftCode: String!
}

type SetManagerPayload {
  clientMutationId: String!
  users: [User]
}

union CardOverviewInsightsTile = MostRecentTransactionsTile

enum DataImporterDataProviderStatus {
  ACTIVE
  TERMINATED
}

input IssueCollectionInput {
  amount: Int!
  clientMutationId: String!
  fundingSourceId: ID
  paymentEarlyAuthBalanceDecreaseCommitmentId: ID
}

union CredentialAuthenticationResult = CredentialRedirectResult | CredentialSuccessResult

type CreatePositivePayAccountSettingPayload {
  clientMutationId: String!
  positivePayAccountSetting: PositivePayAccountSetting!
}

type RewardsRedemptionProgramConnection {
  edges: [RewardsRedemptionProgramEdge]
  pageInfo: PageInfo!
}

type ApprovalsRuleGroup implements Node {
  """The ID of an object"""
  id: ID!
  isDefault: Boolean
  matchers: [ApprovalsRuleGroupMatcher!]!
  routingRules: [ApprovalsRoutingRule!]!
}

type CashTransactionAchReturnDetails {
  """Details from the transaction this return was for"""
  originalDetails: CashTransactionAchDetails!
  """The reason why the original transaction was returned"""
  returnReason: CashTransactionAchReturnReason!
}

input SubmitOnboardingApplicationInput {
  clientMutationId: String!
  id: ID!
}

input EnableReimbursementsInput {
  clientMutationId: String!
  id: ID!
}

type RewardsTriggerPurchase {
  accrualRate: Float!
  excludedPresentMerchantCategoryIds: [String]
  excludedPresentMerchantIds: [String]
  includedPresentMerchantCategoryIds: [String]
  includedPresentMerchantIds: [String]
}

input ConnectTellerInstitutionInput {
  """Access token representing customer connection (aka enrollment)"""
  accessToken: String!
  clientMutationId: String!
  """Teller enrollment (connection) ID"""
  enrollmentId: String!
  """Teller''s name of the institution"""
  tellerInstitutionName: String!
}

type PaymentContactEdge {
  cursor: String
  node: PaymentContact
}

type OnboardingPageTerms {
  card: Boolean
  cash: Boolean
  content: OnboardingFormTerms!
}

input DeleteCardTransactionInsightMutingPolicyInput {
  clientMutationId: String!
  id: ID!
}

input UpdateUserPermissionInput {
  """setting to access corporate cards"""
  canAccessCorporateCards: Boolean
  clientMutationId: String!
  """the customer_user_id"""
  id: ID!
}

input UpdateUserEmailInput {
  clientMutationId: String!
  email: String!
}

union ExternalIntegrationEntityPayload = CodatTrackingCategory | NetsuiteClass | NetsuiteCustom | NetsuiteDepartment | NetsuiteLocation | NetsuiteVendor | QuickbooksClass | QuickbooksCustomer | QuickbooksLocation | XeroTrackingCategory

input SetReceivablesOffersSellerAccountHasSeenTrialAccessConfirmationBannerInput {
  clientMutationId: String!
  sellerAccountId: ID!
  value: Boolean!
}

input AcceptOfferInput {
  clientMutationId: String!
  offerType: OfferType!
}

type RefreshIntegrationCredentialsPayload {
  clientMutationId: String!
  integrations: [Integration]
}

type SpendAggregateConnection {
  edges: [SpendAggregateEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

enum IntegrationScope {
  COLLECTIONS
  EXPENSES
  REWARDS_REDEMPTIONS
}

type CancelPaymentPayload {
  clientMutationId: String!
  payment: DepositsPayment!
}

type CardAcceptor implements Node {
  address: String
  captureMethod: String
  city: String
  country: String
  """The ID of an object"""
  id: ID!
  mcc: String
  mid: String
  name: String
  state: String
  zip: String
}

type TurnOnSeenFlagPayload {
  clientMutationId: String!
  """Updated flag"""
  seenFlag: SeenFlag
}

input ApprovalsRequestPreapprovedCardInput {
  amount: Int!
  defaultMemo: String
  displayName: String!
  frequency: CardLimitFrequency!
  integrationRuleBody: String
  integrationRuleId: ID
  softExpirationDate: Time
}

type ActivateIntegrationPayload {
  clientMutationId: String!
  integration: Integration
}

"""
An input union for filtering find_contact
Only one field is meant to be set since GraphQL doesn''t support input unions
"""
input FindContactIdentifierInputUnion {
  name: String
  paymentInstrumentId: ID
  recipientCustomerUserId: ID
}

enum FinancialSourceStatus {
  ACTIVE
  CONNECTING
  ERROR
  INVALID
  PENDING
  USER_ACTION
}

type IntegrationRuleEdge {
  cursor: String
  node: IntegrationRule
}

input DepositChequeInput {
  amount: Int!
  backImageAssetId: ID!
  clientMutationId: String!
  depositsAccountId: ID!
  frontImageAssetId: ID!
  idempotencyKey: String!
  memo: String
  senderName: String!
}

input SetSoftExpirationDateInput {
  cardId: ID!
  clientMutationId: String!
  idempotencyKey: String!
  softExpiresAt: Time
}

type DisputeTransaction implements Node {
  dispute: Dispute
  """The ID of an object"""
  id: ID!
  status: DisputeTransactionStatus!
}

type ApplicationSession implements Node {
  """The ID of an object"""
  id: ID!
  """Id of the retrieved session"""
  sessionId: String!
}

type PaymentDetails {
  """For a returned wire, this is the difference between the original wire amount vs what was actually returned back due to the beneficiary bank taking a fee."""
  amountDriftUsdCents: Int
  """The sending bank''s reference number for this wire (F20 of the MT103)"""
  bankReferenceNumber: String
  counterparty: Counterparty!
  endToEndId: String
  estimatedOn: Time
  estimatedOnLatest: Time
  fedReferenceNumber: String
  imad: String
  initiatorCustomerUser: User
  method: Method!
  mt103: String
  omad: String
  origin: Origin!
  paymentRail: TxPaymentRail
  returnReason: ReturnReason
  transferDescription: String
  type: TxType
}

union FinancialInformationRequestConfig = FinancialInformationRequestConfigStatement

type CredentialConnection {
  edges: [CredentialEdge]
  pageInfo: PageInfo!
}

type EnableBillsPayload {
  clientMutationId: String!
  integration: Integration
}

union CashRecurringScheduleType = CashRecurringScheduleMonthlyByDay | CashRecurringScheduleMonthlyByWeek | CashRecurringScheduleWeekly

type CardConnection {
  edges: [CardEdge]
  pageInfo: PageInfo!
  summary: Summary!
  totalCount: Int!
}

type ConnectWeavCredentialPayload {
  authenticationResult: CredentialAuthenticationResult
  clientMutationId: String!
}

type UserConnection {
  count: Int!
  edges: [UserEdge]
  pageInfo: PageInfo!
}

input SetReceivablesOffersOptedOutOfInstantPayoutsInput {
  clientMutationId: String!
  value: Boolean!
}

type OnboardingPageDSuitability {
  _: Boolean
  content: OnboardingFormEmpty!
}

type CardPaymentForwarderPaymentObject {
  amount: FinancialAsset
  cardId: ID
  createdAt: Date
  deliveryDate: Date
  description: String
  documents: [CardPaymentForwarderDocument]
  fees: FinancialAsset
  idempotencyKey: String
  invoice: CardPaymentForwarderInvoice
  paymentId: ID!
  paymentStatus: CardPaymentForwarderPaymentStatus!
  recipient: CardPaymentForwarderRecipient
}

"""deprecated"""
type NetsuiteCustom {
  isInactive: Boolean
  name: String
}

input InputCashTransactionBookTransferArguments {
  """The target cash account to move funds to"""
  targetDepositsAccountId: ID!
}

input UpdatePaymentInstrumentInput {
  achPaymentInstrument: AchPaymentInstrumentInput
  """Payment instrument''s beneficiary name"""
  beneficiaryName: String
  chequePaymentInstrument: ChequePaymentInstrumentInput
  clientMutationId: String!
  domesticWirePaymentInstrument: DomesticWirePaymentInstrumentInput
  id: ID!
  internationalWirePaymentInstrument: InternationalWirePaymentInstrumentInput
}

input UpdateContactDefaultErpCategoryInput {
  clientMutationId: String!
  """The contact id"""
  contactId: ID!
  """The integration id"""
  integrationId: ID!
  """The user category id. Set to null to set the contact to have no default category on the given integration."""
  userErpCategoryId: ID
}

type LegacyCardStatementPeriodBoundaries {
  id: ID
  periodEndDate: Time!
  periodStartDate: Time
}

enum DepositsAccountsWithdrawalStatus {
  APPROVAL_REQUIRED
  FAILED
  INVALID
  NOT_STARTED
  PROCESSED
  PROCESSING
}

type SetSoftExpirationDatePayload {
  card: Card!
  clientMutationId: String!
}

enum CashTransactionApprovalResult {
  ALREADY_PROCESSED
  INVALID
  SUCCESSFULLY_UPDATED
}

type TransactionOperation implements Node {
  accrualTime: Time
  amount: Int
  """The ID of an object"""
  id: ID!
  """Indicates if a transaction operation is a dispute credit"""
  isDisputeCredit: Boolean!
  rewardsAccrualEntries(after: String, before: String, first: Int, last: Int): RewardsAccrualEntryConnection
  """Split items for this transaction operation."""
  splitItems: [TransactionOperationSplitItem!]
  status: String
  statusReason: String
  subtype: String
  transaction: Transaction
  type: String
}

type PremiumSettingEvent implements Node {
  action: PremiumSettingEventAction!
  campaign: String
  description: String
  """The ID of an object"""
  id: ID!
  premiumSetting: PremiumSetting
  pricingScheme: PremiumSettingPricingScheme
  source: PremiumSettingEventSource!
  user: User
}

"""View data for incentive banners"""
type IncentivePlacementViewDataBanner {
  """URL for CTA (only if not opt-in)"""
  ctaUrl: String
  """Description of banner"""
  description: String!
  """CTA text (opt_in_cta is legacy, since we now support a cta that goes to a url)"""
  optInCta: String!
  """Placement"""
  placement: IncentivePlacement!
  """Title of banner"""
  title: String!
}

enum PeriodicReviewState {
  ACTIVE
  CANCELLED
  ERROR
  FAILED
  INVALID
  MANUAL_REVIEW
  SUCCEEDED
}

enum InvoiceStatus {
  AUTOMATED_MATCH_PAID
  AUTOMATED_MATCH_PARTIALLY_PAID
  AWAITING_PAYMENT
  DELETED
  DRAFTING
  INVALID
  PAID
  PARTIALLY_PAID
  UNCOLLECTIBLE
  VOIDED
}

enum OnboardingApplicationStateRiskEvaluationValue {
  """The application section was approved"""
  APPROVED
  """The application section is processing, i.e. pending evidence or manual review"""
  PROCESSING
  """The application section was rejected"""
  REJECTED
}

input TriggerErpFeedSyncInput {
  clientMutationId: String!
  erpFeedId: ID!
}

input InputCashRecurringSchedule {
  """If duration is set to NULL, we will assume the schedule is for an indefinite amount of time"""
  duration: InputCashRecurringScheduleDurationUnion
  type: InputCashRecurringScheduleTypeUnion!
}

enum PendingRecordApprovalDecisionReason {
  FRAUDULENT
  INCORRECT
  OTHER
  UNAUTHORIZED
}

type EnableExpensesPayload {
  clientMutationId: String!
  integration: Integration
}

input UpdateBillInput {
  attachmentAssetId: ID
  chequeMemo: String
  clientMutationId: String!
  contactId: ID
  counterpartyId: String
  depositsAccountId: ID
  description: String
  dueAmountCents: Int
  dueAt: Time
  endsAt: Time
  externalInvoiceNumber: String
  id: ID!
  merchantCategoryId: ID
  monthlySchedule: MonthlySchedule
  notifyRecipient: Boolean
  paymentInstrumentId: ID
  paymentSendAt: Time
  totalNumberOfPayments: Int
  transferDescription: String
  userErpCategoryId: ID
  weeklySchedule: WeeklySchedule
}

type ReplacesRecordEdge {
  cursor: String
  node: ReplacesRecord
}

enum CardTransactionInsightEventAction {
  COMMENT
  DISMISS
  MUTE
  OPEN
}

enum CardPaymentForwarderDocumentType {
  BENEFICIAL_OWNER
  CARD_OR_BANK_STATEMENT
  CERTIFICATE_OF_GOODS
  EMPLOYEE_PAY_OR_CONTRACT
  ESCROW_AGREEMENT
  GOVERNMENT_ISSUED_ID
  INVALID
  INVOICE
  LEASE_AGREEMENT
  LEGAL_AGREEMENT
  NON_P2P_DOCUMENT
  SUPPLIER_INVOICE_OR_PURCHASE_ORDER
  W9_FORM
}

type Asset implements Node {
  data: AssetData!
  downloadUrl: String
  """The ID of an object"""
  id: ID!
  presignedDownloadUrl: String
}

type InternationalBankInformation {
  address: Address!
  name: String
  nameAbbrev: String
  possibleIssues: [String!]!
}

type InternationalWireCountryConfig {
  addressRequiresZipCode: Boolean!
  countryCodeAlpha2: String!
  countryName: String!
  iban: Boolean!
  inputFields: [InternationalWireInputField!]!
  isHighRisk: Boolean!
  recipientTypes: [RecipientType!]
}

input CreateCardTransactionInsightMutingPolicyInput {
  clientMutationId: String!
  insightType: CardTransactionsInsightType
  muteColumn: MuteColumn
  muteValue: String
}

type ExpensesRuleConnection {
  edges: [ExpensesRuleEdge]
  pageInfo: PageInfo!
}

input NotifyUserOfCardRequestInput {
  clientMutationId: String!
  customerUserId: ID!
}

type TransactionPresenceNotificationFilter {
  isPhysical: Boolean
}

input CreateNonPrimaryDepositsAccountInput {
  clientMutationId: String!
  displayColor: DepositsAccountsDisplayColor!
  idempotencyKey: String!
  nickname: String!
}

type ExpensesItem implements Node {
  expensesFlags(after: String, before: String, first: Int, last: Int): ExpensesFlagConnection
  expensesItemEvents(after: String, before: String, first: Int, last: Int): ExpensesItemEventConnection
  """The ID of an object"""
  id: ID!
  statementEntry: StatementEntry
  status: ExpensesItemStatus
  transaction: Transaction
}

type SetAccountRestrictAchDebitsPayload {
  clientMutationId: String!
  restrictAchDebits: Boolean!
}

input DeleteIntegrationRuleInput {
  clientMutationId: String!
  id: ID!
}

"""Scope object"""
type ScopeWrapper {
  """API this scope is used for"""
  api: Api!
  """Description of the scope"""
  description: String
  """Name shown in dashboard"""
  displayName: String!
  """Scope enum"""
  enum: Scope!
  """Scope string value, used when creating tokens"""
  value: String!
}

type CreateSubscriptionsPayload {
  clientMutationId: String!
  notificationSubscriptions: [NotificationSubscription]!
}

input ConfirmMfaInput {
  clientMutationId: String!
  deviceId: String!
  verificationToken: String!
}

type FraudAlertEdge {
  cursor: String
  node: FraudAlert
}

"""A period for which a card statement is issued."""
type CardStatementPeriod {
  """The period end time."""
  endTime: Time!
  """The period start time."""
  startTime: Time!
}

input DocumentOcrVerifyEntitiesInput {
  """The type of document, determined based on the OCR result."""
  ein: String
  """The type of document, determined based on the OCR result."""
  name: String
}

type BulkCreateSpendAlertEventPayload {
  cardTransactionInsights: [CardTransactionInsight!]
  clientMutationId: String!
}

input ProcessAccountClosureInput {
  clientMutationId: String!
  counterpartyId: ID!
}

type ApprovalsRequestMonthlyLimitOverride {
  amount: Int!
  endsAt: Time!
}

type InviteUserPayload {
  clientMutationId: String!
  user: User
}

type ConfirmMfaPayload {
  clientMutationId: String!
  user: User!
}

enum BatchEntity {
  DEPARTMENT
  LOCATION
  USER
}

union VendorInstitutionMetadata = FinicityMetadata

enum ChequeImageValidationType {
  BACK_ONLY
  FRONT_AND_BACK
  FRONT_ONLY
}

type CashTransactionBrexOperationalTransferDetails {
  _: Boolean
}

"""Describes the type, status and active tasks for a single payroll provider integration"""
type PayrollProviderIntegration implements Node {
  """Info for GUSTO integrations"""
  gustoInfo: PayrollIntegrationGustoInfo
  """The ID of an object"""
  id: ID!
  """The status of the connection: processing, connected, disconnected, invalid"""
  status: PayrollProviderIntegrationStatus!
  """Type (method of connection) of integration: Gusto, or invalid"""
  type: PayrollProviderIntegrationType!
  """Timestamp when the integration was last updated"""
  updatedAt: Time!
}

type DepositsStatementConnection {
  edges: [DepositsStatementEdge]
  pageInfo: PageInfo!
}

type CreateSmsChannelPayload {
  channel: Channel
  clientMutationId: String!
}

input InputTransactionApprovalIdentifierUnion {
  """The approval token associated with the approval"""
  approvalToken: String
  """The id of the transaction associated with the approval"""
  id: ID
}

input CardPaymentForwarderRecipientInput {
  beneficialOwner: CardPaymentForwarderBeneficialOwnerInput
  businessAddress: AddressInput
  businessName: String
  categoryId: String
  contact: CardPaymentForwarderContactInput
  receivingMethod: ReceivingMethodInput
  recipientId: ID
}

type CreateFinancialBankStatementPayload {
  clientMutationId: String!
}

type IntegrationConnection {
  edges: [IntegrationEdge]
  pageInfo: PageInfo!
}

type FakeMutationDoNotUsePayload {
  clientMutationId: String!
}

input ChangeInvestmentPolicyInput {
  amount: Int!
  clientMutationId: String!
  depositsAccountId: ID!
  investmentType: InvestmentType!
}

type RedeemForBalancePayload {
  account: Account!
  balanceBreakdown: BalanceBreakdown
  clientMutationId: String!
  redeemedBalanceAmountCents: Int!
}

"""An intent to pay a balance towards one or more target accounts"""
type BillingPaymentIntent implements Node {
  """The time at which the payment most recently completed"""
  collectedAt: Time
  """The ID of an object"""
  id: ID!
  """The time at which the payment was initiated"""
  initiatedAt: Time
  """An enum representation of the source of funds for this payment"""
  sourceType: BillingPaymentIntentSourceType!
  """The life cycle status of this payment"""
  status: BillingPaymentIntentStatus!
  """The amount for which this payment was requested"""
  totalRequestedAmount: FinancialAsset
}

"""The value type when mute_column is set to merchant_id"""
type MuteValueDepartment {
  """The merchant that is being muted for this muting policy"""
  department: Department
}

"""Collected directly from the customer''s Cash Account, most likely due to non-performance"""
type ReceivablesOffersPaymentIntentSourceDepositsAccount {
  sourceDepositsAccountId: String!
}

type FinancialInstitutionEdge {
  cursor: String
  node: FinancialInstitution
}

type SignupPayload {
  clientMutationId: String!
  user: User!
}

type CashTransactionDomesticWireReturnDetails {
  """Details from the transaction this return was for"""
  originalDetails: CashTransactionDomesticWireDetails!
  """The reason why the original transaction was returned"""
  returnReason: CashTransactionWireReturnReason!
}

input SetReceivablesOffersSellerAccountConfirmedPayoutsRoutedToBrexInput {
  clientMutationId: String!
  sellerAccountId: ID!
  value: Boolean!
}

input PageView {
  """anonymous id generated from client. we use it to associate website page views to a brex user"""
  brexLoggedOutId: String
  """referrer from html"""
  referrer: String
  """third party attribution data we stored in the cookie"""
  thirdPartyAttribution: ThirdPartyAttribution
  """title from html"""
  title: String
  """full url"""
  url: String!
  """customer user id"""
  userId: String
}

union RewardsHistoryEntryPayload = RewardsHistoryEntryPayloadGeneric

input CompletePaymentApprovalWithTokenInput {
  approvalToken: String!
  clientMutationId: String!
  decision: PaymentApprovalDecision!
  decisionNotes: String
  decisionReason: PaymentApprovalDecisionReason
}

type GenerateCardStatementDocumentDownloadUrlPayload {
  cardStatementPdfDownloadUrl: String
  clientMutationId: String!
}

enum RfiResponseStatus {
  RFI_RESPONSE_STATUS_APPROVED
  RFI_RESPONSE_STATUS_DENIED
  RFI_RESPONSE_STATUS_INVALID
  RFI_RESPONSE_STATUS_PENDING
}

type TriggerErpFeedSyncPayload {
  clientMutationId: String!
  exportAttemptId: String
}

type CashTransaction implements Node {
  """The balance across all of the customer''s deposits accounts when funds were made available to the account."""
  aggregateProcessedBalanceSnapshotUsdCents: Int
  """The money movement amount this transaction is responsible for."""
  amountUsdCents: Int!
  """If not NULL, the bill associated with the transaction."""
  bill: Bill
  """If non-NULL, this field explains why a transaction reached the FAILED status"""
  cancellationReason: CashTransactionCancellationReason
  """
  DO NOT BATCH, WILL RESULT IN AN N+1 QUERY.
  If not NULL, the customer user that cancelled the transaction.
  """
  cancelledByUser: User
  """
  DO NOT BATCH, WILL RESULT IN AN N+1 QUERY.
  Counterparty information for BREX-originated transactions.
  """
  counterpartyDetails: CashTransactionCounterpartyDetails
  """A customer editable memo for the transaction which is not meant to be processed in any way outside of a note for the customer to view."""
  customerMemo: String
  """The deposits account of the transaction"""
  depositsAccount: DepositsAccount
  """Details related with the underlying transaction type."""
  details: CashTransactionDetails!
  """
  A human-readable name describing the transaction
  
  This field is mainly filled with the counterparty information for payment rail transactions and some standard text for other transaction types
  """
  displayName: String!
  """The ID of an object"""
  id: ID!
  """
  DO NOT BATCH, WILL RESULT IN AN N+1 QUERY.
  If not NULL, the customer user that initiated the transaction.
  """
  initiatedByUser: User
  """
  DO NOT BATCH, WILL RESULT IN AN N+1 QUERY.
  Whether the transaction is still cancellable.
  Note that this does not apply any permissioning logic to declare whether the user can cancel the transaction.
  """
  isCancellable: Boolean!
  """If true, the transaction originated from a recurring schedule."""
  isRecurring: Boolean
  """
  If true, notify the contact if and when the transaction moves to the processing state.
  Ignored unless the transaction is a credit to a contact with a valid email.
  """
  notifyContactProcessing: Boolean
  """
  Where the transaction originated from
  
  BREX
  The transaction was initiated at Brex
  
  EXTERNAL
  The transaction was initiated at outside of Brex
  """
  origin: CashTransactionOrigin!
  """The account balance when funds were made available to the account."""
  processedBalanceSnapshotUsdCents: Int
  """
  DO NOT BATCH, WILL RESULT IN AN N+1 QUERY.
  If not NULL, the recurring schedule from which the transaction originated.
  Optionally fetch the predicted timelines for the next `timelineCount` transactions in the schedule.
  """
  recurringSchedule(timelineCount: Int): CashRecurringScheduleWithTimelines
  """
  Where in the transaction lifecycle this transaction is at
  
  APPROVAL_REQUIRED
  The transaction is pending approval from an admin in the account before we''re able to begin processing or scheduling the transaction
  
  SCHEDULED
  The transaction is scheduled to be initiated during its scheduled_send_at time
  
  PROCESSING
  This phase begins when Brex starts to process the sending or receiving of this transaction and ends when we either PROCESS or FAIL the verification
  
  PROCESSED
  The money movement has been fully complete, which could mean money sent has arrived at their destination or funds have been added to the account
  
  FAILED
  A grouping of multiple terminal states that prevented the transaction from completing
  This includes:
  - A user cancelled the transaction
  - An admin denied the approval
  - Failure to send/receive the funds (e.g. insufficient funds, permissions, etc)
  - Internal cancellation due to fraud
  """
  status: CashTransactionStatus!
  """Timestamps for the series of events a transaction has gone through"""
  timeline: CashTransactionTimeline!
  """
  DO NOT BATCH, WILL RESULT IN AN N+1 QUERY.
  If not NULL, the approval associated with the transaction.
  """
  transactionApproval: CashTransactionApproval
  """A high-level breakdown of the possible transactions which does not exactly map 1:1 with the details."""
  type: CashTransactionType!
}

type ReimbursementMetadata {
  amount: Int
  department: Department
  departmentId: ID
  departmentName: String
  location: Location
  locationId: ID
  locationName: String
  memo: String
  merchant: Merchant
  merchantCategory: MerchantCategory
  merchantCategoryId: ID
  merchantId: ID
  merchantName: String
  netsuiteClass: ExternalIntegrationEntity
  netsuiteClassExternalEntityId: ID
  purchaseDate: Time
  receiptAssetFileId: ID
  userCategory: UserCategory
  userCategoryId: ID
}

input CreateCashWireDetailsInput {
  clientMutationId: String!
  depositsAccountId: ID
  displayTime: Time!
}

type DocumentOcr implements Node {
  """The ID of an object"""
  id: ID!
  """The processed result. Only available when the document OCR status is COMPLETE"""
  result: DocumentOcrResult
  """The OCR status."""
  status: DocumentOcrStatus!
}

union NotificationFilter = TransactionPresenceNotificationFilter

type SetReceivablesOffersOptedOutOfInstantPayoutsPayload {
  account: ReceivablesOffersAccount
  clientMutationId: String!
}

type SetMonthlyUserLimitPayload {
  clientMutationId: String!
  user: User!
}

"""A cycle reoccurring every month on the same two days of every month."""
type SemiMonthlyCardStatementPolicyCycle {
  """The first day of the month."""
  firstDay: Int
  """The second day of the month."""
  secondDay: Int
}

type ExpensesFlagEventEdge {
  cursor: String
  node: ExpensesFlagEvent
}

enum DepositsCloseAccountIssue {
  INVALID
  NEGATIVE_BALANCE
  PRIMARY_CARD_FUNDING_SOURCE
  WRONG_DEPOSITS_ACCOUNT_STATUS
}

enum AccountLocation {
  DOMESTIC
  INTERNATIONAL
}

type ValidatedVendorContactInputConnection {
  edges: [ValidatedVendorContactInputEdge]
  pageInfo: PageInfo!
}

input SetManagerInput {
  clientMutationId: String!
  managerId: ID
  reportIds: [ID]!
}

type PlaidPayload {
  plaidInstitutionId: String!
}

input FinicityConnectMigrateAccountsInput {
  clientMutationId: String!
  financialSourceId: ID!
}

type FboTransferDetails {
  fboAccountName: String
}

type IndustrySearchResultEntryEdge {
  cursor: String
  node: IndustrySearchResultEntry
}

"""An account which we require statement update from the customer"""
type FinancialStatementAccount implements Node {
  """The last digits of the bank account number for display"""
  accountNumberLastFour: String
  """account number associated with the statement account"""
  bankAccountNumber: String
  """Bank/Financial institution"""
  bankName: String
  """Financial Account ID"""
  financialAccountId: String!
  """The ID of an object"""
  id: ID!
}

type CashTransactionApprovalContext {
  """Amount in USD cents"""
  amountUsdCents: Int!
  """Encoded Bill ID"""
  billId: ID
  cancellationReason: CashTransactionCancellationReason
  counterpartyName: String!
  externalMemo: String
  initiatedByUserFirstName: String
  initiatedByUserLastName: String
  routingNumber: String
  transactionId: ID!
  transactionStatus: CashTransactionStatus!
  type: CashTransactionType!
}

type PaymentInstrument implements Node {
  """Payment instrument''s beneficiary name"""
  beneficiaryName: String
  """The ID of an object"""
  id: ID!
  paymentInstrumentType: PaymentInstrumentType!
  version: Int!
}

type Referral implements Node {
  """The ID of an object"""
  id: ID!
  insertedAt: Time!
  referredEmail: String!
  status: ReferralStatus!
}

type PremiumSetting implements Node {
  events: [PremiumSettingEvent]
  """The ID of an object"""
  id: ID!
  insertedAt: Time
  pricingScheme: PremiumSettingPricingScheme
  status: PremiumSettingStatus!
  statusUpdatedAt: Time!
}

enum CalculateCreditMarketingOfferResultStatus {
  FAILED_CREDIT_SOFT_PULL
  FAILED_SSN_VERIFICATION
  FAILED_UNKNOWN
  FAILED_USER_IDENTITY_VERIFICATION
  FROZEN_CREDIT_PROFILE
  REJECTED_CREDIT_QUALIFICATION
  SUCCESS
}

type ApprovalsReviewEdge {
  cursor: String
  node: ApprovalsReview
}

input UpdateContactInput {
  clientMutationId: String!
  email: String
  id: ID!
  name: String
  phoneNumber: String
}

enum CashTransactionOrigin {
  BREX
  EXTERNAL
  INVALID
}

type SuspendCardPayload {
  card: Card!
  clientMutationId: String!
}

type CreateCounterpartyPayload {
  clientMutationId: String!
  counterparty: Counterparty!
}

"""The source of funds was an unknown offline source"""
type OfflineSource {
  """A placeholder always true field to make the object queryable"""
  offline: Boolean
}

type CashTransactionInterestDetails {
  """When the interest payout was initiated, which could differ from the settled_at time"""
  paidOnDate: Date
}

type ResetBackupCodesPayload {
  clientMutationId: String!
  codes: [String]!
}

input UpdateEarlyAccessFeatureJoinStatusInput {
  clientMutationId: String!
  earlyAccessFeatureId: ID!
  joinStatus: EarlyAccessFeatureJoinStatus!
}

enum RewardsTriggerType {
  CASH_ACTIVATION_CARD_SPEND_BONUS
  DEPOSITS_TRANSFER
  LINKED_ACCOUNT_BONUS
  PURCHASE
  REFERRED_AMOUNT_SPENT
  REFERRER_AWARD
  TOP_CATEGORY_MULTIPLIER
}

enum CardAccountType {
  DEPOSITS_BACKED
  TRADITIONAL_CHARGE
  TRANSACTIONAL_FLOAT
}

input ResetBackupCodesInput {
  clientMutationId: String!
}

enum CardSortColumn {
  DISPLAY_NAME
  HOLDER_NAME
  LAST_USED
  LIMIT
  LOCK_DATE
  STATUS_VIEW
  USAGE
  UTILIZATION
}

type RewardsTriggerDepositsTransfer {
  _: Boolean
}

enum BillSortOrder {
  ASC
  DESC
}

type AdvanceToNextStepPayload {
  availableProductOffers: [ProductOffer!]!
  clientMutationId: String!
}

type SetReceivablesOffersConfirmedPayoutsRoutedToBrexPayload {
  account: ReceivablesOffersAccount
  clientMutationId: String!
}

type FinicityPayload {
  needsMigration: Boolean!
}

type PromotionsImage {
  """Landscape aspect for desktop viewports"""
  landscape: String
  """Portrait aspect for mobile viewports"""
  portrait: String
  """Weird casing because Absinthe doesn''t like words that start with numbers. Full image URLs, since we don''t have a great image management system for the dashboard that would allow for dynamic sizing"""
  url1x: String
  """2X size for retina displays"""
  url2x: String
}

"""Miles transfer status"""
enum MilesTransferStatus {
  FAILED
  PROCESSING
  SUCCEEDED
  UNKNOWN
}

input ModifyPreapprovedCardSettingsInput {
  cardId: ID!
  cardLimit: CardLimit
  clientMutationId: String!
  defaultMemo: String
  idempotencyKey: String!
  softExpiresAt: Time
}

type ReimbursementItemEventConnection {
  edges: [ReimbursementItemEventEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type ResetUserPayload {
  clientMutationId: String!
  user: User
}

type InternalEntitySyncError implements Node {
  bill: Bill
  errorMessage: String
  errorType: String
  """The ID of an object"""
  id: ID!
  idempotencyKey: String
  insertedAt: Time
  operation: String
  rawResponse: Json
  reimbursementItem: ReimbursementItem
  requestPayload: Json
  status: InternalEntitySyncStatus!
  updatedAt: Time
}

type ApprovalsRequestPreapprovedCard {
  amount: Int!
  card: Card
  defaultMemo: String
  displayName: String!
  frequency: CardLimitFrequency!
  integrationRuleBody: String
  integrationRuleId: ID
  softExpirationDate: Time
}

type UpdateTransactionBillableStatusPayload {
  clientMutationId: String!
  transaction: Transaction
}

union RecurringSchedule = DepositsMonthlySchedule | DepositsWeeklySchedule

"""The spend alert event"""
type CardTransactionInsightEvent {
  """The spend alert event action"""
  action: CardTransactionInsightEventAction
  """The time when the event is created"""
  createdAt: Time
  """The customer user who creates this event"""
  customerUser: User
  """The event metadata"""
  eventMetadata: EventMetadata
  """The time when the event is updated"""
  updatedAt: Time
}

input SignupInput {
  clientMutationId: String!
  email: Email!
  info: SignupInfoInput!
  password: String!
  redirectUrl: String!
}

input CreateDepositsApplicationInput {
  """Cancel any existing applications of the same blueprint"""
  cancelPreviousApplication: Boolean
  clientMutationId: String!
  """The specific implementation of the blueprint type. Defaults to `gemini`"""
  name: String
}

type IssuerTransactionPayload {
  exchangeRate: Float!
}

type UpdateReimbursementMetadataPayload {
  clientMutationId: String!
  reimbursementItem: ReimbursementItem!
}

"""Brex supported industries"""
type Industry implements Node {
  """Name displayed in UI"""
  displayName: String!
  """The ID of an object"""
  id: ID!
  """Name used internally and shouldn''t change"""
  internalName: String!
}

type UserEdge {
  cursor: String
  node: User
}

type RewardsTriggerInstanceStateReferredAmountSpent {
  amountSpent: Int!
  referralId: String!
}

type FinishChannelVerificationPayload {
  channel: Channel
  clientMutationId: String!
}

input DeletePaymentInstrumentInput {
  clientMutationId: String!
  id: ID!
}

input InviteUserWithMonthlyLimitInput {
  clientMutationId: String!
  inviteIdempotencyKey: String
  monthlyLimitAmount: Int
  user: UserInvite!
}

enum SpendAggregateSortKey {
  AMOUNT
  CARD_NAME
  CARD_TYPE
  DEPARTMENT_NAME
  INVALID
  MERCHANT_CATEGORY_NAME
  MERCHANT_NAME
  PERIOD_PERCENT_CHANGE
  PREVIOUS_PERIOD_AMOUNT
  TIME
  USER_CATEGORY_NAME
  USER_NAME
}

"""Metadata for GUSTO integrations"""
type PayrollIntegrationGustoInfo {
  """Gusto redirect URL for signup and reconnect"""
  accountClaimUrl: String
}

type QuickbooksLocation {
  name: String
}

type AchDetails {
  counterparty: Counterparty!
  estimatedOn: Time!
  initiatorCustomerUser: User
  method: Method!
  origin: Origin!
  transferDescription: String
}

enum DepositsRole {
  ADMIN
  BOOKKEEPER
  USER
}

input BulkDisconnectErpFeedsInput {
  clientMutationId: String!
  """list of erp feed ids to disconnect"""
  erpFeedIds: [ID]
}

input AccountPrincipalUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type IntraCustomerAccountBookTransferDetails {
  initiatedByCustomerUser: User
  sourceDepositsAccount: DepositsAccount
  targetDepositsAccount: DepositsAccount
}

input SubmitOnboardingInformationRequestInput {
  clientMutationId: String!
  data: Json
  id: ID!
}

"""The value type when mute_column is set to user_id"""
type MuteValueUser {
  """The user that is being muted for this muting policy"""
  user: User
}

enum PremiumSettingStatus {
  ACTIVE
  CANCELLED
  INVALID
}

input DisableNonPrimaryFundingSourcesInput {
  clientMutationId: String!
  fundingSourceIds: [String!]!
  notes: String!
  reason: FundingSourceStatusChangeReason!
}

type BeginChannelVerificationPayload {
  channel: Channel
  clientMutationId: String!
}

type ApprovalsUser {
  department: Department
  firstName: String
  id: ID!
  lastName: String
  location: Location
  monthlyUserLimitInfo: MonthlyUserLimitInfo
}

"""Collected from a Collect Funding Source (external ACH)"""
type ReceivablesOffersPaymentIntentSourceCollectFundingSource {
  id: String!
}

type TransactionAmount {
  """Sum of amounts of all pending transaction operation amounts for this transaction"""
  pending: Int
}

input MarkOfferSeenInput {
  clientMutationId: String!
  offerType: OfferType!
}

input GetOrCreatePaymentMethodInput {
  cardId: ID!
}

type UpdateTransactionLocationPayload {
  clientMutationId: String!
  transaction: Transaction
}

"""The metadata for a saas increase type"""
type InsightMetadataSaasIncrease {
  """The previous amount before the spend increase"""
  previousAmount: Float!
  """The relevant entries that associated with this spend alert"""
  saasIncreaseRelevantEntries: [StatementEntry]
}

type PerMerchantStatsConnection {
  edges: [PerMerchantStatsEdge]
  pageInfo: PageInfo!
}

type CreateEmailChannelPayload {
  channel: Channel
  clientMutationId: String!
}

input ApprovalsRuleGroupMatcherInput {
  comparison: String!
  key: String!
  value: String
}

type EmailAssetBody {
  content: String
  contentType: String
}

type UpdatePositivePayAccountSettingPayload {
  clientMutationId: String!
  positivePayAccountSetting: PositivePayAccountSetting!
}

type CancelCollectionIntentionPayload {
  clientMutationId: String!
  collectionIntention: CollectionIntention!
}

type XeroCategories {
  accountsPayableUserCategory: UserCategory
  collectionTargetUserCategory: UserCategory
  organizationName: String
  rewardsIncomeUserCategory: UserCategory
  vendorName: String
}

type RewardsTriggerLinkedAccountBonus {
  expirationAfterCashActivationDays: Int!
  reward: RewardsPointReward!
}

type Session {
  token: String
  tokenBase64: String
  userId: String
}

enum DisputeType {
  DISPUTE_TYPE_FRAUD
  DISPUTE_TYPE_MERCH_DISPUTE
  DISPUTE_TYPE_OTHER
  DISPUTE_TYPE_UNKNOWN
}

enum IncentiveOptOutType {
  GLOBAL_PER_ACCOUNT
  GLOBAL_PER_USER
  INVALID
  PLACEMENT_PER_ACCOUNT
  PLACEMENT_PER_USER
}

input DeleteContactInput {
  clientMutationId: String!
  id: ID!
}

enum ApprovalsRequestType {
  MONTHLY_LIMIT_OVERRIDE
  PREAPPROVED_CARD
  REIMBURSEMENT
}

type AddFspBookkeeperPayload {
  clientMutationId: String!
  policyUrn: String
}

type CreditMarketingOfferEdge {
  cursor: String
  node: CreditMarketingOffer
}

input CreatePeriodicReviewApplicationInput {
  clientMutationId: String!
  """The specific implementation of the blueprint type. Defaults to `periodic_review_v1`"""
  name: String
}

input CreateApprovalsPolicyInput {
  approvalsPolicyDetails: ApprovalsPolicyDetailsInput
  clientMutationId: String!
  productType: ProductType
}

union ChannelOptions = ChannelEmailOptions | ChannelPushOptions | ChannelSmsOptions

type VerifyAddressResponse implements Node {
  """The ID of an object"""
  id: ID!
  """True if this address is deliverable"""
  isDeliverable: Boolean!
  """True if this address is deliverable based on Lob results"""
  isDeliverableV2: Boolean!
  """True if this address is a PO box or a General Delivery address"""
  isPoBox: Boolean!
  """The standardized address"""
  suggestion: Address!
}

type ReceivablesOffersPayoutEdge {
  cursor: String
  node: ReceivablesOffersPayout
}

type FinancialStatementRequestedAccountConnection {
  edges: [FinancialStatementRequestedAccountEdge]
  pageInfo: PageInfo!
}

type ReferralEdge {
  cursor: String
  node: Referral
}

type BillEdge {
  cursor: String
  node: Bill
}

type FindOrCreateErpFeedPayload {
  clientMutationId: String!
  erpFeed: ErpFeed
  errorMessage: String
}

"""
A policy for issuing card statements. Card statement policies are immutable
and the latest policy is always the one in effect for a given customer.
"""
type CardStatementPolicy implements Node {
  """A cycle for issuing card statement policies."""
  cycle: CardStatementPolicyCycle
  """The ID of an object"""
  id: ID!
}

type SetReceivablesOffersSelectedTrialOnboardingPayload {
  account: ReceivablesOffersAccount
  clientMutationId: String!
}

enum RecipientType {
  BUSINESS
  INDIVIDUAL
}

type ValidatedVendorContactInputEdge {
  cursor: String
  node: ValidatedVendorContactInput
}

input AchPaymentInstrumentInput {
  accountClass: BankAccountClass
  accountNumber: String!
  accountType: BankAccountType
  routingNumber: String!
}

type ExpensesItemEventConnection {
  edges: [ExpensesItemEventEdge]
  pageInfo: PageInfo!
}

type BiweeklyClosingStrategy {
  dayOfWeek: Int
}

type SubmitOnboardingApplicationPayload {
  clientMutationId: String!
  onboardingApplication: OnboardingApplication!
}

type UserCategory implements Node {
  category: String
  description: String
  """The ID of an object"""
  id: ID!
  integration: Integration
  isDeleted: Boolean
  isDisabled: Boolean
  isInactive: Boolean
  merchantCategories(after: String, before: String, first: Int, last: Int): MerchantCategoryConnection
  name: String
  parentUserCategory: UserCategory
  """ID reference to parent UserCategory"""
  parentUserCategoryId: ID
  vendorInternalId: String
}

type ApprovalsPolicyDetails implements Node {
  """The ID of an object"""
  id: ID!
  ruleGroups: [ApprovalsRuleGroup!]!
  version: Int!
}

input LeadAttributionMetadata {
  fbc: String
  fbp: String
  fullUrl: String
  gclid: String
  referralCode: String
  segmentAnonymousId: String
}

input UpdateTransactionDepartmentInput {
  clientMutationId: String!
  departmentId: String!
  transactionId: ID!
}

type ProvisionApplePayPayload {
  clientMutationId: String!
  encryptedPassData: String!
  ephemeralPublicKey: String!
  otp: String!
}

type ErpFeed implements Node {
  customerAccountId: String
  exportPipeId: String
  financialAccountId: String
  """The ID of an object"""
  id: ID!
  lastExportedAt: Time
  status: String
  syncFrom: Time
  type: ErpVendorType
}

"""The receivables offers vendor (sales platform, i.e., Amazon, Shopify, etc.)"""
type ReceivablesOffersVendor {
  """Enum of vendor type (i.e., AMAZON_MWS, SHOPIFY, etc.)"""
  type: ReceivablesOffersVendorType!
}

enum OnboardingApplicationStateProductV1Value {
  """The application was approved for this product"""
  APPROVED
  """The user did not apply for this product as part of their application"""
  NOT_REQUESTED
  """Either the application is incomplete or it''s being reviewed"""
  PROCESSING
}

type BillSyncErrorConnection {
  edges: [BillSyncErrorEdge]
  pageInfo: PageInfo!
}

type RuleEdge {
  cursor: String
  node: Rule
}

type FinancialAccountConnection {
  edges: [FinancialAccountEdge]
  pageInfo: PageInfo!
}

type UpdateApprovalsReviewsPayload {
  approvalsReviews: [ApprovalsReview!]
  clientMutationId: String!
}

type ProgramMembershipEdge {
  cursor: String
  node: ProgramMembership
}

type OnboardingApplicationStateRiskEvaluation {
  """The state of the compliance portion of the risk evaluation application"""
  compliance: OnboardingApplicationStateRiskEvaluationValue
  """The state of the fraud portion of the risk evaluation application"""
  fraud: OnboardingApplicationStateRiskEvaluationValue
  """Date by which all requests must be completed, else the account is offboarded"""
  offboardDueDate: Time
  """Date by which all requests must be completed, else the account is suspended"""
  suspendDueDate: Time
}

input DisableBillsInput {
  clientMutationId: String!
  id: ID!
}

type DeleteCardTransactionInsightMutingPolicyPayload {
  cardTransactionInsightMutingPolicy: CardTransactionInsightMutingPolicy
  clientMutationId: String!
}

enum CardPaymentFailureType {
  ACCOUNT_CLOSED
  ACCOUNT_NOT_FOUND
  GENERIC_FAILURE
  INSUFFICIENT_FUNDS
  NOT_AUTHORIZED
  NOT_SENT
}

input CreateFinancialBankStatementForNewAccountInput {
  assetId: ID!
  clientMutationId: String!
}

enum ExpensesItemStatus {
  DISMISS
  FLAGGED
  RESOLVED
}

enum PlaidProduct {
  AUTH
  BALANCE
  INCOME
  INVESTMENTS
  TRANSACTIONS
}

type CreateFileUploadUrlPayload {
  clientMutationId: String!
  uploadRequestId: String
  uploadUrl: String
}

input ConfirmPaymentDraftInput {
  paymentId: ID
}

"""View data for cash add funds flow banner"""
type IncentivePlacementViewDataCashAddFundsFlowBanner {
  """CTA text """
  cta: String!
  """Icon type optional - potentially useful in the future"""
  iconType: String
  """Placement"""
  placement: IncentivePlacement!
  """Title of banner"""
  title: String!
}

type FundingSourceData {
  accountName: String
  accountNumberLastFour: String
  accountType: String
  routingNumber: String
}

type UpdateUserPayload {
  clientMutationId: String!
  user: User
}

type CashTransactionDomesticWireDetails {
  """Counterparty''s account number"""
  accountNumber: String
  """The address of the recipient"""
  address: Address
  """The counterparty''s beneficiary bank information"""
  beneficiaryBank: CashTransactionBeneficiaryBank
  """The institution''s logo as a base64 PNG, if available"""
  beneficiaryBankLogoBase64: String
  """The email of the recipient"""
  email: String
  """The fed reference number that we get on BAI2 incoming wire entries"""
  fedReferenceNumber: String
  """The IMAD indicates a unique number that is assigned to a transfer upon receiving at the sending financial institution"""
  imad: String
  """The OMAD indicates a unique number assigned to each transfer providing delivery-related information"""
  omad: String
  """Whether the transaction was a debit or credit"""
  paymentMethod: CashTransactionPaymentMethod!
  """Counterparty''s routing number"""
  routingNumber: String
  """Payment instructions"""
  transferDescription: String
}

input ActivateCardInput {
  clientMutationId: String!
  last4: String!
  pin: String
}

type EmailMetadata {
  fromEmailAddress: String!
}

enum EarlyAccessFeatureAvailablePlatform {
  ANDROID
  IOS
  WEB
}

input ConnectInstitutionInput {
  clientMutationId: String!
  institutionId: ID!
  requestType: FinancialsConnectRequestType
}

union SuggestionType = Card | Department | Location | Merchant | MerchantCategory | User | UserCategory

type DocumentOcrParsedDetailsDetail implements Node {
  """The ID of an object"""
  id: ID!
  """The value passed into the ''verify_entities'' payload at the time of creation (if any)."""
  input: String
  """The extracted value from the document (if any)."""
  value: String
  """Indicates if the input and extracted value (if one was provided) match."""
  verified: Boolean
}

"""Describes an HRIS connection with the hris vendor"""
type HrisConnection implements Node {
  """The HRIS vendor this connection is established w/"""
  hrisAggregatorVendor: HrisAggregatorVendor
  """The status of the user''s connection with the hris vendor"""
  hrisStatus: HrisStatus
  """The HRIS system the user is connecting to via this connection"""
  hrisSystem: HrisSystem
  """The display name of the HRIS system the user is connecting to"""
  hrisSystemName: String
  """The ID of an object"""
  id: ID!
  """The last time that the hris sync with the vendor and into Brex completed/failed"""
  lastSyncAt: Time
  """The (most recent) syncing status of the connection with the hris vendor"""
  syncStatus: HrisSyncStatus
}

type PeriodicReview implements Node {
  """Due date by which review should be completed, else dashboard forces a blocking experience"""
  dueAt: Time
  """The ID of an object"""
  id: ID!
  """State of the periodic review ie. active/succeeded etc."""
  state: PeriodicReviewState
}

"""Validation result for a contact input"""
type VendorContactInputValidation {
  """Fields that are valid or not (string -> boolean)"""
  fields: Json!
  """Boolean whether the contact input is a duplicate"""
  isDuplicate: Boolean!
  """Boolean whether the contact input is valid"""
  isValid: Boolean!
  """Validated ACH Payment Instrument"""
  validatedAchPaymentInstrument: ValidatedPaymentInstrument
  """Validated Cheque Payment Instrument"""
  validatedChequePaymentInstrument: ValidatedPaymentInstrument
  """Validated Domestic Wire Payment Instrument"""
  validatedDomesticWirePaymentInstrument: ValidatedPaymentInstrument
  """Validated International Wire Payment Instrument"""
  validatedInternationalWirePaymentInstrument: ValidatedPaymentInstrument
}

"""The spend alert"""
type CardTransactionInsight implements Node {
  """The spend alert type"""
  alertType: SpendAlertType!
  """The amount of the transaction"""
  amount: Int!
  """The card is used for this transaction/alert"""
  card: Card
  """The customer account for this alert"""
  customerAccount: Account
  """The customer user for this alert"""
  customerUser: User
  """The department"""
  department: Department
  """The ID of an object"""
  id: ID!
  """A list of event associated with this alert."""
  insightEvents: [CardTransactionInsightEvent]
  """The spend alert metadata"""
  insightMetadata: InsightMetadata
  """The spend alert type - This field will be deprecated and replaced by alert_type."""
  insightType: CardTransactionsInsightType!
  """The merchant"""
  merchant: Merchant
  """The merchant category"""
  merchantCategory: String
  """The merchant name"""
  merchantName: String!
  """The originator type"""
  originatorType: String
  """The time when this transaction is posted at"""
  postedAt: Time!
  """The statement entry belongs to this alert"""
  statementEntry: StatementEntry
  """The user name"""
  userName: String!
}

input FinicityConnectGenerateFixUrlInput {
  clientMutationId: String!
  financialSourceId: ID!
}

type NotificationSubscription implements Node {
  channel: Channel
  filters: [NotificationFilter]
  """The ID of an object"""
  id: ID!
  notificationType: NotificationType
}

type ReceivablesOffersAccount implements Node {
  acceptedOffersGroups(after: String, before: String, first: Int, ignoreCardOffersGroup: Boolean = false, last: Int): ReceivablesOffersOffersGroupConnection
  """Has the customer finished their instant payouts onboarding flow"""
  appliedForInstantPayouts: Boolean
  """The summation of all active offers that the customer has available as of now"""
  cumulativeOffer: ReceivablesOffersCumulativeOffer
  """The customer_account_id for the receivables offers account"""
  customerAccountId: String!
  """The timestamp of the earliest future payout that the customer is expected to receive"""
  estimatedNextPayoutAt: Time
  """List of failing checks for trial/full access, as well as failing ongoing monitoring checks"""
  failingChecks: ReceivablesOffersAccountFailingChecks
  """The ID of an object"""
  id: ID!
  """The timestamp when the customer first accepted the instant payouts legal agreement (terms and conditions)"""
  legalAgreementAcceptedAt: Time
  """The metadata for the receivables offers account (not user-modifiable)"""
  metadata: ReceivablesOffersAccountMetadata!
  """
  The list of payment intents that target Receivable Offers related Journal Accounts, including both Card and Cash.
  
  Note that even though this is a connection field, it DOES NOT SUPPORT PAGINATION YET, meaning it can be really slow and can load a lot of data. Do
  not use pageInfo yet.
  """
  paymentIntents(after: String, before: String, first: Int, last: Int): ReceivablesOffersPaymentIntentConnection
  """The total pending amount from card transactions fundable by Receivables Offers"""
  pendingCardTransactionsAmount: FinancialAsset
  """List of seller accounts associated with the receivables offers account"""
  sellerAccounts: [ReceivablesOffersSellerAccount!]!
  """The settings for the receivables offers account (user-modifiable)"""
  settings: ReceivablesOffersAccountSettings!
  """The status of the receivables offers account (e.g., `ACTIVE`, `ACTIVE_TRIAL`, etc.)"""
  status: ReceivablesOffersAccountStatus!
  """The timestamp of when the customer''s `active_trial` access ended"""
  trialEndedAt: Time
  """The timestamp of when the customer''s `active_trial` access started"""
  trialStartedAt: Time
  upcomingPayouts(after: String, before: String, first: Int, last: Int): ReceivablesOffersPayoutConnection
}

type ApprovalPaymentContext {
  amount: Int
  counterpartyLocation: AccountLocation
  counterpartyName: String
  logicalId: ID!
  paymentDescription: String
  paymentInitiatorFirstName: String
  paymentInitiatorLastName: String
  paymentStatus: DepositsPaymentStatus
  paymentStatusReason: StatusReason
  paymentType: PaymentRail
}

type CredentialShopifyPayload {
  shopName: String
}

type User implements Node @key(fields: "id") {
  seenFlags(keys: [SeenFlagKey]!): [SeenFlag]
  department: Department
  lastName: String
  fraudAlerts(after: String, before: String, first: Int, last: Int): FraudAlertConnection
  """Whether the user is a manager or has any direct reports"""
  isManager: Boolean!
  email: String
  """Monthly breakdown for amount spent by user"""
  monthlySpendBreakdown: [MonthlyUserBalance]
  firstName: String
  programMemberships(after: String, before: String, first: Int, last: Int): ProgramMembershipConnection
  hasOnboarded: Boolean!
  """The user''s current monthly user limit, or null if there is no limit"""
  monthlyUserLimit: Int @deprecated(reason: "Use monthly_user_limit_info instead")
  """The ID of an object"""
  id: ID!
  isMfaEnabled: Boolean
  monthlyUserLimitInfo: MonthlyUserLimitInfo
  role: String
  helpshiftAuthToken: String!
  displayRole: UserRoleTypeInput!
  ssn: String
  """Net amount spent by user this month"""
  amountSpent(timeWindowDays: Int!): Int @deprecated(reason: "Use amount_spent_current_month instead")
  status: String
  tenantAccounts: [TenantAccountResult]
  channels(after: String, before: String, first: Int, last: Int): ChannelConnection
  rules(after: String, before: String, first: Int, last: Int): RuleConnection @deprecated(reason: "Do not access a user''s rules directly. Instead use domain-specific fields like monthly_user_limit")
  insertedAt: Time
  mfaPrimaryMethod: MfaPrimaryMethod
  """Net amount spent by user this month including cards that do not apply to the user limit"""
  amountSpentCurrentMonthAllCards: Int
  address: Address
  """Whether the user has any transactions"""
  hasTransaction: Boolean!
  cards(after: String, before: String, first: Int, id: [ID!], instrumentType: InstrumentType, isPreapproved: Boolean, last: Int, searchQuery: String, sortBy: CardSortColumn, status: [String!], statusViews: [StatusView!]): CardConnection
  isInitialApplicant: Boolean!
  depositsRole: DepositsRole
  notificationSubscriptions(after: String, before: String, first: Int, last: Int): NotificationSubscriptionConnection
  isInvitedDepositsAdmin: Boolean!
  """Whether user has access to the primitives experience"""
  isPrimitives: Boolean
  """All active (non-terminal) onboarding applications belonging to the applicant."""
  latestOnboardingApplication(
    """Return only applications of the given blueprint type"""
    type: UserOnboardingBlueprintType
  ): OnboardingApplication
  """Whether the user should be in the product onboarding flow"""
  mustSeeProductOnboarding: Boolean!
  """The user''s manager"""
  manager: User
  isInvitedDepositsCashAndCardUser: Boolean!
  """Suggested shipping address used for card shipping"""
  suggestedShippingAddress: Address
  """Whether or not the user has any corporate cards that are not terminated"""
  hasValidCorporateCards: Boolean!
  account: Account
  """Net amount spent by user this month on cards for user limit"""
  amountSpentCurrentMonth: Int
  referralCode: String
  location: Location
  birthDate: Time
  """Whether or not user has access to corporate cards"""
  canAccessCorporateCards: Boolean!
}

input AddFspBookkeeperUserInput {
  bookkeeperUserId: String!
  clientMutationId: String!
}

enum BillingPaymentIntentStatus {
  CANCELED
  COMPLETED
  FAILED
  IN_PROGRESS
  INVALID
  PENDING
}

input CreateDocumentOcrInput {
  clientMutationId: String!
  """the ID of the filestore asset to be processed"""
  filestoreId: ID!
  """Entities to be matched in the document"""
  verifyEntities: DocumentOcrVerifyEntitiesInput
}

type OnboardingInformationRequest implements Node {
  application: OnboardingApplication!
  beforePages: [OnboardingNonSubmittablePage!]!
  canResubmit: Boolean!
  content: OnboardingInformationRequestContent! @deprecated(reason: "Use contentPage.content instead")
  contentPage: OnboardingSubmittablePage!
  data: Json
  """
  This field is a machine-readble identifier of the information request.
  It''s used by the frontend to match the footer to show to the customer.
  It was added quickly as a stop-gap solution, so please use it carefully.
  """
  description: OnboardingInformationRequestDescription!
  """The ID of an object"""
  id: ID!
  status: OnboardingInformationRequestStatus!
  type: OnboardingInformationRequestType!
}

input SetReceivablesOffersRevenueAccessEnabledInput {
  clientMutationId: String!
  value: Boolean!
}

enum TerminationReason {
  CARD_DAMAGED
  CARD_LOST
  CARD_NOT_RECEIVED
  DO_NOT_NEED_PHYSICAL_CARD
  DO_NOT_NEED_VIRTUAL_CARD
  FRAUD
  OTHER
}

type PaymentApprover {
  customerUser: User
  decision: PaymentApprovalDecision!
  decisionNotes: String
  decisionReason: PaymentApprovalDecisionReason
  updatedAt: Time
}

input CreateSmsChannelInput {
  clientMutationId: String!
  number: PhoneNumber!
}

"""Extra state values for an application, for product applications this contains cash/card outcomes"""
union OnboardingApplicationState = OnboardingApplicationStateEmpty | OnboardingApplicationStateProductV1 | OnboardingApplicationStateRiskEvaluation

type BillingDelinquency implements Node {
  asOf: Time
  customerAccountId: String
  daysPastDue: Int
  dueAmountUsdCents: Int
  """The ID of an object"""
  id: ID!
}

"""Data provider account connected to a specific customer account"""
type DataImporterDataProvider {
  """The customer account this data provider is connected to"""
  customerAccountId: ID!
  """The data provider id"""
  id: ID!
  """The data provider status"""
  status: DataImporterDataProviderStatus!
}

enum Method {
  CREDIT
  DEBIT
}

type TotalCashBalanceTile implements Node {
  financialSourcesToFix(after: String, before: String, first: Int, last: Int): FinancialSourceConnection
  """The ID of an object"""
  id: ID!
  statementRequestedAccountsEarliestDueAt: Time
}

type UnsuspendCardPayload {
  card: Card!
  clientMutationId: String!
}

type ExpensesFlag implements Node {
  expensesFlagEvents(after: String, before: String, first: Int, last: Int): ExpensesFlagEventConnection
  expensesItem: ExpensesItem
  """The ID of an object"""
  id: ID!
  rule: ExpensesRule
  status: ExpensesFlagEventAction
}

type UpdateAutoAddFundsPayload {
  clientMutationId: String!
  payment: DepositsPayment!
}

type TenantAccountResult {
  accountId: String!
  name: String!
}

enum OnboardingBlueprintType {
  """Applications to change the user''s cash role"""
  CHANGE_ROLE
  """Cash upsell applications"""
  DEPOSITS
  """Application to collect/review account details for periodic review"""
  PERIODIC_REVIEW
  """Net-new product applications"""
  PRODUCT_V1
  """Onboarding flows to determine a customer''s risk tier"""
  RISK_EVALUATION
  """Onboarding flows to set up a user''s account"""
  USER_SETUP
}

"""Object defining the total and remaining cheque deposit"""
type ChequeDepositLimits {
  """The remaining limit available for making cheque deposits"""
  chequeDepositRemainingLimitUsdCents: Int!
  """The total limit definited for cheque deposits"""
  chequeDepositTotalLimitUsdCents: Int!
}

type RewardsOffer {
  pointsCost: Int!
  redemptionOfferId: String!
}

input GeneratePlaidLinkTokenInput {
  clientMutationId: String!
  migrateFinancialSourceId: ID
  products: [PlaidProduct]
  redirectUri: String
}

enum RewardsHistoryEntryOrderType {
  ASC
  DESC
  INVALID
}

input DeviceInformationInput {
  additionalInformation: Json
  appVersion: String!
  model: String!
  os: String!
}

type HeartbeatPayload {
  """Acknowledgement that the server processed the request correctly"""
  ack: Boolean
}

type UpdateTransactionMemoPayload {
  clientMutationId: String!
  transaction: Transaction
}

type FinalizeConnectCredentialPayload {
  clientMutationId: String!
  dataProvider: DataImporterDataProvider
}

"""Default non-integration specific credential payload"""
type CredentialVendorPayload {
  """ID"""
  id: String
}

type CardPaymentForwarderRecipient {
  beneficialOwner: CardPaymentForwarderBeneficialOwner
  businessAddress: Address
  businessName: String
  category: CardPaymentForwarderCategory
  contact: CardPaymentForwarderContact
  receivingMethod: ReceivingMethod
  recipientId: ID
}

type SpendAggregateTimeSeriesEdge {
  cursor: String
  node: SpendAggregateTimeSeries
}

"""Customer referral object"""
type ReferralRecord implements Node {
  """The ID of an object"""
  id: ID!
  """referral creation time"""
  insertedAt: Time!
  """id of the referral record"""
  referralRecordId: String
  """referral status"""
  referralStatus: ReferralRecordStatus!
  """the email of the referred user"""
  targetEmail: String!
}

"""Referrals summary object"""
type ReferralsSummary implements Node {
  """The ID of an object"""
  id: ID!
  """Mobile summary values"""
  mobile: MobileReferralsSummary
}

enum CardLimitFrequency {
  MONTHLY
  ONE_TIME
  QUARTERLY
  YEARLY
}

type BulkFindOrCreateErpFeedsPayload {
  clientMutationId: String!
  erpFeeds: [ErpFeed]
  errorMessage: String
}

enum PaymentClass {
  INSTANT
  RECURRING
  SCHEDULED
}

type RewardsTriggerInstanceConnection {
  edges: [RewardsTriggerInstanceEdge]
  pageInfo: PageInfo!
}

type ExpensesFlagConnection {
  edges: [ExpensesFlagEdge]
  pageInfo: PageInfo!
}

type AccountSystemSettings {
  bypassFinancialsSetup: Boolean
  monthlyUserLimitRolloutEnabled: Boolean
  showCashUpsell: Boolean
}

type CreateFundingSourcePayload {
  clientMutationId: String!
  fundingSource: FundingSource!
}

input CancelTransactionInput {
  clientMutationId: String!
  transactionId: ID!
}

type ApprovalsRuleGroupMatcher implements Node {
  comparison: String!
  """The ID of an object"""
  id: ID!
  key: String!
  value: String
}

type FinancialAccount implements Node {
  """Whether the account can make Cash outgoing ach debits or not"""
  achDebitCapability: AchDebitCapability!
  description: String
  details: FinancialAccountDetails
  """
  Soft-deletion of funding resources is represented using a disabled status.
  We don''t want to expose this implementation details to clients. There is currently
  no known use case in the UI for showing additional status information, but they
  could be included here as needed.
  """
  fundingSource: FundingSource
  """The ID of an object"""
  id: ID!
  latestBalance: FinancialBalance
  name: String
  priority: FundingSourcePriority
  source: FinancialSource
}

input CreateRfiResponseItemInput {
  documentToken: String!
}

type StatementEntryLens implements Node {
  billableStatus: BillableStatus
  disabledRules: [IntegrationRule]
  displayFieldEntities: [ExternalIntegrationEntity]
  displayFields: Json
  externalClass: ExternalIntegrationEntity
  externalDepartment: ExternalIntegrationEntity
  externalLocation: ExternalIntegrationEntity
  """The ID of an object"""
  id: ID!
  """
  Returns the computed integration field entities from integration rule engine for a ste.
  We return a list of PEIEs as the PEIF data exists on the object itself to match in the frontend.
  """
  integrationFieldEntities: [ExternalIntegrationEntity]
  ruleEvaluations: [IntegrationRuleEvaluation]
  ste: StatementEntry
  userCategory: UserCategory
}

input GenerateReceivablesPayoutReportInput {
  clientMutationId: String!
  payoutId: ID!
}

enum DisputeStatus {
  DISPUTE_STATUS_CLOSED
  DISPUTE_STATUS_COMPLETE
  DISPUTE_STATUS_DRAFT
  DISPUTE_STATUS_IN_PROGRESS
  DISPUTE_STATUS_MORE_INFORMATION_NEEDED
  DISPUTE_STATUS_UNKNOWN
}

enum FundingSourcePriority {
  ALTERNATIVE
  PRIMARY
}

input PrepareMultiFeeReceivablesOffersForAcceptanceInput {
  clientMutationId: String!
  depositsAccountId: ID!
  offerIds: [ID!]!
  requestId: String
  requestedAdvanceAmount: FinancialAssetInput
}

type UpdatePlaidLinkTokenPayload {
  clientMutationId: String!
  linkToken: String!
}

type UnderwritingAnalysisFlagEdge {
  cursor: String
  node: UnderwritingAnalysisFlag
}

type Credential implements Node {
  expirationDate: Time
  """The ID of an object"""
  id: ID!
  payload: CredentialPayload
  publicData: Json
  renewalDate: Time
  status: String
  vendor: String
}

type SetReceivablesOffersIntegrationFinancialAccountMappingsPayload {
  account: ReceivablesOffersAccount
  clientMutationId: String!
}

type SetApprovalsUnsafeFlagPayload {
  clientMutationId: String!
  value: String
}

input ReceivingMethodInput {
  achReceivingMethod: AchReceivingMethodInput
  checkReceivingMethod: CheckReceivingMethodInput
  eftReceivingMethod: EftReceivingMethodInput
  wireReceivingMethod: WireReceivingMethodInput
}

input InputCashTransactionCreationArgumentUnion {
  """Pull funds via ACH from an external account to a cash account"""
  achDebit: InputCashTransactionAchDebitArguments
  """
  Move funds from a cash account to another cash account
  Note: book_tranfers can not be scheduled or repeated currently
  """
  bookTransfer: InputCashTransactionBookTransferArguments
  """Push funds from a cash account to an external account"""
  credit: InputCashTransactionCreditArguments
}

"""A rule evaluation is a evaluation result for an integration field."""
type RuleEvaluation implements Node {
  billableStatus: Boolean
  """The ID of an object"""
  id: ID!
  integrationField: IntegrationField
  integrationRule: IntegrationRule
  ruleId: String
  userCategoryId: String
}

input CreateIntegrationRuleInput {
  body: Json!
  clientMutationId: String!
  integrationId: ID!
  name: String
  priority: Int!
  type: String!
}

type UpdateTransactionDepartmentPayload {
  clientMutationId: String!
  transaction: Transaction
}

input DisconnectCredentialInput {
  clientMutationId: String!
  id: ID!
}

enum EarlyAccessFeatureJoinStatus {
  JOINED
  NOT_JOINED
}

type BillingPaymentEdge {
  cursor: String
  node: BillingPayment
}

input CompleteOnboardingInput {
  clientMutationId: String!
}

type ReplacesRecord {
  card: Card!
  insertedAt: Time!
  reason: CardReplacementReason!
}

enum PositivePayAccountSettingStatus {
  BLOCKED
  FAVORITE
}

"""The spend alert muting policy"""
type CardTransactionInsightMutingPolicy implements Node {
  """The alert type"""
  alertType: SpendAlertType!
  """The customer user who creates this muting policy"""
  createdByUser: User
  """The customer account"""
  customerAccount: Account
  """The ID of an object"""
  id: ID!
  """The alert type. This field will be deprecated and replaced by alert_type"""
  insightType: CardTransactionsInsightType
  """The mute column"""
  muteColumn: MuteColumn
  """The mute value"""
  muteValue: MuteValueType
}

type RewardsCampaign implements Node {
  description: String!
  """The ID of an object"""
  id: ID!
  name: String!
  rewardsTriggers(after: String, before: String, first: Int, last: Int): RewardsTriggerConnection
}

type RewardsRedemptionOfferEdge {
  cursor: String
  node: RewardsRedemptionOffer
}

type OnboardingFormEmpty {
  _: Boolean
}

enum HrisSystem {
  ADP_WORKFORCE_NOW
  BAMBOOHR
  CERIDIAN_DAYFORCE
  CHARTHOP
  FRESHTEAM
  GUSTO
  HIBOB
  HR_CLOUD
  HR_PARTNER
  HUMAANSIO
  INVALID
  JUSTWORKS
  LANO
  NAMELY
  NMBRS
  PAYCHEX
  PAYLOCITY
  PERSONIO
  RIPPLING
  SAGE_HR
  SAP_SUCCESSFACTORS
  SAPLING
  SQUARE_PAYROLL
  TRINET
  UKG_PRO
  UKG_READY
  WORKDAY
  ZENEFITS
}

type CashBank {
  accountType: String!
  city: String!
  name: String!
  state: String!
  street: String!
  suite: String!
  zip: String!
}

type LimitRuleMetadata {
  amount: Int
  timeWindowDays: Int
}

"""muting config for an individual column"""
input MutingConfigurationInput {
  muteColumn: MuteColumn!
  muteValues: [String!]!
}

input SetReceivablesOffersIntegrationFinancialAccountMappingsInput {
  clientMutationId: String!
  value: [ReceivablesOffersIntegrationFinancialAccountMappingInput]!
}

enum PositivePayStatus {
  BLOCKED
  FAVORITE
  REGULAR
}

type FinancialStatementRequestedAccountEdge {
  cursor: String
  node: FinancialStatementRequestedAccount
}

type UnderwritingAccount implements Node {
  appliedAnalysis: UnderwritingAnalysis
  """The ID of an object"""
  id: ID!
  isSuspended: Boolean!
  status: UnderwritingAccountStatus!
  statusV2: UnderwritingAccountStatusV2!
}

input ResetUserUserInput {
  password: String!
}

type CreateAssetPayload {
  asset: Asset
  clientMutationId: String!
}

union CreditLimitFactorTile = PaymentHistoryTile | TotalCashBalanceTile

enum CardPaymentFailureTypeV3 {
  ACCOUNT_CLOSED
  ACCOUNT_NOT_FOUND
  GENERIC_FAILURE
  INSUFFICIENT_FUNDS
  NON_TRANSACTION_ACCOUNT
  NOT_AUTHORIZED
}

type OnboardingBlueprint implements Node {
  """The ID of an object"""
  id: ID!
  """The specific implementation of the blueprint type"""
  name: String!
  """Determines which application handler will be used to process the application"""
  type: OnboardingBlueprintType!
}

type ExpensifyCategories {
  vendorName: String
}

type ErpFeedConnection {
  edges: [ErpFeedEdge]
  pageInfo: PageInfo!
}

type Address {
  address1: String
  address2: String
  city: String
  country: String
  """
  Object containing the standardize alpha2, alpha3, numeric and name values for the address
  country. This will be nil if the country is not a valid alpha2 or alpha3 country code.
  """
  countryMetadata: Country
  state: String
  zip: String
}

"""A merge-specific input type to create a connection"""
input MergeHrisConnectionInput {
  """The public token merge requires us to secure a connection w/ them"""
  publicToken: String!
}

enum NotificationSetting {
  INVALID
  PROCESSING
  PROCESSING_PROCESSED
}

input ApprovalsUserTypeIndividualInput {
  """The user id. The caller should pass in the direct id instead of the encoded id"""
  userId: ID!
}

type CashTransactionPayrollEstimateDetails {
  """When the payroll associated with this estimate will end"""
  payrollEndDate: Date!
  """Name of the payroll provider (e.g. "gusto") associated with this estimate"""
  payrollProviderName: String!
  """When the payroll associated with this estimate started"""
  payrollStartDate: Date!
}

"""Xero credential payload"""
type CredentialXeroPayload {
  """Boolean describing whether the credential has the required scopes for enabling bill sync"""
  hasBillSyncScopes: Boolean
}

enum ReceivablesOffersFeeProgram {
  DEFAULT
  FREE
  INVALID
}

type CompletePaymentApprovalPayload {
  clientMutationId: String!
  paymentApproval: PaymentApproval!
  paymentApprovalResult: PaymentApprovalResult!
  paymentContext: DepositsPayment!
}

type FinancialInformationRequestEdge {
  cursor: String
  node: FinancialInformationRequest
}

type BulkUserInviteError {
  email: String
  error: String
}

type RewardsTriggerReferredAmountSpent {
  referredReward: RewardsPointReward!
  triggerSpendAmount: Int!
}

type RoleRule {
  actions: [String]
  predicates: [RoleRulePredicate]
  resources: [String]
}

enum MuteColumn {
  ALL
  DEPARTMENT
  DEPARTMENT_ID
  INVALID
  MERCHANT_ID
  USER_ID
}

type RefreshFinancialSourcePayload {
  clientMutationId: String!
  result: FinancialsSourceResult
}

type EnableReimbursementsPayload {
  clientMutationId: String!
  integration: Integration
}

"""Filter facet for integration rules (only used for statement entries)"""
type IntegrationRulesFilterFacet implements Node {
  """The ID of an object"""
  id: ID!
  """A list of rules matches this filter facet type (only returned by unexported_statement_entry_filter_facets)"""
  rules: [IntegrationRule]
  """Filter facet type"""
  type: IntegrationRulesFilterFacetType
}

"""The event metadata for a dismiss event"""
type CardTransactionsInsightDismissEventMetadata {
  """Additional description the user provided when dismissing a spend alert"""
  description: String
  """The reason provided by the user why the spend alert is dismissed"""
  reason: String!
}

enum UnderwritingAccountStatusV2 {
  APPROVED
  LOW_FIDELITY_APPROVED
  MISSING_DATA_APPROVED
  PENDING
  REJECTED
}

enum Scope {
  ACCOUNTS_CARD_READONLY
  ACCOUNTS_CASH_READONLY
  CARD_NUMBERS_READONLY
  CARDS
  CARDS_READONLY
  CASH_ACCOUNTS_READONLY
  COMPANIES_READONLY
  DEPARTMENTS
  DEPARTMENTS_READONLY
  INVALID
  LOCATIONS
  LOCATIONS_READONLY
  REFERRALS
  STATEMENTS_CARD_READONLY
  STATEMENTS_CASH_READONLY
  TRANSACTIONS_CARD_READONLY
  TRANSACTIONS_CASH_READONLY
  TRANSFERS
  TRANSFERS_READONLY
  USERS
  USERS_READONLY
  VENDORS
  VENDORS_READONLY
}

input UpdateTransactionLocationInput {
  clientMutationId: String!
  locationId: String!
  transactionId: ID!
}

type RewardsRedemptionOffer implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  payload: RewardsRedemptionOfferPayload!
  type: RewardsRedemptionClassType!
}

enum FinancialAccountType {
  CHECKING
  CREDIT_CARD
  INVESTMENT
  LINE_OF_CREDIT
  LOAN
  MORTGAGE
  SAVINGS
}

type ReplaceFundingSourcePayload {
  clientMutationId: String!
  fundingSource: FundingSource!
}

"""
Represents an named boolean used to track dashboard flag state, as an alternative
to using localstorage.
"""
type SeenFlag implements Node {
  """The ID of an object"""
  id: ID!
  """Should keys be ignored"""
  isDeprecated: Boolean
  """Named with the convention [Team]_[Location]_[Action]"""
  key: SeenFlagKey!
  """Last seen"""
  lastSeenAt: Time
  """Only boolean values supported"""
  value: Boolean
}

input CreateExpensesFlagEventInput {
  action: String!
  clientMutationId: String!
  description: String
  itemId: ID!
  ruleId: ID!
}

type ExpensesItemEventEdge {
  cursor: String
  node: ExpensesItemEvent
}

type UpdateCardFraudAlertsPayload {
  clientMutationId: String!
  fraudAlerts: [FraudAlert!]!
}

type CounterpartyConnection {
  edges: [CounterpartyEdge]
  pageInfo: PageInfo!
}

type GroupAggregationField {
  count: Int!
  key: String!
  sum: Float!
}

enum ChannelStatus {
  DISABLED
  PENDING_VERIFICATION
  READY
}

"""The original contact input"""
type VendorContactInputData {
  """Vendor''s ACH Payment Instrument"""
  achPaymentInstrument: AchPaymentInstrument
  """Vendor''s Cheque Payment Instrument"""
  chequePaymentInstrument: ChequePaymentInstrument
  """Vendor''s Domestic Wire Payment Instrument"""
  domesticWirePaymentInstrument: DomesticWirePaymentInstrument
  """Vendor''s email"""
  email: String
  """Client generated idempotency key"""
  idempotencyKey: String!
  """Vendor''s International Wire Payment Instrument"""
  internationalWirePaymentInstrument: InternationalWirePaymentInstrument
  """Name of the vendor (needs to be unique)"""
  name: String!
  """Vendor''s phone number"""
  phoneNumber: String
}

input CreateIntegrationInput {
  billsEnabled: Boolean
  clientMutationId: String!
  credentialId: ID!
  netsuiteSubsidiary: SubsidiaryInput
  scopes: [IntegrationScope]!
  version: Int
}

enum SyncStatus {
  ERROR
  PENDING
}

type Counterparty implements Node {
  accountNumber: String
  achCompanyId: String
  address: Address
  approverUser: User
  beneficiaryBankAddress: Address
  beneficiaryBankInfo: Json
  beneficiaryBankName: String
  chequeRecipientName: String
  class: Class
  email: String
  financialAccount: FinancialAccount
  """The ID of an object"""
  id: ID!
  location: AccountLocation!
  name: String!
  paymentRail: PaymentRail!
  positivePayStatus: PositivePayStatus
  """
  Some banks return fake/virtual account numbers; we can''t tell if account numbers are real or not
  This field provides the last characters (usually four, but can vary) of the real account number
  """
  realAccountNumberEndingChars: String
  routingNumber: String
  type: Type
}

type BulkInviteUsersPayload {
  clientMutationId: String!
  results: [BulkUserInviteResult]!
}

type CardPaymentForwarderCategory {
  categoryId: ID
  name: String
}

type ReimbursementItemEvent implements Node {
  action: ReimbursementAction!
  approvalRequestId: ID
  cashTransactionIds: ID
  customerAccountId: ID!
  customerUserId: ID!
  """The ID of an object"""
  id: ID!
  insertedAt: Time!
  modifiedBy: String!
  reimbursementItemId: ID!
  reimbursementMetadata: ReimbursementMetadata
  state: ReimbursementItemState
  updatedAt: Time!
}

input AttributionMetadata {
  fbc: String
  fbp: String
  gclid: String
}

enum OfferSetupStepType {
  ADD_FUNDS
  AUTOPAY
  REVENUE_ACCESS
}

input FinicityConnectGenerateLiteUrlInput {
  clientMutationId: String!
  institutionId: ID!
}

union DepositsPaymentDetails = AchDetails | BrexOriginatedChequeDetails | DepositsPayrollEstimateDetails | WireDetails

type RewardsTriggerInstanceEdge {
  cursor: String
  node: RewardsTriggerInstance
}

type UpdateTransactionCategoryPayload {
  clientMutationId: String!
  transaction: Transaction
}

enum PromotionsType {
  TIPS_AND_RECS
}

"""FSP account object"""
type FspAccount {
  """customer account id"""
  customerAccountId: String!
  """a short description of the company"""
  description: String
  """a link to view more details of the company"""
  detailsLink: String
  """the group urn created by Medusa"""
  groupUrn: String
  """a link to the company logo"""
  logoLink: String
  """company name"""
  name: String!
}

type CashTransactionOutgoingChequeReturnDetails {
  """Details from the transaction this return was for"""
  originalDetails: CashTransactionOutgoingChequeDetails!
  """The reason why the original transaction was returned"""
  returnReason: CashTransactionChequeReturnReason!
}

"""Subscription details for an ERP integration"""
type ErpSubscriptionDetail {
  """The name of the subscription plan"""
  subscriptionPlanName: String
  """The status of the subscription"""
  subscriptionStatus: String
  """Whether the subscription plan supports bill sync"""
  supportsBillSync: Boolean
}

type IncentivePlacementViewDataConnection {
  edges: [IncentivePlacementViewDataEdge]
  pageInfo: PageInfo!
}

type ValidateChequeImagesPayload {
  clientMutationId: String!
  errorReason: String
  errorSeverity: ChequeImageValidationErrorSeverity
  passedValidation: Boolean!
}

"""MFA device type selected by user for setting up the MFA device"""
enum MfaPrimaryMethod {
  MFA_SMS
  MFA_TOTP
}

enum PayrollProviderIntegrationType {
  GUSTO
  INVALID
}

input DisableUserInput {
  clientMutationId: String!
  userId: ID!
}

input WeeklySchedule {
  dayOfWeek: BusinessDays!
  nWeeks: Int!
}

type GustoPayrollInfo {
  accountClaimUrl: String
}

type ProcessInvoiceAndCreateBillPayload {
  bill: Bill!
  clientMutationId: String!
}

"""Details associated with the offer"""
type ReceivablesOffersOfferDetails {
  """The advance rate used for calculating the offer"""
  advanceRate: Float
  """The previously advanced amount on the payout associated with this offer"""
  advancedAmount: FinancialAsset
  """The estimated loan repayments on the payout associated with the offer"""
  estimatedLoanRepayments: FinancialAsset
  """The estimated total of the payout associated with the offer"""
  estimatedPayout: FinancialAsset
  """The estimated reserve amount on the payout associated with the offer"""
  estimatedReserveAmount: FinancialAsset
  """The estimated reserve percentage on the payout associated with the offer"""
  estimatedReservePercentage: Float
  """The net sales on the payout associated with the offer"""
  payoutNetSales: FinancialAsset
  """The reserve credit on the payout associated with the offer"""
  payoutReserveCredit: FinancialAsset
  """The reserve debit on the payout associated with the offer"""
  payoutReserveDebit: FinancialAsset
}

type ConnectCredentialPayload {
  authenticationResult: CredentialAuthenticationResult
  clientMutationId: String!
}

input ApprovalsRequestInput {
  customerAccountId: ID
  customerUserId: ID
  description: String
  id: ID!
  insertedAt: Time
  monthlyLimitOverrideMetadata: ApprovalsRequestMonthlyLimitOverrideInput
  preapprovedCardMetadata: ApprovalsRequestPreapprovedCardInput
  reimbursementMetadata: ApprovalsRequestReimbursementInput
  status: ApprovalsRequestStatus
  type: ApprovalsRequestType!
}

input UpdateTransactionIntegrationCustomerInput {
  clientMutationId: String!
  integrationCustomerId: String!
  transactionId: ID!
}

enum DisputeCardPossession {
  DISPUTE_CARD_POSSESSION_NO_LOST
  DISPUTE_CARD_POSSESSION_NO_STOLEN
  DISPUTE_CARD_POSSESSION_NO_UNKNOWN
  DISPUTE_CARD_POSSESSION_UNKNOWN
  DISPUTE_CARD_POSSESSION_VIRTUAL_CARD
  DISPUTE_CARD_POSSESSION_YES
}

enum InternalEntitySyncStatus {
  ERROR
  PENDING
}

type NotificationSubscriptionConnection {
  edges: [NotificationSubscriptionEdge]
  pageInfo: PageInfo!
}

input CancelPaymentInput {
  clientMutationId: String!
  depositsAccountId: ID!
  paymentId: ID!
  recurringPaymentCancellationType: DepositsRecurringPaymentCancellationType
}

type DepositsStatement implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  periodEndTime: Time!
  periodStartTime: Time!
}

type ToggleRulePayload {
  clientMutationId: String!
}

input ApprovalsUserTypeManagerInput {
  """The fallback user id when the request initiator does not have a manager"""
  fallbackUserId: ID!
}

type StartDepositsOffboardingPayload {
  clientMutationId: String!
  depositsAccount: DepositsAccount!
}

"""A cycle reoccurring every N days."""
type EveryNDaysCardStatementPolicyCycle {
  """The number of days a cycle lasts."""
  numDays: Int
}

input CardPaymentForwarderInvoiceInput {
  invoiceAssetId: String
  invoiceNumber: String
}

type RevokeDeveloperApiTokenPayload {
  clientMutationId: String!
  success: Boolean
}

type PromotionsCta {
  """An enum of all possible actions"""
  action: PromotionsCtaAction
  """CTA button text. Usually will be Learn More"""
  text: String
}

enum RewardsPointsHistoryEntryType {
  ACCRUAL
  INVALID
  REDEMPTION
}

"""Filter facet for integration rules (only used for expenses)"""
type MatchingRulesFilterFacet implements Node {
  """Filter facet type"""
  facetType: FacetType
  """The ID of an object"""
  id: ID!
  """A list of rule IDs matches this filter facet type"""
  ruleIds: [String]
  """A list of rules matches this filter facet type"""
  rules: [IntegrationRule]
}

"""Payload for Persona information request"""
type OnboardingFormPersona {
  """Name of individual for whom ID is requested"""
  individual: String
  """Indicates if individual is the applicant"""
  isApplicant: Boolean
  """List of user roles to identify BO/CO etc."""
  roles: [String]
  """Template ID"""
  templateId: String
}

enum RiskTier {
  """High risk: limited feature access, potentially offboard"""
  HIGH
  """Low risk: full feature access"""
  LOW
  """Med risk: limited feature access"""
  MEDIUM
  """Risk evaluation has not yet been performed on this account"""
  PENDING
}

type OnboardingPageDTerms {
  _: Boolean
  content: OnboardingFormEmpty!
}

enum ReceivablesOffersVendorType {
  AMAZON_MWS
  AMAZON_SP
  INVALID
  PAYPAL
  SHOPIFY
  SQUARE
  STRIPE
  WALMART
}

input UserCategoryInput {
  id: ID!
  isDisabled: Boolean
}

"""A contact input to be validated or created (needs at least one payment instrument to be valid)"""
input VendorContactInput {
  """Vendor''s ACH Payment Instrument"""
  achPaymentInstrument: AchPaymentInstrumentInput
  """Vendor''s Cheque Payment Instrument"""
  chequePaymentInstrument: ChequePaymentInstrumentInput
  """Vendor''s Domestic Wire Payment Instrument"""
  domesticWirePaymentInstrument: DomesticWirePaymentInstrumentInput
  """Vendor''s email"""
  email: String
  """Client generated idempotency key"""
  idempotencyKey: String!
  """Vendor''s International Wire Payment Instrument"""
  internationalWirePaymentInstrument: InternationalWirePaymentInstrumentInput
  """Name of the vendor (needs to be unique)"""
  name: String!
  """Vendor''s phone number"""
  phoneNumber: String
}

type DateHistogramAggregationResult {
  name: String!
  series: [DateHistogramAggregationField]!
}

type OnboardingFormUwBankConnection {
  _: Boolean
}

type ReceivablesOffersAdvanceDetails {
  resourceId: String
}

union MuteValueType = MuteValueDepartment | MuteValueMerchant | MuteValueRaw | MuteValueUser

input MarkInvoiceInput {
  clientMutationId: String!
  idempotencyKey: String!
  invoiceId: ID!
  newStatus: InvoiceStatus!
}

type ExportEdge {
  cursor: String
  node: Export
}

input UpdateIntegrationCredentialInput {
  clientMutationId: String!
  """ID of new credential"""
  credentialId: ID!
  """ID of integration whose credential is getting changed"""
  integrationId: ID!
}

type MerchantIcon implements Node {
  asset: Asset
  """The ID of an object"""
  id: ID!
}

type UnexportedStatementEntryCount {
  count: Int
}

enum AcceptCreditMarketingOfferResult {
  FAILED_CREDIT_HARD_PULL
  FAILED_UNKNOWN
  FAILED_USER_IDENTITY_VERIFICATION
  FROZEN_CREDIT_PROFILE
  OFFER_EXPIRED
  SUCCESS
}

input SetReceivablesOffersConfirmedPayoutsRoutedToBrexInput {
  clientMutationId: String!
  value: Boolean!
}

type CreatePaymentEarlyAuthBalanceDecreaseCommitmentPayload {
  clientMutationId: String!
  paymentEarlyAuthBalanceDecreaseCommitment: PaymentEarlyAuthBalanceDecreaseCommitment!
}

"""The individual result for an industry search"""
type IndustrySearchResultEntry implements Node {
  """The ID of an object"""
  id: ID!
  """The industry for each result"""
  industry: Industry!
}

enum Class {
  BUSINESS
  PERSONAL
}

enum FiNbfiRegistrationStatus {
  APPLIED_AND_REJECTED
  APPLIED_AND_WAITING_ON_A_DECISION
  CURRENTLY_REGISTERED
  DO_NOT_PLAN_TO_REGISTER
  INVALID
  PLAN_TO_REGISTER
}

"""The high level object represents an approval request"""
type ApprovalsRequest implements Node {
  """The description entered by the user"""
  description: String
  """The ID of an object"""
  id: ID!
  """The time when this request is created"""
  insertedAt: Time
  """The request metadata"""
  requestMetadata: ApprovalsRequestMetadata!
  """A list of approval steps"""
  requiredApprovalSteps: [RequiredApprovalStep]
  """A list of review objects associate with this request. The results are sorted by inserted_at in ascending order"""
  reviews(after: String, before: String, first: Int, last: Int): ApprovalsReviewConnection
  """The request status"""
  status: ApprovalsRequestStatus!
  """The request type"""
  type: ApprovalsRequestType!
  """The user who creates this request"""
  user: ApprovalsUser!
}

type UpdatePaymentSourcePayload {
  clientMutationId: String!
}

enum LoyaltyProgramAlliance {
  EMIRATES_SKYWARDS
  ONE_WORLD
  SKY_TEAM
  STAR_ALLIANCE
  TRUEBLUE
}

type DepositsAccountConnection {
  edges: [DepositsAccountEdge]
  pageInfo: PageInfo!
}

type DepositsProcessingAndFuturePaymentDate implements Node {
  amount: Int
  estimatedArrivalTime: Time!
  """The ID of an object"""
  id: ID!
  sendAt: Time!
  sendOn: Date!
  status: DepositsPaymentStatus!
}

type CardOverviewSummaryTileEdge {
  cursor: String
  """Card Overview Summary Tile Node"""
  node: CardOverviewSummaryTile
}

enum ReportType {
  D_T
  R_R
  SEARCH
  W_D
}

"""A factor that impacts a credit limit"""
type UnderwritingLimitFactor implements Node {
  """The ID of an object"""
  id: ID!
  """When the value was last updated"""
  lastUpdated: Time
  """The type of factor"""
  limitFactor: UnderwritingLimitFactorType!
  """The score or value of the factor"""
  score: Int!
}

type CashTransactionReceivablesOffersCollectionDetails {
  _: Boolean
}

enum CardPaymentForwarderPaymentStatus {
  COMPLETED
  DRAFT
  FAILED
  IN_TRANSIT
  INVALID
  PENDING
  PREFLIGHT_REVIEW
  REFUNDED
  REJECTED
  UNDER_REVIEW
}

type UpdateContactPayload {
  clientMutationId: String!
  contact: PaymentContact!
}

enum PremiumSettingEventAction {
  ACTIVATE
  CANCEL
  INVALID
  UPDATE_PRICING_SCHEME
}

type ExpensesRuleEdge {
  cursor: String
  node: ExpensesRule
}

union PayrollInfo = GustoPayrollInfo

type CredentialAmazonMwsPayload {
  sellerId: String
}

type LoyaltyProgramEdge {
  cursor: String
  node: LoyaltyProgram
}

type RefundPaymentPayload {
  payment: CardPaymentForwarderPaymentObject!
}

input CalculateCreditMarketingOfferInput {
  clientMutationId: String!
  creditMarketingOfferId: ID!
  ssnLastFour: String!
}

type PushMarketoLeadsPayload {
  clientMutationId: String!
  success: Boolean
}

input GenerateDepositsStatementDocumentDownloadUrlInput {
  clientMutationId: String!
  depositsStatementId: ID!
}

type ShippingAddress {
  """Address info, required field"""
  address: Address!
  """First name, required field"""
  firstName: String!
  """Last name, required field"""
  lastName: String!
}

type SendMobileChequeDepositNotificationPayload {
  clientMutationId: String!
}

enum RewardsMarketplaceUpsell {
  UPSELL_SHOW_APPLE_REWARDS
  UPSELL_TO_BREX1
  UPSELL_TO_CASH
}

type CreateAccountPayload {
  account: Account
  clientMutationId: String!
}

union OnboardingSubmittablePage = OnboardingPageDSuitability | OnboardingPageDTerms | OnboardingPageEmailVerification | OnboardingPageForm | OnboardingPageFundingSource | OnboardingPageMfa | OnboardingPagePeriodicReview | OnboardingPagePersona | OnboardingPageTerms | OnboardingPageUwBankConnection | OnboardingPageUwEcommerceConnection

type CancelReimbursementPayload {
  clientMutationId: String!
  reimbursementItem: ReimbursementItem!
}

"""Connection Node Type Notification Tile"""
type NotificationTileConnection {
  edges: [NotificationTileEdge]
  pageInfo: PageInfo!
}

type CreateHrisConnectionPayload {
  clientMutationId: String!
  """The hris connection resource we established with the hris vendor"""
  hrisConnection: HrisConnection!
}

type GroupAggregationResult {
  name: String!
  values: [GroupAggregationField]
}

input SubmitReimbursementInput {
  clientMutationId: String!
  reimbursementItemId: ID
  updatedReimbursementMetadata: ReimbursementMetadataInput
}

"""Insights query namespace"""
type Insights {
  """Query for available balance snapshots"""
  availableBalanceSnapshots(depositsAccountId: String, timestamps: [Time!]): [InsightsAvailableBalanceSnapshot!]!
  """Query for cash insight transaction aggregates time series data"""
  cashFlowAggregateTimeSeries(depositsAccountId: String, endAt: Time, startAt: Time!, timeBucket: InsightsTimeUnit!, timeBucketStrategy: TimeBucketStrategy): [InsightsAggregateTransaction!]!
  """Fetch runway insight"""
  runwayInsight(projectionEndsAt: Date!, projectionStartsAt: Date, timeBucket: InsightsTimeUnit!, timeBucketStrategy: TimeBucketStrategy!): InsightsRunwayInsight!
}

enum SyncReadyStatus {
  HAS_CONFLICT
  INVALID_FIELDS
  INVALID_REIMBURSEMENT_ACCOUNT
  PAYLOAD_INVALID
  READY_TO_SYNC
}

union SetupInstructions = ExpensifySetupInstructions

type BrexOriginatedChequeDetails {
  chequeMemo: String
  chequeNumber: Int!
  counterparty: Counterparty!
  expectedDeliveryDate: Date
  initiatorCustomerUser: User
  recipientName: String
  returnReason: ReturnReason
  sentAt: Time
  type: TxType
}

type UpdateBillPayload {
  bill: Bill
  clientMutationId: String!
}

type InvoiceStatusLog {
  """inserted_at timestamp"""
  insertedAt: Time!
  """Note about this change log."""
  note: String
  """Invoice status."""
  status: InvoiceStatus!
  """Updated by"""
  updatedBy: String!
}

enum BatchCadence {
  DAILY
  MONTHLY
  SINGLE_ENTRY
  WEEKLY
}

type DisableNonPrimaryFundingSourcesPayload {
  clientMutationId: String!
}

enum OnboardingUnderwritingBankConnectionRequestReason {
  BANK_CONNECTION_ISSUE
  BANK_STATEMENT_ISSUE
  INSUFFICIENT_FUNDS
}

input InputCashTransactionUpdateArgumentUnion {
  achDebit: InputCashTransactionAchDebitArguments
  credit: InputCashTransactionCreditArguments
}

type RewardsBonusEdge {
  cursor: String
  node: RewardsBonus
}

type InsufficientFundsTile implements Node {
  """Statement due date in UTC time."""
  dueDate: Time!
  """default funding source data"""
  fundingSourceData: FundingSourceData
  """The ID of an object"""
  id: ID!
  """if default funding source is using brex cash"""
  isBrexCash: Boolean!
}

type UserCategoryConnection {
  edges: [UserCategoryEdge]
  pageInfo: PageInfo!
}

enum SpendAggregateTimeSeriesSortOrder {
  ASC
  DESC
  INVALID
}

input WithdrawFundsInput {
  clientMutationId: String!
  depositsAccountId: ID!
  financialsAccountId: ID!
  idempotencyKey: String!
}

"""Initiated by a Brex customer"""
type CustomerInitiated {
  """The customer user"""
  user: User
}

enum UnderwritingAnalysisFlagName {
  LOW_FIDELITY
}

input SetReceivablesOffersSelectedTrialOnboardingInput {
  clientMutationId: String!
  value: Boolean!
}

type PaymentApprovalResponse {
  paymentApproval: PaymentApproval!
  paymentApprovalPaymentContext: PaymentApprovalPaymentContext
}

input EnableUserInput {
  clientMutationId: String!
  userId: ID!
}

type CreatePhysicalCardV2Payload {
  card: Card
  clientMutationId: String!
}

input ProvisionApplePayInput {
  cardId: ID!
  certificates: [String]
  clientMutationId: String!
  nonce: String!
  nonceSignature: String!
}

type PositivePayAccountSettingEdge {
  cursor: String
  node: PositivePayAccountSetting
}

type ToggleRuleForStatementEntryPayload {
  clientMutationId: String!
  statementEntry: StatementEntry
}

"""
Collected from a Deposits Locked Transaction.
  If linked to a Payout, we include additional metadata (id, vendor)
  If the collection was due to non-peformance, we most likely collected for Offers not linked to the matched Payout.
"""
type ReceivablesOffersPaymentIntentSourceDepositsLockedTransaction {
  depositsTransactionId: String!
  isNonPerformanceCollection: Boolean!
  matchedPayoutId: ID
  matchedPayoutVendor: ReceivablesOffersVendorType
}

input CreateBillInput {
  attachmentAssetId: ID
  chequeMemo: String
  clientMutationId: String!
  contactId: ID
  counterpartyId: String
  depositsAccountId: ID
  description: String
  dueAmountCents: Int
  dueAt: Time
  endsAt: Time
  externalInvoiceNumber: String
  idempotencyKey: String!
  merchantCategoryId: ID
  monthlySchedule: MonthlySchedule
  notifyRecipient: Boolean
  paymentInstrumentId: ID
  paymentSendAt: Time
  totalNumberOfPayments: Int
  transferDescription: String
  userErpCategoryId: ID
  weeklySchedule: WeeklySchedule
}

type CreateTransactionRefusedSubscriptionPayload {
  clientMutationId: String!
  notificationSubscription: NotificationSubscription
}

enum BillInvoiceProcessingStatus {
  AWAITING
  DONE
  INELIGIBLE
}

type ResyncReimbursementItemsPayload {
  clientMutationId: String!
}

"""Information about dev access agreement"""
type DevAccessAgreement {
  """Time agreement was signed at"""
  signedAt: Time
}

type RewardsRedemptionProgramEdge {
  cursor: String
  node: RewardsRedemptionProgram
}

enum EmployeeCountRange {
  RANGE_101_TO_500
  RANGE_1_TO_4
  RANGE_21_TO_100
  RANGE_21_TO_50
  RANGE_501_TO_2500
  RANGE_51_TO_100
  RANGE_5_TO_20
  RANGE_LESS_THAN_20
  RANGE_MORE_THAN_2501
}

enum AccountIncorporationTypeInput {
  CORPORATION
  LLC
  OTHER
  PARTNERSHIP
  SOLE_PROPRIETORSHIP
}

enum ActivateUserAuthType {
  DB_SESSION
  JWT
}

type FinancialAccountEdge {
  cursor: String
  node: FinancialAccount
}

"""An augmented billing payment intent with the amount of the intent allocated to the parent model and additional metadata"""
type ReceivablesOffersPaymentIntent {
  """Of the collected amount, how much is allocated to the parent model"""
  allocatedCollectedAmount: FinancialAsset!
  """Time the payment settled"""
  collectedAt: Time!
  """Unique ID"""
  id: String!
  """True if the Payment is paying off a Card liability, otherwise its paying a Cash Advance one."""
  isForCard: Boolean!
  source: ReceivablesOffersPaymentIntentSource!
  """Total amount collected as part of the payment"""
  totalCollectedAmount: FinancialAsset!
}

"""
Returns timeline estimates, keyed by the different payment_rails.
Supported payment rails include: `ach`, `internationalWire`, `domesticWire`, `cheque`
If an estimate for a given payment rail is not supported, the value is null.
"""
type PaymentRailTimeline {
  """
  The transaction timeline for ACH
  null if origin = `EXTERNAL`
  """
  ach: CashTransactionTimeline
  """
  The transaction timeline for cheque
  null if payment_method = `DEBIT`
  """
  cheque: CashTransactionTimeline
  """
  The transaction timeline for domestic wire
  non-null only for origin = `BREX` and payment_method = `CREDIT`
  """
  domesticWire: CashTransactionTimeline
  """
  The transaction timeline for international wire
  non-null only for origin = `BREX` and payment_method = `CREDIT`
  """
  internationalWire: CashTransactionTimeline
}

type NetsuiteClass {
  isInactive: Boolean
  name: String
}

type RewardsPointReward {
  amount: Int!
}

type FspClientAccount {
  contact: String
  customerAccountId: String!
  name: String
}

type ReceiptConnection {
  edges: [ReceiptEdge]
  pageInfo: PageInfo!
}

"""The high level object represents a manager routing rule"""
type ApprovalsRoutingRuleManager implements Node {
  """A list of fallback user ids when the request initiator does not have a manager"""
  fallbackApproverUserIds: [String!]!
  """The ID of an object"""
  id: ID!
}

type InternalEntitySyncErrorConnection {
  edges: [InternalEntitySyncErrorEdge]
  pageInfo: PageInfo!
}

enum BankAggregatorDecision {
  FINICITY_ONLY
  LAUNCH_DARKLY
  PLAID_FIRST
}

input DeleteSubscriptionInput {
  clientMutationId: String!
  id: ID!
}

"""The transaction consumer related settings"""
type DepositsTransactionConsumerSettings {
  """The recipient notification setting to indicate at what stages we want to send out notifications"""
  recipientNotificationSetting: NotificationSetting
}

type ApprovalsReviewAssigneeConnection {
  edges: [ApprovalsReviewAssigneeEdge]
  pageInfo: PageInfo!
}

type IntegrationRuleConnection {
  edges: [IntegrationRuleEdge]
  pageInfo: PageInfo!
}

enum UnderwritingModelName {
  CASH_BASED
  INDIVIDUAL_CREDIT_BASED
  INVALID
  MANUAL
  NONE
  ONBOARDING
  REGULAR_FINANCIALS_BASED_MID_MARKET
  REVENUE_BASED
}

union ApprovalsRoutingRule = ApprovalsRoutingRuleIndividuals | ApprovalsRoutingRuleIndividualsV2 | ApprovalsRoutingRuleManager

"""List of failing checks associated with a seller account"""
type ReceivablesOffersAccountFailingChecks {
  """List of checks that are failing and are required for full access (`active` status)"""
  fullAccess: [ReceivablesOffersCustomerCheckName!]
  """List of ongoing monitoring checks that are failing and might be the reason behind a zero offer"""
  ongoing: [ReceivablesOffersCustomerCheckName!]
  """List of checks that are failing and are required for trial access (`active_trial` status)"""
  trialAccess: [ReceivablesOffersCustomerCheckName!]
}

union CashTransactionCounterpartyDetails = CashTransactionFinancialAccount | CashTransactionPayee

enum SoftSignupAuthType {
  DB_SESSION
  JWT
}

type TransactionEdge {
  cursor: String
  node: Transaction
}

input RevokeDeveloperApiTokenInput {
  clientMutationId: String!
  id: String!
}

"""
Only one of these fields will be set, either iban or accountNumber

For international wires, some countries use an IBAN so we''ll set the iban field.
For countries that explicitly don''t, we''ll set the accountNumber as a fallback.
"""
type CashTransactionInternationalWireAccountIdentifier {
  type: CashTransactionInternationalWireAccountIdentifierType
  value: String
}

type TransactionOperationConnection {
  edges: [TransactionOperationEdge]
  pageInfo: PageInfo!
}

input SetReceivablesOffersAccountOnboardingActionInput {
  action: ReceivablesOffersAccountOnboardingAction!
  clientMutationId: String!
}

enum OnboardingInformationRequestDescription {
  UNDERWRITING_CARD_ECOMMERCE_CONNECTION
  PHOTO_ID_VERIFICATION_CONFIRMATION
  PROOF_OF_EIN_DOCUMENT_UPLOAD
  PROOF_OF_SSN_UPLOAD
  EIN_OCR
  BUSINESS_ADDRESS
  EIN_OCR_VERIFICATION
  TERMS
  MFA_NEW
  FUNDING_SOURCE_SELECTION
  PHOTO_ID_UPLOAD
  MFA
  INDIVIDUAL_CONTACT_DETAILS
  ISSUE_CARD
  PERSONA_ID_VERIFICATION
  UNDERWRITING_CARD_LINK_ACCOUNTS
  OTHER
  BUSINESS_DETAILS_V2
  INDIVIDUAL_ADDRESS
  FORM_990_DOCUMENT_UPLOAD
  PERIODIC_REVIEW
  BUSINESS_LEADERSHIP_V2
  PRODUCT_SUITABILITY
  CORPORATE_AUTHORIZATION_DOCUMENT_UPLOAD
  CERTIFICATE_OF_GOOD_STANDING_UPLOAD
  EDD_ATTESTATION_FI_NBFI
  W9_ATTESTATION
  UNDERWRITING_CARD_BANK_CONNECTION
  BUSINESS_OWNERSHIP
  BUSINESS_LEADERSHIP_V3
  EMAIL_VERIFICATION
  BUSINESS_LEADERSHIP
  BUSINESS_ATTRIBUTES_CONFIRMATION
  EDD_ATTESTATION_CASH_INTENSIVE
  BUSINESS_DETAILS
  UNDERWRITING_CASH_BANK_CONNECTION
  INDIVIDUAL_ADDITIONAL_DETAILS
}

enum ReferralRecordStatus {
  APPLICATION_APPROVED
  COMPLETED
  INVALID
  INVITE_SENT
  PENDING_INVITE
  SIGNED_UP
}

enum DepositsWithdrawFundsIssue {
  CANNOT_VERIFY_BALANCES
  INVALID
  MULTIPLE_DEPOSITS_ACCOUNTS
  NEGATIVE_BALANCE
  NO_AVAILABLE_BALANCE
  NONZERO_CARD_BALANCE
  NONZERO_MMF_BALANCE
  PROCESSING_TRANSACTIONS
  RECENT_ACH_DEBITS
  RECENT_CHEQUE_DEPOSITS
  WAITING_FOR_HOLD_TO_CLEAR
  WRONG_DEPOSITS_ACCOUNT_STATUS
}

type CardStatementEdge {
  cursor: String
  node: CardStatement
}

input UpdatePaymentSourceInput {
  clientMutationId: String!
  fundingSourceId: ID!
}

union FinancialsSourceResult = FinancialSource

"""Represents the payload of a Selected Trigger of type Top Category Multiplier."""
type RewardsTriggerTopCategoryMultiplier {
  """The multiplier to be applied to the top category"""
  accrualRate: Float!
}

type SpendAggregateEdge {
  cursor: String
  node: SpendAggregate
}

type ExpensesItemEvent implements Node {
  action: ExpensesItemEventAction
  customerUserRole: String
  description: String
  expensesItem: ExpensesItem
  """The ID of an object"""
  id: ID!
  insertedAt: Time
  user: User
}

"""The high level object represents an approval policy"""
type ApprovalsPolicy implements Node {
  """The approvals policy details"""
  details: ApprovalsPolicyDetails!
  """The ID of an object"""
  id: ID!
  """The product type of this approvals policy"""
  productType: ProductType
}

"""Calculated integration fields via integration rules engine"""
type StatementEntryIntegrationFields {
  """External billable status"""
  billableStatus: BillableStatus
  """QBO class"""
  class: ExternalIntegrationEntity
  """QBO customer"""
  customer: ExternalIntegrationEntity
  """Netsuite department"""
  department: ExternalIntegrationEntity
  """Netsuite / QBO location"""
  location: ExternalIntegrationEntity
  """Xero tracking category"""
  trackingCategory1: ExternalIntegrationEntity
  """Xero tracking category"""
  trackingCategory2: ExternalIntegrationEntity
  """External GL account"""
  userCategory: UserCategory
  """Netsuite vendor"""
  vendor: ExternalIntegrationEntity
}

enum InvestmentSource {
  CROWDSOURCED
  FAMILY
  GRANTS
  INITIAL_COIN_OFFERING
  PROFESSIONAL_INVESTOR
  SELF_FUNDED
  VC
}

type CreateDocumentOcrPayload {
  clientMutationId: String!
  """the ID of document OCR process. This can be used to query for the OCR result."""
  documentOcrId: ID!
}

type StatementEntryLensConnection {
  edges: [StatementEntryLensEdge]
  pageInfo: PageInfo!
}

type ValidateActivation {
  active: Boolean!
}

type PerMerchantStatsEdge {
  cursor: String
  node: PerMerchantStats
}

input GenerateCardStatementDocumentDownloadUrlInput {
  cardStatementId: ID
  clientMutationId: String!
}

type CashTransactionCardCollectionDetails {
  collectionAttempt: CollectionAttempt!
  collectionId: String!
}

type FinancialInformationRequestConnection {
  edges: [FinancialInformationRequestEdge]
  pageInfo: PageInfo!
}

enum DepositsAccountClosureReason {
  BUSINESS_IS_CLOSING
  DEPOSITS_TOO_SLOW
  FOUND_ANOTHER_BANK
  INVALID
  LIMITED_SAME_DAY_BALANCE
  MISSING_FUNCTIONALITY
  NOT_ENOUGH_PRODUCTS
  OTHER
  WANTED_30_DAY_CARD
  WITHDRAWALS_TOO_SLOW
}

type CreateCashTransactionPayload {
  clientMutationId: String!
  transaction: CashTransaction!
}

type BrexOperationalTransferDetails {
  _: Boolean
}

type CashTransactionBookTransferDetails {
  """The sender account"""
  sourceDepositsAccount: DepositsAccount
  """The recipient account"""
  targetDepositsAccount: DepositsAccount
}

type EnableUserPayload {
  clientMutationId: String!
  user: User
}

input BulkFindOrCreateErpFeedsInput {
  clientMutationId: String!
  erpFeedRequests: [ErpFeedInput]
}

type RfiResponseItem {
  """Token for filestore, referencing the uploaded file"""
  documentToken: String
  status: RfiResponseStatus!
  """Details on the current status, e.g. reasons for rejecting a response, filled by ops"""
  statusMessage: String
}

type JournalEntry implements Node {
  """The balance-affecting amount, in USD cents"""
  amountUsdCents: Int
  """The ID of an object"""
  id: ID!
  originator: JournalEntryOriginator
  originatorType: JournalOriginatorType
}

type CashTransactionInternationalWireDetails {
  """The associated account number, which could be in the form of an IBAN or other (defaulting to account_number)"""
  accountIdentifier: CashTransactionInternationalWireAccountIdentifier
  """The address of the recipient"""
  address: Address
  """The counterparty''s beneficiary bank information"""
  beneficiaryBank: CashTransactionBeneficiaryBank
  """The 2-character country code the wire was sent to or came from (e.g. "MX" for Mexico)"""
  countryCodeAlpha2: String
  """
  Country name this wire was sent to or came from (e.g. "Mexico")
  If we don''t have the full country name, we''ll fall back to the country_code_alpha2
  """
  countryName: String
  """The email of the recipient"""
  email: String
  """The MT103 is a standardised SWIFT payment message used as proof of payment for cross border/international wire transfers"""
  mt103: String
  """Whether the transaction was a debit or credit"""
  paymentMethod: CashTransactionPaymentMethod!
  """Counterparty''s SWIFT code"""
  swiftCode: String
  """A bank-specific tracking number"""
  trackingNumber: String
  """Payment instructions"""
  transferDescription: String
}

type GlobalLimitRuleMetadata {
  amount: Int
}

type CreateApprovalsPolicyPayload {
  approvalsPolicy: ApprovalsPolicy
  clientMutationId: String!
}

"""An account which we require statement update from the customer"""
type FinancialStatementRequestedAccount implements Node {
  """The last digits of the bank account number for display"""
  accountNumberLastFour: String
  bankAccountNumber: String
  """Bank/Financial institution & account number associated with the statement account"""
  bankName: String
  """Due date for a statement update, typically end of month"""
  dueDate: Time!
  financialAccountId: String!
  """The ID of an object"""
  id: ID!
  """The month of the requested statement"""
  requestedMonth: Int!
}

type UpdateCardPinPayload {
  card: Card!
  clientMutationId: String!
}

type SetDepositsTransactionPaymentMemoPayload {
  clientMutationId: String!
  transaction: DepositsTransaction!
}

input StartResetUserUserInput {
  email: String!
}

type DismissPromotionPayload {
  clientMutationId: String!
}

type SendBillPaymentPayload {
  bill: Bill
  clientMutationId: String!
}

input CreateCounterpartyInput {
  accountNumber: String
  """address is required for wire counterparties, enforced by backend service"""
  address: FlexibleAddressInput
  approverId: ID!
  beneficiaryBankAddress: FlexibleAddressInput
  beneficiaryBankInfo: Json
  """International wire counterparty information"""
  beneficiaryBankName: String
  chequeRecipientName: String
  class: Class
  clientMutationId: String!
  depositsAccountId: ID!
  email: String
  location: AccountLocation!
  name: String!
  paymentRail: PaymentRail!
  previousCounterpartyId: ID
  routingNumber: String
  """type and class are required for ach counterparties, enforce by backend service"""
  type: Type
}

type CancelCashRecurringSchedulePayload {
  """List of cancelled transactions"""
  cancelledTransactions: [CashTransaction!]!
  clientMutationId: String!
}

input ResyncBillsInput {
  billIds: [ID]!
  clientMutationId: String!
  integrationId: ID!
  """Will fetch a new sync token from QBO before attempting bills data sync. This overwrites any data on the QBO side with Brex data"""
  overwrite: Boolean
}

type CardTransactionInsightMutingPolicyConnection {
  edges: [CardTransactionInsightMutingPolicyEdge]
  pageInfo: PageInfo!
}

type CardTransactionInsightMutingPolicyEdge {
  cursor: String
  node: CardTransactionInsightMutingPolicy
}

type CreateDeveloperApiTokenPayload {
  clientMutationId: String!
  token: DeveloperApiToken
}

type MilesTransferEdge {
  cursor: String
  node: MilesTransfer
}

input CreateFinancialBankStatementInput {
  assetId: ID!
  clientMutationId: String!
  financialAccountId: ID!
}

type SubmitFinancialInformationRequestPayload {
  clientMutationId: String!
  informationRequest: FinancialInformationRequest
}

type CashTransactionApprovalResponse {
  cashTransactionApproval: CashTransactionApproval
  """Contextual information about transaction associated with the approval"""
  cashTransactionApprovalContext: CashTransactionApprovalContext
}

type DepositsWeeklySchedule {
  dayOfWeek: BusinessDays!
  nWeeks: Int!
}

scalar PhoneNumber

scalar Json

input BeginChannelVerificationInput {
  clientMutationId: String!
  id: ID!
}

enum CashTransactionAchReturnReason {
  MANDATORY_FIELD_ERROR
  RETURN_OF_IMPROPER_CREDIT_ENTRY
  FILE_RECORD_EDIT_CRITERIA
  CUSTOMER_ADVISES_UNAUTHORIZED
  CHECK_TRUNCATION_ENTRY_RETURN
  INCORRECTLY_CODED_OUTBOUND_INTERNATIONAL_PAYMENT
  IMPROPER_SOURCE_DOCUMENT
  RETURN_OF_XCK_ENTRY
  ENTRY_NOT_PROCESSED_BY_GATEWAY
  RETURN_PER_ODFI_REQUEST
  FOREIGN_RECEIVING_DFI_UNABLE_TO_SETTLE
  NON_PARTICIPANT_IN_IAT_PROGRAM
  DUPLICATE_ENROLLMENT
  ADDENDA_ERROR
  INVALID_REPRESENTATIVE_PAYEE_INDICATOR
  NO_ERRORS_FOUND
  LIMITED_PARTICIPATION_DFI
  RETURN_NOT_REQUESTED_BY_ODFI
  ITEM_AND_RCK_ENTRY_PRESENTED_FOR_PAYMENT
  RETURN_NOT_A_DUPLICATE
  MISROUTED_DISHONORED_RETURN
  INVALID_ACCOUNT_NUMBER_STRUCTURE
  AUTHORIZATION_REVOKED_BY_CUSTOMER
  ACCOUNT_FROZEN
  IMPROPER_EFFECTIVE_ENTRY_DATE
  FIELD_ERRORS
  UNTIMELY_DISHONORED_RETURN
  TIMELY_ORIGINAL_RETURN
  RETURN_OF_ENR_ENTRY_BY_FEDERAL_GOVERNMENT_AGENCY
  INVALID_COMPANY_IDENTIFICATION
  INVALID_DFI_ACCOUNT_NUMBER
  BENEFICIARY_DECEASED
  PAYMENT_STOPPED
  ACCOUNT_SOLD_TO_ANOTHER_DFI
  IAT_ENTRY_CODING_ERROR
  UNAUTHORIZED_DEBIT_TO_CONSUMER_ACCOUNT_USING_CORPORATE_SEC_CODE
  MISROUTED_RETURN
  INSUFFICIENT_FUNDS
  CORPORATE_CUSTOMER_ADVISES_NOT_AUTHORIZED
  PERMISSIBLE_RETURN_ENTRY_NOT_ACCEPTED
  INVALID_COMPANY_NAME
  ROUTING_NUMBER_ERROR
  RETURN_OF_IMPROPER_DEBIT_ENTRY
  CORRECTED_RETURN
  INVALID_INDIVIDUAL_ID_NUMBER_2
  UNTIMELY_RETURN
  INVALID_INDIVIDUAL_ID_NUMBER
  TRACE_NUMBER_ERROR
  ACCOUNT_NOT_FOUND
  STOP_PAYMENT_ON_ITEM_RELATED_TO_RCK_ENTRY
  NON_TRANSACTION_ACCOUNT
  CREDIT_ENTRY_REFUSED_BY_RECEIVER
  MANUALLY_CANCELLED
  ROUTING_NUMBER_CHECK_DIGIT_ERROR
  CUSTOMER_ADVISES_IMPROPER
  UNKNOWN
  INVALID_TRANSACTION_CODE
  REPRESENTATIVE_PAYEE_DECEASED
  STATE_LAW_AFFECTING_RCK_ACCEPTANCE
  PERMISSIBLE_RETURN_ENTRY
  ITEM_RELATED_TO_RCK_ENTRY_IS_IMPROPER
  STOP_PAYMENT_ON_SOURCE_DOCUMENT
  DUPLICATE_RETURN
  SOURCE_DOCUMENT_PRESENTED_FOR_PAYMENT
  INVALID_ACH_ROUTING_NUMBER
  UNCOLLECTED_FUNDS
  RDFI_NON_SETTLEMENT
  INVALID
  ACCOUNT_CLOSED
  DUPLICATE_ENTRY
  RDFI_NOT_PARTICIPANT_IN_CHECK_TRUNCATION_PROGRAM
  INVALID_INDIVIDUAL_NAME
  INVALID_FOREIGN_RECEIVING_DFI_IDENTIFICATION
  AMOUNT_FIELD_ERROR
}

type DisputeTransactionConnection {
  edges: [DisputeTransactionEdge]
  pageInfo: PageInfo!
}

type SpendAggregate {
  amount: Int!
  card: Card
  department: Department
  merchant: Merchant
  merchantCategory: MerchantCategory
  previousPeriodAmount: Int!
  time: Time
  user: User
  userCategory: UserCategory
}

enum CardTransactionsInsightType {
  CARD_TRANSACTION_INSIGHT_ALL
  CARD_TRANSACTION_INSIGHT_EMPTY
  CARD_TRANSACTION_INSIGHT_EXPENSIVE_TRANSACTION
  CARD_TRANSACTION_INSIGHT_HIGH_SPEND_PER_DIEM_RESTAURANTS
  CARD_TRANSACTION_INSIGHT_HIGH_SPEND_PER_DIEM_RIDESHARE
  CARD_TRANSACTION_INSIGHT_NEW_VENDOR_SAAS
  CARD_TRANSACTION_INSIGHT_RECURRING
  CARD_TRANSACTION_INSIGHT_RECURRING_DUPLICATE
  CARD_TRANSACTION_INSIGHT_SPEND_INCREASE_DEPARTMENT
  CARD_TRANSACTION_INSIGHT_SPEND_INCREASE_MERCHANT
  CARD_TRANSACTION_INSIGHT_SPEND_INCREASE_MERCHANT_CATEGORY
  CARD_TRANSACTION_INSIGHT_SPEND_INCREASE_RECURRING
  CARD_TRANSACTION_INSIGHT_SPEND_INCREASE_USER
}

type CardPaymentForwarderDocument {
  assetId: String
  documentExternalId: String
  requestId: String
  status: CardPaymentForwarderDocumentStatus
  type: CardPaymentForwarderDocumentType
}

input InvoiceLineItemInput {
  """Description item. e.g. product / service."""
  description: String!
  """Quantity of the description item."""
  quantity: Int!
  """Subtotal of the line item."""
  subtotal: FinancialAssetInput
  """Total Amount of the line item"""
  totalAmount: FinancialAssetInput
  """Unit price of the description item."""
  unitPrice: FinancialAssetInput!
}

type QuickbooksCategories {
  accountsPayableUserCategory: UserCategory
  collectionTargetUserCategory: UserCategory
  rewardsIncomeUserCategory: UserCategory
  vendorName: String
}

type NetsuiteLocation {
  isInactive: Boolean
  name: String
}

type UpdateAccountAddressPayload {
  account: Account!
  clientMutationId: String!
}

input CreateAutoAddFundsInput {
  amount: Int!
  clientMutationId: String!
  depositsAccountId: ID
  endsAt: Time
  financialAccountId: ID!
  idempotencyKey: String!
  monthlySchedule: MonthlySchedule
  paymentClass: PaymentClass!
  sendAt: Time
  totalNumberOfPayments: Int
  weeklySchedule: WeeklySchedule
}

type ServicingPolicy implements Node {
  closingStrategy: ClosingStrategy
  collectedNumDaysAfterClose: Int
  delinquentNumDaysAfterClose: Int
  """The ID of an object"""
  id: ID!
}

"""Connection Node Type Education Tile"""
type EducationTileConnection {
  edges: [EducationTileEdge]
  pageInfo: PageInfo!
}

input TurnOffSeenFlagInput {
  clientMutationId: String!
  """Target flag by key"""
  key: SeenFlagKey!
}

type RewardsTriggerInstanceStateEmpty {
  _: Boolean
}

"""The instant payout offer object. This can be either a generated or accepted offer"""
type ReceivablesOffersOffer implements Node {
  """The advance amount that the customer accepted"""
  advanceAmount: FinancialAsset
  """The customer''s account id"""
  customerAccountId: String!
  """The details associated with this offer"""
  details: ReceivablesOffersOfferDetails
  """Timestamp of when the offer expires"""
  expiresAt: Time
  """The fee amount that the customer was charged on this offer"""
  feeAmount: FinancialAsset
  """The fee percentage applied on the offer"""
  feePercentage: Float
  """The ID of an object"""
  id: ID!
  """The non-performance reason (enum) if the offer is non-performant"""
  nonPerformanceReason: ReceivablesOffersOfferNonPerformanceReason
  """The offer amount that the customer can accept"""
  offerAmount: FinancialAsset
  """Timestamp of the original date we expected to collect the offer"""
  originalDueDate: Time
  """The payout object associated with this offer"""
  payout: ReceivablesOffersPayout
  """Timestamp when the offer was fully repaid"""
  repaidAt: Time
  """The current status of the offer (enum)"""
  status: ReceivablesOffersOfferStatus!
  """The total exposure cap that was used during offer generation"""
  totalExposureCap: FinancialAsset
  """The vendor (sales platform, i.e., Amazon, Shopify, etc.) object"""
  vendor: ReceivablesOffersVendor
}

type FundingSourceConnection {
  edges: [FundingSourceEdge]
  pageInfo: PageInfo!
}

"""The account funding source for the payroll provider"""
type PayrollProviderFundingSource {
  """
  The account id of the funding source
  Note: If account_id is missing, we haven''t keept track of which account is funding payroll
  """
  accountId: String
  """The type of funding source"""
  accountType: PayrollProviderFundingSourceAccountType!
}

type RewardsAccrualEntryConnection {
  edges: [RewardsAccrualEntryEdge]
  pageInfo: PageInfo!
}

enum RewardsHistoryEntryOrderField {
  AMOUNT
  INSERTED_AT
  INVALID
}

input PullDataAsyncInput {
  clientMutationId: String!
  financialSourceId: ID!
}

input ResyncReimbursementItemsInput {
  clientMutationId: String!
  idempotencyKey: String!
  integrationId: ID!
  reimbursementItemIds: [ID]!
}

type InternationalWireConfig {
  countryConfigs: [InternationalWireCountryConfig!]!
  deprecatedInputFields: [InternationalWireInputField!]!
  highRiskInputFields: [InternationalWireInputField!]!
}

enum CashTransactionInternationalWireAccountIdentifierType {
  ACCOUNT_NUMBER
  IBAN
}

type CashTransactionFinancialAccount {
  """External financial account associated with this Transaction"""
  financialAccount: FinancialAccount
}

type CounterpartyEdge {
  cursor: String
  node: Counterparty
}

input HeartbeatInput {
  """Id of the session that is being reported"""
  sessionId: String
}

input SetReceivablesOffersPayFeeWithRewardsInput {
  clientMutationId: String!
  value: Boolean!
}

type DepartmentConnection {
  edges: [DepartmentEdge]
  pageInfo: PageInfo!
}

input UpdateIntegrationSyncSettingsInput {
  batchCadence: BatchCadence
  batchEntity: BatchEntity
  clientMutationId: String!
  id: ID!
  syncFrom: Time
  version: Int
}

type ErpFeedEdge {
  cursor: String
  node: ErpFeed
}

input RefreshIntegrationCredentialsInput {
  clientMutationId: String!
  """Filter by integration id"""
  integrationId: ID
  """Filter by integration status"""
  status: String
}

type Integration implements Node {
  accountCategories: AccountCategories
  credential: Credential
  """Version of ERP subscription the integration corresponds to."""
  erpSubscriptionDetail: ErpSubscriptionDetail
  errorDetails: [IntegrationErrorDetails]
  exports(after: String, before: String, first: Int, last: Int): ExportConnection
  """The ID of an object"""
  id: ID!
  """List of available integration entities. Searchable by prefix and integration field"""
  integrationEntities(after: String, before: String, entityType: String, fieldId: String, filterDeleted: Boolean, first: Int, last: Int, query: String): ExternalIntegrationEntityConnection
  """List of available mappable integration fields for an integration"""
  integrationFields(after: String, before: String, first: Int, last: Int): ExternalIntegrationFieldConnection
  integrationRules(after: String, before: String, first: Int, last: Int): IntegrationRuleConnection
  """Version of QuickBooks Online that the integration corresponds to."""
  qboOfferingSku: String
  scopes: [IntegrationScope]
  settings: IntegrationSettings
  setupInstructions: SetupInstructions
  status: String
  """Current state of the user''s ERP subscription status."""
  subscriptionStatus: String
  userCategories(after: String, before: String, first: Int, last: Int, query: String): UserCategoryConnection
  vendor: String
}

input AdminUpdateApprovalsReviewInput {
  clientMutationId: String!
  description: String
  requestSnapshot: ApprovalsRequestInput
  reviewId: ID!
  status: ApprovalsReviewStatus!
}

enum CashBonusStatus {
  ACTIVE
  EXPIRED
  TRIGGERED
}

type RewardsTriggerCashActivationCardSpendBonus {
  amountSpentRequiredUsdCents: Int!
  expirationAfterCashActivationDays: Int!
  reward: RewardsPointReward!
}

enum DisputeTransactionStatus {
  TRANSACTION_STATUS_CLOSED
  TRANSACTION_STATUS_DRAFT
  TRANSACTION_STATUS_IN_PROGRESS
  TRANSACTION_STATUS_PENDING_REVIEW
  TRANSACTION_STATUS_PENDING_WITHDRAWAL
  TRANSACTION_STATUS_UNKNOWN
}

type FinancialBankStatementDocumentEdge {
  cursor: String
  node: FinancialBankStatementDocument
}

input UpdateExpensesSettingRulesInput {
  clientMutationId: String!
  rules: [ExpensesRuleInput]!
  sendEmailToEmployees: Boolean
  settingId: ID!
}

enum RfiStatus {
  RFI_STATUS_CANCELLED
  RFI_STATUS_INVALID
  RFI_STATUS_NEW
  RFI_STATUS_PENDING_CUSTOMER
  RFI_STATUS_PENDING_REVIEW
  RFI_STATUS_RESPONSE_ACCEPTED
  RFI_STATUS_RESPONSE_PARTIALLY_ACCEPTED
  RFI_STATUS_RESPONSE_RECEIVED
  RFI_STATUS_RESPONSE_REJECTED
}

type PrepareMultiFeeReceivablesOffersForAcceptancePayload {
  clientMutationId: String!
  offersGroups: [ReceivablesOffersOffersGroup!]!
}

type DepositsStatementEdge {
  cursor: String
  node: DepositsStatement
}

enum StatusView {
  ACTIVE
  EXPIRED
  LOCKED
  TERMINATED
  WAITING_ACTIVATION
}

input UnsuspendCardInput {
  clientMutationId: String!
  id: ID!
}

enum FinancialsConnectRequestType {
  FINICITY_CONNECT
}

enum TxPaymentRail {
  ACH
  CHEQUE
  WIRE
}

enum AchDebitCapability {
  ENABLED
  RESTRICTED
  REVOKED
}

input DismissPromotionInput {
  clientMutationId: String!
  promotionName: String!
}

"""The source of funds was a rewards redemption"""
type RewardsRedemptionSource {
  """The maximum amount of rewards redeemed"""
  maximumAmount: FinancialAsset
  """The id of the rewards redemption"""
  rewardsRedemptionInstanceId: String!
}

enum CashTransactionCancellationReason {
  ACCOUNT_CLOSED
  ACCOUNT_NOT_FOUND
  ACH_DEBIT_CAPABILITY_REVOKED
  APPROVAL_DENIED
  BLOCKED_BY_POSITIVE_PAY
  CUSTOMER_EDITED
  FAILED_VERIFICATION
  INSUFFICIENT_FUNDS
  INVALID
  MISSED_SEND_ON
  USER_CANCELLED
}

type AcceptDevAccessAgreementPayload {
  clientMutationId: String!
  success: Boolean
}

input UpdateCardMetadataInput {
  cardId: ID!
  clientMutationId: String!
  defaultMemo: String
}

input OptOutOfIncentiveCampaignInput {
  clientMutationId: String!
  """Opt out type"""
  optOutType: IncentiveOptOutType!
  """The placement id"""
  placementId: ID!
}

type PaymentContactConnection {
  edges: [PaymentContactEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Marketo lead form object"""
type MarketoLeadForm implements Node {
  """the Marketo form id"""
  formId: String!
  """the Marketo form content"""
  formJson: String!
  """The ID of an object"""
  id: ID!
}

enum UserRoleTypeInput {
  """an admin is a card-only admin"""
  ADMIN
  """this is card and cash bookkeeper"""
  BOOKKEEPER
  """this is a card regular user and cash user role"""
  CASH_AND_CARD_USER
  """this is a card-only regular user"""
  REGULAR
  """a superadmin is a cash admin and card admin"""
  SUPERADMIN
}

enum PremiumSettingEventSource {
  BREX_INTERNAL
  INVALID
  USER
}

type CreateResponseToRfiPayload {
  clientMutationId: String!
  rfi: Rfi
}

type CustomerAttributes implements Node {
  """The ID of an object"""
  id: ID!
  numberOfEmployees: Int
  oneBrexSegment: OneBrexSegment!
}

type BookTransferDetails {
  sourceDepositsAccount: DepositsAccount
  targetDepositsAccount: DepositsAccount
}

type CashTransactionReceivablesOffersAdvanceDetails {
  _: Boolean
}

type ExternalIntegrationEntityConnection {
  edges: [ExternalIntegrationEntityEdge]
  pageInfo: PageInfo!
}

type NotifyUserOfCardRequestPayload {
  clientMutationId: String!
}

input UpdateLocationInput {
  clientMutationId: String!
  description: String
  id: ID!
  name: String!
}

"""Point history for rewards transactions"""
type RewardsPointsHistoryEntry implements Node {
  """Amount of points (1/100 of a point)"""
  amountCentipoints: Int!
  """More specific description of the type of point transaction"""
  descriptionType: RewardsPointsHistoryEntryDescriptionType!
  """The ID of an object"""
  id: ID!
  """When the points were earned or granted"""
  insertedAt: Time!
  """Payload with more details about the transaction"""
  payload: RewardsHistoryEntryPayload
  """Type: Accrual/Redemption"""
  type: RewardsPointsHistoryEntryType!
  """User who redeemed the points"""
  user: User
}

type AchPaymentInstrument {
  accountClass: BankAccountClass
  accountNumber: String
  accountType: BankAccountType
  """A small logo for the beneficiary bank in base64 format. WARNING: may cause significantly slower response times"""
  beneficiaryBankLogoBase64: String
  """Not yet implemented, will always be null. Is in the schema so the app can use the URL if available, falling back to base64"""
  beneficiaryBankLogoUrl: String
  beneficiaryBankName: String
  routingNumber: String
}

type CardStatement implements Node {
  endBalanceCents: Int
  """The ID of an object"""
  id: ID!
  paymentsTotalCents: Int
  periodEndTime: Time!
  periodStartTime: Time!
  rewardsTotalCents: Int
  """total spend on the statement in cents"""
  spendTotalCents: Int
  startBalanceCents: Int
}

type UpdateUserCategoriesPayload {
  clientMutationId: String!
  userCategories: [UserCategory!]
}

input UpdateExpensesSettingAutoDismissMatcherJsonInput {
  autoDismissMatcherJson: String!
  clientMutationId: String!
  id: ID!
}

input SetMonthlyUserLimitInput {
  amount: Int
  clientMutationId: String!
  userId: ID!
}

type CashTransactionDepositedChequeReturnDetails {
  """Details from the transaction this return was for"""
  originalDetails: CashTransactionDepositedChequeDetails!
  """The reason why the original transaction was returned"""
  returnReason: CashTransactionChequeReturnReason!
}

type ApiClient {
  clientId: String
  clientName: String
  clientUrl: String
}

input DeleteBillInput {
  clientMutationId: String!
  id: ID!
}

type IssueCollectionPayload {
  clientMutationId: String!
  collectionIntention: CollectionIntention!
}

input InputCashRecurringScheduleWeekly {
  cadence: Int!
  dayOfWeek: CashTransactionBusinessDay!
}

union FinancialSourcePayload = FinicityPayload | PlaidPayload | TellerPayload

input ActivateUserInfo {
  legalAgreements: [LegalAgreementReference]
  password: String!
}

enum DocumentOcrClassificationType {
  """The document classification is unknown"""
  INVALID
  IRS_147_C @deprecated(reason: "Use irs_147c")
  """A proof of EIN letter. This may be requested on demand by businesses."""
  IRS_147C
  """An EIN confirmation letter. Users receive this one time after applying for an EIN."""
  IRS_CP_575
}

enum ReferralRewardType {
  GIFT_CARD
  POINTS
  WAIVED_CARD_FEES
}

"""Metadata associated with receivables_offers account"""
type ReceivablesOffersAccountMetadata {
  """The effective fee program (free/default) for an account"""
  currentFeeProgram: ReceivablesOffersFeeProgram!
  """The fee program (free/default) an account is under when they onboard"""
  funnelFeeProgram: ReceivablesOffersFeeProgram!
}

input ValidateChequeImagesInput {
  amountUsdCents: Int!
  attemptNumber: Int!
  backImageAssetId: ID
  clientMutationId: String!
  depositsAccountId: ID!
  frontImageAssetId: ID
  validationType: ChequeImageValidationType
}

enum ReceivablesOffersAccountStatus {
  ACTIVE
  ACTIVE_TRIAL
  DEACTIVATED
  INVALID
  INVITED
  REJECTED
  SUSPENDED
}

type CreateStatementEntriesSearchReportPayload {
  clientMutationId: String!
  report: Report
}

enum OrderDirection {
  ASC
  DESC
}

input ConnectPlaidInstitutionInput {
  clientMutationId: String!
  """Plaid''s id of the institution"""
  plaidInstitutionId: String!
  """Public token from Plaid Link"""
  publicToken: String!
  """Whether account details should be pulled synchronously with this request"""
  shouldPullDetails: Boolean = false
}

type OnboardingInformationRequestEdge {
  cursor: String
  node: OnboardingInformationRequest
}

type XeroTrackingCategory {
  categoryName: String
  categoryNameId: String
  categoryOption: String
  categoryOptionId: String
  isInactive: Boolean
}

type InvoiceTemplate implements Node {
  """Company contact info of the invoice template."""
  contact: InvoicingContact
  """footer"""
  footer: String
  """Header"""
  header: String
  """The ID of an object"""
  id: ID!
  """Idempotency key."""
  idempotencyKey: String
  """Logo uri."""
  logoUri: String
  """Logo url."""
  logoUrl: String
  """note"""
  note: String
}

type PendingRecordApprovalResponse {
  approvalPaymentContext: ApprovalPaymentContext
  pendingRecordApproval: PendingRecordApproval!
}

type DeleteSubscriptionPayload {
  clientMutationId: String!
}

type ExpensesFlagEventConnection {
  edges: [ExpensesFlagEventEdge]
  pageInfo: PageInfo!
}

enum ExpensesSettingStatus {
  ACTIVE
  DISABLED
  PAUSED
}

type RewardsTriggerReferrerAward {
  referrerReward: RewardsPointReward!
  referrerRewardType: String!
}

type ApprovalsReviewAssignee implements Node {
  """The ID of an object"""
  id: ID!
  user: User
}

type PerMerchantStats implements Node {
  """The ID of an object"""
  id: ID!
  lastPurchaseTime: Time
  merchant: Merchant
}

type UpdateIntegrationCredentialPayload {
  clientMutationId: String!
  integration: Integration
}

type OnboardingApplicationEdge {
  cursor: String
  node: OnboardingApplication
}

enum NotificationType {
  COLLECTION_FAILED
  DELINQUENT
  DEPOSITS_BOOK_TRANSFER
  DEPOSITS_PAYMENT_APPROVAL_REQUEST
  DEPOSITS_PAYMENT_APPROVAL_RESPONSE
  DEPOSITS_PAYMENT_STATUS
  DEPOSITS_TRANSACTION_APPROVAL_REQUEST
  DEPOSITS_TRANSACTION_APPROVAL_RESPONSE
  DEPOSITS_TRANSACTION_BLOCKED_BY_POSITIVE_PAY
  DEPOSITS_TRANSACTION_STATUS
  DISCONNECTED_BANK_ACCOUNTS
  EXPENSES_REVIEWER
  FUNDING_SOURCE_VERIFICATION_FAILED
  GLOBAL_LIMIT_REACHED
  GLOBAL_LIMIT_WARNING
  LIMIT_DROP
  LIMIT_WARNING
  LIMIT_WARNING_LOW_CASH_BALANCE
  PRIMITIVES_CARD_TRANSACTION_APPROVED
  PRIMITIVES_EXPENSES_NEW_POLICY
  PRIMITIVES_EXPENSES_REVIEWER
  PRIMITIVES_EXPENSES_SPENDER
  PRIMITIVES_EXPENSES_UPDATE_POLICY
  RECEIPT_AUTOGENERATED
  STATEMENT_REQUEST
  TRANSACTION_APPROVED
  TRANSACTION_APPROVED_V2
  TRANSACTION_REFUSED
}

input Payee {
  contactId: ID!
  contactVersion: Int!
  paymentInstrumentId: ID!
  paymentInstrumentVersion: Int!
}

type MilesTransferConnection {
  edges: [MilesTransferEdge]
  pageInfo: PageInfo!
}

type DeleteBillPayload {
  clientMutationId: String!
}

type Constants {
  cashBank: CashBank!
  wireBank: WireBank!
}

"""
The funding source type for a payroll provider.
- deposits_account: Funded by a deposits account (Brex Cash)
- financial_account: Funded by an external financial account
- unknown: An unknown external source
"""
enum PayrollProviderFundingSourceAccountType {
  DEPOSITS_ACCOUNT
  FINANCIAL_ACCOUNT
  UNKNOWN
}

input CreatePayrollProviderInput {
  clientMutationId: String!
  depositsAccountId: ID!
  idempotencyKey: String!
  name: String
}

type RewardsTriggerEdge {
  cursor: String
  node: RewardsTrigger
}

input CreateSubscriptionsInput {
  channelId: ID!
  clientMutationId: String!
  notificationTypes: [NotificationType!]!
}

type ExpensesRule implements Node {
  description: String
  """The ID of an object"""
  id: ID!
  matcherJson: String
  name: String
  status: ExpensesRuleStatus
  type: ExpensesRuleType
}

type ReferUserPayload {
  clientMutationId: String!
  referral: ReferralRecord!
}

input SetAccountRestrictAchDebitsInput {
  clientMutationId: String!
  depositsAccountId: ID!
  restrictAchDebits: Boolean!
}

input CompletePendingRecordApprovalLoggedOutInput {
  approvalToken: String!
  approverUserId: String!
  clientMutationId: String!
  decision: PendingRecordApprovalDecision!
  decisionNotes: String
  decisionReason: PendingRecordApprovalDecisionReason
}

input AcceptMultipleReceivablesOffersGroupsInput {
  clientMutationId: String!
  offersGroupIds: [ID!]!
}

enum StatementEntryIntegrationStatus {
  EXPORTED
  FAILED
}

type IntegrationRule implements Node {
  body: Json
  """The ID of an object"""
  id: ID!
  name: String
  priority: Int
  type: String
}

type FileAsset {
  contentType: String
  name: String
}

enum ReceivablesOffersCustomerCheckName {
  ACTIVE_CURRENT_TARGET_ACCOUNT_CONNECTION
  AMAZON_SELLER_HEALTH
  EXPERIAN_STANDING
  FIRST_TRANSACTION_DATE
  FRAUD_FLAGS
  GENERAL_PURCHASER_CONCENTRATION
  HEALTHY_AND_HAS_SETTLED_COLLECTIONS_FUNDING_SOURCE
  HEALTHY_FUNDING_SOURCE
  HISTORICAL_DELINQUENCIES
  INVALID
  LAST_30D_SALES
  LOSS_OF_PRIVILEGES
  LOW_ESTIMATED_PAYOUT
  NON_PERFORMANT_PAYOUT
  NON_ZERO_PAYOUT
  ONBOARDING_PAYOUT_TO_BE_DEPOSITED_BREX_CASH
  ONBOARDING_PLATFORM_DEROGATORY_EVENTS
  PAYOUT_DEPOSITED_BREX_CASH
  PAYOUT_TO_BE_DEPOSITED_BREX_CASH
  PLATFORM_CONNECTION
  PLATFORM_DEROGATORY_EVENTS
  PLATFORM_DEROGATORY_EVENTS_CAP
  PRODUCT_AUTHENTICITY_DEFECTS
  PRODUCT_AUTHENTICITY_DEFECTS_CAP
  PROHIBITED_ITEMS
  SALES_VELOCITY
  STANDARD_PAYOUT_NET_SALES
  VERIFIED_FUNDING_SOURCE
  VERIFIED_OR_PENDING_FUNDING_SOURCE
}

type InvoicingAccount implements Node {
  """The customer_account_id of the invoicing account."""
  customerAccountId: String!
  """The default invoice template used to generate a formatted invoice document."""
  defaultInvoiceTemplate: InvoiceTemplate
  """The ID of an object"""
  id: ID!
  """The prefix for the invoice number."""
  invoiceNumberPrefix: String
  """Invoices for this account"""
  invoices(after: String, before: String, first: Int, last: Int, status: [InvoiceStatus]): InvoicingInvoiceConnection
  """The next invoice number for creating a new invoice."""
  nextInvoiceNumber: Int!
  """The status of the invoicing account (e.g., `ACTIVE`, `SUSPENDED`, `DEACTIVATED`)."""
  status: InvoicingAccountStatus!
}

type BillingPaymentIntentConnection {
  edges: [BillingPaymentIntentEdge]
  pageInfo: PageInfo!
}

type ExpensesFlagEdge {
  cursor: String
  node: ExpensesFlag
}

type ProductOffer {
  """Any offer-specific context"""
  context: Json
  """The sequence in which to present this offer"""
  order: Int!
  """The state of the offer"""
  state: OfferState!
  """List of steps to take associated with this offer"""
  steps: [OfferSetupStep]
  """The type of offer"""
  type: OfferType!
}

"""The metadata for a duplicate subscriptions type"""
type InsightMetadataDuplicateSubscriptions {
  """The relevant entries that associated with this spend alert"""
  duplicateSubscriptionsRelevantEntries: [StatementEntry]
}

type SetTransactionIntegrationFieldPayload {
  clientMutationId: String!
  lens: TransactionLens
}

enum ApprovalsRequestStatus {
  APPROVED
  CANCELLED
  DENIED
  PENDING
}

type EducationTileEdge {
  cursor: String
  """Education Tile Node"""
  node: EducationTile
}

input PushMarketoLeadsInput {
  clientMutationId: String!
  formId: String!
  leadAttributionMetadata: LeadAttributionMetadata
  leads: [String!]
  lookupField: String
  programName: String!
  reason: String
  source: String
}

type SetReceivablesOffersAccountOnboardingActionPayload {
  account: ReceivablesOffersAccount
  clientMutationId: String!
}

type CreateBillPayload {
  bill: Bill
  clientMutationId: String!
}

type ResyncBillsPayload {
  clientMutationId: String!
}

type DeleteSubscriptionsPayload {
  clientMutationId: String!
}

"""The account settings for a receivables_offers account. These settings are nil if the customer hasn''t set them yet"""
type ReceivablesOffersAccountSettings {
  """Has the customer opted into auto advance mode (null if not set)"""
  autoAdvanceMode: Boolean
  """Whether the customer indicated that they routed their Amazon payouts to Brex (null if not set)"""
  confirmedPayoutsRoutedToBrex: Boolean
  """The customer-indicated mappings of integration to financial account where that integration''s payouts are being deposited"""
  integrationFinancialAccountMappings: [ReceivablesOffersIntegrationFinancialAccountMapping]!
  """Has the customer opted out of instant payouts product (null if not set)"""
  optedOutOfInstantPayouts: Boolean
  """Whether the customer has opted to pay fee with rewards points (null if not set)"""
  payFeeWithRewards: Boolean
  """Whether the customer has revenue access enabled"""
  revenueAccessEnabled: Boolean
  """Whether the customer selected trial onboarding flow (null if not set)"""
  selectedTrialOnboarding: Boolean @deprecated(reason: "This field was used for initial feature rollout and is no longer used")
}

enum InvestmentType {
  PERCENTAGE_MMF
  TARGET_CASH_IN_CENTS
  TARGET_MMF_IN_CENTS
}

type SetupMfaPayload {
  clientMutationId: String!
  deviceId: String!
  deviceSecret: String
}

type EarlyAccessFeature implements Node {
  availablePlatforms: [EarlyAccessFeatureAvailablePlatform!]!
  availableUserRoles: [String!]!
  description: String!
  displayMediaAssets: [EarlyAccessFeatureMediaAsset!]!
  """The ID of an object"""
  id: ID!
  joinStatus: EarlyAccessFeatureJoinStatus!
  productTags: [String!]!
  thumbnailMediaAsset: EarlyAccessFeatureMediaAsset!
  title: String!
}

input InviteUserInput {
  clientMutationId: String!
  departmentId: ID
  email: Email!
  firstName: String!
  groups: [String]
  inviteIdempotencyKey: String
  isCorporateCardUser: Boolean
  lastName: String!
  locationId: ID
  managerId: ID
  requirePhysicalCard: Boolean
  role: UserRoleTypeInput!
  useOnboarding: Boolean
}

type ProcessAccountClosurePayload {
  clientMutationId: String!
}

input DeleteSubscriptionsInput {
  clientMutationId: String!
  ids: [ID!]!
}

input EditDepositsPaymentMemoInput {
  clientMutationId: String!
  memo: String
  paymentId: ID!
}

"""Response that determines whether account should see application."""
type ShouldSeeApplicationResponse {
  """Whether intial_market_segment was populated at time of request."""
  segmentAvailable: Boolean!
  """Whether account should see application."""
  shouldSeeApplication: Boolean
}

enum Status {
  FAILED
  PROCESSED
  PROCESSING
}

type DepositChequePayload {
  amount: Int!
  backImageAssetId: ID!
  chequeNumber: Int
  clientMutationId: String!
  expectedDeliveryDate: String
  frontImageAssetId: ID!
  recipientName: String
  senderName: String
  status: String!
}

input CreateResponseToRfiInput {
  arfiId: String!
  clientMutationId: String!
  responderCustomerUserId: String!
  responseItemsInput: [CreateRfiResponseItemInput]
  responseMessage: String
}

type CashTransactionAchDetails {
  """The financial account class"""
  accountClass: CashTransactionAccountClass
  """The counterparty''s account number"""
  accountNumber: String
  """The financial account type"""
  accountType: CashTransactionAccountType
  """The address of the recipient"""
  address: Address
  """The counterparty''s beneficiary bank information"""
  beneficiaryBank: CashTransactionBeneficiaryBank
  """The institution''s logo as a base64 PNG, if available"""
  beneficiaryBankLogoBase64: String
  """
  Output only. A 10-digit unique identifier used for identifying ACH entities
  Only exists for externally originated counterparties
  """
  companyId: String
  """The email of the recipient"""
  email: String
  """Whether the transaction was a debit or credit"""
  paymentMethod: CashTransactionPaymentMethod!
  """The counterparty''s routing number"""
  routingNumber: String
  """Entry description used to describe the transaction in NACHA"""
  transferDescription: String
}

"""Validation results of a payment instrument"""
type ValidatedPaymentInstrument {
  """Fields of a payment instrument that are valid or not (boolean)"""
  fields: Json
  """Enum whether the overall payment instrument is valid"""
  isValid: Boolean
}

type DepartmentEdge {
  cursor: String
  node: Department
}

enum ChequeImageValidationErrorSeverity {
  ERROR
  IGNORE
  WARNING
}

enum FinancialLoginFieldContentType {
  IMAGE
  PASSWORD
  TEXT
  UNKNOWN
  USERNAME
}

type Country {
  """ISO 3166-1 alpha-2 representation of a country (ex. ''US'' for United States)"""
  alpha2: CountryAlpha2!
  """ISO 3166-1 alpha-3 representation of a country (ex. ''USA'' for United States)"""
  alpha3: CountryAlpha3!
  """Human-readable name of the country"""
  displayName: String!
  """Official name of the country"""
  name: String!
  """ISO 3166-1 numeric representation of a country (ex. ''840'' for United States)"""
  numeric: String!
  """Additional data associated with the country"""
  restrictions: Restrictions!
}

type LoyaltyProgramConnection {
  edges: [LoyaltyProgramEdge]
  pageInfo: PageInfo!
}

type UpdateUserPermissionPayload {
  clientMutationId: String!
  """the updated user"""
  user: User!
}

type ReceiptEdge {
  cursor: String
  node: Receipt
}

input EditInvoiceInput {
  clientMutationId: String!
  depositsAccountId: ID
  discountAmount: FinancialAssetInput
  discountPercent: Float
  dueDate: Date
  idempotencyKey: String!
  invoiceId: ID!
  invoiceNumber: String!
  invoiceTemplateId: ID!
  lineItems: [InvoiceLineItemInput]
  memo: String
  payerContactId: ID
  subtotal: FinancialAssetInput
  totalAmount: FinancialAssetInput
}

type FinancialInstrument {
  code: InstrumentCode
  name: String
  tickerSymbol: String
}

input SendBillPaymentInput {
  clientMutationId: String!
  contactVersion: Int
  id: ID!
  idempotencyKey: String!
  paymentInstrumentVersion: Int
}

enum AccountMigrationStatus {
  ACKNOWLEDGED
  COMPLETE
  IN_PROGRESS
  INVALID
  NOT_STARTED
}

enum ReimbursementItemState {
  APPROVED
  CANCELED
  COMPLETED
  CREATED
  FAILED
  INVALID
  PAYMENT_PROCESSING
  PAYMENT_WITHDRAWING
  REJECTED
  REVOKED
  SUBMITTED
}

"""Response that encapsulates the original contact input and its validation result"""
type ValidatedVendorContactInput implements Node {
  """Original contact input"""
  data: VendorContactInputData!
  """The ID of an object"""
  id: ID!
  """Validation for the contact input"""
  validation: VendorContactInputValidation!
}

union CredentialPayload = CredentialAmazonMwsPayload | CredentialQbdPayload | CredentialQuickbooksPayload | CredentialShopifyPayload | CredentialVendorPayload | CredentialWeavPayload | CredentialXeroPayload

type ModifyPreapprovedCardSettingsPayload {
  card: Card!
  clientMutationId: String!
}

enum ExpensesFlagEventAction {
  COMMENT
  CREATE
  DISMISS
  RESOLVED
}

type CashRecurringScheduleDurationWithEndsAt {
  """Keep creating transactions until the `ends_at` date"""
  endsAt: Time!
}

"""Runway projections for a given time range"""
type InsightsRunwayProjection {
  """End of the projection time range (exclusive)"""
  endAt: Time!
  """
  Projected balance (USD) in the account at the end of the
  projection time range (end_at)
  """
  projectedBalanceUsdCents: Long!
  """The cash the business is burning within the time period"""
  projectedBurnRate: Long!
  """
  Projected amount (USD) that will be brought into the account during the
  projection time range
  """
  projectedMoneyInUsdCents: Long!
  """
  Projected amount (USD) that will leave the account during the
  projection time range
  """
  projectedMoneyOutUsdCents: Long!
  """Start of the projection time range (inclusive)"""
  startAt: Time!
}

type FinicityConnectGenerateFixUrlPayload {
  clientMutationId: String!
  url: String!
}

type IntegrationEdge {
  cursor: String
  node: Integration
}

type DepositsPaymentConnection {
  edges: [DepositsPaymentEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

interface Node {
  """The id of the object."""
  id: ID!
}

"""Parameters that were part of this account''s last analysis"""
type UnderwritingParameters {
  """If this account uses connected bank underwriting"""
  useConnectedBank: Boolean!
  """If this account uses statement-based underwriting"""
  useStatements: Boolean!
}

type StartResetUserPayload {
  clientMutationId: String!
}

type UpdateExpensesSettingStatusPayload {
  clientMutationId: String!
  expensesSetting: ExpensesSetting
}

type ApprovalsRequestReimbursement {
  customerAccountId: ID!
  customerUserId: ID!
  reimbursementItem: ReimbursementItem
  updatedAt: Time!
}

type FinancialStatementAccountEdge {
  cursor: String
  node: FinancialStatementAccount
}

input SetReceivablesOffersSellerAccountHasSeenFailingChecksErrorBannerInput {
  clientMutationId: String!
  sellerAccountId: ID!
  value: Boolean!
}

union CardOverviewSummaryTile = CurrentBalanceTile | PaymentDetailsTile

input CountriesListFilters {
  """Filter to exclude sanctioned for card shipping from the list of countries returned"""
  excludeSanctionedForCardShipping: Boolean
}

type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input RemoveFinancialSourceInput {
  clientMutationId: String!
  financialSourceId: ID!
}

input TerminateCardInput {
  clientMutationId: String!
  id: ID!
  terminationDescription: String
  terminationReason: TerminationReason
}

input UpdateApprovalsReviewInput {
  clientMutationId: String!
  description: String
  requestSnapshot: ApprovalsRequestInput
  reviewId: ID!
  status: ApprovalsReviewStatus!
}

enum HrisAggregatorVendor {
  MERGE
}

type CollectionAttempt implements Node {
  amount: Int
  collectionDate: Time
  collectionIntention: CollectionIntention
  errorCode: String
  failureType: CardPaymentFailureType @deprecated(reason: "Switch to v2 version of field including new `non_transaction_account` member")
  failureTypeV2: CardPaymentFailureTypeV2
  failureTypeV3: CardPaymentFailureTypeV3
  fundingSource: FundingSource
  """The ID of an object"""
  id: ID!
  originatorId: String
  originatorType: String
  peekDetails: CollectionAttemptPeekDetails
  presentCollectionIntentionId: String
  providerCollectionId: String
  providerName: String
  scheduledDate: Time
  statement: LegacyCardStatementPeriodBoundaries
  status: String
}

type ConnectAmazonMwsCredentialPayload {
  authenticationResult: CredentialAuthenticationResult
  clientMutationId: String!
}

"""
The counterpart to a Rfi, providing the Information requested by a specific
RfiItem (a document, or a text response). Whether or not the response is
valid is something determined by the reviewer (usually the requestor).
"""
type RfiResponse {
  message: String
  responderCustomerUser: User!
  responseItems: [RfiResponseItem]
}

enum CreditMarketingOfferStatus {
  ACCEPTED
  CANCELLED
  OFFERED
  PENDING
  REJECTED
}

type SetPrimaryFundingSourcePayload {
  clientMutationId: String!
  fundingSource: FundingSource!
}

enum CashTransactionAccountClass {
  BUSINESS
  INVALID
  PERSONAL
}

type CompleteCashTransactionApprovalPayload {
  clientMutationId: String!
  transaction: CashTransaction!
  transactionApprovalResult: CashTransactionApprovalResult!
}

input ChequePaymentInstrumentFindInput {
  address: AddressInput!
  recipientName: String!
}

type ActivateUserPayload {
  authType: ActivateUserAuthType!
  clientMutationId: String!
  session: Session
  token: String!
  user: User
}

type RemoveFspBookkeeperUserPayload {
  clientMutationId: String!
  groupUrn: String
}

type LimitUtilizationTile implements Node {
  """Customer''s limit"""
  globalLimit: Int!
  """The ID of an object"""
  id: ID!
  """Limit utilization status, check enum limit_utilization_status for more details"""
  limitUtilizationStatus: LimitUtilizationStatus!
}

type CredentialEdge {
  cursor: String
  node: Credential
}

type RewardsRefund implements Node {
  """The ID of an object"""
  id: ID!
  pointsCost: Int!
  redeemer: User!
  refundedStatementEntry: StatementEntry! @deprecated(reason: "This feature is slated for removal")
}

type FedachParticipant implements Node {
  changeDate: String!
  customerAddress: String!
  customerAreaCode: String!
  customerCity: String!
  """The institution''s logo as a base64 PNG, if available"""
  customerLogoBase64: String
  customerName: String!
  customerPhonePrefix: String!
  customerPhoneSuffix: String!
  customerState: String!
  customerZip: String!
  customerZipExt: String!
  dataViewCode: String!
  """The ID of an object"""
  id: ID!
  institutionStatusCode: String!
  newRoutingNumber: String!
  officeCode: String!
  recordTypeCode: String!
  routingNumber: String!
  servicingFrbNumber: String!
}

input UpdateIntegrationRuleInput {
  body: Json
  clientMutationId: String!
  id: ID!
  name: String
  priority: Int
}

enum IntegrationRulesFilterFacetType {
  CONFLICTING
  CUSTOM
  MERCHANT
  OVERRIDE
}

enum PromotionsCtaAction {
  ADD_TEAMMATES
  CASH_TOUR
  CONNECT_PAYROLL
  CREATE_API_TOKEN
  HRIS
  INSTANT_PAYOUTS
  ONE_PASSWORD
  PREMIUM_UPSELL
  REFERRALS
  ZAPIER
}

type RewardsRedemptionDetails {
  initiatedByCustomerUser: User
  pointsRedeemed: Int!
}

type SubmitOnboardingInformationRequestPayload {
  clientMutationId: String!
  informationRequest: OnboardingInformationRequest!
}

"""Year for Rewind video"""
enum MarketingRewindYear {
  """2020"""
  YEAR_2020
}

"""The metadata for a spend increase type"""
type InsightMetadataSpendIncrease {
  """The current amount"""
  currentAmount: Float
  """The past month amounts"""
  pastMoAmounts: Json
  """The percent increase threshold"""
  pctIncreaseThreshold: Float
  """The previous amount before the spend increase"""
  previousAmount: Float!
  """The relevant entries that associated with this spend alert"""
  spendIncreaseRelevantEntries: [StatementEntry]
  """The amount that triggers this alert"""
  triggerAmount: Float
}

type AdminUpdateApprovalsReviewsPayload {
  approvalsReviews: [ApprovalsReview!]
  clientMutationId: String!
}

type GenerateReceivablesOffersGroupReportPayload {
  clientMutationId: String!
  offersGroupReportUri: String!
}

type InvestmentPolicyBreakdown {
  amount: Int!
  investmentType: InvestmentType!
  isOperative: Boolean!
}

"""A generic value type the column is an arbitrary string"""
type MuteValueRaw {
  """The raw string value for this generic value type"""
  rawValue: String
}

type FinicityConnectMigrateAccountsPayload {
  clientMutationId: String!
  updatedSource: FinancialSource
}

enum TimeBucketStrategy {
  CALENDAR
  END
  INVALID
  START
}

input OptIntoIncentiveCampaignInput {
  clientMutationId: String!
  customerAccountId: ID
  """The placement id"""
  placementId: ID!
}

type OnboardingFormUwEcommerceConnection {
  _: Boolean
}

type DisconnectPayrollProviderIntegrationPayload {
  clientMutationId: String!
}

input BulkCreateSpendAlertEventInput {
  action: CardTransactionInsightEventAction!
  alertIds: [ID]!
  clientMutationId: String!
  eventMetadata: Json
}

input SetupMfaInput {
  clientMutationId: String!
  mfaDeviceType: MfaPrimaryMethod!
  phoneNumber: String!
}

"""Connection Node Type Credit Limit Factor Tile"""
type CreditLimitFactorTileConnection {
  edges: [CreditLimitFactorTileEdge]
  pageInfo: PageInfo!
}

enum BillStatus {
  ADMIN_APPROVAL_REQUIRED
  APPROVAL_REQUIRED
  DELETED
  DRAFT
  PAYMENT_PROCESSED
  PAYMENT_PROCESSING
  PAYMENT_SCHEDULED
}

type InvoiceLineItem {
  """Description item. e.g. product / service."""
  description: String!
  """Quantity of the description item."""
  quantity: Int!
  """Total amount of the line item"""
  totalAmount: FinancialAsset!
  """Unit price of the description item."""
  unitPrice: FinancialAsset!
}

type NetsuiteCategories {
  accountsPayableUserCategory: UserCategory
  collectionTargetUserCategory: UserCategory
  """reimbursements user category"""
  reimbursementsUserCategory: UserCategory
  rewardsIncomeUserCategory: UserCategory
  vendorName: String
}

type MarkOfferSeenPayload {
  clientMutationId: String!
}

enum RewardsPointsHistoryEntryDescriptionType {
  ASCENDA
  CASH
  CRYPTO
  GIFT_CARD
  INCENTIVE_BONUS
  INSTANT_PAYOUTS_FEE
  OPERATIONAL
  OTHER
  PAYROLL_LINK_BONUS
  SPEND_ACCRUAL
  SPEND_BONUS
  STATEMENT_CREDIT
  TRAVEL
}

input CreatePushChannelInput {
  clientMutationId: String!
  deviceInformation: DeviceInformationInput!
  deviceToken: String!
  type: PushProviderType!
}

type CashTransactionPayee {
  """Contact object associated with this Transaction"""
  contact: PaymentContact
  """Payment Instrument object associated with this Transaction"""
  paymentInstrument: PaymentInstrument
}

type FinancialAccountDetails {
  """Last 4 digits of account number if it exists."""
  accountNumberLast4: String
  """Last 4 digits of routing number if it exists."""
  routingNumberLast4: String
  type: FinancialAccountType
}

"""Business activities that can lead to Statement Entries"""
enum StatementEntryActivityType {
  CARD_TRANSACTION
  COLLECTION
  REWARD
}

type RewardsTrigger implements Node {
  description: String!
  """The ID of an object"""
  id: ID!
  name: String!
  payload: RewardsTriggerPayload!
  rewardsTriggerInstances(after: String, before: String, first: Int, last: Int): RewardsTriggerInstanceConnection
  type: RewardsTriggerType!
}

enum FinancialsVendor {
  DEPOSITS
  FINICITY
  MANUAL
  OCROLUS
  PLAID
  TELLER
}

type CreateExpensesSettingPayload {
  clientMutationId: String!
  expensesSetting: ExpensesSetting
}

enum PayrollStatus {
  AUTHENTICATED
  DATA
  INITIATED
}

enum OnboardingInformationRequestStatus {
  COMPLETE
  IN_PROGRESS
  NEW
}

enum CreditMarketingOfferType {
  FICO_TRADITIONAL_CHARGE
}

input RefreshFinancialSourceInput {
  clientMutationId: String!
  financialSourceId: ID!
}

type OfferSetupStep {
  """Whether or not this step has been completed"""
  completed: Boolean!
  """A step in the offer flow"""
  step: OfferSetupStepType!
}

type DepositsProcessingAndFuturePaymentDateEdge {
  cursor: String
  node: DepositsProcessingAndFuturePaymentDate
}

input BulkInviteUsersInput {
  clientMutationId: String!
  users: [UserInvite!]!
}

"""Internally initiated by a Brex employee"""
type InternalInitiated {
  """A placeholder always true field to make the object queryable"""
  internal: Boolean
}

enum PremiumSettingPricingScheme {
  BETA_GRANDFATHER
  BETA_UPGRADED
  CUSTOM
  INVALID
  LEGACY_EXPENSE_BETA
  ONE_POINT_PER_DOLLAR
  PROMOTIONAL_CAMPAIGN
  STANDARD
}

type DeletePositivePayAccountSettingPayload {
  clientMutationId: String!
  positivePayAccountSetting: PositivePayAccountSetting!
}

input CompletePromotionInput {
  clientMutationId: String!
  promotionName: String!
}

"""Cash linked account bonus"""
type CashLinkedAccountBonus {
  completedAt: Time
  expiresAt: Time
  rewardAmount: Int!
  status: CashBonusStatus!
}

type RewardsAccrualEntryEdge {
  cursor: String
  node: RewardsAccrualEntry
}

type ExpensesItemConnection {
  edges: [ExpensesItemEdge]
  pageInfo: PageInfo!
}

type CollectionAttemptConnection {
  edges: [CollectionAttemptEdge]
  pageInfo: PageInfo!
}

type CardPaymentForwarderInvoice {
  invoiceAssetId: String
  invoiceNumber: String
}

type StartIntegrationExportPayload {
  clientMutationId: String!
  """Export_attempt_id to use for tracking export status and getting results"""
  exportAttemptId: ID
}

type UpdateIntegrationRulePayload {
  clientMutationId: String!
  integrationRule: IntegrationRule
}

type UpdatePaymentInstrumentPayload {
  clientMutationId: String!
  paymentInstrument: PaymentInstrument!
}

input UpdateExpensesSettingStatusInput {
  clientMutationId: String!
  id: ID!
  status: ExpensesSettingStatus!
}

input SetDepositsTransactionPaymentMemoInput {
  clientMutationId: String!
  memo: String
  transactionId: ID!
}

type ApprovalsRequestConnection {
  edges: [ApprovalsRequestEdge]
  pageInfo: PageInfo!
  """The total number of requests"""
  totalCount: Int!
}

type OnboardingApplicationStateEmpty {
  _: Boolean
}

type OnboardingPageUwBankConnection {
  amountNeededConnectedBank: Int
  amountNeededStatements: Int
  canSkipStatements: Boolean!
  content: OnboardingFormUwBankConnection!
  financialProductType: FinancialProductType
  requestReason: OnboardingUnderwritingBankConnectionRequestReason
  shouldPromptStatements: Boolean!
}

input CreateReimbursementReportInput {
  clientMutationId: String!
  displayTime: Time!
  filters: Json!
}

input ApprovalsRequestReimbursementInput {
  customerAccountId: ID!
  customerUserId: ID!
  reimbursementItemId: ID!
  updatedAt: Time!
}

enum ApprovalsSettingStatus {
  DISABLED
  ENABLED
}

type CardTransactionFraudAlert implements Node {
  creationDate: Time
  """The ID of an object"""
  id: ID!
  status: ConfirmationStatus!
  transaction: Transaction!
}

input UpdateAccountAddressInput {
  address: AddressInput!
  clientMutationId: String!
  updateExistingCardAddresses: Boolean
}

type GetExportAttemptStatePayload {
  clientMutationId: String!
  """Report download URL (for CSV exports)"""
  downloadUrl: String
  """Status of export attempt"""
  status: String
}

enum ClosureStatus {
  COMPLETE
  NOT_STARTED
  REFUND_PROCESSING
}

type InstantPayoutsFeePayload {
  usdCentsPerPoint: Float!
}

input GetExportAttemptStateInput {
  clientMutationId: String!
  """export_attempt_id is returned by start_integration_export response"""
  exportAttemptId: String
}

type ApprovalsSetting implements Node {
  defaultPolicy: ApprovalsPolicy!
  """The ID of an object"""
  id: ID!
  status: ApprovalsSettingStatus!
}

type CreateNonPrimaryDepositsAccountPayload {
  clientMutationId: String!
  depositsAccount: DepositsAccount!
}

type SemiMonthlyClosingStrategy {
  firstDay: Int
  secondDay: Int
}

type CalculateCreditMarketingOfferPayload {
  clientMutationId: String!
  offer: CreditMarketingOffer
  result: CalculateCreditMarketingOfferResultStatus!
}

enum AffiliateBonusStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  INVALID
}

type TransactionLens implements Node {
  billableStatus: BillableStatus
  displayFieldEntities: [ExternalIntegrationEntity]
  displayFields: Json
  externalClass: ExternalIntegrationEntity
  """The ID of an object"""
  id: ID!
  """
  Returns the computed integration field entities from integration rule engine for a txn.
  We return a list of PEIEs as the PEIF data exists on the object itself to match in the frontend.
  """
  integrationFieldEntities: [ExternalIntegrationEntity]
  ruleEvaluations: [IntegrationRuleEvaluation]
  transaction: Transaction
  userCategory: UserCategory
}

type InvoicingContact implements Node {
  """Address"""
  address: ContactAddress
  """Type of contact. e.g. Invoicer, Payer"""
  contactType: ContactType!
  """Doing Business As"""
  dbaName: String
  """Email"""
  email: String
  """The ID of an object"""
  id: ID!
  """Phone number"""
  phone: String
}

type RoleRulePredicate {
  customerAccountId: String
  customerUserId: String
}

input UpdateReimbursementMetadataInput {
  clientMutationId: String!
  reimbursementItemId: ID!
  updatedReimbursementMetadata: ReimbursementMetadataInput!
}

type EnableIntegrationPayload {
  clientMutationId: String!
  """The enabled integration"""
  integration: Integration
}

type BalanceBreakdown {
  """The unsigned sum of all transactions. Transactions that add money to the Cash account are included only if they have been fully processed (transaction has hit the bank). Transactions that remove money from the Cash account are removed once the transaction is started."""
  availableBalance: Int!
  """Unsigned sum of transactions that haven''t finished processing (both for incoming and outgoing transactions)."""
  processingBalance: Int!
  """Card transactions for the day that accumulate until it''s processed from the Cash account at the end of the day."""
  sameDayCardBalance: Int!
  """Unsigned sum of transactions that are scheduled for the future (both for incoming and outgoing transactions)."""
  scheduledFundsAmount: Int!
}

"""The collection information for the offers group (advance)"""
type ReceivablesOffersOffersGroupCollectionInfo {
  """The total amount that has been collected so far"""
  totalCollectedAmount: FinancialAsset!
  """The total points that have been redeemed to pay for fees"""
  totalPointsRedeemed: Int!
  """The value of these points (in cents)"""
  totalPointsValue: FinancialAsset!
}

type OnboardingPageFundingSource {
  _: Boolean
  content: OnboardingFormEmpty!
}

type SetStatementEntryIntegrationFieldPayload {
  clientMutationId: String!
  lens: StatementEntryLens
}

"""View data for rewards page threshold bonuses"""
type IncentivePlacementViewDataRewardsPageThreshold {
  """Bonus if achieved (cents)"""
  bonus: Int!
  """Description of bonus (potentially to put in modal)"""
  description: String!
  """Time when the user was paid the points, null if they haven''t been paid"""
  payedOutAt: Time
  """Placement"""
  placement: IncentivePlacement!
  """Progress (cents) i.e $500 in $500/$1000"""
  progress: Int!
  """Short description (quick summary)"""
  shortDescription: String!
  """Status of the bonus"""
  status: IncentivePlacementViewDataStatus
  """Threshold (cents) i.e $1000 in $500/$1000"""
  threshold: Int!
  """Title"""
  title: String!
}

type Role implements Node {
  description: String
  """The ID of an object"""
  id: ID!
  name: String!
  rules: [RoleRule]
}

"""Object defining brex-originated ach debit limits"""
type AchDebitLimits {
  """The length of the payout delay in business days for ach debits"""
  achDebitPayoutDelay: Int!
  """The remaining limit available for making ach debits today"""
  achRemainingLimitToday: Int!
  """The remaining limit available for making ach debits tomorrow"""
  achRemainingLimitTomorrow: Int!
  """The total limit definition for brex-originated ach debits"""
  achTotalLimitUsdCents: Int!
  """The next business day, inclusive of today. ex if today=Friday, return Friday''s date. if today=Saturday, return Monday''s date"""
  firstAvailableBusinessDay: Time!
  """The second next business day, inclusive of today. ex if today=Monday, return Tuesdays''s date. if today=Friday, return Monday''s date"""
  secondAvailableBusinessDay: Time!
}

"""Represents a single aggregation in a time range for transactions"""
type InsightsAggregateTransaction {
  """Cash balance at the end_at date"""
  balanceUsdCents: Long!
  """The cash the business is burning within the time period"""
  burnRate: Long!
  """End timestamp for aggregation value"""
  endAt: Time!
  """Aggregate money in value in usd cents"""
  moneyInUsdCents: Long!
  """Aggregate money out value in usd cents"""
  moneyOutUsdCents: Long!
  """Start timestamp for aggregation value"""
  startAt: Time!
}

type NotificationSubscriptionEdge {
  cursor: String
  node: NotificationSubscription
}

union RewardsTriggerInstanceState = RewardsTriggerInstanceStateCashActivationCardSpendBonus | RewardsTriggerInstanceStateEmpty | RewardsTriggerInstanceStateReferredAmountSpent

enum DepositsAccountsDisplayColor {
  GREEN_BASELINE
  INVALID
  JAM
  NAVY_MID
  OCEAN
  ORANGE_BASELINE
  PURPLE_BASELINE
  ROYAL
  YELLOW_BASELINE
}

type CheckReceivingMethod {
  address: Address
}

"""An account representing activity corresponding to a set of loan terms"""
type JournalAccount implements Node {
  """The ID of an object"""
  id: ID!
}

input CompletePendingRecordApprovalInput {
  clientMutationId: String!
  decision: PendingRecordApprovalDecision!
  decisionNotes: String
  decisionReason: PendingRecordApprovalDecisionReason
  paymentId: ID!
}

type MarketingRewindVideo {
  asset: Asset
  user: User
  watched: Boolean!
  year: MarketingRewindYear!
}

"""Customer imported from Quickbooks"""
type QuickbooksCustomer {
  """Customer name from QuickBooks"""
  name: String
}

enum PromotionsTheme {
  DARK
  LIGHT
}

enum ReturnReason {
  ACCOUNT_NOT_FOUND
  CORPORATE_CUSTOMER_ADVISES_NOT_AUTHORIZED
  CREDIT_ENTRY_REFUSED_BY_RECEIVER
  INCORRECTLY_CODED_OUTBOUND_INTERNATIONAL_PAYMENT
  INSUFFICIENT_FUNDS
  UNKNOWN
}

"""Schema for external integration fields"""
type ExternalIntegrationField implements Node {
  deletedAt: Time
  """Key used in the ERP for custom fields"""
  externalKey: String
  """Extra metadata specified for custom fields, i.e. { field_type: ''string'' }"""
  externalMetadata: Json
  """The ID of an object"""
  id: ID!
  integrationId: ID!
  isInactive: Boolean
  """Human-readable name used for custom fields, i.e. Colour, City"""
  name: String
  type: IntegrationFieldType!
}

enum PaymentApprovalResult {
  ALREADY_PROCESSED
  INVALID
  SUCCESSFULLY_UPDATED
}

type TerminateCardPayload {
  clientMutationId: String!
}

union DepositsTransactionDetails = AchDetails | AchReturnDetails | BookTransferDetails | BrexOperationalTransferDetails | BrexOriginatedChequeDetails | CardCollectionDetails | DepositsAdminBalanceAdjustmentDetails | DividendDetails | ExternallyOriginatedChequeDetails | FboTransferDetails | InterestDetails | IntraCustomerAccountBookTransferDetails | PaymentDetails | ReceivablesOffersAdvanceDetails | ReceivablesOffersRepaymentDetails | RewardsRedemptionDetails | WireDetails

type Export implements Node {
  errorMessage: String
  """The ID of an object"""
  id: ID!
  insertedAt: Time!
  status: String!
}

input CreatePaymentEarlyAuthBalanceDecreaseCommitmentInput {
  clientMutationId: String!
}

type CashRecurringScheduleMonthlyByWeek {
  """Number of months between successive transactions"""
  cadence: Int!
  """Day of the week to schedule transactions"""
  dayOfWeek: CashTransactionBusinessDay!
  """Week of the month to schedule transactions"""
  weekOfMonth: Int!
}

type DisputeTransactionEdge {
  cursor: String
  node: DisputeTransaction
}

type RemoveFinancialSourcePayload {
  clientMutationId: String!
  financialSources(after: String, before: String, first: Int, last: Int): FinancialSourceConnection
}

type RedeemStatementEntryRefundPayload {
  account: Account!
  clientMutationId: String!
  refundedStatementEntry: StatementEntry!
}

type MostRecentTransactionsTile implements Node {
  """The ID of an object"""
  id: ID!
  """Statement Entries"""
  statementEntries: [StatementEntry!]!
}

type BillingPaymentIntentEdge {
  cursor: String
  node: BillingPaymentIntent
}

type PaymentApproval implements Node {
  decision: PaymentApprovalDecision!
  """The ID of an object"""
  id: ID!
  paymentApprovers: [PaymentApprover]
  pendingRecordId: ID!
  updatedAt: Time
}

type MonthlyUserLimitInfo {
  activeAmount: Int
  normalAmount: Int
  override: MonthlyUserLimitOverride
}

type DocumentOcrParsedDetails implements Node {
  """The EIN extracted from the document. Not present for all documents."""
  ein: DocumentOcrParsedDetailsDetail
  """The ID of an object"""
  id: ID!
  """The Name extracted from the document. Not present for all documents."""
  name: DocumentOcrParsedDetailsDetail
}

input EnableIntegrationInput {
  clientMutationId: String!
  """id is integration id"""
  id: ID!
}

"""Auto initiated by a Brex system"""
type AutoInitiated {
  """The originator id of the auto initiated payment"""
  originatorId: String
  """The originator type of the auto initiated payment"""
  originatorType: String!
}

input StartResetUserInput {
  clientMutationId: String!
  user: StartResetUserUserInput!
}

type FundingSource implements Node {
  data: FundingSourceData
  disabledOnTimestamp: Time
  """Load financial account when provenance of funding source. Null for other provenance types."""
  financialAccount: FinancialAccount
  """Contains relevant information determining the health of a funding source (errors, warnings, etc.)"""
  health: FundingSourceHealth!
  """The ID of an object"""
  id: ID!
  isBrexCash: Boolean
  """Whether this funding source is disabled by servicing team, meaning we can no longer collect from here"""
  isManuallyDisabledByServicing: Boolean!
  priority: FundingSourcePriority
  provenance: FundingSourceProvenance
  provenanceId: String
  type: String
}

"""The customer-indicated mapping of integration to financial account where that integration''s payouts are being deposited"""
type ReceivablesOffersIntegrationFinancialAccountMapping {
  """The id of the financial_account"""
  financialAccountId: String!
  """The id of the integration"""
  integrationCredentialId: String!
}

"""Financial Asset wrapper"""
type FinancialAsset {
  """The instrument code (usd, etc.). Currently, only usd is supported."""
  instrumentCode: FinancialInstrumentCode!
  """The amount in cents"""
  quantityCents: Int!
}

scalar SafeString

input DismissCardFraudAlertsInput {
  clientMutationId: String!
  transactionIds: [ID!]!
}

"""
A generic input type to create a connection
Add fields to represent specific vendors and the connection parameters they require
We only represent merge''s connection input type for now
"""
input VendorConnectionCreationInput {
  """A merge connection is a type of vendor connection we can make. This field represents the input we need for it."""
  mergeHrisConnectionInput: MergeHrisConnectionInput
}

"""muting config for an alert type"""
input AlertTypeMutingConfigurationsInput {
  alertType: SpendAlertType!
  mutingConfigurations: [MutingConfigurationInput!]!
}

type CreatePaymentInstrumentPayload {
  clientMutationId: String!
  paymentInstrument: PaymentInstrument!
}

type ReimbursementItemEdge {
  cursor: String
  node: ReimbursementItem
}

input DomesticWirePaymentInstrumentFindInput {
  accountNumber: String!
  routingNumber: String!
}

type PaymentHistoryTile implements Node {
  """The ID of an object"""
  id: ID!
  """Whether or not spend has been suspended due to servicing, likely from a failed payment"""
  isSpendSuspended: Boolean!
}

type CashTransactionDividendDetails {
  """Financial instrument the dividend was for (e.g. MMF ticker)"""
  financialInstrument: FinancialInstrument
  """When the dividend payout was initiated, which could differ from the settled_at time"""
  paidOnDate: Date
}

enum SpendAggregateGroupKey {
  CARD_ID
  DAY
  DEPARTMENT_ID
  INVALID
  MERCHANT_CATEGORY_ID
  MERCHANT_ID
  USER_CATEGORY_ID
  USER_ID
}

type CashTransactionDepositedChequeDetails {
  """A temporary URL pointing to an image of the back of the cheque"""
  backImageUrl: String
  """Memo found in the physical cheque"""
  chequeMemo: String
  """A temporary URL pointing to an image of the front of the cheque"""
  frontImageUrl: String
  """Sender name found in the physical cheque"""
  senderName: String
}

type GeneratePlaidLinkTokenPayload {
  clientMutationId: String!
  linkToken: String!
}

type CreateExpensesFlagEventPayload {
  clientMutationId: String!
  expensesFlag: ExpensesFlag
}

type EditDepositsPaymentMemoPayload {
  clientMutationId: String!
  payment: DepositsPayment!
}

"""Contains information for the each step to be completed for the checkbox reward"""
type RewardsPageCheckboxStep {
  """short description for the step"""
  description: String!
  """whether the customer has completed this step or not"""
  status: IncentivePlacementRewardsPageCheckboxViewDataStepStatus!
}

type BatchCreateContactsPayload {
  clientMutationId: String!
  createdContacts: [PaymentContact!]
}

input GenerateDepositsTransactionConfirmationDownloadUrlInput {
  clientMutationId: String!
  """transaction id"""
  depositsTransactionId: ID!
  """Json formatted string with transaction detail """
  transactionDetailString: String!
}

type ConnectTellerInstitutionPayload {
  clientMutationId: String!
  result: FinancialSource!
}

type CashRecurringScheduleWeekly {
  """Number of weeks between successive transactions"""
  cadence: Int!
  """Day of the week to schedule transactions"""
  dayOfWeek: CashTransactionBusinessDay!
}

input MonthlySchedule {
  dayOfMonth: Int
  dayOfWeek: BusinessDays
  nMonths: Int!
  weekOfMonth: Int
}

type CashTransactionRewardsRedemptionDetails {
  """Reward points redeemed for this transaction"""
  pointsRedeemed: Int!
}

input ProcessDocumentInput {
  assetId: String
  requestId: String
}

enum CashTransactionBusinessDay {
  FRIDAY
  INVALID
  MONDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

input UpdateCardPinInput {
  clientMutationId: String!
  id: ID!
  pin: String!
}

input RedeemStatementEntryRefundInput {
  clientMutationId: String!
  redemptionOfferId: String!
  statementEntryId: ID!
}

type MonthlyClosingStrategy {
  dayOfMonth: Int
}

input StartDepositsOffboardingInput {
  clientMutationId: String!
  closureReason: DepositsAccountClosureReason!
  depositsAccountId: ID!
}

type GenerateDepositsStatementDocumentDownloadUrlPayload {
  clientMutationId: String!
  depositsStatementPdfDownloadUrl: String
}

input ApprovalsRoutingRuleManagerInput {
  """A list of fallback approvers when the request initiator does not have a manager"""
  fallbackApproverUserIds: [String!]!
}

input CancelReimbursementInput {
  clientMutationId: String!
  reimbursementItemId: ID!
}

type CreatePaymentPayload {
  clientMutationId: String!
  payment: DepositsPayment!
}

type DeleteHrisConnectionPayload {
  clientMutationId: String!
}

input CreateAccountInput {
  clientMutationId: String!
  dateEstablished: Time!
  dbaName: String!
  incorporationState: String!
  incorporationType: AccountIncorporationTypeInput!
  legalName: String!
  officeAddress: AddressInput!
  principalUser: AccountPrincipalUserInput
  taxpayerNumber: String!
}

type SpendAggregateTimeSeriesConnection {
  edges: [SpendAggregateTimeSeriesEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""The approval step details"""
type ApprovalsStep {
  """A list of allowed approvers for this step"""
  approvers: [ApprovalsUser]
}

type RootQueryType {
  """Internal query supporting federation. Do not use in client calls."""
  cardEntity(id: ID): Card!
  department(id: ID!): Department
  financialDocuments(after: String, before: String, first: Int, last: Int): FinancialBankStatementDocumentConnection
  recurringRulesAndFutureDates(endsOn: Date, monthlySchedule: MonthlySchedule, paymentRail: PaymentRail!, sendOn: Date!, totalNumberOfPayments: Int, weeklySchedule: WeeklySchedule): RecurringRulesAndFutureDates
  searchUsers(after: String, before: String, canAccessCorporateCards: Boolean, departmentId: ID, displayRole: UserRoleTypeInput, first: Int, last: Int, locationId: ID, managerId: ID, preapprovedCards: Boolean, searchText: String, status: String): UserConnection
  positivePayAccountSetting(id: ID!): PositivePayAccountSetting
  validateLoyaltyProgramMembershipId(loyaltyProgramId: ID!, membershipId: String!): Boolean
  """Underwriting model for this account"""
  underwritingModelClassName: UnderwritingModelName!
  """internal entity sync errors"""
  internalEntitySyncErrors(after: String, entityType: String!, first: Int, integrationId: ID!): InternalEntitySyncErrorConnection
  fraudAlerts(after: String, before: String, customerUserId: ID!, first: Int, last: Int): FraudAlertConnection
  verifyAddress(address1: String!, address2: String!, city: String!, country: String, state: String!, zip: String!): VerifyAddressResponse
  """details about manager setup"""
  managerSetupSummary: ManagerSetupSummary
  currentCardStatementPolicy: CardStatementPolicy
  transaction(id: ID!): Transaction
  pendingRecordApproval(approvalToken: String!, approverUserId: String!): PendingRecordApprovalResponse
  merchantCategory(id: ID!): MerchantCategory
  billSyncErrors(after: String, first: Int, integrationId: ID!): BillSyncErrorConnection
  """Fetch all category information."""
  cardPaymentForwarderCategories: [CardPaymentForwarderCategory]
  """Gets a dispute"""
  dispute(id: ID!): Dispute
  credentials(after: String, before: String, first: Int, last: Int, vendor: [String!]): CredentialConnection
  rule(id: ID!): Rule
  supportedRoles: [String]
  userCategories(after: String, before: String, first: Int, last: Int): UserCategoryConnection
  depositsPayment(id: ID!): DepositsPayment
  """Get incentive placements to display to user."""
  placements(after: String, before: String, first: Int, last: Int, supportedPlacements: [IncentivePlacementType!]!): IncentivePlacementViewDataConnection
  """Fetch all linked payroll providers for account"""
  payrollProviders: [PayrollProviderV2!]!
  bill(id: ID!): Bill
  rewardsBonusTriggers: [RewardsTrigger]
  """Fetch details of a specified payment."""
  cardPaymentForwarderPayment(paymentId: ID): CardPaymentForwarderPaymentObject
  anomalies(actions: [CardTransactionInsightEventAction], after: String, before: String, customerUserIds: [ID], departmentIds: [ID], first: Int, fromDate: Time, insightIds: [ID], insightTypes: [CardTransactionsInsightType], last: Int, merchantIds: [ID], searchText: String, sortColumn: SortColumn, sortDirection: SortDirection, status: InsightStatus, toDate: Time): CardTransactionInsightConnection
  rewardsCampaigns(after: String, before: String, first: Int, last: Int): RewardsCampaignConnection
  previewIntegrationRule(after: String, before: String, first: Int, integrationId: ID!, last: Int, ruleBody: Json!, ruleId: ID): StatementEntryLensConnection
  """Query for Time Series"""
  spendAggregateTimeSeries(after: String, filters: SpendAggregateTimeSeriesFilters!, first: Int, sortOrder: SpendAggregateTimeSeriesSortOrder): SpendAggregateTimeSeriesConnection
  """Internal"""
  debugException(trigger: Boolean): Boolean
  getUserCategoryForIntegrationMerchantCategory(integrationId: ID, merchantCategoryId: ID): UserCategory
  users(after: String, before: String, departmentId: ID, first: Int, last: Int, locationId: ID, managerId: ID, role: UserRoleTypeInput, searchText: String, status: String): UserConnection
  collectionIntention(id: ID!): CollectionIntention
  reimbursementItemEvents(after: String, first: Int, reimbursementItemId: ID!): ReimbursementItemEventConnection
  """Fetch all recipient information for account."""
  cardPaymentForwarderRecipients: [CardPaymentForwarderRecipient]
  fraudAlert(id: ID!): FraudAlert
  """Loyalty programs for miles transfer"""
  loyaltyPrograms(after: String, before: String, first: Int, last: Int): LoyaltyProgramConnection
  expensesSettings(after: String, before: String, first: Int, last: Int): ExpensesSettingConnection
  """All credit marketing offers for a users account"""
  creditMarketingOffers(after: String, before: String, first: Int, last: Int): CreditMarketingOfferConnection
  spendAggregates(after: String, filters: SpendAggregateFilters!, first: Int, groupKeys: [SpendAggregateGroupKey!], sortKey: SpendAggregateSortKey, sortOrder: SpendAggregateSortOrder): SpendAggregateConnection
  search(aggregates: Json, cursor: String, filters: Json!, orderBy: [OrderByInput], pageSize: Int, scopeToUser: Boolean, type: String!): SearchResult
  """Return devportal related information"""
  devAccessAgreementStatus: DevAccessAgreement
  availableProductOffers: [ProductOffer!]!
  """Given an FSP, lists all client accounts connected to it"""
  getClientAcctsForFsp(accountId: String!): [FspClientAccount]
  paymentApproval(approvalToken: String!): PaymentApprovalResponse
  """Return a list of OAuth scopes the customer can request"""
  scopes: [ScopeWrapper]
  """Rewind campaign video. Customer not eligible if null"""
  marketingRewindVideo(year: MarketingRewindYear!): MarketingRewindVideo
  """Return a list of tokens for the current user''s account"""
  developerApiTokens: [DeveloperApiToken]
  """Given a client account, list all FSPs connected to it"""
  getFspsForClientAcct(accountId: String!): [String]
  searchIndustries(after: String, first: Int, keywords: String!): IndustrySearchResultEntryConnection
  """Gets a timeline with the estimated transaction time for a payment rail"""
  cashTransactionTimelineEstimates(origin: CashTransactionOrigin!, paymentMethod: CashTransactionPaymentMethod!, scheduledSendAt: Time): PaymentRailTimeline
  reimbursementItems(
    after: String
    """Optional field to query reimbursement_items by expense_ids"""
    expenseIds: [ID!]
    first: Int
    reimbursementItemIds: [ID!]
    """Optional field to change scope from user to account"""
    scopeToAccount: Boolean = false
    states: [ReimbursementItemState!]
  ): ReimbursementItemConnection
  connectHasEncounteredFailure(vendor: FinancialsVendor!): Boolean!
  approvalsSetting: ApprovalsSetting
  """Get status and result of an export attempt"""
  getExportAttemptState(input: GetExportAttemptStateInput!): GetExportAttemptStatePayload
  referralRecords: [ReferralRecord]
  approvalsPolicies(productTypes: [ProductType]): [ApprovalsPolicy]
  """Internal query supporting federation. Do not use in client calls."""
  departmentEntity(id: ID): Department!
  """Given an FSP, lists all of its external bookkeepers"""
  getBookkeepersForFsp(accountId: String!): [String]
  financialStatementRequestedAccounts(after: String, before: String, first: Int, last: Int): FinancialStatementRequestedAccountConnection
  integrationEntities(after: String, before: String, entityType: String, fieldId: String, filterDeleted: Boolean, first: Int, last: Int, query: String): ExternalIntegrationEntityConnection
  accountConnectedApiClients: [ApiClient]
  referrals(after: String, before: String, first: Int, last: Int): ReferralConnection
  approvalsRequests(after: String, assigneeCustomerUserId: ID, before: String, customerUserId: ID, excludeAssigneeCustomerUserId: ID, first: Int, fromDate: Time, includeDirectReports: IncludeDirectReportsOption, last: Int, searchQuery: String, status: ApprovalsRequestStatus, statuses: [ApprovalsRequestStatus], toDate: Time, type: ApprovalsRequestType, types: [ApprovalsRequestType]): ApprovalsRequestConnection
  isIntegrationReadyToSync(endDate: Time, id: ID!, isPrimitive: Boolean, startDate: Time, statementEntryTypes: [String]): SyncReadyStatus
  financialAccountsWithFunding(after: String, before: String, first: Int, last: Int): FinancialAccountConnection
  statementEntries(after: String, before: String, first: Int, last: Int, onlyUnexported: Boolean): StatementEntryConnection
  departments(after: String, before: String, first: Int, last: Int): DepartmentConnection
  """Get a link token from HRIS aggregator vendor and return back to the client"""
  getLinkToken(
    """The vendor we are retrieving the link token from"""
    hrisAggregatorVendor: HrisAggregatorVendor!
  ): HrisLinkToken
  """Find the Fed ACH Participant """
  fedachParticipant(routingNumber: String!): FedachParticipant
  unexportedStatementEntries(activeFacetType: IntegrationRulesFilterFacetType, after: String, before: String, endDate: Time, first: Int, integrationId: ID, last: Int, ruleIds: [ID], startDate: Time, statementEntryTypes: [String]): StatementEntryConnection
  pointsBalanceAsCashRedemptionAmount: Int
  collectionAttempt(id: ID!): CollectionAttempt
  node(
    """The id of an object."""
    id: ID!
  ): Node
  """These are institutions for which we should fallback to using Finicity"""
  finicityEnabledInstitutions: [FinancialInstitution!]!
  """Miles transfers"""
  milesTransfers(after: String, before: String, first: Int, last: Int): MilesTransferConnection
  """Allows for the tracking of sessions during soft signup"""
  anonymousSession: ApplicationSession
  invoicingAccount: InvoicingAccount
  integrationRule(id: ID!): IntegrationRule
  """List all registered FSP accounts"""
  fspAccounts: [FspAccount]
  suggest(scopeToUser: Boolean, text: String!): [Suggestion]
  customerAttributes: CustomerAttributes
  """Get point history entries to display to user."""
  rewardsPointHistoryEntries(after: String, before: String, descriptionTypes: [RewardsPointsHistoryEntryDescriptionType], endAt: Time, first: Int, last: Int, orderField: RewardsHistoryEntryOrderField, orderType: RewardsHistoryEntryOrderType, startAt: Time, type: RewardsPointsHistoryEntryType): RewardsPointsHistoryEntryConnection
  marketoLeadForm(marketoFormId: SafeString!): MarketoLeadForm
  """Rewards bonuses"""
  rewardsBonuses(after: String, before: String, first: Int, last: Int): RewardsBonusConnection
  integration(id: ID!): Integration
  internationalWireConfig: InternationalWireConfig
  """Internal query supporting federation. Do not use in client calls."""
  locationEntity(id: ID): Location!
  """List of the customer''s top categories."""
  rewardsCurrentTopCategories(after: String, before: String, first: Int, last: Int): RewardsTopCategoryConnection
  accountConnectedApiClient: ApiClient
  validateActivation(token: String!): ValidateActivation
  rules(after: String, before: String, first: Int, last: Int): RuleConnection
  """Reward offered to referred user for new referrals by logged-in referrer."""
  currentReferredReward: ReferralReward
  bankAggregatorDecision: BankAggregatorDecision
  """UW Engine parameters for this account"""
  currentUnderwritingParameters: UnderwritingParameters!
  unexportedStatementEntryFilterFacets(endDate: Time, integrationId: ID, startDate: Time): [IntegrationRulesFilterFacet]
  anomalyMutingPolicies(after: String, before: String, first: Int, last: Int): CardTransactionInsightMutingPolicyConnection
  """Returns true if the user is an external bookkeeper of the FSP, false otherwise"""
  isExternalBookkeeper(userId: String!): Boolean
  insights: Insights!
  rewardsMarketplaceUpsell: RewardsMarketplaceUpsell
  financialInstitutions(after: String, before: String, first: Int, last: Int, status: FinancialInstitutionStatus): FinancialInstitutionConnection
  """The documents for financials data (mainly used for bank statement collection)"""
  financialBankStatements(after: String, before: String, first: Int, last: Int): FinancialBankStatementDocumentConnection
  accountClosureStatus: ClosureStatus
  """Query to validate contact inputs"""
  validatedVendorContactInputs(
    after: String
    before: String
    first: Int
    last: Int
    """Contact inputs to be validated"""
    vendorContactInputs: [VendorContactInput!]!
  ): ValidatedVendorContactInputConnection
  """The information requests for financials data (mainly used for bank statement collection)"""
  financialSources(after: String, before: String, first: Int, last: Int): FinancialSourceConnection
  """Internal query supporting federation. Do not use in client calls."""
  reimbursementItemEntity(id: ID): ReimbursementItem!
  unexportedStatementEntryCount(endDate: Time, integrationId: ID, startDate: Time, statementEntryTypes: [String]): UnexportedStatementEntryCount
  """Returns true if an account is a financial service provider (i.e. FSP), false otherwise"""
  isFsp(accountId: String!): Boolean
  authzRules: [RoleRule]
  previewTriggerComparison(toCardAccountType: CardAccountType!): [RewardsTriggerComparison!]!
  findContact(identifier: FindContactIdentifierInputUnion, name: String): PaymentContact
  """
  Fetch all associated payments for account.
  TODO: support pagination.
  """
  cardPaymentForwarderListPayments(statusFilter: [CardPaymentForwarderPaymentStatus]): [CardPaymentForwarderPaymentObject]
  merchantCategories(after: String, before: String, first: Int, last: Int): MerchantCategoryConnection
  """Reward offered to referrer for new referrals by logged-in referrer."""
  currentReferrerReward: ReferralReward
  credential(id: ID!): Credential
  cards(after: String, before: String, customerUserId: [ID!], departmentIds: [String!], first: Int, hasActiveLimitIncrease: Boolean, instrumentType: InstrumentType, isPreapproved: Boolean, last: Int, searchQuery: String, sortBy: CardSortColumn, status: [String!], statusViews: [StatusView!]): CardConnection
  referralsSummary(isAdmin: Boolean, isExperimental: Boolean): ReferralsSummary
  expensesItems(after: String, before: String, externalEntryId: [ID], first: Int, last: Int): ExpensesItemConnection
  countries(filters: CountriesListFilters): [Country!]!
  user(id: ID): User
  """Key factors that impact the credit limit on an account"""
  keyCreditLimitFactors: [UnderwritingLimitFactor!]!
  receivablesOffersAccount: ReceivablesOffersAccount
  """Query for periodic review by customer account ID"""
  periodicReview: PeriodicReview
  """Get single HRIS connection based on id"""
  hrisConnection(id: ID!): HrisConnection
  rewardsRedemptionPrograms(after: String, before: String, first: Int, last: Int): RewardsRedemptionProgramConnection
  userCategory(id: ID!): UserCategory
  """Internal query supporting federation. Do not use in client calls."""
  accountEntity(id: ID): Account!
  onboardingApplications(after: String, applicantCustomerUserId: ID, before: String, first: Int, last: Int, type: OnboardingBlueprintType): OnboardingApplicationConnection
  """Internal query supporting federation. Do not use in client calls."""
  userEntity(id: ID): User!
  bills(
    after: String
    before: String
    dueAt: Time
    endTime: Time
    first: Int
    """If provided, only bills with these invoice processing statuses will be returned."""
    invoiceProcessingStatuses: [BillInvoiceProcessingStatus]
    isDueSoon: Boolean
    isRecurring: Boolean
    last: Int
    searchQuery: String
    sortKey: BillSortKey
    sortOrder: BillSortOrder
    startTime: Time
    """If provided, only bills with these bill statuses will be returned."""
    statuses: [BillStatus]
  ): BillConnection
  premiumSetting: PremiumSetting
  transactedMerchants(limit: Int, query: String): [Merchant]
  locations(after: String, before: String, first: Int, last: Int): LocationConnection
  """Query for a documentOcr entity by ID"""
  documentOcr(
    """The ID of the document OCR entity"""
    id: ID!
  ): DocumentOcr
  currentCardStatementPeriod: CardStatementPeriod
  cashTransaction(id: ID!): CashTransaction
  getRfi(input: GetRfiInput!): Rfi
  internationalBankInformation(iban: String, swiftCode: String): InternationalBankInformation
  asset(id: ID): Asset
  """Internal query supporting federation. Do not use in client calls."""
  merchantCategoryEntity(id: ID): MerchantCategory!
  """Whether the user should be in the product onboarding flow"""
  mustSeeProductOnboarding: Boolean!
  """Session object"""
  applicationSession: ApplicationSession
  collectionAttempts(after: String, before: String, first: Int, last: Int): CollectionAttemptConnection
  approvalsUnsafeFlag(flagName: String!, keyType: ApprovalsUnsafeFlagKeyType!): ApprovalsUnsafeFlag
  contact(id: ID!): PaymentContact
  """Internal query supporting federation. Do not use in client calls."""
  expenseEntityExtension(id: ID!): Expense!
  statementEntry(id: ID!): StatementEntry
  """Customer account''s current servicing policy"""
  currentServicingPolicy: ServicingPolicy
  account: Account
  receivablesOffersPayout(id: ID!): ReceivablesOffersPayout
  """get spend alerts config for the current account"""
  spendAlertsConfigurationDetails: SpendAlertsConfigurationDetails!
  plaidInstitutionFallbacks: [PlaidInstitutionMapping]!
  cardOverviewPage: CardOverviewPage
  onboardingApplication(id: ID!): OnboardingApplication
  """Get matching rules filter facets for unexported expenses"""
  unexportedExpenseFilterFacets(endDate: Time, integrationId: ID, startDate: Time): [MatchingRulesFilterFacet]
  """Gets a timeline with the estimated transaction time"""
  cashTransactionTimelineEstimate(location: AccountLocation, origin: CashTransactionOrigin!, paymentMethod: CashTransactionPaymentMethod!, paymentRail: PaymentRail!, scheduledSendAt: Time): CashTransactionTimeline
  merchant(id: ID!): Merchant
  expensesFlags(after: String, before: String, first: Int, last: Int, status: String): ExpensesFlagConnection
  location(id: ID!): Location
  financialInstitution(id: ID!): FinancialInstitution
  """Institutions enabled for use on Finicity"""
  financialSource(
    """Financial source by id"""
    id: ID!
  ): FinancialSource
  financialInformationRequests(after: String, before: String, first: Int, last: Int): FinancialInformationRequestConnection
  """List all connections for a customer account id given some filter criterion"""
  hrisConnections(
    """HRIS vendor filter"""
    hrisAggregatorVendor: [HrisAggregatorVendor]
    """HRIS system filter"""
    hrisSystem: [HrisSystem]
    """Status filter"""
    statuses: [HrisStatus]
  ): [HrisConnection!]
  """Internal"""
  debugExit(trigger: Boolean): Boolean
  invoicingInvoice(invoiceId: ID!): InvoicingInvoice
  unexportedExpenseCount(endDate: Time, integrationId: ID, startDate: Time): UnexportedExpenseCount
  earlyAccessFeatures: [EarlyAccessFeature]!
  financialStatementAccounts(after: String, before: String, first: Int, last: Int): FinancialStatementAccountConnection
  """Internal query supporting federation. Do not use in client calls."""
  merchantEntity(id: ID): Merchant!
  staleFinancialSources(after: String, before: String, first: Int, last: Int): FinancialSourceConnection
  transactions(after: String, before: String, customerUserId: ID, first: Int, last: Int, status: String): TransactionConnection
  limitPreview(cardAccountType: CardAccountType!): LimitPreview
  integrationEntity(id: ID!): ExternalIntegrationEntity
  approvalsReview(id: ID!): ApprovalsReview
  erpFeeds(after: String, before: String, first: Int, last: Int): ErpFeedConnection
  integrations(after: String, before: String, first: Int, last: Int, status: [String]): IntegrationConnection
  countryAddressMetadata(alpha2: CountryAlpha2!): CountryAddressMetadata!
  """
  Get the future transaction timelines for a recurring schedule
  that has not been created yet.
  """
  cashRecurringSchedule(
    paymentRail: PaymentRail!
    recurringSchedule: InputCashRecurringSchedule!
    """
    The date on which the recurring schedule will start
    If starts_at is set to NULL, we assume the schedule will start today
    """
    startsAt: Time
    timelineCount: Int
  ): CashRecurringScheduleWithTimelines
  """Internal query supporting federation. Do not use in client calls."""
  disputeEntity(id: ID): Dispute!
  findContactByPaymentInstrumentInfo(achPaymentInstrument: AchPaymentInstrumentFindInput, chequePaymentInstrument: ChequePaymentInstrumentFindInput, domesticWirePaymentInstrument: DomesticWirePaymentInstrumentFindInput, internationalWirePaymentInstrument: InternationalWirePaymentInstrumentFindInput): PaymentContact
  receivablesOffersActiveOffers: [ReceivablesOffersOffer!]
  navigation: Navigation
  """Get payment source mapping for the account"""
  reimbursementPaymentSource: ReimbursementPaymentSource
  approvalsReviews(after: String, before: String, customerUserId: ID, filterByAccount: Boolean, first: Int, fromDate: Time, last: Int, requestType: ApprovalsRequestType, searchQuery: String, statuses: [ApprovalsReviewStatus!], toDate: Time): ApprovalsReviewConnection
  referralRecordsPaginated(pageSize: Int, pageToken: String): ReferralRecordsPaginated
  fedwireParticipant(routingNumber: String!): FedwireParticipant
  """
  Get the decision and the decision details of an approval for a given
  transaction, given its identifier - either its id of approval token.
  """
  cashTransactionApproval(approvalToken: String!): CashTransactionApprovalResponse
  depositsTransaction(id: ID!): DepositsTransaction
  promotions(count: Int, type: PromotionsType!): [PromotionsItem!]!
  card(id: ID!, showPan: Boolean): Card
  cashTransactionDepositsPayment(id: ID!): DepositsPayment
  receivablesOffersOffersGroup(id: ID!): ReceivablesOffersOffersGroup
  """General information on the customer''s top category bonus."""
  rewardsCurrentTopCategoryBonusInfo: RewardsTopCategoryBonusInfo
  """Fetch ssu prefill data for partner referrals"""
  ssuPrefillData(referralIdentifier: String!): SsuPrefillData
  cardStatements(after: String, first: Int, fromPeriod: Time, toPeriod: Time): CardStatementConnection
  financialAccounts(after: String, before: String, excludeCustomerHidden: Boolean, first: Int, last: Int): FinancialAccountConnection
  getBankingHolidays(endDate: Date, startDate: Date): BankingHolidays
}

input UpdateDepartmentInput {
  clientMutationId: String!
  description: String
  id: ID!
  name: String!
}

input ProcessInvoiceAndCreateBillInput {
  assetId: ID!
  clientMutationId: String!
  uploadSessionId: String!
}

type BillSyncError implements Node {
  bill: Bill
  errorMessage: String
  errorType: String
  """The ID of an object"""
  id: ID!
  idempotencyKey: String
  insertedAt: Time
  operation: String
  rawResponse: Json
  requestPayload: Json
  status: SyncStatus!
  updatedAt: Time
}

type SearchResult {
  aggregates: [AggregationResult]
  cursor: String
  hits: [Searchable]!
  totalHits: Int!
}

enum FinancialInstitutionStatus {
  DISABLED
  ENABLED
  INTERNAL
  PENDING
}

input CreateDeveloperApiTokenInput {
  authorizationCode: String!
  clientMutationId: String!
  isLocalRedirect: Boolean
  name: String!
}

enum BillSortKey {
  CREATED_AT
  SEND_AT
  UPDATED_AT
}

type FinancialInstitutionImageUrls {
  icon: String
  logo: String
}

enum FinancialInstrumentCode {
  DOP
  UYI
  USD
  XCD
  SGD
  EUR
  NASDAQ_GGSXX
  BYN
  RWF
  NASDAQ_GSBXX
  SVC
  AED
  GIP
  MDL
  XXX
  XPT
  XPD
  PKR
  PGK
  NPR
  JPY
  MXV
  ILS
  YER
  SLL
  TZS
  NASDAQ_DGCXX
  MWK
  TND
  HUF
  KMF
  ERN
  BHD
  AMD
  PHP
  NASDAQ_DGVXX
  BIF
  CHF
  XTS
  IQD
  KZT
  DZD
  SBD
  PYG
  KYD
  UAH
  CVE
  LSL
  KRW
  USN
  OMR
  CAD
  NAD
  BAM
  XAG
  UYU
  KGS
  AOA
  AZN
  GTQ
  MGA
  DKK
  BOB
  XAF
  MZN
  NASDAQ_GGDXX
  GEL
  TOP
  CHW
  COU
  NOK
  SRD
  XPF
  CRYPTO_USDC
  GNF
  HNL
  SSP
  BBD
  VND
  SEK
  AWG
  KWD
  PAB
  MXN
  CUC
  NZD
  CLF
  WST
  XBB
  TJS
  CRYPTO_BTC
  XUA
  BWP
  PEN
  GYD
  VES
  CNY
  SCR
  CRYPTO_ETH
  SAR
  VUV
  NASDAQ_DPGXX
  ISK
  BDT
  TWD
  NASDAQ_GGBXX
  THB
  XSU
  BZD
  HKD
  BRL
  CHE
  INR
  STN
  LRD
  JOD
  UYW
  LBP
  SOS
  LAK
  JMD
  MVR
  XAU
  UZS
  AFN
  BND
  FJD
  GBP
  CUP
  IRR
  TRY
  KPW
  KHR
  HTG
  NASDAQ_DAGXX
  MYR
  XBC
  CZK
  MKD
  BOV
  COP
  GMD
  TTD
  ZMW
  LKR
  BTN
  CDF
  XBD
  UGX
  NIO
  QAR
  MMK
  ETB
  MAD
  FKP
  ARS
  BGN
  AUD
  MUR
  XBA
  CLP
  TMT
  MRU
  DJF
  EGP
  LYD
  PLN
  ANG
  XOF
  XDR
  SZL
  BMD
  GHS
  SHP
  SDG
  MNT
  BSD
  RSD
  SYP
  RUB
  ALL
  RON
  MOP
  HRK
  ZAR
  NGN
  ZWL
  IDR
  CRC
  KES
}

type RewardsTriggerComparison {
  """Accrual rate of the current trigger"""
  currentAccrualRate: Float!
  """Description of the current trigger"""
  description: String!
  """Accrual rate of the future trigger"""
  futureAccrualRate: Float!
  """Name of the current trigger"""
  name: String!
}

"""A cycle reoccurring every other week on a particular day of the week."""
type BiweeklyCardStatementPolicyCycle {
  """The day of the week."""
  dayOfWeek: Int
}

type CreateMilesTransferPayload {
  clientMutationId: String!
  milesTransfer: MilesTransfer
}

enum DepositsRecurringPaymentCancellationType {
  PROCESSING_AND_RECURRING_PAYMENT
  PROCESSING_PAYMENT
  RECURRING_PAYMENT
}

input CardPaymentForwarderBeneficialOwnerInput {
  firstName: String
  lastName: String
}

union FraudAlert = CardTransactionFraudAlert

input ConvertCardAccountTypeInput {
  bypassEligibilityChecks: Boolean
  clientMutationId: String!
  isFicoUnderwriting: Boolean
  toCardAccountType: CardAccountType!
  underwritingLimit: Int
}

type AscendaTransferPayload {
  loyaltyProgramId: String!
  redemptionRate: Int!
}

type InviteUserWithMonthlyLimitPayload {
  clientMutationId: String!
  user: User
}

"""account-level spend alerts config"""
input SpendAlertsConfigurationDetailsInput {
  """all muting configurations for this account"""
  alertTypeMutingConfigurations: [AlertTypeMutingConfigurationsInput!]!
  """alerts enabled for this account"""
  enabledAlertTypes: [SpendAlertType!]!
  """users muted from all alerts"""
  universallyMutedUserIds: [ID!]!
}

type CompleteOnboardingPayload {
  clientMutationId: String!
  user: User!
}

type CreateFraudDisputePayload {
  clientMutationId: String!
  fraudAlerts: [FraudAlert!]!
  transactions: [Transaction!]!
}

type RewardsPointsHistoryEntryConnection {
  edges: [RewardsPointsHistoryEntryEdge]
  pageInfo: PageInfo!
}

enum ErpVendorType {
  CONCUR
  CONFERMA
  INVALID
  XERO
}

"""Quickbooks Desktop GL account settings"""
type QbdCategories {
  """Default accounts payable GL account"""
  accountsPayableUserCategory: UserCategory
  """Default collections GL account"""
  collectionTargetUserCategory: UserCategory
  """Default rewards GL account"""
  rewardsIncomeUserCategory: UserCategory
}

input FinalizeConnectCredentialInput {
  clientMutationId: String!
  integrationCredentialId: ID!
}

type ApprovalsReviewConnection {
  edges: [ApprovalsReviewEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""The approvals routing rule input object. Only one of individuals, manager and individuals_v2 should be specified"""
input ApprovalsRoutingRuleInput {
  """The individuals routing rule input object"""
  individuals: ApprovalsRoutingRuleIndividualsInput
  """The dynamic routing rule input object can be specified by a manager role or a individual user"""
  individualsV2: ApprovalsRoutingRuleIndividualsV2Input
  """The manager routing rule"""
  manager: ApprovalsRoutingRuleManagerInput
}

union OriginMetadata = EmailMetadata

type FundingSourceEdge {
  cursor: String
  node: FundingSource
}

input ResetUserInput {
  clientMutationId: String!
  token: String!
  user: ResetUserUserInput!
}

input CreatePhysicalCardV2Input {
  budgetId: ID
  clientMutationId: String!
  customerUserId: ID
  defaultMemo: String
  displayName: String
  holderName: String
  shippingAddress: ShippingAddressInput!
}

enum CashTransactionPaymentMethod {
  CREDIT
  DEBIT
  INVALID
}

type OnboardingFormPeriodicReview {
  business: Json
  individuals: Json
}

type ExportItem implements Node {
  """The ID of an object"""
  id: ID!
  insertedAt: Time!
  status: String!
}

type RefreshIntegrationPayload {
  clientMutationId: String!
  integration: Integration
}

enum PushProviderType {
  APNS
  FCM
}

enum BusinessDays {
  FRIDAY
  MONDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

union BillingPaymentSource = DepositsAccount | FundingSource | OfflineSource | RewardsRedemptionSource

input UpdateTransactionBillableStatusInput {
  billableStatus: BillableStatus
  clientMutationId: String!
  transactionId: ID!
}

type ExternalIntegrationEntity implements Node {
  """Time of deletion, either if explicitly deleted in the ERP or not found in refetch"""
  deletedAt: Time
  """ID that references an entity''s parent integration field, i.e. Netsuite Class"""
  externalIntegrationFieldId: ID!
  """The ID of an object"""
  id: ID!
  integration: Integration
  """Flag that denotes whether this entity was marked as inactive on the ERP side"""
  isInactive: Boolean
  """Human-readable name"""
  name: String
  """Entities are arranged in a tree structure"""
  parentEntity: ExternalIntegrationEntity
  """Soft deprecated, will delete soon - use external_integration_field_id"""
  payload: ExternalIntegrationEntityPayload
  """ID used by the external ERP to uniquely identify an entity"""
  vendorInternalId: String
}

type CollectionIntention implements Node {
  amount: Int
  collectedAt: Time
  collectionAttempts(after: String, before: String, first: Int, last: Int): CollectionAttemptConnection
  customerAccountId: String
  fundingSource: FundingSource
  """The ID of an object"""
  id: ID!
  initiator: User
  insertedAt: Time
  originatorType: String
  scheduledForDate: Time
  status: String
}

input UpdateTransactionMemoInput {
  clientMutationId: String!
  memo: String
  transactionId: ID!
}

type DepositsAdminBalanceAdjustmentDetails {
  description: String
  method: Method!
}

type CredentialRedirectResult {
  credential: Credential
  redirectUrl: String
}

type Receipt implements Node {
  asset: Asset
  """The ID of an object"""
  id: ID!
  origin: String
}

input ReimbursementMetadataInput {
  addAssetIds: [ID!]
  amount: Int
  budgetId: ID
  departmentId: ID
  departmentName: String
  locationId: ID
  locationName: String
  memo: String
  merchantCategoryId: ID
  merchantId: ID
  merchantName: String
  netsuiteClassExternalEntityId: ID
  purchaseDate: Time
  receiptAssetFileId: ID
  removeAssetIds: [ID!]
  userCategoryId: ID
}

"""A user to invite"""
input UserInvite {
  """The ID of the department to add the new user to"""
  departmentId: ID
  """The email address to send the invite to"""
  email: Email!
  """The new user''s first name"""
  firstName: String!
  """A list of groups to add the user to"""
  groups: [String!]
  """whether or not the user should have access to corporate cards"""
  isCorporateCardUser: Boolean
  """The new user''s last name"""
  lastName: String!
  """The ID of the location to assign this user to"""
  locationId: ID
  """The ID of the user who should be assigned as the new user''s manager"""
  managerId: ID
  """When true, this user will be made to set up a physical card while activating"""
  requirePhysicalCard: Boolean
  """The new user''s role"""
  role: UserRoleTypeInput!
}

input EnableExpensesInput {
  clientMutationId: String!
  id: ID!
}

enum SpendAlertType {
  ALL
  EXPENSIVE_TRANSACTION
  HIGH_SPEND_PER_DIEM_RESTAURANTS
  HIGH_SPEND_PER_DIEM_RIDESHARE
  INVALID
  NEW_VENDOR_SAAS
  RECURRING
  RECURRING_DUPLICATE
  SPEND_INCREASE_DEPARTMENT
  SPEND_INCREASE_MERCHANT
  SPEND_INCREASE_MERCHANT_CATEGORY
  SPEND_INCREASE_RECURRING
  SPEND_INCREASE_USER
}

enum FundingSourceProvenance {
  DEPOSITS_ACCOUNT
  FINANCIAL_ACCOUNT
  MANUAL_INTERNAL
  MANUAL_USER
}

input ReceivablesOffersIntegrationFinancialAccountMappingInput {
  """The id of the financial_account"""
  financialAccountId: String!
  """The id of the integration"""
  integrationCredentialId: String!
}

"""A category that is a candidate for being the top category in a given period."""
type RewardsTopCategory implements Node {
  """Information about the category fetched from Present."""
  category: MerchantCategory!
  """The ID of an object"""
  id: ID!
  """The ID of the category in present."""
  presentMerchantCategoryId: String!
  """The amount the customer has spent on the category."""
  totalAmountSpentCents: Int!
}

type DeleteIntegrationRulePayload {
  clientMutationId: String!
}

type OnboardingInformationRequestConnection {
  edges: [OnboardingInformationRequestEdge]
  pageInfo: PageInfo!
}

input OrderByInput {
  direction: OrderDirection!
  sort: String!
}

enum CardPaymentFailureTypeV2 {
  ACCOUNT_CLOSED
  ACCOUNT_NOT_FOUND
  INSUFFICIENT_FUNDS
  NON_TRANSACTION_ACCOUNT
  NOT_AUTHORIZED
}

input CreatePaymentInput {
  amount: Int!
  clientMutationId: String!
  consumerSettings: TransactionConsumerSettings
  contactId: ID
  contactVersion: Int
  """Use contact id instead"""
  counterpartyId: ID
  depositsAccountId: ID!
  endsAt: Time
  endsOn: Date
  externalMemo: String
  idempotencyKey: String!
  monthlySchedule: MonthlySchedule
  paymentInstrumentId: ID
  paymentInstrumentVersion: Int
  sendAt: Time
  sendOn: Date
  totalNumberOfPayments: Int
  weeklySchedule: WeeklySchedule
}

"""Mobile summary schema"""
type MobileReferralsSummary implements Node {
  """Title for entry point"""
  entryPointTitle: String
  """The ID of an object"""
  id: ID!
  """Landing screen description"""
  landingScreenDescription: String
  """Landing screen title"""
  landingScreenTitle: String
  """Terms and conditions"""
  termsAndConditions: String
}

type QuickbooksClass {
  name: String
}

input ProgramMembershipPayload {
  firstName: String
  lastName: String
  membershipId: String
}

enum CompanyType {
  ECOMMERCE
  LIFESCIENCE
  OTHERS
  STARTUP
}

enum PendingRecordApprovalDecision {
  APPROVED
  CANCELLED
  DENIED
  PENDING
}

type OnboardingFormBlocking {
  _: Boolean
}

type MerchantCategoryConnection {
  edges: [MerchantCategoryEdge]
  pageInfo: PageInfo!
}

enum BankAccountClass {
  BUSINESS
  PERSONAL
}

enum WeavSalesPlatform {
  AMAZON_SP
  PAYPAL
  SHOPIFY
  SQUARE
  STRIPE
  WALMART
}

type ConvertCardAccountTypePayload {
  clientMutationId: String!
  ineligibilityReason: ConversionIneligibilityReason
}

type CreateIntegrationRulePayload {
  clientMutationId: String!
  """the integration containing new rule"""
  integration: Integration
}

input CreateOnboardingProductApplicationInput {
  """Cancel any existing applications of the same named blueprint"""
  cancelPreviousApplication: Boolean
  clientMutationId: String!
  """The specific implementation of the blueprint type"""
  name: String!
}

type DepositsProcessingAndFuturePaymentDateConnection {
  edges: [DepositsProcessingAndFuturePaymentDateEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type CreateNetsuiteCredentialPayload {
  authenticationResult: CredentialAuthenticationResult
  clientMutationId: String!
  subsidiaries: [NetsuiteSubsidiary]
}

type BankingHolidays {
  bankingHolidays: [Date!]!
}

enum ConfirmationStatus {
  CONFIRMATION_STATUS_CONFIRMED
  CONFIRMATION_STATUS_DISMISSED
  CONFIRMATION_STATUS_INVALID
  CONFIRMATION_STATUS_PENDING
}

type CreateReceiptPayload {
  clientMutationId: String!
  receipt: Receipt
}

input SetTransactionIntegrationFieldInput {
  clientMutationId: String!
  field: String!
  transactionId: ID!
  value: String!
}

type CompletePromotionPayload {
  clientMutationId: String!
}

input CheckReceivingMethodInput {
  address: AddressInput
}

"""Collected (for fee) via Rewards Redemption"""
type ReceivablesOffersPaymentIntentSourceRewardsRedemption {
  """ID of the Payout that is linked to the Offer Fee that we collected against."""
  payoutId: ID!
  rewardsRedemptionInstanceId: String!
}

input CreatePayerInput {
  address: ContactAddressInput
  clientMutationId: String!
  dbaName: String
  email: String
  idempotencyKey: String!
  invoicingAccountId: ID!
  phoneNumber: String
}

type Restrictions {
  """Indicates if the country is sanctioned for card shipping purposes"""
  isSanctionedForCardShipping: Boolean!
}

input CreateExpensesSettingInput {
  clientMutationId: String!
  rules: [ExpensesRuleInput]!
  sendEmailToEmployees: Boolean
  status: ExpensesSettingStatus!
}

type UpdateIntegrationSettingsPayload {
  clientMutationId: String!
  integration: Integration
}

input SetUserRoleInput {
  clientMutationId: String!
  role: String!
  useOnboarding: Boolean
  userId: ID!
}

union PaymentInstrumentType = AchPaymentInstrument | ChequePaymentInstrument | DomesticWirePaymentInstrument | InternationalWirePaymentInstrument

type DeleteReceiptPayload {
  clientMutationId: String!
}

"""The computed integration lens field from integration rule engine for expenses."""
type ExpenseLens implements Node {
  billableStatus: Boolean
  disabledIntegrationRules: [IntegrationRule]
  disabledRuleIds: [String]
  expenseId: String
  """The ID of an object"""
  id: ID!
  integrationFields: [IntegrationField]
  integrationRuleEvaluations: [RuleEvaluation]
  """Whether the expense is exported"""
  isExported: Boolean
  userCategory: UserCategory
  userCategoryId: String
}

type SoftExpirationSummary {
  isSoftExpired: Boolean
  softExpiresAt: Time
}

type RewardsTriggerInstanceStateCashActivationCardSpendBonus {
  amountSpentUsdCents: Int!
}

type SpendAggregateTimeSeries {
  amount: Int!
  time: Time
}

type OnboardingPageUwEcommerceConnection {
  _: Boolean
  content: OnboardingFormUwEcommerceConnection!
}

"""Describes a link token object"""
type HrisLinkToken {
  """The link token we want to pass back to the FE"""
  linkToken: String!
}

type BulkCreateExpensesItemEventPayload {
  clientMutationId: String!
  expensesItemEvents: [ExpensesItemEvent!]
}

type UpdateInstitutionLoginPayload {
  clientMutationId: String!
  result: FinancialsSourceResult
}

type TellerPayload {
  enrollmentId: String!
  tellerEnrollmentId: String
  tellerInstitutionId: String!
}

enum CashTransactionWireReturnReason {
  INVALID
  UNKNOWN
}

type ReceivablesOffersPaymentIntentConnection {
  edges: [ReceivablesOffersPaymentIntentEdge]
  pageInfo: PageInfo!
  summary: ReceivablesOffersPaymentIntentAllocationSummary
}

input ActivateUserInput {
  activationToken: String!
  clientMutationId: String!
  user: ActivateUserInfo
}

type DisconnectErpFeedPayload {
  clientMutationId: String!
  erpFeed: ErpFeed
  errorMessage: String
}

type RewardsRedemptionOfferConnection {
  edges: [RewardsRedemptionOfferEdge]
  pageInfo: PageInfo!
}

enum PaymentApprovalDecisionReason {
  FRAUDULENT
  INCORRECT
  OTHER
  UNAUTHORIZED
}

type LocationConnection {
  edges: [LocationEdge]
  pageInfo: PageInfo!
}

type ReplaceCardWithVirtualPayload {
  clientMutationId: String!
  replacedCard: Card
  replacementCard: Card
}

input DeleteDepartmentInput {
  clientMutationId: String!
  id: ID!
}

enum ApprovalsReviewStatus {
  APPROVED
  DENIED
  PENDING
  SKIP
}

type ExpensesSettingEdge {
  cursor: String
  node: ExpensesSetting
}

input InputCashRecurringScheduleTypeUnion {
  monthlyByDay: InputCashRecurringScheduleMonthlyByDay
  monthlyByWeek: InputCashRecurringScheduleMonthlyByWeek
  weekly: InputCashRecurringScheduleWeekly
}

type OnboardingPageEmailVerification {
  _: Boolean
  content: OnboardingFormBlocking!
}

input SignupInfoInput {
  attributionSource: String
  attributionToken: String
  blackbox: String
  companyIndustry: String
  companyName: String!
  companyType: CompanyType
  companyUrl: String
  """Approximate monthly credit card spending"""
  creditCardSpend: String
  """The external accounts the user had when they signed up (e.g. Shopify, Amazon, etc)"""
  externalAccounts: [String]
  financialProductType: FinancialProductType!
  firstName: SafeString!
  """Users intent for signing up for brex"""
  intent: [String]
  investmentSource: String
  lastName: SafeString!
  legalAgreements: [LegalAgreementReference]!
  marketingMetadata: Json
  """Answers to the business maturity question"""
  maturity: [String]
  role: String
  salesVolume: String
}

type GenerateDepositsTransactionConfirmationDownloadUrlPayload {
  clientMutationId: String!
  """url to download confirmation"""
  depositsTransactionConfirmationDownloadUrl: String
}

type CashRecurringScheduleMonthlyByDay {
  """Number of months between successive transactions"""
  cadence: Int!
  """Day of the month to schedule transactions"""
  dayOfMonth: Int!
}

type CollectionIntentionEdge {
  cursor: String
  node: CollectionIntention
}

enum ReceivablesOffersAccountOnboardingAction {
  INVALID
  LEGAL_AGREEMENT_ACCEPTED
}

"""muting config for an individual column"""
type MutingConfiguration {
  muteColumn: MuteColumn!
  muteValues: [String!]!
}

type BillingPeriod {
  endPeriod: Time!
  startPeriod: Time!
}

type FinancialSourceConnection {
  edges: [FinancialSourceEdge]
  pageInfo: PageInfo!
}

input CreateCardTransactionInsightEventInput {
  action: CardTransactionInsightEventAction!
  clientMutationId: String!
  eventMetadata: Json
  insightId: ID!
  notifyManagers: Boolean
  notifySelectedUsers: [ID]
}

type EftReceivingMethod {
  accountNumber: String
  beneficiaryName: String
  routingNumber: String
}

union Searchable = Card | CollectionIntention | Department | Merchant | MerchantCategory | StatementEntry | Transaction | TransactionOperation | User | UserCategory

type RemoveFspBookkeeperPayload {
  clientMutationId: String!
  policyUrn: String
}

input NotifyAllUsersApprovalsEnabledInput {
  clientMutationId: String!
  idempotencyKey: String
}

"""muting config for an alert type"""
type AlertTypeMutingConfigurations {
  alertType: SpendAlertType!
  mutingConfigurations: [MutingConfiguration!]!
}

type BillConnection {
  edges: [BillEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type DisableReimbursementsPayload {
  clientMutationId: String!
  integration: Integration
}

input FlexibleAddressInput {
  address1: String!
  address2: String
  city: String!
  country: String!
  state: String
  zip: String
}

input RemoveFspBookkeeperInput {
  bookkeeperAccountId: String!
  clientMutationId: String!
}

input CreateAssetInput {
  clientMutationId: String!
  """The file content type"""
  contentType: String!
  """For Internal Use Only: Assets will not be accessible in the dashboard when this is true"""
  fiuo: Boolean
  """
  Strong compliance means that assets will be stored in an s3 bucket where assets cannot be deleted.
  This is necessary for assets which are required by FINRA to be stored in a WORM compliant way.
  """
  isStrongCompliance: Boolean
  """The name of the file"""
  name: String!
  """Idempotency key for the upload request"""
  uploadRequestId: String!
}

input ReconnectErpFeedInput {
  clientMutationId: String!
  erpFeedId: ID!
}

input InputCashTransactionCreditArguments {
  """Contact and payment instrument of the external account to push funds to"""
  payee: Payee!
}

type CreatePayrollProviderPayload {
  clientMutationId: String!
  payrollProvider: PayrollProvider
}

type AscendaDetails {
  currencyName: String
  description: String
  enrollmentLink: String
  estimatedProcessingTimeHours: Int
  fullCurrencyName: String
  maintenance: AscendaMaintenance!
  partnerName: String
  programName: String
  shortProgramName: String
  termsAndConditionsLink: String
}

"""A financial_document representing specifically a bank statement"""
type FinancialBankStatementDocument implements Node {
  """The last digits of the bank account number for display"""
  accountNumberLastFour: String
  """Asset/Filestore ID of statement document"""
  assetId: String!
  bankAccountNumber: String
  """Bank/Financial institution & account number associated with the statement account"""
  bankName: String
  """First & last name of user who uploaded the statement"""
  firstName: String
  """The ID of an object"""
  id: ID!
  lastName: String
  """The month of the requested statement"""
  requestedMonth: Int!
  """Status of uploaded statement document"""
  status: FinancialDocumentStatus!
  """Upload timestamp of the statement document"""
  uploadedAt: Time!
}

type OnboardingPagePersona {
  _: Boolean
  content: OnboardingFormPersona!
}

type UpdateCardDisplayNamePayload {
  card: Card!
  clientMutationId: String!
}

input ThirdPartyAttribution {
  """the Facebook click ID"""
  fbc: String
  """the Facebook browser ID"""
  fbp: String
  """/** Google Click ID */"""
  gclid: String
}

type TurnOffSeenFlagPayload {
  clientMutationId: String!
  """Updated flag"""
  seenFlag: SeenFlag
}

type CashTransactionAdminBalanceAdjustmentDetails {
  """Internal reason why the admin balance adjustment was created"""
  description: String
  """Whether the transaction was a debit or credit"""
  paymentMethod: CashTransactionPaymentMethod!
}

enum PayeeType {
  USER
  VENDOR
}

input CreateCashTransactionInput {
  amountUsdCents: Int!
  clientMutationId: String!
  """The type of transaction to create"""
  creationType: InputCashTransactionCreationArgumentUnion!
  """Optional internal customer memo of the transaction"""
  customerMemo: String
  depositsAccountId: ID!
  """
  Optional description for transfer that will be used for the "Payment Instructions" for
  Wires and the "Entry Description" field for Ach transactions
  """
  externalMemo: String
  idempotencyKey: String!
  """
  Notify the contact if and when the transaction moves to the processing state
  False by default, ignored unless a credit to a contact with a valid email
  """
  notifyContactProcessing: Boolean
  """
  Optional schedule to repeat the transaction on. If not set, the transaction will only be
   initiated once.
  """
  recurringSchedule: InputCashRecurringSchedule
  """
  Optional time to initiate the transaction. If not set, initiate the transaction as soon
  as possible (e.g. business day)
  """
  scheduledSendAt: Time
}

type DepositsTransactionConnection {
  edges: [DepositsTransactionEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type ApprovalsRequestEdge {
  cursor: String
  node: ApprovalsRequest
}

union OnboardingInformationRequestContent = OnboardingFormBlocking | OnboardingFormEmpty | OnboardingFormJsonSchema | OnboardingFormPeriodicReview | OnboardingFormPersona | OnboardingFormTerms | OnboardingFormUwBankConnection | OnboardingFormUwEcommerceConnection

type Bill implements Node {
  """
  DEPRECATED.
  Use cashTransaction { timeline { scheduledSendAt } } instead.
  """
  paymentSendAt: Time
  merchantCategory: MerchantCategory
  """DEPRECATED, PLEASE USE cashTransaction INSTEAD"""
  depositsPayment: DepositsPayment
  originMetadata: OriginMetadata
  createdByUser: User
  """The ID of an object"""
  id: ID!
  transferDescription: String
  deletedAt: Time
  createdAt: Time
  externalInvoiceNumber: String
  isDraft: Boolean
  dueAt: Time
  """Boolean to indicate whether payment recipient should be notified"""
  notifyRecipient: Boolean
  """DEPRECATED, PLEASE USE contact/paymentInstrument INSTEAD"""
  counterparty: Counterparty
  """Total number of payments to recur"""
  totalNumberOfPayments: Int
  invoice: Asset
  invoiceProcessingStatus: BillInvoiceProcessingStatus
  """Recurring schedule for bills"""
  recurringSchedule: RecurringSchedule
  lastUpdatedAt: Time
  paymentInstrument: PaymentInstrument
  """If not NULL, the transaction associated with the bill."""
  cashTransaction: CashTransaction
  """Date to end recurring payments"""
  endsAt: Time
  paymentInitiatedByUser: User
  chequeMemo: String
  contact: PaymentContact
  """Recurring rules for bills"""
  recurringRules: RecurringRules
  origin: BillOrigin
  userErpCategory: UserCategory
  """The deposits account the money will be pulled from"""
  depositsAccount: DepositsAccount
  dueAmountCents: Int
  """
  DO NOT BATCH, WILL RESULT IN AN N+1 QUERY.
  Extracted fields from OCR
  """
  extractedBillFields: ExtractedBillFields
  description: String
}

"""View data for rewards page scale"""
type IncentivePlacementViewDataRewardsPageScale {
  """Additional point multiplier for purchases above threshold"""
  additionalPointMultiplier: Int!
  """Description of bonus (potentially to put in modal)"""
  description: String!
  """Time when the user was paid the points, null if they haven''t been paid"""
  payedOutAt: Time
  """Placement"""
  placement: IncentivePlacement!
  """Progress (cents) i.e $500 in $500/$1000"""
  progress: Int!
  """Short description (quick summary)"""
  shortDescription: String!
  """Status"""
  status: IncentivePlacementViewDataStatus
  """Threshold (cents) i.e $1000 in $500/$1000"""
  threshold: Int!
  """Title"""
  title: String!
}

enum CashTransactionChequeReturnReason {
  COUNTERFEIT_WARRANTY_BREACH
  ALTERED_OR_COUNTERFEIT
  ITEMS_EXCEEDS_STATED_MAX_VALUE
  POST_DATED
  WARRANTY_BREACH
  EXCEEDS_MAX_PRESENTMENTS
  INDETERMINATE_AMOUNT
  RETIRED_OR_INELIGIBLE_ROUTING_NUMBER
  ACCOUNT_FROZEN
  DUPLICATE_PRESENTMENT
  FORGERY
  PAYMENT_STOPPED
  REFER_TO_MAKER
  NON_CASH_ITEM
  UNABLE_TO_PROCESS
  INSUFFICIENT_FUNDS
  RCC_WARRANTY_BREACH
  CORPORATE_CUSTOMER_ADVISES_NOT_AUTHORIZED
  ACCOUNT_NOT_FOUND
  NOT_AUTHORIZED_RCC
  MANUALLY_CANCELLED
  REFER_TO_IMAGE
  STALE_DATED
  ONE_OR_MORE_SIGNATURES_IRREGULAR
  UNKNOWN
  UNUSABLE_IMAGE
  ONE_OR_MORE_SIGNATURES_MISSING
  BRANCH_SOLD
  ENDORSEMENT_MISSING
  UNCOLLECTED_FUNDS
  INVALID
  ENDORSEMENT_IRREGULAR
  ACCOUNT_CLOSED
}

input InputCashRecurringScheduleMonthlyByDay {
  cadence: Int!
  dayOfMonth: Int!
}

type AccountBalanceSummary {
  globalLimit: Int
  remainingSpend: Int
  usedBalance: Int
}

type LocationEdge {
  cursor: String
  node: Location
}

type ConfirmPaymentDraftPayload {
  payment: CardPaymentForwarderPaymentObject!
}

type DisableBillsPayload {
  clientMutationId: String!
  integration: Integration
}

type AddFspBookkeeperUserPayload {
  clientMutationId: String!
  groupUrn: String
}

input SoftSignupInput {
  attributionMetadata: AttributionMetadata
  clientMutationId: String!
  email: Email!
  info: SignupInfoInput!
  partnerRefToken: String
  password: String!
  redirectUrl: String!
}

input ResendWelcomeEmailInput {
  clientMutationId: String!
  """Url for the button in the email"""
  redirectUrl: String!
  """Unique token for the email (won''t send duplicates)"""
  uniqueToken: String!
}

input SetReceivablesOffersSellerAccountHasSeenFullAccessConfirmationBannerInput {
  clientMutationId: String!
  sellerAccountId: ID!
  value: Boolean!
}

enum InsightsTimeUnit {
  DAY
  MONTH
  QUARTER
  WEEK
  YEAR
}

type ChannelEmailOptions {
  email: Email
}

type DocumentOcrResult implements Node {
  """The type of document, determined based on the OCR result."""
  classificationType: DocumentOcrClassificationType
  """The ID of an object"""
  id: ID!
  """The information extracted from the document"""
  parsedDetails: DocumentOcrParsedDetails
}

input ApprovalsRoutingRuleIndividualsInput {
  """A list of allowed approver ids"""
  staticAllowedApproverUserIds: [ID!]!
}

enum InstrumentType {
  PHYSICAL
  VIRTUAL
}

type ReceivablesOffersPayoutConnection {
  edges: [ReceivablesOffersPayoutEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

input CreateInvoiceInput {
  clientMutationId: String!
  depositsAccountId: ID
  discountAmount: FinancialAssetInput
  discountPercent: Float
  dueDate: Date
  idempotencyKey: String!
  invoiceNumber: String!
  invoiceTemplateId: ID!
  invoicingAccountId: ID
  lineItems: [InvoiceLineItemInput]
  memo: String
  payerContactId: ID
  subtotal: FinancialAssetInput
  totalAmount: FinancialAssetInput
}

type CashTransactionConnection {
  edges: [CashTransactionEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type CashTransactionEdge {
  cursor: String
  node: CashTransaction
}

enum RewardsTopCategoryNotEnabledReason {
  AUTOPAY_NOT_SET
  INVALID
  NOT_ELIGIBLE
  PAYMENTS_DO_NOT_QUALIFY
}

type ReceivablesOffersRepaymentDetails {
  resourceId: String
}

type DisconnectCredentialPayload {
  clientMutationId: String!
  credential: Credential
}

enum RewardsRedemptionClassType {
  ASCENDA_TRANSFER
  CASH_BALANCE
  INSTANT_PAYOUTS_FEE
  ISSUER_TRANSACTION
  REFUND_TRANSACTION
}

type CashBalancePayload {
  centsPerPoint: Float!
}

input SetPrimaryFundingSourceInput {
  clientMutationId: String!
  fundingSourceId: ID!
}

type OnboardingFormJsonSchema {
  jsonSchema: Json!
  """Metadata to supplement the form schema"""
  metadata: Json
  uiSchema: Json
}

type StatementEntryLensEdge {
  cursor: String
  node: StatementEntryLens
}

enum PayrollProviderType {
  ADP
  BAMBOO_HR
  GUSTO
  INVALID
  JUSTWORKS
  PAYCHEX
  PAYLOCITY
  QUICKBOOKS
  RIPPLING
  TRINET
  ZENEFITS
}

type CreateReimbursementReportPayload {
  clientMutationId: String!
  report: Report!
}

"""Incentive placement. Used only for ID translation right now."""
type IncentivePlacement implements Node {
  """The ID of an object"""
  id: ID!
}

type PayrollProvider {
  name: String
  payrollInfo: PayrollInfo
  source: PayrollSource
  status: PayrollStatus
}

enum DepositsPaymentStatus {
  ADMIN_APPROVAL_REQUIRED
  APPROVAL_REQUIRED
  CANCELLED
  PAYROLL_ESTIMATE
  PROCESSED
  PROCESSING
  SCHEDULED
  UNINITIATED
}

type FraudAlertConnection {
  edges: [FraudAlertEdge]
  pageInfo: PageInfo!
}

type DepositsPayment implements Node {
  paymentApprovalPaymentContext(paymentId: ID): PaymentApprovalPaymentContext
  amount: Int!
  """The raw transaction_id (not encoded)."""
  transactionId: ID
  pendingRecordApproval(paymentId: ID): PendingRecordApproval
  endsOn: Date
  bill: Bill
  """The ID of an object"""
  id: ID!
  paymentApproval(paymentId: ID): PaymentApproval
  associationIds: [String]
  createdOn: Date!
  createdAt: Time!
  memo: String
  sendAt: Time
  cancelledAt: Time
  status: DepositsPaymentStatus!
  cancellationInitiatedByUser: User
  consumerSettings: DepositsTransactionConsumerSettings
  counterpartyName: String!
  totalNumberOfPayments: Int
  """Encoded source deposits account ID"""
  depositsAccountId: ID!
  depositsTraceId: String
  sendOn: Date
  recurringSchedule: RecurringSchedule
  externalMemo: String
  endsAt: Time
  contact: PaymentContact
  type: PaymentRail!
  processingAndFuturePayments(after: String, before: String, first: Int, last: Int): DepositsProcessingAndFuturePaymentDateConnection
  recurringRules: RecurringRules
  """Source deposits account"""
  depositsAccount: DepositsAccount
  statusReason: StatusReason
  """Encoded CashTransaction ID"""
  cashTransactionId: ID!
  details: DepositsPaymentDetails!
  isCancellable: Boolean!
}

type FinancialStatementAccountConnection {
  edges: [FinancialStatementAccountEdge]
  pageInfo: PageInfo!
}

enum FinancialInformationRequestStatus {
  PENDING
  SUBMITTED
}

"""The seller account settings for a receivables_offers seller account. These settings are nil if the customer hasn''t set them yet"""
type ReceivablesOffersSellerAccountSettings {
  """Whether the customer indicated that they routed their payouts to Brex (null if not set)"""
  confirmedPayoutsRoutedToBrex: Boolean
  """Whether the customer has seen the failing checks error banner on the frontend (null if not set)"""
  hasSeenFailingChecksErrorBanner: Boolean
  """Whether the customer has seen the confirmation banner for Full Access on the frontend (null if not set)"""
  hasSeenFullAccessConfirmationBanner: Boolean
  """Whether the customer has seen the confirmation banner for Trial Access on the frontend (null if not set)"""
  hasSeenTrialAccessConfirmationBanner: Boolean
}

input FakeMutationDoNotUseInput {
  cashIntensiveMaxCashHandled: CashIntensiveMaxCashHandled
  clientMutationId: String!
  fiNbfiRegistrationStatus: FiNbfiRegistrationStatus
}

type DepositsTransactionEdge {
  cursor: String
  node: DepositsTransaction
}

union EducationTile = CreditLimitEducationTile

type SemiWeeklyClosingStrategy {
  firstDay: Int
  secondDay: Int
}

type CreateTransactionApprovedSubscriptionPayload {
  clientMutationId: String!
  notificationSubscription: NotificationSubscription
}

"""The value type when mute_column is set to merchant_id"""
type MuteValueMerchant {
  """The merchant that is being muted for this muting policy"""
  merchant: Merchant
}

union AccountCategories = ExpensifyCategories | IntacctCategories | NetsuiteCategories | QbdCategories | QuickbooksCategories | XeroCategories

type ConnectPlaidInstitutionPayload {
  clientMutationId: String!
  result: FinancialSource!
}

enum CashTransactionOrderField {
  FAILED_AT
  INITIATED_AT
  PROCESSED_AT
  SCHEDULED_SEND_AT
}

type InternationalWirePaymentInstrument {
  address: Address
  beneficiaryBankAddress: Address
  beneficiaryBankInfo: Json
  beneficiaryBankName: String
  iban: String
  swiftCode: String
}

input SetSpendAlertsConfigurationInput {
  clientMutationId: String!
  configurationDetails: SpendAlertsConfigurationDetailsInput!
}

scalar Email

type DepositsPayrollEstimateDetails {
  counterparty: Counterparty!
  origin: Origin!
  paymentMethod: Method!
  payrollPeriod: String!
}

input SubmitFinancialInformationRequestInput {
  assetIds: [ID]!
  clientMutationId: String!
  informationRequestId: ID!
}

type CreditMarketingOfferConnection {
  edges: [CreditMarketingOfferEdge]
  pageInfo: PageInfo!
}

input DisconnectPayrollProviderIntegrationInput {
  clientMutationId: String!
  """The integration the user wants to disconnect"""
  payrollProviderIntegrationId: ID!
}

type UpcomingDueAmount {
  amountDueUsdCents: Int!
  dueAt: Time!
}

type Rule implements Node {
  """The ID of an object"""
  id: ID!
  metadata: RuleMetadata
  type: String
  user: User
}

type Dispute implements Node @key(fields: "id") {
  cardPossession: DisputeCardPossession
  disputeTransactions(after: String, before: String, first: Int, last: Int): DisputeTransactionConnection
  """The ID of an object"""
  id: ID!
  reason: String!
  status: DisputeStatus
  type: DisputeType
}

input CardLimit {
  amount: Int!
  frequency: CardLimitFrequency!
}

type EmailAsset {
  accrualTime: Time
  attachments: [EmailAssetAttachment]
  bodies: [EmailAssetBody]
  forwardedBy: String
  from: String
  subject: String
}

union StatementEntryOriginator = Collection | CollectionAttempt | RewardsRefund | TransactionOperation

type EveryNDaysClosingStrategy {
  numDays: Int
}

enum TxType {
  RETURN
  STANDARD
}

input BulkCreateExpensesItemEventInput {
  action: ExpensesItemEventAction!
  clientMutationId: String!
  description: String
  itemIds: [ID]
  itemStatus: ExpensesItemStatus
}

type SetSpendAlertsConfigurationPayload {
  clientMutationId: String!
}

type ReceivablesOffersPaymentIntentEdge {
  cursor: String
  node: ReceivablesOffersPaymentIntent
}

"""Source of a Payment intent: where we collected from"""
union ReceivablesOffersPaymentIntentSource = ReceivablesOffersPaymentIntentSourceCollectFundingSource | ReceivablesOffersPaymentIntentSourceDepositsAccount | ReceivablesOffersPaymentIntentSourceDepositsLockedTransaction | ReceivablesOffersPaymentIntentSourceRewardsRedemption

enum ReportFormat {
  CSV
  HTML
  PDF
  TXT
  XLSX
}

input CompleteCashTransactionApprovalInput {
  clientMutationId: String!
  decision: CashTransactionApprovalDecision!
  """Any notes the admin wants to fill in a free form field when processing a draft payment."""
  decisionNotes: String
  decisionReason: CashTransactionApprovalDecisionReason
  transactionIdentifier: InputTransactionApprovalIdentifierUnion!
}

type CardPaymentForwarderContact {
  email: String
  firstName: String
  lastName: String
  phoneNumber: String
}

type CancelApprovalsRequestPayload {
  approvalsRequests: [ApprovalsRequest!]
  clientMutationId: String!
}

type OnboardingPagePhotoIdIntro {
  _: Boolean
  content: OnboardingFormJsonSchema!
}

type ProgramMembershipConnection {
  edges: [ProgramMembershipEdge]
  pageInfo: PageInfo!
}

"""Payload for Codat tracking categories"""
type CodatTrackingCategory {
  """Category name imported from Codat"""
  categoryName: String
  """Is marked inactive on Codat side"""
  isInactive: Boolean
}

type DisableIntegrationPayload {
  clientMutationId: String!
  integration: Integration
}

type ReimbursementItem implements Node @key(fields: "id") {
  approvalRequestId: ID
  approvalsRequest: ApprovalsRequest
  customerAccountId: ID!
  customerUserId: ID!
  expenseId: ID
  fundingSource: FundingSource
  """The ID of an object"""
  id: ID!
  insertedAt: Time!
  modifiedBy: String
  paymentInstrument: PaymentInstrument
  paymentInstrumentVersion: Int
  postedDate: Time
  reimbursementMetadata: ReimbursementMetadata!
  requestingUser: User
  state: ReimbursementItemState!
  updatedAt: Time!
}

type CreateContactPayload {
  clientMutationId: String!
  contact: PaymentContact!
}

type SetReceivablesOffersSellerAccountHasSeenFullAccessConfirmationBannerPayload {
  clientMutationId: String!
  sellerAccount: ReceivablesOffersSellerAccount
}

type DeleteDepartmentPayload {
  clientMutationId: String!
}

type DeviceInformation {
  additionalInformation: Json
  appVersion: String!
  model: String!
  os: String!
}

input AchReceivingMethodInput {
  accountNumber: String
  beneficiaryName: String
  routingNumber: String
}

input BatchCreateContactsInput {
  """The id of asset uploaded to create these contacts"""
  assetId: String!
  clientMutationId: String!
  """The contact inputs"""
  vendorContactInputs: [VendorContactInput!]!
}

input SpendAggregateFilters {
  cardIds: [String]
  departmentIds: [String]
  from: Time!
  merchantCategoryIds: [String]
  merchantIds: [String]
  to: Time!
  userCategoryIds: [String]
  userIds: [String]
}

type CreateIntegrationPayload {
  clientMutationId: String!
  integration: Integration
}

input ErpFeedInput {
  """financial_account_id the feed is for"""
  financialAccountId: ID!
  """Date to begin the sync"""
  syncFrom: Time!
  """Erp Vendor type"""
  type: ErpVendorType!
  """Raw json object with metadata"""
  vendorOptions: Json
}

type MilesTransferQuote {
  exchangeRate: Int!
  redemptionOfferId: String!
}

type CreateOrUpdatePaymentPayload {
  payment: CardPaymentForwarderPaymentObject!
}

type PlaidInstitutionMapping {
  fallbackInstitution: FinancialInstitution!
  plaidInstitutionId: String!
}

type TransactionConnection {
  edges: [TransactionEdge]
  pageInfo: PageInfo!
}

type ProcessDocumentPayload {
  success: Boolean
}

union RuleMetadata = GlobalLimitRuleMetadata | LimitRuleMetadata

type MerchantCategory implements Node @key(fields: "id") {
  description: String
  """The ID of an object"""
  id: ID!
  isDefault: Boolean
  name: String
}

type ConnectInstitutionPayload {
  clientMutationId: String!
  result: FinancialsSourceResult
}

type CancelCashTransactionPayload {
  clientMutationId: String!
  transaction: CashTransaction!
}

union JournalEntryOriginator = RewardsRefund | TransactionOperation

input ChequePaymentInstrumentInput {
  address: AddressInput!
  recipientName: String!
}

type ExportConnection {
  edges: [ExportEdge]
  pageInfo: PageInfo!
}

input RefreshIntegrationInput {
  clientMutationId: String!
  id: ID!
}

type CreateOnboardingProductApplicationPayload {
  clientMutationId: String!
  onboardingApplication: OnboardingApplication!
}

type CreatePeriodicReviewApplicationPayload {
  clientMutationId: String!
  onboardingApplication: OnboardingApplication!
}

type PendingRecordApproval implements Node {
  approvalToken: String!
  decidedByUser: User
  decision: PendingRecordApprovalDecision!
  decisionNotes: String
  decisionReason: PendingRecordApprovalDecisionReason
  """The ID of an object"""
  id: ID!
  pendingRecordId: ID!
  updatedAt: Time
}

union CashTransactionDetails = CashTransactionAchDetails | CashTransactionAchReturnDetails | CashTransactionAdminBalanceAdjustmentDetails | CashTransactionBookTransferDetails | CashTransactionBrexOperationalTransferDetails | CashTransactionCardCollectionDetails | CashTransactionDepositedChequeDetails | CashTransactionDepositedChequeReturnDetails | CashTransactionDividendDetails | CashTransactionDomesticWireDetails | CashTransactionDomesticWireReturnDetails | CashTransactionFboTransferDetails | CashTransactionInterestDetails | CashTransactionInternationalWireDetails | CashTransactionInternationalWireReturnDetails | CashTransactionIntraCuaccBookTransferDetails | CashTransactionOutgoingChequeDetails | CashTransactionOutgoingChequeReturnDetails | CashTransactionPayrollEstimateDetails | CashTransactionReceivablesOffersAdvanceDetails | CashTransactionReceivablesOffersCollectionDetails | CashTransactionReceivablesOffersRepaymentDetails | CashTransactionRewardsRedemptionDetails

input CreatePaymentInstrumentInput {
  achPaymentInstrument: AchPaymentInstrumentInput
  """Payment instrument''s beneficiary name"""
  beneficiaryName: String
  chequePaymentInstrument: ChequePaymentInstrumentInput
  clientMutationId: String!
  contactId: ID!
  domesticWirePaymentInstrument: DomesticWirePaymentInstrumentInput
  internationalWirePaymentInstrument: InternationalWirePaymentInstrumentInput
}

type SetReceivablesOffersPayFeeWithRewardsPayload {
  account: ReceivablesOffersAccount
  clientMutationId: String!
}

input BankAccountSourceInput {
  accountName: String!
  accountNumber: String!
  accountType: String!
  routingNumber: String!
}

type Transaction implements Node {
  accrualTime: Time
  amount: TransactionAmount @deprecated(reason: "Use pending_amount instead")
  authorizationCode: String
  card: Card
  cardAcceptor: CardAcceptor
  categorizationType: String
  clearedAmount: Int
  department: Department
  disputeTransaction: DisputeTransaction
  hasDispute: Boolean
  """The ID of an object"""
  id: ID!
  lens: TransactionLens
  location: Location
  memo: String
  merchant: Merchant
  operations(after: String, before: String, first: Int, last: Int): TransactionOperationConnection
  pendingAmount: Int
  purchaseTime: Time
  receipts(after: String, before: String, first: Int, last: Int): ReceiptConnection
  status: String
  userCategory: UserCategory
}

enum CashTransactionAccountType {
  CHECKING
  INVALID
  SAVINGS
}

type ChequePaymentInstrument {
  address: Address
  recipientName: String
}

enum DepositsTransactionType {
  ACH
  ACH_RETURN
  ADMIN_BALANCE_ADJUSTMENT
  BOOK_TRANSFER
  BREX_OPERATIONAL_TRANSFER
  CARD_COLLECTION
  CHEQUE
  CHEQUE_RETURN
  DIVIDEND
  FBO_TRANSFER
  INTEREST
  INTRA_CUSTOMER_ACCOUNT_BOOK_TRANSFER
  RECEIVABLES_OFFERS_ADVANCE
  RECEIVABLES_OFFERS_COLLECTION
  RECEIVABLES_OFFERS_REPAYMENT
  REWARDS_REDEMPTION
  WIRE
  WIRE_RETURN
}

type SubmitEarlyAccessFeatureSuggestionPayload {
  clientMutationId: String!
}

input UpdateCardFraudAlertsInput {
  clientMutationId: String!
  fraudulentTransactionIds: [ID!]
  legitimateTransactionIds: [ID!]
}

type ReceivablesOffersOffersGroupConnection {
  edges: [ReceivablesOffersOffersGroupEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

input InputCashRecurringScheduleMonthlyByWeek {
  cadence: Int!
  dayOfWeek: CashTransactionBusinessDay!
  weekOfMonth: Int!
}

enum IncludeDirectReportsOption {
  DIRECT_REPORTS_ONLY
  SELF_AND_DIRECT_REPORTS
}

enum OnboardingApplicationStatus {
  """Application approved"""
  APPROVED
  """User needs to submit evidence requests (before application submission)"""
  IN_PROGRESS
  """User needs to submit evidence requests (after application submission)"""
  PENDING_EVIDENCE
  PENDING_REVIEW
  PROCESSING
  """Same as processing. Will be deprecated."""
  PROCESSING_EVIDENCES
  """Application rejected"""
  REJECTED
  """Application submitted by user"""
  SUBMITTED
}

input CancelCashRecurringScheduleInput {
  clientMutationId: String!
  """ID of the recurring schedule"""
  id: ID!
}

type FinancialLoginField {
  contentType: FinancialLoginFieldContentType
  description: String
  id: String
  masked: Boolean
  name: String
  order: Int
}

enum Api {
  INVALID
  ONBOARDING
  PAYMENTS
  TEAM
  TRANSACTIONS
}

type ResendWelcomeEmailPayload {
  clientMutationId: String!
}

type OnboardingApplicationStateProductV1 {
  """The state of the card portion of the product application"""
  card: OnboardingApplicationStateProductV1Value
  """The state of the cash portion of the product application"""
  cash: OnboardingApplicationStateProductV1Value
}

type CashTransactionBeneficiaryBank {
  address: Address
  info: Json
  name: String
}

enum BillOrigin {
  DASHBOARD
  EMAIL
  RECURRING
}

union AssetData = EmailAsset | FileAsset

enum ExportType {
  CSV
  DIRECT
}

input InputCashRecurringScheduleDurationUnion {
  endsAt: Time
  totalCount: Int
}

input ReplaceCardWithVirtualInput {
  cardId: ID!
  clientMutationId: String!
  displayName: String
  holderName: String
  replacementDescription: String
  replacementReason: CardReplacementReason!
}

input ReplaceFundingSourceInput {
  bankAccountSource: BankAccountSourceInput!
  clientMutationId: String!
  fundingSourceId: String!
  idempotencyKey: String!
  notes: String!
  priority: FundingSourcePriority
  reason: FundingSourceStatusChangeReason!
  type: String!
}

input CreateApprovalsRequestInput {
  clientMutationId: String!
  description: String
  monthlyLimitOverrideMetadata: ApprovalsRequestMonthlyLimitOverrideInput
  preapprovedCardMetadata: ApprovalsRequestPreapprovedCardInput
  type: ApprovalsRequestType!
}

type CreateSubscriptionPayload {
  clientMutationId: String!
  notificationSubscription: NotificationSubscription
}

type DeleteContactPayload {
  clientMutationId: String!
  contact: PaymentContact!
}

input CreateInvoiceTemplateInput {
  clientMutationId: String!
  footer: String
  header: String
  idempotencyKey: String!
  invoicerContactId: ID
  invoicingAccountId: ID!
  logoAssetId: ID
  note: String
  setAsDefaultTemplate: Boolean
}

type StatementEntryEdge {
  cursor: String
  node: StatementEntry
}

type SoftSignupPayload {
  authType: SoftSignupAuthType!
  clientMutationId: String!
  session: Session!
  token: String!
  user: User!
}

input UpdateCashTransactionInput {
  amountUsdCents: Int
  clientMutationId: String!
  """A customer editable memo for the transaction which is not meant to be processed in any way outside of a note for the customer to view"""
  customerMemo: String
  """
  Optional description for transfer that will be used for the "Payment Instructions" for
  Wires and the "Entry Description" field for Ach transactions
  """
  externalMemo: String
  id: ID!
  idempotencyKey: String!
  """
  Notify the contact if and when the transaction moves to the processing state
  False by default, ignored unless a credit to a contact with a valid email
  """
  notifyContactProcessing: Boolean
  recurringSchedule: InputCashRecurringSchedule
  """If not set, initiate the transaction as soon as possible (e.g. business day)"""
  scheduledSendAt: Time
  updateType: InputCashTransactionUpdateArgumentUnion
}

"""Miles transfer failure reasons"""
enum MilesTransferFailureReason {
  """A generic error occurred during miles transaction"""
  GENERIC_ERROR
  """Membership is invalid"""
  INVALID_MEMBER_INFORMATION_ID
  """Membership account is ineligible"""
  MEMBER_ACCOUNT_INELEGIBLE
  """Membership name does not match"""
  MEMBER_NAME_NOT_MATCHING
}

type CreditLimitFactorTileEdge {
  cursor: String
  """Credit Limit Factor Tile Node"""
  node: CreditLimitFactorTile
}

type DisableExpensesPayload {
  clientMutationId: String!
  integration: Integration
}

enum CardPaymentFailureSeverity {
  FATAL
  NONE
  RECOVERABLE
  UNKNOWN
}

input RefundPaymentInput {
  paymentId: ID
}

type PaymentDetailsTile implements Node {
  """The billing period. Resolved by the present service"""
  currentBillingPeriod: BillingPeriod
  """The default funding source, this will be used for automatic collections and scheduled collections where no funding source is explicitly requested"""
  defaultFundingSource: FundingSource
  """Estimated next due amount"""
  estimatedNextDueAmount: UpcomingDueAmount
  """The ID of an object"""
  id: ID!
}

type StatementEntryConnection {
  edges: [StatementEntryEdge]
  pageInfo: PageInfo!
}

type CompletePaymentApprovalWithTokenPayload {
  clientMutationId: String!
  paymentApproval: PaymentApproval!
  paymentApprovalResult: PaymentApprovalResult!
  paymentContext: DepositsPayment!
}

type CashTransactionReceivablesOffersRepaymentDetails {
  _: Boolean
}

input InputCashTransactionAchDebitArguments {
  """ID of a connected external bank account to pull funds from"""
  financialAccountId: ID!
}

type DisconnectApiClientPayload {
  clientMutationId: String!
}

type CollectionAttemptPeekDetails {
  """Journal Entries approximately leading to this payment attempt"""
  cardTransactionJournalEntries(limit: Int!): [JournalEntry]!
  periodEndTime: Time!
  periodStartTime: Time
}

"""details about manager setup"""
type ManagerSetupSummary {
  """has managers setup for all regular users"""
  hasCompleteManagerSetup: Boolean
  """has some managers setup for regular users"""
  hasSomeManagers: Boolean
}

enum GetRfiInputType {
  ARFI_CASE_ID
  ARFI_CASE_NUMBER
  ID
}

enum CountryAlpha3 {
  BRB
  RWA
  SDN
  GAB
  ZWE
  PCN
  BRA
  CUW
  ATF
  ISR
  CRI
  BTN
  BWA
  GMB
  CAF
  LCA
  BRN
  ARM
  LKA
  NLD
  MHL
  CAN
  VNM
  BVT
  PRT
  URY
  UGA
  GRC
  DNK
  CPV
  MRT
  MMR
  TJK
  CCK
  AND
  FRA
  SLE
  GBR
  JEY
  LBN
  GGY
  MNP
  FJI
  GUM
  PLW
  KAZ
  MTQ
  BLM
  ABW
  LAO
  GRL
  COL
  DZA
  MKD
  NIU
  STP
  PRI
  TON
  KHM
  VEN
  NFK
  UZB
  TZA
  AIA
  BIH
  HRV
  VAT
  DMA
  VIR
  LUX
  JOR
  UMI
  PER
  MLI
  SJM
  TGO
  SWZ
  MCO
  HMD
  IDN
  HTI
  LIE
  VCT
  BGR
  SGP
  MSR
  SLB
  HND
  GNB
  ZAF
  SRB
  ATG
  LBY
  ETH
  UKR
  SYC
  MYT
  DEU
  TWN
  GUF
  VGB
  MAR
  LSO
  NPL
  KOR
  EST
  FRO
  HUN
  THA
  SHN
  KNA
  BEN
  SPM
  EGY
  BES
  MLT
  MAC
  TUN
  PYF
  SUR
  KGZ
  NCL
  FSM
  TKL
  ROU
  NIC
  MWI
  CHE
  ZMB
  ISL
  IOT
  GIN
  ARG
  GIB
  ITA
  ECU
  GHA
  PHL
  TTO
  QAT
  TCD
  NRU
  SYR
  JPN
  CHN
  KIR
  MUS
  BFA
  ATA
  BOL
  ERI
  OMN
  GNQ
  TUR
  LVA
  JAM
  WSM
  COG
  GTM
  AGO
  SVK
  SOM
  LBR
  IRL
  CYP
  BDI
  ARE
  CYM
  SVN
  GRD
  AZE
  BMU
  AUS
  VUT
  TCA
  COD
  MDA
  PRY
  BLZ
  NER
  IMN
  AFG
  BHS
  NAM
  YEM
  CIV
  SMR
  GEO
  POL
  SEN
  USA
  PAN
  GLP
  SSD
  MDG
  SWE
  PNG
  COK
  GUY
  MNE
  TKM
  KWT
  MNG
  WLF
  NOR
  ALA
  KEN
  FLK
  BEL
  LTU
  IRQ
  TUV
  MYS
  SXM
  NGA
  BHR
  ESP
  MOZ
  PAK
  SGS
  ALB
  SLV
  CZE
  ESH
  CHL
  NZL
  BGD
  MEX
  MDV
  BLR
  PRK
  HKG
  REU
  CMR
  DJI
  AUT
  IND
  ASM
  COM
  TLS
  CXR
  DOM
  RUS
  PSE
  MAF
  CUB
  IRN
  SAU
  FIN
}

type CreateReimbursementPayload {
  clientMutationId: String!
  reimbursementItem: ReimbursementItem!
}

enum RewardsTriggerInstanceStatus {
  ACTIVE
  EXPIRED
  TRIGGERED
}

type DeleteLocationPayload {
  clientMutationId: String!
}

type EmailAssetAttachment {
  asset: Asset
  contentType: String
  size: Int
}

input UpdateUserCategoriesInput {
  clientMutationId: String!
  userCategories: [UserCategoryInput]!
}

type ShouldWithdrawPointsResponse {
  allowed: Boolean!
}

input GenerateDepositsVerificationLetterDownloadUrlInput {
  clientMutationId: String!
  depositsAccountId: ID
}

enum ExpensesRuleType {
  MANAGER_REVIEW
  MEMO
  RECEIPT
  REJECTION
  STANDARD
}

type ExternalIntegrationEntityEdge {
  cursor: String
  node: ExternalIntegrationEntity
}

"""ISOz time"""
scalar Time

type CanWithdrawFundsResponse {
  """Days since the last ach debit or cheque deposit settled transaction"""
  daysSinceLastSettledAddFundsTransaction: Int
  daysSinceLatestAchDebitSettlement: Int
  enabled: Boolean!
  issues: [DepositsWithdrawFundsIssue!]!
}

type CardStatementConnection {
  edges: [CardStatementEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

enum ReimbursementAction {
  APPROVE
  CANCEL
  COMPLETE_PAYMENT
  CREATE
  CREATE_PAYMENT
  FAIL_PAYMENT
  INVALID
  REJECT
  RETRY_PAYMENT
  REVOKE
  SUBMIT
  UPDATE
}

type CancelTransactionPayload {
  clientMutationId: String!
  transaction: DepositsTransaction!
}

type VendorInstitution {
  logoBase64: String
  metadata: VendorInstitutionMetadata
  vendor: FinancialsVendor
}

type ApprovalsReviewAssigneeEdge {
  cursor: String
  node: ApprovalsReviewAssignee
}

type Report {
  file: Asset
  format: ReportFormat
  type: ReportType
}

type SetReceivablesOffersRevenueAccessEnabledPayload {
  account: ReceivablesOffersAccount
  clientMutationId: String!
}

input DisableExpensesInput {
  clientMutationId: String!
  id: ID!
}

type MonthlyUserBalance {
  amountSpent: Int!
  month: String!
  year: Int!
}

type PositivePayAccountSetting implements Node {
  achCompanyId: String!
  deletedAt: Time
  """The ID of an object"""
  id: ID!
  name: String!
  status: PositivePayAccountSettingStatus!
}

type FinicityMetadata {
  isOauth: Boolean
}

enum ConversionIneligibilityReason {
  MANUAL_UNDERWRITING_REQUIRED
}

type UpdateContactDefaultErpCategoryPayload {
  clientMutationId: String!
}

input DisableIntegrationInput {
  clientMutationId: String!
  id: ID!
}

input CDaInput {
  clientMutationId: String!
}

type CardPaymentForwarderBeneficialOwner {
  firstName: String
  lastName: String
}

"""Payload for Netsuite vendors"""
type NetsuiteVendor {
  isInactive: Boolean
  name: String
}

type AdminUpdateApprovalsReviewPayload {
  approvalsReview: ApprovalsReview
  clientMutationId: String!
}

type RecurringRulesAndFutureDates {
  futurePayments(after: String, before: String, first: Int, last: Int): DepositsProcessingAndFuturePaymentDateConnection
  recurringRules: RecurringRules
}

type MerchantCategoryEdge {
  cursor: String
  node: MerchantCategory
}

input ConnectAmazonMwsCredentialInput {
  authToken: String!
  clientMutationId: String!
  id: ID!
  sellerId: String!
}

enum CountryAlpha2 {
  CZ
  NL
  BH
  KZ
  MC
  LR
  BV
  PS
  ST
  GQ
  TR
  BF
  KG
  FK
  ID
  UA
  ET
  CA
  CI
  BE
  VE
  VI
  RS
  ZM
  GL
  KN
  TC
  TL
  CX
  US
  SM
  TZ
  MT
  EC
  MZ
  NF
  VG
  GT
  FM
  HK
  BM
  IQ
  KI
  HT
  RU
  TV
  LY
  DK
  PH
  DM
  FO
  AZ
  RO
  AG
  YE
  LU
  VC
  KE
  KW
  ZW
  IL
  PE
  SN
  BJ
  PF
  CC
  AQ
  OM
  CU
  GA
  SL
  DO
  PG
  UZ
  PN
  SJ
  NU
  TK
  NZ
  SY
  ZA
  NC
  TN
  EH
  BA
  SK
  AS
  AX
  IR
  GE
  NI
  PR
  UG
  TT
  KR
  MF
  TG
  MR
  IO
  MG
  JP
  TF
  BN
  MH
  GD
  NP
  BW
  BO
  FJ
  QA
  CN
  NR
  DZ
  AU
  MN
  BZ
  VN
  EE
  GP
  NE
  MO
  BQ
  AF
  GF
  DE
  IS
  VU
  CM
  TM
  AI
  PK
  MU
  IM
  UM
  SG
  AD
  AO
  SH
  CV
  SE
  JE
  AM
  CL
  GN
  CO
  KY
  SC
  GS
  GW
  KM
  SV
  FR
  RE
  AT
  CF
  BY
  AW
  GR
  MQ
  SX
  GH
  SB
  GG
  BB
  MP
  JO
  SO
  GY
  ML
  LI
  CD
  JM
  NG
  NA
  LV
  HM
  TW
  HR
  GB
  LA
  WF
  EG
  SZ
  CR
  BS
  KH
  MA
  BL
  SD
  MV
  SS
  LB
  SA
  TO
  TD
  MX
  SI
  GI
  CY
  PT
  BT
  MK
  BG
  MM
  VA
  PL
  YT
  BI
  MY
  TH
  BR
  PA
  HN
  TJ
  CK
  BD
  MD
  PM
  RW
  KP
  IE
  LS
  LC
  GU
  NO
  AE
  PY
  CG
  LT
  IN
  ES
  DJ
  SR
  GM
  HU
  ME
  AR
  IT
  CW
  CH
  PW
  FI
  LK
  MS
  WS
  AL
  MW
  UY
  ER
}

type ReplacesRecordConnection {
  edges: [ReplacesRecordEdge]
  pageInfo: PageInfo!
}

type ReconnectErpFeedPayload {
  clientMutationId: String!
  erpFeed: ErpFeed
  errorMessage: String
  status: String
}

type UpdateCashTransactionPayload {
  clientMutationId: String!
  transaction: CashTransaction!
}

type Department implements Node @key(fields: "id") {
  deletedAt: Time
  description: String
  """The ID of an object"""
  id: ID!
  membersCount: Int
  name: String
  users(after: String, before: String, first: Int, last: Int): UserConnection
}

input ApprovalsRoutingRuleIndividualsV2Input {
  individualTypes: [ApprovalsUserTypeIndividualInput!]!
  managerTypes: [ApprovalsUserTypeManagerInput!]!
}

type AscendaMaintenance {
  creditingDelayHours: Int
  enabled: Boolean!
}

type SendInvoicePayload {
  clientMutationId: String!
  invoice: InvoicingInvoice
}

input AddressInput {
  address1: String!
  address2: String
  city: String!
  country: String!
  state: String!
  zip: String!
}

input SyncIntegrationInput {
  clientMutationId: String!
  endDateRange: Time
  id: ID!
  isPrimitive: Boolean
  startDateRange: Time
  statementEntryTypes: [String]
}

type GenerateDepositsVerificationLetterDownloadUrlPayload {
  clientMutationId: String!
  depositsVerificationLetterDownloadUrl: String!
}

type OptOutOfIncentiveCampaignPayload {
  clientMutationId: String!
}

"""The summation of all active offers that the customer has available as of now"""
type ReceivablesOffersCumulativeOffer {
  """Whether any of the active offers has been capped"""
  hasBeenCapped: Boolean
  """Sum of previously advanced amounts across all active offers"""
  sumAdvancedAmount: FinancialAsset
  """Sum of estimated loan repayments amounts across all active offers"""
  sumEstimatedLoanRepayments: FinancialAsset
  """Sum of estimated payout amounts across all active offers"""
  sumEstimatedPayout: FinancialAsset
  """Sum of estimated reserve amounts across all active offers"""
  sumEstimatedReserveAmount: FinancialAsset
  """Sum of offer amounts across all active offers minus any pending balance from card transactions"""
  sumOfferAmount: FinancialAsset
  """Sum of payout net sales amounts across all active offers"""
  sumPayoutNetSales: FinancialAsset
  """Sum of payout reserve credit amounts across all active offers"""
  sumPayoutReserveCredit: FinancialAsset
}

input SetApprovalsUnsafeFlagInput {
  clientMutationId: String!
  flagName: String!
  keyType: ApprovalsUnsafeFlagKeyType!
  value: String!
}

enum SpendAggregateSortOrder {
  ASC
  DESC
  INVALID
}

"""The event metadata for a comment event"""
type CardTransactionsInsightCommentEventMetadata {
  """The comment the user made on this spend alert"""
  comment: String!
}

input CreateCredentialInput {
  clientMutationId: String!
  vendor: String!
}

type EditPaymentPayload {
  clientMutationId: String!
  payment: DepositsPayment!
}

input SendInvoiceInput {
  clientMutationId: String!
  idempotencyKey: String!
  invoiceId: ID!
}

"""object containing information describing the health of a funding source"""
type FundingSourceHealth {
  """Whether this account has any ''successful'' or ''failed'' collections"""
  hasSettledCollections: Boolean!
  """The most recent failure severity"""
  mostRecentFailureSeverity: CardPaymentFailureSeverity
  """The most recent failure type"""
  mostRecentFailureType: CardPaymentFailureTypeV3
  """The timestamp of the most recently settled collection"""
  mostRecentSettledAt: Time
}

type Suggestion {
  field: String!
  options: [SuggestionType]!
}

type UnderwritingAnalysisFlagConnection {
  edges: [UnderwritingAnalysisFlagEdge]
  pageInfo: PageInfo!
}

type CreateApprovalsRequestPayload {
  approvalsRequest: ApprovalsRequest
  clientMutationId: String!
}

type CashRecurringScheduleDurationWithTotalCount {
  """
  Keep creating transactions until `total_count` transactions have been scheduled.
  We make this distinction because transactions can be cancelled which still count towards the `total_count` amount.
  """
  totalCount: Int!
}

"""Quickbooks credential payload"""
type CredentialQuickbooksPayload {
  """Boolean describing whether the credential has the required scopes for enabling bill sync"""
  hasBillSyncScopes: Boolean
}

type OnboardingPageMfa {
  _: Boolean
  content: OnboardingFormEmpty!
}

type ReceivablesOffersOffersGroupEdge {
  cursor: String
  node: ReceivablesOffersOffersGroup
}

type UpdateApprovalsRequestPayload {
  approvalsRequest: ApprovalsRequest
  clientMutationId: String!
}

enum FinancialDocumentStatus {
  ACCEPTED
  DUPLICATE
  """Uploaded statements are defaulted to `processing` status"""
  PROCESSING
  REJECTED
}

input ProcessPageViewInput {
  clientMutationId: String!
  pageView: PageView!
}

union BulkUserInviteResult = BulkUserInviteError | User

input SetReceivablesOffersAutoAdvanceModeInput {
  clientMutationId: String!
  value: Boolean!
}

type PaymentApprovalPaymentContext {
  amount: Int
  associationId: ID
  """The institution''s logo as a base64 PNG, if available"""
  beneficiaryBankLogoBase64: String
  counterpartyLocation: AccountLocation
  counterpartyName: String
  logicalId: ID!
  paymentDescription: String
  paymentInitiatorFirstName: String
  paymentInitiatorLastName: String
  paymentStatus: DepositsPaymentStatus
  paymentStatusReason: StatusReason
  paymentType: PaymentRail
  """Routing number associated with the recipient (counterparty)"""
  routingNumber: String
}

type OnboardingPagePeriodicReview {
  _: Boolean
  content: OnboardingPagePeriodicReview!
}

type TransactionOperationEdge {
  cursor: String
  node: TransactionOperation
}

type CreateInvoiceTemplatePayload {
  clientMutationId: String!
  invoiceTemplate: InvoiceTemplate
}

type MarkInvoicePayload {
  clientMutationId: String!
  invoice: InvoicingInvoice
}

type ActivateCardPayload {
  card: Card
  clientMutationId: String!
}

type CurrentBalanceTile implements Node {
  """Customer''s global limit and balance consumption"""
  balanceSummary: AccountBalanceSummary!
  """The ID of an object"""
  id: ID!
}

input ToggleRuleForStatementEntryInput {
  clientMutationId: String!
  integrationRuleId: ID!
  statementEntryId: ID!
}

"""One of many seller accounts associated with a receivables offers account"""
type ReceivablesOffersSellerAccount implements Node {
  """The data-importer data provider id"""
  dataProviderId: String!
  """The list of failing checks (for trial/full access, or ongoing monitoring checks)"""
  failingChecks: ReceivablesOffersAccountFailingChecks!
  """The ID of an object"""
  id: ID!
  """The integration credential id"""
  integrationCredentialId: String!
  """The settings for the seller account (user-modifiable)"""
  settings: ReceivablesOffersSellerAccountSettings!
  """The status of the seller account"""
  status: ReceivablesOffersAccountStatus!
  """The vendor type (sales platform, i.e. Amazon, Shopify, etc.)"""
  vendor: ReceivablesOffersVendorType!
}

type ReplacedByRecord {
  card: Card!
  insertedAt: Time!
  reason: CardReplacementReason!
}
	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
sm_cl101yrhf000a0h71siwu8ila	sv_ckwwklx3a000c0e42a95s2wzb	"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`''argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @extends on OBJECT | INTERFACE

directive @external on FIELD_DEFINITION

directive @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"""
The interface for paginating through collections of elements.
Every collection of entities not returned by a mutation result should
paginate through a connection. That is, `types` with a field that is
an `array` should be exceedingly rare.
We want all collections of things to be paginated.
"""
interface Connection {
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  """
  The total count of items matching the filter criteria specified for this connection.
  This value may be approximate. And this value may not be provided at all. Not all connections
  can be counted easily.
  """
  totalCount: Int
}

"A request to accomplish some task (e.g. approve an expense, approve a budget, etc...)"
interface Request {
  """
  Fetch actions on the Request.
  Can be filtered e.g. to select only pending actions
  """
  actions(filter: RequestActionFilterInput, order: RequestActionOrderInput, page: PaginationInput): RequestActionConnection
  "When the request was created."
  createdAt: Time!
  "The unique ID of the request"
  id: ID!
  "The timestamp when a controller overridden the request"
  overriddenAt: Time
  "The employee who overridden the request."
  overriddenBy: Employee
  "The user who initiated the request"
  requestedBy: User @deprecated(reason : "Incorrect permission scoping, use requestedByEmployee instead")
  "The employee who initiated the request"
  requestedByEmployee: Employee
  "The stage of approval of the request, e.g. created, approved, denied"
  status: RequestStatus
  """
  The type of thing being requested.
  
  This is a 1:1 mapping to __typename, but it exists for convenience and consistency.
  """
  type: RequestType
}

interface RequestActionOwner {
  "A employee who is requested to perform this action"
  employee: Employee
  "A user who is requested to perform this action"
  user: User @deprecated(reason : "Incorrect permission scoping, use employee instead")
}

union _Entity = Budget | BudgetRequest | Employee | Expense | ExpenseRequest | RequestAction | User

type Budget @extends @key(fields : "id") {
  id: ID! @external
}

"A budget request."
type BudgetRequest implements Request @key(fields : "id") {
  "Actions for the budget request."
  actions(filter: RequestActionFilterInput, order: RequestActionOrderInput, page: PaginationInput): RequestActionConnection
  """
  The Budget which this Request was created to get approval for
  The Budget''s status will be ''pending_approval'' while the request is ''pending''
  """
  budget: Budget
  "When the request was created."
  createdAt: Time!
  "The unique ID of the budget request."
  id: ID!
  "The timestamp when a controller overridden the request."
  overriddenAt: Time
  "The employee who overridden the request."
  overriddenBy: Employee
  "The user who requested the budget."
  requestedBy: User @deprecated(reason : "Incorrect permission scoping, use requestedByEmployee instead")
  "The employee who initiated the request."
  requestedByEmployee: Employee
  "The stage of approval of the request, e.g. created, approved, denied"
  status: RequestStatus
  "Will always map to BUDGET for a BudgetRequest."
  type: RequestType
}

type Employee @extends @key(fields : "customerUserId") {
  customerUserId: ID @external
}

"""
 TODO: this will be done after hierachies are implemented
extend type Title @key(fields: "id") {
   id: ID! @external
}
"""
type Expense @extends @key(fields : "id") {
  id: ID! @external
  "A history of the requests associated with the expense."
  requestHistory: ExpenseRequestConnection
}

"An expense request."
type ExpenseRequest implements Request @key(fields : "id") {
  "Actions for the expense request."
  actions(filter: RequestActionFilterInput, order: RequestActionOrderInput, page: PaginationInput): RequestActionConnection
  "When the request was created."
  createdAt: Time!
  """
  The Expense which this Request was created to get approval for
  The Expense''s status will be ''submitted'' or ''out_of_policy'' while the request is ''pending''
  """
  expense: Expense
  "The unique ID of the expense request."
  id: ID!
  "The timestamp when a controller overridden the request"
  overriddenAt: Time
  "The employee who overridden the request."
  overriddenBy: Employee
  "The user who initiated the request - generally the user who created the expense."
  requestedBy: User @deprecated(reason : "Incorrect permission scoping, use requestedByEmployee instead")
  "The employee who initiated the request"
  requestedByEmployee: Employee
  "The stage of approval of the request, e.g. created, approved, denied"
  status: RequestStatus
  "Will always map to EXPENSE for an ExpenseRequest."
  type: RequestType
}

"An expense request connection for the expense request pagination."
type ExpenseRequestConnection implements Connection {
  "The requests in the current page of results."
  edges: [ExpenseRequestEdge!]!
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  "The total count of requests matching the filter criteria specified for this connection."
  totalCount: Int
}

"A Request edge for Request pagination."
type ExpenseRequestEdge {
  "The opaque cursor of the current edge."
  cursor: String
  "The request at this edge."
  node: ExpenseRequest
}

"Financial Asset wrapper"
type FinancialAsset {
  "The instrument code (usd, etc.). Currently, only usd is supported."
  instrumentCode: FinancialInstrumentCode!
  "The amount in cents"
  quantityCents: Int!
}

type Mutation {
  "Update a Request."
  updateRequest(input: UpdateRequestInput!): UpdateRequestResult!
  "Update a request action."
  updateRequestAction(input: UpdateRequestActionInput!): UpdateRequestActionResult!
  "Update multiple request actions at once."
  updateRequestActions(input: UpdateRequestActionsInput!): UpdateRequestActionResults!
  "Update multiple Requests at once."
  updateRequests(input: UpdateRequestsInput!): UpdateRequestResults!
}

type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service
  "Get a request by id"
  request(id: ID): Request
  "Get a single Request Action by ID"
  requestAction(id: ID!): RequestAction
  "Get a list of Requests"
  requests(filter: RequestFilterInput, page: PaginationInput): RequestConnection!
}

"An action which needs (or needed) to be taken on a Request"
type RequestAction @key(fields : "id") {
  "The unique ID of the RequestAction"
  id: ID!
  """
  A list of the users who have been requested to take this action,
  alongside information about why they are the owners.
  For Receipt/Memo requests, this will generally be the requester
  """
  owners: [RequestActionOwner!]!
  "The Request which this action must be performed for"
  request: Request
  """
  The comment left by the person who resolved the action.
  
  - If this was an Approval action, this would be the approver
  - If this was a Justification action, this would be the justifier
  """
  resolutionComment: String
  "The time that the action was resolved at."
  resolvedAt: Time
  "The user who resolved the request action (and the reason they were able to resolve it)"
  resolvedBy: RequestActionOwner
  "The current status of the request action e.g. whether it has been performed"
  status: RequestActionStatus
  "The type of action to be performed"
  type: RequestActionType
}

"A request action connection for the request action pagination."
type RequestActionConnection implements Connection {
  "The request actions in the current page of results."
  edges: [RequestActionEdge!]!
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  "The total count of request actions matching the filter criteria specified for this connection."
  totalCount: Int
}

"A RequestAction edge for the RequestAction pagination."
type RequestActionEdge {
  "The opaque cursor of the current edge."
  cursor: String
  "The request action at this edge."
  node: RequestAction
}

type RequestActionManagerDifference implements RequestActionOwner {
  """
  A employee who is (or was, if the Request is resolved) ''levelDifference'' levels up the manager hierarchy from the
  requester, and is therefore requested to take action.
  """
  employee: Employee
  """
  The action/review was requested from the manager N-levels up the manager chain.
  
  For example, N=1 = the requester''s manager. N=2 = the requester''s manager''s manager.
  """
  levelDifference: Int!
  """
  A user who is (or was, if the Request is resolved) ''levelDifference'' levels up the manager hierarchy from the
  requester, and is therefore requested to take action.
  """
  user: User @deprecated(reason : "Incorrect permission scoping, use employee instead")
}

type RequestActionSpecificOwner implements RequestActionOwner {
  """
  The policy specified that this exact employee is requested to take action.
  Often this will be the requester, e.g. for requests to upload Memos/Receipts
  """
  employee: Employee
  """
  The policy specified that this exact user is requested to take action.
  Often this will be the requester, e.g. for requests to upload Memos/Receipts
  """
  user: User @deprecated(reason : "Incorrect permission scoping, use employee instead")
}

type RequestActionTitleOwner implements RequestActionOwner {
  "A employee who holds (or held, if the Request is resolved) the the title specified by the policy to take action."
  employee: Employee
  "A user who holds (or held, if the Request is resolved) the the title specified by the policy to take action."
  user: User @deprecated(reason : "Incorrect permission scoping, use employee instead")
}

"A request connection for the request pagination."
type RequestConnection implements Connection {
  "The requests in the current page of results."
  edges: [RequestEdge!]!
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  "The total count of requests matching the filter criteria specified for this connection."
  totalCount: Int
}

"A Request edge for Request pagination."
type RequestEdge {
  "The opaque cursor of the current edge."
  cursor: String
  "The request at this edge."
  node: Request
}

type UpdateRequestActionResult {
  "The RequestAction which was updated"
  requestAction: RequestAction!
}

type UpdateRequestActionResults {
  "The RequestAction which were updated"
  results: [UpdateRequestActionResult!]!
}

type UpdateRequestResult {
  "The Request which was updated"
  request: Request!
}

type UpdateRequestResults {
  "The Requests which were updated"
  results: [UpdateRequestResult!]!
}

" Federation Types"
type User @extends @key(fields : "id") {
  id: ID! @external
}

type _Service {
  sdl: String!
}

"The types of relationships for filtering who is assigned a request."
enum AssignedToFilterInput {
  "Assigned to anyone in the user''s company"
  COMPANY
  "Assigned to the logged in user"
  ME
  "Assigned to anyone except the logged in user"
  OTHERS
}

"The type of the Expense."
enum ExpenseType {
  "A bill pay expense."
  BILLPAY
  "A card expense."
  CARD
  "A reimbursement expense."
  REIMBURSEMENT
}

"""
 From APIv1
 https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L7
 https://github.com/brexhq/credit_card/blob/main/libraries/brex_financial_asset/lib/financial_instrument_constants.ex#L962
"""
enum FinancialInstrumentCode {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHE
  CHF
  CHW
  CLF
  CLP
  CNY
  COP
  COU
  CRC
  CRYPTO_BTC
  CRYPTO_ETH
  CRYPTO_USDC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NASDAQ_DAGXX
  NASDAQ_DGCXX
  NASDAQ_DGVXX
  NASDAQ_DPGXX
  NASDAQ_GGBXX
  NASDAQ_GGDXX
  NASDAQ_GGSXX
  NASDAQ_GSBXX
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  SSP
  STN
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  USN
  UYI
  UYU
  UYW
  UZS
  VES
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XBA
  XBB
  XBC
  XBD
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  XSU
  XTS
  XUA
  XXX
  YER
  ZAR
  ZMW
  ZWL
}

"""
Time bucketting strategy
- START: Buckets start at the startsAt timestamp
- END: Buckets start at the endsAt timestamp
- CALENDAR: Buckets are aligned with the calendar units (e.g. WEEKS) but can include
partial buckets based on the startsAt and endsAt timebuckets
"""
enum InsightsTimeBucketStrategy {
  CALENDAR
  END
  START
}

"Generic time unit"
enum InsightsTimeUnit {
  DAY
  MONTH
  QUARTER
  WEEK
  YEAR
}

enum OrderByDirection {
  ASCENDING
  DESCENDING
}

"The current status of the request action."
enum RequestActionStatus {
  "An action which is not ready to be taken because its dependencies are unresolved"
  BLOCKED
  "The action''s request was canceled"
  CANCELED
  "The desired action was taken by the owner"
  COMPLETED
  "The action was marked as not needed"
  DISMISSED
  "An action which is ready to be taken (no dependencies, or all dependencies are resolved)"
  PENDING
  """
  The owner explicitly refuses to take an action, e.g. approving an expense.
  Not all Request Actions can be REJECTED.
  """
  REJECTED
}

enum RequestActionStatusInput {
  "Approve a request action, approving the request if this was the last action"
  COMPLETED
  "The action was marked as not needed"
  DISMISSED
  "Reject a request action, therefore rejecting the whole request"
  REJECTED
}

"The type of the request action."
enum RequestActionType {
  "A memo is requested."
  MEMO
  "A receipt is requested."
  RECEIPT
  "A manager (or other) review is requested."
  REVIEW
}

"The status of a Request."
enum RequestStatus {
  """
  When all request actions associated with this request are approved/dismissed,
  or an admin directly overrode the request with an approval
  """
  APPROVED
  """
  When a request was canceled by the requester
  
  TODO: do we need to differentiate between ''user''-canceled vs ''system''-canceled? (e.g. VOID)
  """
  CANCELED
  "Requests are created as pending"
  PENDING
  "When one of the actions was rejected"
  REJECTED
}

enum RequestStatusInput {
  "Force a request to be approved, even if its actions have not been completed"
  APPROVED
  "Cancel a request which is no longer needed"
  CANCELED
  "Completely reject a request, even if it didn''t ask for your approval"
  REJECTED
}

"The type of the Request."
enum RequestType {
  "This is a budget request."
  BUDGET
  "This is an expense request."
  EXPENSE
}

"The types of relationships for filtering who requested a request."
enum RequestedByFilterInput {
  "Created by anyone in the user''s company"
  COMPANY
  "Created by the logged in user"
  ME
  "Created by anyone in the user''s team"
  TEAM
}

"Available fields to order the Expense connection by."
enum SortableRequestActionField {
  EXECUTION_ORDER
}

"ISOz date"
scalar Date

"Json object"
scalar Json

"64Bit integer"
scalar Long

"ISOz time"
scalar Time

scalar _Any

scalar _FieldSet

"""
 From APIv1
 https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L13
"""
input FinancialAssetInput {
  "The instrument code (usd, etc.). Currently, only usd is supported."
  instrumentCode: FinancialInstrumentCode = USD
  "The amount in cents"
  quantityCents: Int
}

input FinancialAssetRangeInput {
  "Exclusive, only considers given currency, required to have same currency when minAmount is provided."
  maxAmount: FinancialAssetInput
  "Inclusive, only considers given currency, required to have same currency when maxAmount is provided."
  minAmount: FinancialAssetInput
}

"""
Pagination parameters for enumerating items in a connection.
Only {first, after} OR {last, before} pairs can be set.
e.g. If {first, before} is set, that will cause a validation error.
The cursors are optional. Without a specified cursor, it is assumed to start at
the first item (for `first`) or last item (for `last`) of the collection.
"""
input PaginationInput {
  "The cursor to start the page at (exclusive)."
  after: String
  "The cursor to end the page at (exclusive)."
  before: String
  "The number of items to return in a page after the `after` cursor."
  first: Int
  "The number of items to return in a page prior to the `before` cursor."
  last: Int
}

"Filters available to control which request actions get returned."
input RequestActionFilterInput {
  "Match IN specific statues, match ALL when no filter is provided"
  status: [RequestActionStatus!]
}

input RequestActionInput {
  """
  The status of the request action.
  Note: Only REVIEW request actions can be COMPLETED or REJECTED.
  Note: Any request action can be DISMISSED.
  """
  status: RequestActionStatusInput
}

"Determines the order that the requests will be returned."
input RequestActionOrderInput {
  field: SortableRequestActionField!
  order: OrderByDirection!
}

"Filters available to control which requests get returned in a connection."
input RequestFilterInput {
  "Select requests by one or more types"
  requestTypes: [RequestType!]
  "Match IN specific statuses, match ALL when no filter it provided"
  status: [RequestStatus!]
}

input RequestInput {
  "The status of the request."
  status: RequestStatus
}

input TimeIntervalInput {
  "Exclusive end at."
  endAt: Time
  "Inclusive start at."
  startAt: Time
}

input UpdateRequestActionInput {
  "clientMutationId"
  clientMutationId: String
  "The ID of the request action to update."
  id: ID!
  "The input for the request action object."
  requestAction: RequestActionInput!
}

input UpdateRequestActionsInput {
  "clientMutationId"
  clientMutationId: String
  "A list of individual update request input"
  updateRequestActionInputs: [UpdateRequestActionInput!]!
}

input UpdateRequestInput {
  "clientMutationId"
  clientMutationId: String
  "The ID of the request to update."
  id: ID!
  "The input for the request object."
  request: RequestInput!
}

input UpdateRequestsInput {
  "clientMutationId"
  clientMutationId: String
  "A list of individual update request input"
  updateRequestInputs: [UpdateRequestInput!]!
}
	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
sm_cl101yvy0000k0h71o093drz7	sv_ckwwkkp9l00020e420yyi9lxn	"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`''argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @extends on OBJECT | INTERFACE

directive @external on FIELD_DEFINITION

directive @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"""
The interface for paginating through collections of elements.
Every collection of entities not returned by a mutation result should
paginate through a connection. That is, `types` with a field that is
an `array` should be exceedingly rare.
We want all collections of things to be paginated.
"""
interface Connection {
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  """
  The total count of items matching the filter criteria specified for this connection.
  This value may be approximate. And this value may not be provided at all. Not all connections
  can be counted easily.
  """
  totalCount: Int
}

"Merchant category controls reference."
union MerchantCategoryControlReference = MerchantCategoryIdControlReference | MerchantNameControlReference

union _Entity = Account | Budget | BudgetRequest | BudgetTemplate | Card | Employee | Merchant | MerchantCategory | Policy | User

type Account @extends @key(fields : "id") {
  id: ID! @external
}

"Response type for assigning budgets to cards."
type AssignBudgetToCardResult {
  cardBudgetMapping: CardBudgetMapping!
  clientMutationId: String!
}

"A budget to manage expenses."
type Budget @key(fields : "id") {
  "The Customer Account that has visibility to this budget"
  account: Account!
  "Ordered list of ancestors"
  ancestryPath: [Budget!]!
  "List of cards related to the Budget"
  cards(filter: CardFilterInput!, page: PaginationInput): BudgetCardConnection!
  "The children of this budget, if any"
  children(filter: BudgetFilterInput, order: BudgetOrderInput, page: PaginationInput): BudgetConnection!
  "The User who created this budget"
  creator: User! @deprecated(reason : "Incorrect permission scoping, use ''creatorEmployee''")
  "The Employee who created this budget"
  creatorEmployee: Employee!
  "Budget period balance"
  currentPeriodBalance: BudgetPeriodBalance
  "The descendants of this budget, if any"
  descendants(filter: BudgetFilterInput, order: BudgetOrderInput, page: PaginationInput): BudgetConnection!
  "Description of what the budget is used for"
  description: String
  "Budget edit permission grant"
  editPermissionGrant: BudgetEditPermissionGrant
  "The end date of the budget, inclusive."
  endDate: Date
  "The end datetime of the budget, inclusive."
  endTime: Time
  "True if the budget limit is hard enforced"
  enforceLimit: Boolean!
  "Budget ID"
  id: ID!
  "Merchant category controls, including those along ancestry path."
  inheritedMerchantCategoryControls: MerchantCategoryControls
  "Last status update detail"
  lastStatusUpdateDetails: StatusUpdateDetails
  "Limit on the budget"
  limit: FinancialAsset!
  "The employees who are considered members of this budget"
  memberEmployees(filter: BudgetEmployeeFilter, order: BudgetEmployeeOrder, page: PaginationInput): BudgetEmployeeConnection
  "The users who are considered members of this budget"
  memberUsers(page: PaginationInput): BudgetUserConnection @deprecated(reason : "Incorrect permission scoping, use ''memberEmployees''")
  "The users / hierarchy group assigned to the budget"
  members(page: PaginationInput): BudgetPersonnelConnection! @deprecated(reason : "No longer supported")
  "Name of the budget"
  name: String!
  "True if only provisioned cards can spend from this budget"
  onlyProvisionedCardSpend: Boolean!
  "The employees who are considered owners of this budget"
  ownerEmployees(filter: BudgetEmployeeFilter, order: BudgetEmployeeOrder, page: PaginationInput): BudgetEmployeeConnection
  "The users who are considered owners of this budget"
  ownerUsers(page: PaginationInput): BudgetUserConnection @deprecated(reason : "Incorrect permission scoping, use ''ownerEmployees''")
  "The users who are considered owners of this budget"
  owners(page: PaginationInput): BudgetPersonnelConnection! @deprecated(reason : "No longer supported")
  "The parent of this budget, if any"
  parent: Budget
  "The budget period"
  period: BudgetPeriod! @deprecated(reason : "Use the fields directly on budget schema")
  "The recurring period type of the budget."
  periodType: BudgetPeriodType!
  "The policy that manages expenses for this budget"
  policy: Policy!
  "Settings related to the Budget"
  settings: BudgetSettings! @deprecated(reason : "Use the fields directly on budget schema")
  "How much of the budget has been spent"
  spent: FinancialAsset! @deprecated(reason : "Deprecated in favor of `currentPeriodBalance.spent`")
  "The start date of the budget, inclusive."
  startDate: Date
  "The start time of the budget, inclusive."
  startTime: Time
  "Budget status"
  status: BudgetStatus!
  "Budget version"
  version: Int!
}

"A Card connection for pagination"
type BudgetCardConnection implements Connection {
  "The cards in the current page of results."
  edges: [BudgetCardEdge!]!
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  "The total count of cards matching the filter criteria specified for this connection."
  totalCount: Int
}

"A Card edge for the Card connection."
type BudgetCardEdge {
  "The opaque cursor of the current edge."
  cursor: String
  "The card at this edge."
  node: Card!
}

"An Budget connection for Budget pagination."
type BudgetConnection implements Connection {
  "The budgets in the current page of results."
  edges: [BudgetEdge!]!
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  "The total count of budget matching the filter criteria specified for this connection."
  totalCount: Int
}

"A Budget edge for the Budget connection."
type BudgetEdge {
  "The opaque cursor of the current edge."
  cursor: String
  "The budget at this edge."
  node: Budget
}

"A BudgetEmployee connection for Budget owner/member pagination futureproofing"
type BudgetEmployeeConnection implements Connection {
  "The items in the current page of results."
  edges: [BudgetEmployeeEdge]!
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  "The total count of items, across all pages, matching the filter criteria specified for this connection."
  totalCount: Int
}

"A BudgetEmployee edge for the BudgetEmployee connection."
type BudgetEmployeeEdge {
  "The opaque cursor of the current edge."
  cursor: String
  "The item at this edge."
  node: Employee
}

"Result type for matched merchants and categories."
type BudgetMerchantsAndCategoriesSuggestionsResult {
  "Merchant categories."
  merchantCategories: [MerchantCategory!]
  "Merchants."
  merchants: [Merchant!]
}

"A period of time and cadence that a budget applies to."
type BudgetPeriod {
  "The end date (YYYY-MM-DD) of the budget, inclusive. Semantically end of PST midnight"
  endDate: Date
  "The end datetime of the budget, inclusive. (always 7:59am UTC the next day)"
  endTime: Time
  "The recurring period type of the budget."
  periodType: BudgetPeriodType!
  "The start date of the budget, inclusive."
  startDate: Date
  "The start time of the budget, inclusive."
  startTime: Time
}

"Budget period balance"
type BudgetPeriodBalance {
  "Balance end time"
  endTime: Time
  "Balance spent amount"
  spent: FinancialAsset!
  "Balance start time"
  startTime: Time
}

type BudgetPersonnel {
  users: [User!]
}

"A BudgetPersonnel connection for BudgetPersonnel pagination."
type BudgetPersonnelConnection implements Connection {
  "The items in the current page of results."
  edges: [BudgetPersonnelEdge]!
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  "The total count of items, across all pages, matching the filter criteria specified for this connection."
  totalCount: Int
}

"A BudgetPersonnel edge for the BudgetPersonnel connection."
type BudgetPersonnelEdge {
  "The opaque cursor of the current edge."
  cursor: String
  "The item at this edge."
  node: BudgetPersonnel
}

type BudgetRequest @extends @key(fields : "id") {
  id: ID! @external
}

"A request to create a new budget"
type BudgetRequestEntity {
  "The Customer Account that has visibility to this budget"
  account: Account!
  "Budget that was created from this request"
  createdBudget: Budget
  "Description of what this budget request is for"
  description: String!
  "The end date of the budget, inclusive."
  endDate: Date
  "True if the budget limit is hard enforced"
  enforceLimit: Boolean!
  "Budget Request ID (within budgets service)"
  id: ID!
  "Limit on the budget"
  limit: FinancialAsset!
  "The employees who are considered members of this budget"
  memberEmployees: BudgetEmployeeConnection!
  "Name of the budget"
  name: String!
  "True if only provisioned cards can spend from this budget"
  onlyProvisionedCardSpend: Boolean!
  "The employees who are considered owners of this budget"
  ownerEmployees: BudgetEmployeeConnection!
  "The parent of this budget, if any"
  parent: Budget
  "The recurring period type of the budget."
  periodType: BudgetPeriodType!
  "The policy that manages expenses for this budget"
  policy: Policy
  "The initiated request instance itself"
  request: BudgetRequest
  "The Employee who created this budget request"
  requestedByEmployee: Employee!
  "The start date of the budget, inclusive."
  startDate: Date!
  "Version of the Budget Request"
  version: Int!
}

type BudgetSettings {
  "True if the budget limit is hard enforced"
  enforceLimit: Boolean!
  "True if only provisioned cards can spend from this budget"
  onlyProvisionedCardSpend: Boolean!
}

" currently assumed to be a top-level entity due to the existence of an ID key."
type BudgetTemplate @key(fields : "id") {
  id: ID!
}

"An BudgetTemplate connection for BudgetTemplate pagination."
type BudgetTemplateConnection implements Connection {
  "The budget templates in the current page of results."
  edges: [BudgetTemplateEdge!]!
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  "The total count of budget matching the filter criteria specified for this connection."
  totalCount: Int
}

"A BudgetTemplate edge for the BudgetTemplate connection."
type BudgetTemplateEdge {
  "The opaque cursor of the current edge."
  cursor: String
  "The budget at this edge."
  node: BudgetTemplate
}

type BudgetUserAmountSpent {
  amountSpent: FinancialAsset
  employee: Employee
  user: User @deprecated(reason : "Incorrect permission scoping, use ''employee'' instead")
}

"A BudgetUser connection for Budget owner/member pagination futureproofing"
type BudgetUserConnection implements Connection {
  "The items in the current page of results."
  edges: [BudgetUserEdge]!
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  "The total count of items, across all pages, matching the filter criteria specified for this connection."
  totalCount: Int
}

"A BudgetUser edge for the BudgetUser connection."
type BudgetUserEdge {
  "The opaque cursor of the current edge."
  cursor: String
  "The item at this edge."
  node: User
}

type Card @extends @key(fields : "id") {
  budget: Budget
  cardBudgetOwnershipType: CardBudgetOwnershipType
  id: ID! @external
}

"Card Budget Mapping object type."
type CardBudgetMapping {
  budget: Budget!
  budgetMappingExpiration: BudgetMappingExpiration!
  card: Card!
  cardBudgetOwnershipType: CardBudgetOwnershipType!
  effectiveRange: EffectiveRange!
  id: ID!
  type: BudgetMappingType! @deprecated(reason : "Use budgetMappingExpiration")
}

"Response type for a conflicting merchant."
type ConflictingMerchant {
  "The offending budget."
  budget: Budget
  "The offending merchant category configs."
  configs: [MerchantCategoryConfig!]!
  "ConflictingMerchant object id."
  id: String!
  "Merchant name."
  name: String!
}

"Response type for a conflicting merchant category."
type ConflictingMerchantCategory {
  "The offending budget."
  budget: Budget
  "The offending merchant category configs."
  configs: [MerchantCategoryConfig!]!
  "ConflictingMerchantCategory object id."
  id: String!
  "Merchant category name."
  name: String!
}

"Response type for validation of merchant category controls."
type ConflictingMerchantsCategoryResult {
  "Conflicting merchant categories."
  merchantCategories: [ConflictingMerchantCategory!]
  "Conflicting merchants."
  merchants: [ConflictingMerchant!]
}

type CreateBudgetRequestResult {
  "The budget that was created."
  budgetRequestEntity: BudgetRequestEntity!
}

type CreateBudgetResult {
  "The budget that was created."
  budget: Budget!
  "The request that was generated when this budget was created."
  request: BudgetRequest @deprecated(reason : "This field is always null. Budget Requests were moved to createBudgetRequest mutation.")
}

type CreateBudgetsResult {
  "The budgets that were created."
  budgets: [CreateBudgetResult!]!
}

type DeleteBudgetResult {
  "The result of the budget deletion - success/failure"
  budgetDeletionResult: Boolean!
}

type DeleteBudgetsResult {
  "The result of the budget deletions - success/failure"
  budgetDeletionResults: [DeleteBudgetResult!]!
}

"Effective range type, used for specifying mapping start/end dates."
type EffectiveRange {
  endTime: Time
  startTime: Time!
}

type Employee @extends @key(fields : "customerUserId") {
  customerUserId: ID @external
}

"Financial Asset wrapper"
type FinancialAsset {
  "The instrument code (usd, etc.). Currently, only usd is supported."
  instrumentCode: FinancialInstrumentCode!
  "The amount in cents"
  quantityCents: Int!
}

"Merchant."
type Merchant @extends @key(fields : "id") {
  id: ID! @external
}

"Merchant category."
type MerchantCategory @extends @key(fields : "id") {
  id: ID! @external
}

"Merchant category config."
type MerchantCategoryConfig {
  controlReference: MerchantCategoryControlReference!
  controlType: MerchantCategoryControlType!
}

"Merchant category controls from global budget, ancestor budgets and current budget."
type MerchantCategoryControls {
  ancestorBudgetsConfigs: [MerchantCategoryConfig]
  currentBudgetConfigs: [MerchantCategoryConfig]
  globalBudgetConfigs: [MerchantCategoryConfig]
}

"Merchant category id control reference."
type MerchantCategoryIdControlReference {
  merchantCategoryId: String!
  merchantCategoryName: String!
}

"Merchant name control reference."
type MerchantNameControlReference {
  merchantName: String!
}

type Mutation {
  "Assign a budget to a card"
  assignBudgetToCard(input: AssignBudgetToCardInput!): AssignBudgetToCardResult!
  "Create Budget"
  createBudget(input: CreateBudgetInput!): CreateBudgetResult!
  "Create a request for a new Budget"
  createBudgetRequest(input: CreateBudgetRequestInput!): CreateBudgetRequestResult!
  "Create multiple budgets."
  createBudgets(input: [CreateBudgetInput!]!): CreateBudgetsResult!
  "Delete Budget"
  deleteBudget(clientMutationId: String, id: ID!): DeleteBudgetResult!
  "Delete multiple budgets."
  deleteBudgets(clientMutationId: String, ids: [ID!]!): DeleteBudgetsResult!
  "Update Budget"
  updateBudget(input: UpdateBudgetInput!): UpdateBudgetResult!
  "Update multiple budgets."
  updateBudgets(input: [UpdateBudgetInput!]!): UpdateBudgetsResult!
}

type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"External types for federation"
type Policy @extends @key(fields : "id") {
  id: ID! @external
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service
  "Get a budget by id"
  budget(id: ID): Budget
  "List a budget''s descendants by id upto optional maximum depth"
  budgetDescendants(id: ID!, maxDepth: Int): [Budget]
  "Search merchants and categories according to the given search text."
  budgetMerchantsAndCategoriesSuggestions(suggestionsInput: [BudgetMerchantsAndCategoriesSuggestionsInput!]): BudgetMerchantsAndCategoriesSuggestionsResult!
  """
  Get Budget Template (?)
  
  TODO: Specifics TBD
  """
  budgetTemplate(id: ID!): BudgetTemplate!
  """
  List Budget Template (?)
  
  TODO: Specifics TBD
  """
  budgetTemplates(page: PaginationInput): BudgetTemplateConnection!
  "Get a budget''s member and owner spend"
  budgetUsersAmountSpent(id: ID!): [BudgetUserAmountSpent]
  "List Budgets"
  budgets(filter: BudgetFilterInput, order: BudgetOrderInput, page: PaginationInput): BudgetConnection!
  "Get the total spend across all the budgets in their current periods that fit a certain filter"
  budgetsTotalSpendAcrossCurrentPeriods(filter: BudgetFilterInput): FinancialAsset
  "Validate conflicting merchants or categories with ancestor budgets."
  conflictingAncestorBudgetMerchantCategoryControls(merchantCategoryControls: [ConflictingAncestorBudgetMerchantCategoryControls!]): ConflictingMerchantsCategoryResult!
  "Validate conflicting merchants or categories with ancestor and descendant budgets."
  conflictingBudgetMerchantCategoryControls(merchantCategoryControls: [ConflictingBudgetMerchantCategoryControls!]): ConflictingMerchantsCategoryResult!
  "Get global budget for account"
  globalBudget: Budget
}

"Detail about an status update."
type StatusUpdateDetails {
  "Time at which the status update occurred."
  updatedAt: Time
  "Employee that triggered the update ."
  updatedBy: Employee
}

type UpdateBudgetResult {
  "The budget that was updated."
  budget: Budget!
  "The request that was potentially modifed when this budget was updated."
  request: BudgetRequest
}

type UpdateBudgetsResult {
  "The budget that was updated."
  budgets: [UpdateBudgetResult!]!
}

type User @extends @key(fields : "id") {
  budgetAmountSpentCurrentMonth: FinancialAsset
  id: ID! @external
}

type _Service {
  sdl: String!
}

enum BudgetEditPermissionGrant {
  FULL
  NONE
  PARTIAL
}

enum BudgetMappingExpiration {
  EXPIRING
  NON_EXPIRING
}

enum BudgetMappingType {
  EXPIRING
  NON_EXPIRING
}

enum BudgetPeriodType {
  "Invalid"
  INVALID
  "Only once"
  ONE_TIME
  "Every month"
  PER_MONTH
  "Every quarter"
  PER_QUARTER
  "Every week"
  PER_WEEK
  "Every year"
  PER_YEAR
}

enum BudgetStatus {
  APPROVED
  CLOSED
  DELETED
  DRAFT
  EXPIRED
  REJECTED
  SUBMITTED
  TERMINATED
}

enum CardBudgetOwnershipType {
  BUDGET
  USER
}

"The type of the Expense."
enum ExpenseType {
  "A bill pay expense."
  BILLPAY
  "A card expense."
  CARD
  "A reimbursement expense."
  REIMBURSEMENT
}

"""
 From APIv1
 https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L7
 https://github.com/brexhq/credit_card/blob/main/libraries/brex_financial_asset/lib/financial_instrument_constants.ex#L962
"""
enum FinancialInstrumentCode {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHE
  CHF
  CHW
  CLF
  CLP
  CNY
  COP
  COU
  CRC
  CRYPTO_BTC
  CRYPTO_ETH
  CRYPTO_USDC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NASDAQ_DAGXX
  NASDAQ_DGCXX
  NASDAQ_DGVXX
  NASDAQ_DPGXX
  NASDAQ_GGBXX
  NASDAQ_GGDXX
  NASDAQ_GGSXX
  NASDAQ_GSBXX
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  SSP
  STN
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  USN
  UYI
  UYU
  UYW
  UZS
  VES
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XBA
  XBB
  XBC
  XBD
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  XSU
  XTS
  XUA
  XXX
  YER
  ZAR
  ZMW
  ZWL
}

"""
Time bucketting strategy
- START: Buckets start at the startsAt timestamp
- END: Buckets start at the endsAt timestamp
- CALENDAR: Buckets are aligned with the calendar units (e.g. WEEKS) but can include
partial buckets based on the startsAt and endsAt timebuckets
"""
enum InsightsTimeBucketStrategy {
  CALENDAR
  END
  START
}

"Generic time unit"
enum InsightsTimeUnit {
  DAY
  MONTH
  QUARTER
  WEEK
  YEAR
}

"Merchant category control type."
enum MerchantCategoryControlType {
  ALLOW
  BLOCK
}

enum OrderByDirection {
  ASCENDING
  DESCENDING
}

"The type of the request action."
enum RequestActionType {
  "A memo is requested."
  MEMO
  "A receipt is requested."
  RECEIPT
  "A manager (or other) review is requested."
  REVIEW
}

"The type of the Request."
enum RequestType {
  "This is a budget request."
  BUDGET
  "This is an expense request."
  EXPENSE
}

"Available fields to order budget employees by"
enum SortableBudgetEmployeeField {
  AMOUNT_SPENT
  NAME
}

"Available fields to order the Budget connection by."
enum SortableBudgetField {
  AMOUNT_SPENT
  CREATED_AT
  END_TIME
  LIMIT
  NAME
  START_TIME
}

"ISOz date"
scalar Date

"Json object"
scalar Json

"64Bit integer"
scalar Long

"ISOz time"
scalar Time

scalar _Any

scalar _FieldSet

"Input type for assigning budgets to cards."
input AssignBudgetToCardInput {
  budgetId: ID!
  budgetMappingExpiration: BudgetMappingExpiration
  clientMutationId: String!
  effectiveRange: EffectiveRangeInput
  networkCardId: ID!
  type: BudgetMappingType @deprecated(reason : "Use budgetMappingExpiration")
}

input BudgetEmployeeFilter {
  "filter for users by text"
  text: String!
}

input BudgetEmployeeOrder {
  "Direction"
  direction: OrderByDirection!
  "Which field is being sorted on"
  field: SortableBudgetEmployeeField!
}

input BudgetFilterInput {
  "Filter out budgets with an end date later than this value."
  endDateBefore: Date
  "Whether or not the budget has nested budgets"
  hasSubBudgets: Boolean
  "Match IN specific members"
  members: BudgetPersonnelInput
  "Whether or not the budget has a virtual card"
  onlyProvisionedCardSpend: Boolean
  "Match IN specific owners"
  owners: BudgetPersonnelInput
  "List all budgets belonging to a parent budget"
  parentBudgetId: ID
  "Search budgets by name"
  search: String
  "Filter out budgets with a start date earlier than this value."
  startDateAfter: Date
  "Filter out budgets with a start date later than this value."
  startDateBefore: Date
  "Budget Status IN statuses"
  statuses: [BudgetStatus!]
}

"Input type for searching for merchants and categories."
input BudgetMerchantsAndCategoriesSuggestionsInput {
  "User''s input of merchant category control type."
  controlType: MerchantCategoryControlType!
  "User''s input of search text."
  searchText: String!
}

input BudgetOrderInput {
  direction: OrderByDirection!
  field: SortableBudgetField!
}

"Input type for specifying budget personnel (list of users or groups, or both)"
input BudgetPersonnelInput {
  userIds: [ID]
}

input CardFilterInput {
  """
  Expects an array of CardBudgetOwnershipTypes, which will be used to filter cards. Cannot be empty.
  To get all cards simply pass [CardBudgetOwnershipType.USER, CardBudgetOwnershipType.BUDGET]
  """
  cardBudgetOwnershipTypes: [CardBudgetOwnershipType!]!
}

"Input type for validating merchants and/or categories with ancestor budgets."
input ConflictingAncestorBudgetMerchantCategoryControls {
  "Merchant category control type (BLOCK or ALLOW)."
  controlType: MerchantCategoryControlType!
  "Merchant category list."
  merchantCategories: [MerchantCategoryInput!]
  "Merchant list."
  merchants: [MerchantInput!]
  "Parent budget id."
  parentBudgetId: ID!
}

"Input type for validating merchants and/or categories with ancestor and descendant budgets."
input ConflictingBudgetMerchantCategoryControls {
  "Budget id."
  budgetId: ID!
  "Merchant category control type (BLOCK or ALLOW)."
  controlType: MerchantCategoryControlType!
  "Merchant category list."
  merchantCategories: [MerchantCategoryInput!]
  "Merchant list."
  merchants: [MerchantInput!]
}

input CreateBudgetFields {
  "Description of what the budget is used for"
  description: String
  "The end date of the budget, inclusive."
  endDate: Date
  "True if the budget limit is hard enforced"
  enforceLimit: Boolean!
  "Limit on the budget"
  limit: FinancialAssetInput!
  "The employees who are considered members of this budget"
  members: [ID!]!
  "Merchant category controls"
  merchantCategoryControls: [MerchantCategoryConfigInput!]
  "Name of the budget"
  name: String!
  "True if only provisioned cards can spend from this budget"
  onlyProvisionedCardSpend: Boolean!
  "The employees who are considered owners of this budget"
  owners: [ID!]!
  "The parent of this budget, if any"
  parent: ID!
  "The recurring period type of the budget."
  periodType: BudgetPeriodType!
  "The policy that manages expenses for this budget"
  policyId: ID
  "The start date of the budget, inclusive."
  startDate: Date!
}

input CreateBudgetInput {
  clientMutationId: String!
  fields: CreateBudgetFields!
}

"Fields needed to create a request for a budget."
input CreateBudgetRequestFields {
  description: String!
  endDate: Date
  limit: FinancialAssetInput!
  members: [ID!]!
  name: String!
  owners: [ID!]!
  periodType: BudgetPeriodType!
  startDate: Date!
}

"Input to create a request for a budget."
input CreateBudgetRequestInput {
  clientMutationId: String!
  fields: CreateBudgetRequestFields!
}

"Input for effective range."
input EffectiveRangeInput {
  endTime: Time
  startTime: Time
}

"""
 From APIv1
 https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L13
"""
input FinancialAssetInput {
  "The instrument code (usd, etc.). Currently, only usd is supported."
  instrumentCode: FinancialInstrumentCode = USD
  "The amount in cents"
  quantityCents: Int
}

input FinancialAssetRangeInput {
  "Exclusive, only considers given currency, required to have same currency when minAmount is provided."
  maxAmount: FinancialAssetInput
  "Inclusive, only considers given currency, required to have same currency when maxAmount is provided."
  minAmount: FinancialAssetInput
}

"Input for merchant category config."
input MerchantCategoryConfigInput {
  controlReference: MerchantControlReferenceInput!
  controlType: MerchantCategoryControlType!
}

"Input for validating a single merchant or merchant category."
input MerchantCategoryInput {
  "Merchant category id."
  id: String!
  "Merchant category name."
  name: String!
}

"Merchant control reference input."
input MerchantControlReferenceInput {
  merchantCategoryId: String
  merchantName: String
}

"Input for validating a single merchant or merchant category."
input MerchantInput {
  "Merchant category."
  category: MerchantCategoryInput!
  "Merchant id."
  id: String
  "Merchant name."
  name: String!
}

"""
Pagination parameters for enumerating items in a connection.
Only {first, after} OR {last, before} pairs can be set.
e.g. If {first, before} is set, that will cause a validation error.
The cursors are optional. Without a specified cursor, it is assumed to start at
the first item (for `first`) or last item (for `last`) of the collection.
"""
input PaginationInput {
  "The cursor to start the page at (exclusive)."
  after: String
  "The cursor to end the page at (exclusive)."
  before: String
  "The number of items to return in a page after the `after` cursor."
  first: Int
  "The number of items to return in a page prior to the `before` cursor."
  last: Int
}

input TimeIntervalInput {
  "Exclusive end at."
  endAt: Time
  "Inclusive start at."
  startAt: Time
}

input UpdateBudgetFields {
  "Description of what the budget is used for"
  description: String
  "The end date of the budget, inclusive."
  endDate: Date
  "True if the budget limit is hard enforced"
  enforceLimit: Boolean
  "Limit on the budget"
  limit: FinancialAssetInput
  "The employees who are considered members of this budget"
  members: [ID]
  "Merchant category controls"
  merchantCategoryControls: [MerchantCategoryConfigInput]
  "Name of the budget"
  name: String
  "True if only provisioned cards can spend from this budget"
  onlyProvisionedCardSpend: Boolean
  "The employees who are considered owners of this budget"
  owners: [ID]
  "The recurring period type of the budget."
  periodType: BudgetPeriodType
  "The policy that manages expenses for this budget"
  policyId: ID
  "The start date of the budget, inclusive."
  startDate: Date
  "Budget Status"
  status: BudgetStatus
}

input UpdateBudgetInput {
  clientMutationId: String!
  fields: UpdateBudgetFields!
  id: ID!
}
	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
sm_cl101yyk9000u0h71c2e86juh	sv_ckwwkl97x000a0e42crg0mk0h	"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`''argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @extends on OBJECT | INTERFACE

directive @external on FIELD_DEFINITION

directive @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"""
The interface for paginating through collections of elements.
Every collection of entities not returned by a mutation result should
paginate through a connection. That is, `types` with a field that is
an `array` should be exceedingly rare.
We want all collections of things to be paginated.
"""
interface Connection {
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  """
  The total count of items matching the filter criteria specified for this connection.
  This value may be approximate. And this value may not be provided at all. Not all connections
  can be counted easily.
  """
  totalCount: Int
}

union ExpenseOriginator = CardTransaction | ReimbursementItem

union _Entity = Account | Budget | Card | CardTransaction | Department | Dispute | Employee | Expense | ExpenseRequest | Location | Merchant | MerchantCategory | ReimbursementItem | User

type Account @extends @key(fields : "id") {
  id: ID! @external
}

type Budget @extends @key(fields : "id") {
  id: ID! @external
}

type Card @extends @key(fields : "id") {
  id: ID! @external
}

type CardPaymentAcceptor {
  "The address of the acceptor."
  address: String!
  "The city of the acceptor."
  city: String!
  "The country of the acceptor."
  country: String!
  "The Merchant Category Code of the acceptor."
  mcc: String!
  "The unique ID of the Merchant that is the card acceptor."
  mid: String!
  "The name of the acceptor."
  name: String!
  "The postal code of the acceptor."
  postalCode: String!
  "The state of the acceptor."
  state: String!
}

type CardTransaction @key(fields : "id") {
  "The Card the transaction was made on."
  card: Card
  "The Card Acceptor at which the transaction was made"
  cardPaymentAcceptor: CardPaymentAcceptor
  """
  DO NOT USE THIS FIELD WHEN LISTING EXPENSES. YOU WILL BREAK THE DASHBOARD
  The optional dispute associated with the Card Transaction.
  """
  dispute: Dispute
  "The unique TILL Payment ID of the Card Transaction."
  id: ID!
  "The unique present transaction ID of the Card Transaction."
  presentTransactionId: ID!
}

type CreateExpensesSearchReportResult {
  "The expenses search report."
  report: ExpensesReport!
}

type Department @extends @key(fields : "id") {
  id: ID! @external
}

type Dispute @extends @key(fields : "id") {
  id: ID! @external
}

type Employee @extends @key(fields : "customerUserId") {
  customerUserId: ID @external
}

"An Expense incurred by a customer."
type Expense @key(fields : "id") {
  "The Customer Account that has visibility to this expense"
  account: Account!
  "The time of accrual"
  accruedAt: Time @deprecated(reason : "Use postedAt instead.")
  "Amount of the expense; may be negative"
  amount: FinancialAsset
  "The budget to which this expense accrues (has customer default; optional before default budgets exist)"
  budget: Budget
  "The custom merchant name that the user manually saved"
  customMerchant: String
  "The Customer User who incurred the expense"
  customer: User!
  "The Customer Department to which the expense is attributed, auto-denormalized from User"
  department: Department
  "The display status of the expense; takes into account payment status & disputes"
  displayStatus: ExpenseDisplayStatus
  "The Employee who incurred the expense"
  employee: Employee!
  "The unique ID of the expense."
  id: ID!
  "The Customer Location to which the expense is attributed, auto-denormalized from User"
  location: Location
  "The memo line"
  memo: String
  "The merchant counter-party"
  merchant: Merchant
  "Merchant accuracy"
  merchantAccuracy: Boolean
  "Merchant category"
  merchantCategory: MerchantCategory
  "Expense Originator"
  originator: ExpenseOriginator
  "The parent expense of this expense"
  parentExpense: Expense
  "The payment status reason of the expense"
  paymentStatus: ExpensePaymentStatus
  "The time when the associated payment is posted"
  postedAt: Time
  "The time of purchase"
  purchasedAt: Time
  "Denormalized count of receipts for an expense"
  receiptCount: Int!
  "The current active request that is associated with this expense"
  request: ExpenseRequest
  "The status of the expense"
  status: ExpenseStatus!
  "The type of the expense"
  type: ExpenseType!
}

"An Expense connection for Expense pagination."
type ExpenseConnection implements Connection {
  "The expenses in the current page of results."
  edges: [ExpenseEdge!]!
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  "The total count of expenses matching the filter criteria specified for this connection."
  totalCount: Int
}

"A Expense edge for the Expense connection."
type ExpenseEdge {
  "The opaque cursor of the current edge."
  cursor: String
  "The expense at this edge."
  node: Expense
}

type ExpensePaymentStatus {
  """
  DO NOT INCLUDE THIS FIELD IN ANY expenses() (ListExpenses) call. Can be used only for expense() (GetExpense).
  
  The reason for the payemnt status reason
  """
  reason: ExpensePaymentStatusReason
  "The expense''s payment status."
  statusType: ExpensePaymentStatusType
}

type ExpenseRequest @extends @key(fields : "id") {
  id: ID! @external
}

"The report incurred by a customer."
type ExpensesReport {
  "The file of the report"
  file: ExpensesReportFile!
}

type ExpensesReportFile {
  "The file download url of the report."
  downloadUrl: String!
  "The unique ID of the report file."
  id: ID!
}

"Financial Asset wrapper"
type FinancialAsset {
  "The instrument code (usd, etc.). Currently, only usd is supported."
  instrumentCode: FinancialInstrumentCode!
  "The amount in cents"
  quantityCents: Int!
}

type ItemizeExpenseResult {
  "The itemized expenses that were created."
  expenses: [Expense!]!
}

type Location @extends @key(fields : "id") {
  id: ID! @external
}

type Merchant @extends @key(fields : "id") {
  id: ID! @external
}

type MerchantCategory @extends @key(fields : "id") {
  id: ID! @external
}

type Mutation {
  "Exports expenses from given expenses filter search report by request file type"
  createExpensesSearchReport(input: CreateExpensesSearchReportInput!): CreateExpensesSearchReportResult!
  "Itemize expense"
  itemizeExpense(input: ItemizeExpenseInput!): ItemizeExpenseResult!
  "Retry reimbursement payment"
  retryReimbursementPayment(input: RetryReimbursementPaymentInput!): RetryReimbursementPaymentResult!
  """
  Update an expense
  The operation isn''t guaranteed to be atomic, and should be retried until it succeeds.
  """
  updateExpense(input: UpdateExpenseInput!): UpdateExpenseResult!
  "Update multiple expenses"
  updateExpenses(input: UpdateExpensesInput!): UpdateExpensesResult!
}

type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service
  "Get an expense by id"
  expense(id: ID!): Expense
  "List expenses"
  expenses(filter: ExpenseFilterInput, order: ExpenseOrderInput, page: PaginationInput): ExpenseConnection!
  "Preview expense lenses with a new integration rule"
  previewExpenseLenses(integrationId: ID!, omitRuleId: ID, page: PaginationInput, ruleBody: String!): ExpenseConnection!
  "List unexported Expenses"
  unexportedExpenses(endDate: Time, filter: ExpenseLensFilterInput, integrationId: ID!, page: PaginationInput, startDate: Time): ExpenseConnection!
}

type ReimbursementItem @extends @key(fields : "id") {
  id: ID! @external
}

type RetryReimbursementPaymentResult {
  "The expense that was retried."
  expense: Expense!
}

type UpdateExpenseResult {
  "The expense that was updated."
  expense: Expense!
}

type UpdateExpensesResult {
  "The expenses that were updated."
  expenses: [Expense!]!
}

type User @extends @key(fields : "id") {
  id: ID! @external
}

type _Service {
  sdl: String!
}

"The display status of the expense; takes into account payment and disputes."
enum ExpenseDisplayStatus {
  "An approved expense is evaluated to have met the policy requirements."
  APPROVED
  "The expense got cancelled (from a submitted reimbursement or pending charge)."
  CANCELED
  "Payment for the expense is a chargeback."
  CHARGEBACK
  "Payment for the expense got declined, applies to card expense only."
  DECLINED
  "The expense was rejected."
  DENIED
  """
  The expense is disputed.
  
  NOT YET SUPPORTED
  """
  DISPUTED
  "An expense that has not been submitted yet, applies to reimbursement only."
  DRAFT
  "Payment for the expense completed."
  PAID
  "Payment for the expense failed to go through."
  PAYMENT_FAILED
  "The expense has open action requests - can include reviews, memos, etc."
  PENDING_APPROVAL
  "Payment for the expense is processing."
  PROCESSING
  "Payment for the expense is a refund."
  REFUND
}

"""
Payment Status reasons common across all rails

Reimbursement Payment Status Reasons: TODO
"""
enum ExpensePaymentStatusReason {
  ACCOUNT_SUSPENDED
  "Common across Payment Types"
  APPROVED
  BUDGET_ARCHIVED
  BUDGET_CATEGORY_RESTRICTION
  BUDGET_EXPIRED
  BUDGET_MERCHANT_RESTRICTION
  BUDGET_NOT_APPROVED
  BUDGET_NOT_YET_STARTED
  CARD_EXPIRED
  CARD_NOT_ACTIVE
  CARD_SUSPENDED
  CARD_TERMINATED
  EXCEEDED_BUDGET_LIMIT
  EXCEEDED_CARD_LIMIT
  EXCEEDED_CASH_ADVANCE_GLOBAL_LIMIT
  EXCEEDED_CASH_ADVANCE_USER_LIMIT
  EXCEEDED_GLOBAL_LIMIT
  EXCEEDED_PIN_ATTEMPTS
  EXCEEDED_USER_LIMIT
  INSIDE_SANCTIONED_COUNTRY
  INVALID_BILLING_ADDRESS
  INVALID_CARD_CREDENTIALS
  INVALID_CVV
  "Card Payment Status Reasons"
  INVALID_EXPIRATION_DATE
  INVALID_PIN
  MCC_BLOCKED
  NO_BUDGET
  OTHER
  SOFT_EXPIRATION
  SUSPECTED_FRAUD
  USER_SUSPENDED
}

"The status of the expense''s payment."
enum ExpensePaymentStatusType {
  "Payment is canceled."
  CANCELED
  """
  Payment is a withdrawal, which represents a cash advance.
  This corresponds to both WITHDRAWING & WITHDREW on the back-end.
  """
  CASH_ADVANCE
  "Payment cleared."
  CLEARED
  """
  Payment is a credit to the user.
  Currently, this means chargebacks.
  """
  CREDITED
  "Payment failed or got declined."
  DECLINED
  "Payment is processing."
  PROCESSING
  "Payment is a cleared refund."
  REFUNDED
  "Payment is a refund in progress."
  REFUNDING
}

"The type of the request action."
enum ExpenseRequestActionType {
  "A notification is requested."
  NOTIFY
  "A justification is requested."
  REQUIRE_JUSTIFICATION
  "A memo is requested."
  REQUIRE_MEMO
  "A receipt is requested."
  REQUIRE_RECEIPT
  "A manager (or other) review is requested."
  REQUIRE_REVIEW
}

"The status of the expense."
enum ExpenseStatus {
  "An approved expense is public, with a request evaluated to have met the policy requirements"
  APPROVED
  "A canceled expense is a public expense that does not accrue"
  CANCELED
  "A draft expense is private and not ready for policy evaluation"
  DRAFT
  "An out of policy expense is public, with a request evaluated to have not met the policy requirements"
  OUT_OF_POLICY
  "A settled expense is an approved expense terminally locked from mutation"
  SETTLED
  "A submitted expense is public, with a request submitted for policy evaluation"
  SUBMITTED
  "A void expense is a hidden expense that does not accrue (soft-delete)"
  VOID
}

"The type of the Expense."
enum ExpenseType {
  "A bill pay expense."
  BILLPAY
  "A card expense."
  CARD
  "A reimbursement expense."
  REIMBURSEMENT
}

"The type of rule facet."
enum FacetType {
  "Conflicting rule type facet."
  CONFLICTING
  "Custom rule type facet."
  CUSTOM
  "Invalid facet type."
  INVALID
  "Merchant rule type facet."
  MERCHANT
  "Manual override rule type facet."
  OVERRIDE
}

"""
 From APIv1
 https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L7
 https://github.com/brexhq/credit_card/blob/main/libraries/brex_financial_asset/lib/financial_instrument_constants.ex#L962
"""
enum FinancialInstrumentCode {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHE
  CHF
  CHW
  CLF
  CLP
  CNY
  COP
  COU
  CRC
  CRYPTO_BTC
  CRYPTO_ETH
  CRYPTO_USDC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NASDAQ_DAGXX
  NASDAQ_DGCXX
  NASDAQ_DGVXX
  NASDAQ_DPGXX
  NASDAQ_GGBXX
  NASDAQ_GGDXX
  NASDAQ_GGSXX
  NASDAQ_GSBXX
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  SSP
  STN
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  USN
  UYI
  UYU
  UYW
  UZS
  VES
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XBA
  XBB
  XBC
  XBD
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  XSU
  XTS
  XUA
  XXX
  YER
  ZAR
  ZMW
  ZWL
}

"""
Time bucketting strategy
- START: Buckets start at the startsAt timestamp
- END: Buckets start at the endsAt timestamp
- CALENDAR: Buckets are aligned with the calendar units (e.g. WEEKS) but can include
partial buckets based on the startsAt and endsAt timebuckets
"""
enum InsightsTimeBucketStrategy {
  CALENDAR
  END
  START
}

"Generic time unit"
enum InsightsTimeUnit {
  DAY
  MONTH
  QUARTER
  WEEK
  YEAR
}

enum OrderByDirection {
  ASCENDING
  DESCENDING
}

"The types of relationships for filtering who an expense is pending approval on."
enum PendingApprovalFilterInput {
  "Pending approval on the logged in user"
  ME
  "Pending approval on anyone else but the logged in user"
  OTHER
}

"The type of report file type."
enum ReportFormatType {
  CSV
  HTML
  PDF
  TXT
  XLSX
}

"The type of the request action."
enum RequestActionType {
  "A memo is requested."
  MEMO
  "A receipt is requested."
  RECEIPT
  "A manager (or other) review is requested."
  REVIEW
}

"The type of the Request."
enum RequestType {
  "This is a budget request."
  BUDGET
  "This is an expense request."
  EXPENSE
}

"Available fields to order the Expense connection by."
enum SortableExpenseField {
  ACCRUED_AT
  AMOUNT
  PURCHASED_AT
}

"ISOz date"
scalar Date

"Json object"
scalar Json

"64Bit integer"
scalar Long

"ISOz time"
scalar Time

scalar _Any

scalar _FieldSet

input CreateExpensesSearchReportInput {
  "clientMutationId"
  clientMutationId: String
  "Time when expenses search results were displayed."
  displayTime: Time
  "The expense filter input used to get the list of expenses to be exported."
  filter: ExpenseFilterInput
  "The report format type for the exported expenses search."
  reportFormat: ReportFormatType
}

"Filters available to control which expenses get returned."
input ExpenseFilterInput {
  "Range query filter for amount."
  amountBetween: FinancialAssetRangeInput
  "Match IN specific budgets"
  budgetIds: [ID!]
  "Match IN specific users"
  customerUserIds: [ID!]
  "Match IN specific departments"
  departmentIds: [ID!]
  "Match IN specific display statuses, match ALL when no filter is provided"
  displayStatus: [ExpenseDisplayStatus!]
  "Whether the expense has a memo"
  hasMemo: Boolean
  "Whether the expense has at least one attached receipt"
  hasReceipt: Boolean
  "Match IN specific merchant categories"
  merchantCategoryIds: [ID!]
  "Match IN specific merchants"
  merchantIds: [ID!]
  "Match IN specific parent expense ids"
  parentExpenseIds: [ID!]
  "Range query filter for paymentPostedAt"
  paymentPostedBetween: TimeIntervalInput
  "Match IN specific payment statuses, match ALL when no filter is provided"
  paymentStatus: [ExpensePaymentStatusType!]
  "Matches if the expense is currently pending approval on yourself or others."
  pendingApproval: PendingApprovalFilterInput
  "Matches IN open compliance request types"
  pendingRequestActionTypes: [ExpenseRequestActionType!]
  "Range query filter for purchaseAt"
  purchasedBetween: TimeIntervalInput
  "Match IN specific statuses, match ALL when no filter is provided"
  status: [ExpenseStatus!]
  "Match IN specific types, match ALL when no filter is provided"
  types: [ExpenseType!]
}

input ExpenseInput {
  "The receipt assets to which the expense will create a receipt for and be linked to"
  addedReceiptAssetIds: [ID!]
  "Amount of the expense; may be negative"
  amount: FinancialAssetInput
  "The budget to which this expense accrues (has customer default; optional before default budgets exist)"
  budgetId: ID
  "The Customer Department to which the expense is attributed, auto-denormalized from User"
  departmentId: ID
  "The Customer Location to which the expense is attributed, auto-denormalized from User"
  locationId: ID
  """
  The memo line
  
  Updating an expense''s memo will resolve any associated Memo Request Action.
  """
  memo: String
  "The category to which this expense belongs to, auto-denormalized from Merchant"
  merchantCategoryId: ID
  "The merchant counter-party"
  merchantId: ID
  "The merchant name"
  merchantName: String
  "The time of purchase"
  purchasedAt: Time
  "The receipts to be unlinked from the expense"
  removedReceiptIds: [ID!]
}

input ExpenseLensFilterInput {
  "Optional field, when set only the expenses with expense lens of this facet type will be returned."
  facetType: FacetType
  "Optional field, when set only the expenses with expense lens matches these rules will be returned."
  ruleIds: [ID!]
}

"Determines the order that the expenses will be returned."
input ExpenseOrderInput {
  field: SortableExpenseField!
  order: OrderByDirection!
}

"""
 From APIv1
 https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L13
"""
input FinancialAssetInput {
  "The instrument code (usd, etc.). Currently, only usd is supported."
  instrumentCode: FinancialInstrumentCode = USD
  "The amount in cents"
  quantityCents: Int
}

input FinancialAssetRangeInput {
  "Exclusive, only considers given currency, required to have same currency when minAmount is provided."
  maxAmount: FinancialAssetInput
  "Inclusive, only considers given currency, required to have same currency when maxAmount is provided."
  minAmount: FinancialAssetInput
}

input IntegrationFieldInput {
  "Required field, external integration field ID."
  fieldId: ID!
  "Required field, external integration entity ID."
  fieldValue: ID!
}

input IntegrationInput {
  """
  Optional field, billable status.
  
  One or more of these fields (integrationField, userCategoryId, and billableStatus) must be set.
  """
  billableStatus: Boolean
  """
  Optional field, integration fields.
  
  One or more of these fields (integrationField, userCategoryId, and billableStatus) must be set.
  """
  integrationFields: [IntegrationFieldInput!]
  """
  Optional field, user category ID.
  
  One or more of these fields (integrationField, userCategoryId, and billableStatus) must be set.
  """
  userCategoryId: ID
}

input ItemizeExpenseInput {
  "clientMutationId"
  clientMutationId: String!
  "The ID of the expense to itemize."
  id: ID!
  "The input for the itemized expense."
  itemizedExpenses: [ItemizedExpense!]!
}

input ItemizedExpense {
  "Amount of the expense; may be negative"
  amount: FinancialAssetInput
  "The category to which this expense belongs to"
  merchantCategoryId: ID
}

"""
Pagination parameters for enumerating items in a connection.
Only {first, after} OR {last, before} pairs can be set.
e.g. If {first, before} is set, that will cause a validation error.
The cursors are optional. Without a specified cursor, it is assumed to start at
the first item (for `first`) or last item (for `last`) of the collection.
"""
input PaginationInput {
  "The cursor to start the page at (exclusive)."
  after: String
  "The cursor to end the page at (exclusive)."
  before: String
  "The number of items to return in a page after the `after` cursor."
  first: Int
  "The number of items to return in a page prior to the `before` cursor."
  last: Int
}

input RetryReimbursementPaymentInput {
  "clientMutationId"
  clientMutationId: String!
  "The reimbursement ID to retry payment."
  id: ID!
}

input TimeIntervalInput {
  "Exclusive end at."
  endAt: Time
  "Inclusive start at."
  startAt: Time
}

input UpdateExpenseInput {
  "clientMutationId"
  clientMutationId: String
  """
  The input for the expense object.
  
  Either ExpenseInput or IntegrationInput must be set.
  It is okay to set both arguments.
  """
  expense: ExpenseInput
  "The ID of the expense to update."
  id: ID!
  """
  The input for the integration fields.
  
  Either ExpenseInput or IntegrationInput must be set.
  It is okay to set both arguments.
  """
  integration: IntegrationInput
}

input UpdateExpensesInput {
  "clientMutationId"
  clientMutationId: String!
  "A list of expense inputs."
  updateExpenseInputs: [UpdateExpenseInput!]!
}
	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
sm_cl101z83d00140h719i7q5924	sv_ckwwkn11z000g0e425ef0dtpo	"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`''argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @extends on OBJECT | INTERFACE

directive @external on FIELD_DEFINITION

directive @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"""
The interface for paginating through collections of elements.
Every collection of entities not returned by a mutation result should
paginate through a connection. That is, `types` with a field that is
an `array` should be exceedingly rare.
We want all collections of things to be paginated.
"""
interface Connection {
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  """
  The total count of items matching the filter criteria specified for this connection.
  This value may be approximate. And this value may not be provided at all. Not all connections
  can be counted easily.
  """
  totalCount: Int
}

union _Entity = CostCenter | Department | Employee | LegalEntity | Location | Title

"An employee''s cost center defined within a company''s organization hierarchy."
type CostCenter @key(fields : "id") {
  "The name of the cost center defined by the customer"
  displayName: String!
  "The unique ID of the title."
  id: ID!
  "Number of employees associated with the cost center"
  memberCount: Int
}

"Cost center connection for pagination"
type CostCenterConnection implements Connection {
  edges: [CostCenterEdge!]!
  pageInfo: PageInfo!
  totalCount: Int
}

"Cost center edge for the cost center connection."
type CostCenterEdge {
  cursor: String
  node: CostCenter
}

type CreateCostCenterResult {
  "Cost center that was created."
  costCenter: CostCenter!
}

type CreateEmployeeResult {
  "The employee that was created."
  employee: Employee!
}

type CreateLegalEntityResult {
  "Legal entity that was created."
  legalEntity: LegalEntity!
}

type DeleteCostCenterResult {
  "ID of the cost center that was deleted."
  id: ID!
}

type DeleteLegalEntityResult {
  "ID of the legal entity that was deleted."
  id: ID!
}

type DeleteTitleResult {
  "ID of the title that was deleted."
  id: ID!
}

type Department @extends @key(fields : "id") {
  id: ID! @external
}

"An Employee defined within a company''s organization hierarchy."
type Employee @key(fields : "id") @key(fields : "customerUserId") {
  "Display name of the cost center."
  costCenterDisplayName: String
  "The cost center the employee reports within. Defined in the 3rd party HRIS system."
  costCenterId: ID
  "Customer ID, null if this employee is not yet a Brex user."
  customerUserId: ID
  "Department the employee belongs to"
  department: Department
  "Full name of the employee."
  displayName: String!
  "Email of the employee."
  email: String!
  "Employment type of the employee."
  employmentType: EmploymentType
  "The unique ID of the employee."
  id: ID!
  "Whether or not the employee is a manager."
  isManager: Boolean
  "Display name of the legal entity."
  legalEntityDisplayName: String
  "The legal entity the employee reports within. Defined in the 3rd party HRIS system."
  legalEntityId: ID
  "Location the employee belongs to"
  location: Location
  "Employee''s manager''s full name."
  managerDisplayName: String
  "ID of this employee''s manager."
  managerEmployeeId: ID
  "ID of this employee in the 3rd party HRIS system."
  remoteId: ID
  "The UserRole of the employee"
  role: UserRole
  "Display name of this employee''s title."
  titleDisplayName: String
  "ID of this employee''s title."
  titleId: ID
}

"Employee connection for pagination"
type EmployeeConnection implements Connection {
  edges: [EmployeeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int
}

"Employee edge for the Employee connection."
type EmployeeEdge {
  cursor: String
  node: Employee
}

type EmployeeError {
  description: String!
  employeeId: ID!
}

"Financial Asset wrapper"
type FinancialAsset {
  "The instrument code (usd, etc.). Currently, only usd is supported."
  instrumentCode: FinancialInstrumentCode!
  "The amount in cents"
  quantityCents: Int!
}

type ImportEmployeeResult {
  errors: [EmployeeError!]!
}

"An employee''s legal entity defined within a company''s organization hierarchy."
type LegalEntity @key(fields : "id") {
  "The name of the legal entity defined by the customer"
  displayName: String!
  "The unique ID of the title."
  id: ID!
  "Number of employees associated with the legal entity"
  memberCount: Int
}

"Legal entity connection for pagination"
type LegalEntityConnection implements Connection {
  edges: [LegalEntityEdge!]!
  pageInfo: PageInfo!
  totalCount: Int
}

"Legal entity edge for the cost center connection."
type LegalEntityEdge {
  cursor: String
  node: LegalEntity
}

type Location @extends @key(fields : "id") {
  id: ID! @external
}

type Mutation {
  "Create a cost center"
  createCostCenter(input: CreateCostCenterInput!): CreateCostCenterResult
  "Create a new employee"
  createEmployee(input: CreateEmployeeInput!): CreateEmployeeResult!
  "Create a legal entity"
  createLegalEntity(input: CreateLegalEntityInput!): CreateLegalEntityResult
  "Delete a cost center"
  deleteCostCenter(input: DeleteCostCenterInput!): DeleteCostCenterResult
  "Delete a legal entity"
  deleteLegalEntity(input: DeleteLegalEntityInput!): DeleteLegalEntityResult
  "Delete a title"
  deleteTitle(input: DeleteTitleInput!): DeleteCostCenterResult
  "Import employees from an HRIS connection."
  importEmployees(input: ImportEmployeeInput!): ImportEmployeeResult!
  "Suspend users"
  suspendUsers(input: SuspendUsersInput!): SuspendUsersResult
  "Update a cost center"
  updateCostCenter(input: UpdateCostCenterInput!): UpdateCostCenterResult
  "Update an Employee."
  updateEmployee(input: UpdateEmployeeInput!): UpdateEmployeeResult
  "Update a legal entity"
  updateLegalEntity(input: UpdateLegalEntityInput!): UpdateLegalEntityResult
}

type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service
  "Get cost center by identifier"
  costCenter(identifier: CostCenterIdentifier!): CostCenter
  "List cost centers"
  costCenters(page: PaginationInput): CostCenterConnection
  """
  Get an employee by id or customer user id.
  Or, if no id is provided, get the employee associated with the current BrexContext.
  """
  employee(identifier: EmployeeIdentifier): Employee
  "List employees"
  employees(filter: EmployeeFilterInput, page: PaginationInput): EmployeeConnection
  "List legal entities"
  legalEntities(page: PaginationInput): LegalEntityConnection
  "Get legal entity by identifier"
  legalEntity(identifier: LegalEntityIdentifier!): LegalEntity
  "List titles"
  titles(page: PaginationInput): TitleConnection
}

type SuspendUsersResult {
  errors: [UserError!]!
}

"An employee''s title defined within a company''s organization hierarchy."
type Title @key(fields : "id") {
  "The name of the title defined by the customer"
  displayTitle: String!
  "The unique ID of the title."
  id: ID!
  "Number of employees associated with the title"
  memberCount: Int
  """
  Where in the organizational hierarchy this title sits. Lower rank is higher up, for example the CEO might be rank 0.
  Null if not set.
  """
  rank: Int
}

"Title connection for pagination"
type TitleConnection implements Connection {
  edges: [TitleEdge!]!
  pageInfo: PageInfo!
  totalCount: Int
}

"Title edge for the Title connection."
type TitleEdge {
  cursor: String
  node: Title
}

type UpdateCostCenterResult {
  "Cost center that was updated."
  costCenter: CostCenter!
}

type UpdateEmployeeResult {
  "The employee that was updated."
  employee: Employee!
}

type UpdateLegalEntityResult {
  "Legal entity that was updated."
  legalEntity: LegalEntity!
}

type UserError {
  description: String!
  userId: ID!
}

type _Service {
  sdl: String!
}

enum CostCenterIdentifierType {
  DISPLAY_NAME
  ID
}

enum EmployeeIdentifierType {
  CUSTOMER_USER_ID
  EMAIL
  ID
  REMOTE_ID
}

enum EmployeeStatusFilter {
  TO_BE_DISABLED
  TO_BE_INVITED
}

enum EmploymentStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum EmploymentType {
  CONTRACTOR
  FREELANCE
  FULL_TIME
  INTERN
  PART_TIME
}

"The type of the Expense."
enum ExpenseType {
  "A bill pay expense."
  BILLPAY
  "A card expense."
  CARD
  "A reimbursement expense."
  REIMBURSEMENT
}

"""
 From APIv1
 https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L7
 https://github.com/brexhq/credit_card/blob/main/libraries/brex_financial_asset/lib/financial_instrument_constants.ex#L962
"""
enum FinancialInstrumentCode {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHE
  CHF
  CHW
  CLF
  CLP
  CNY
  COP
  COU
  CRC
  CRYPTO_BTC
  CRYPTO_ETH
  CRYPTO_USDC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NASDAQ_DAGXX
  NASDAQ_DGCXX
  NASDAQ_DGVXX
  NASDAQ_DPGXX
  NASDAQ_GGBXX
  NASDAQ_GGDXX
  NASDAQ_GGSXX
  NASDAQ_GSBXX
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  SSP
  STN
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  USN
  UYI
  UYU
  UYW
  UZS
  VES
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XBA
  XBB
  XBC
  XBD
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  XSU
  XTS
  XUA
  XXX
  YER
  ZAR
  ZMW
  ZWL
}

enum ImportRuleType {
  AUTO
  MANUAL
}

"""
Time bucketting strategy
- START: Buckets start at the startsAt timestamp
- END: Buckets start at the endsAt timestamp
- CALENDAR: Buckets are aligned with the calendar units (e.g. WEEKS) but can include
partial buckets based on the startsAt and endsAt timebuckets
"""
enum InsightsTimeBucketStrategy {
  CALENDAR
  END
  START
}

"Generic time unit"
enum InsightsTimeUnit {
  DAY
  MONTH
  QUARTER
  WEEK
  YEAR
}

enum LegalEntityIdentifierType {
  DISPLAY_NAME
  ID
}

enum OrderByDirection {
  ASCENDING
  DESCENDING
}

"The type of the request action."
enum RequestActionType {
  "A memo is requested."
  MEMO
  "A receipt is requested."
  RECEIPT
  "A manager (or other) review is requested."
  REVIEW
}

"The type of the Request."
enum RequestType {
  "This is a budget request."
  BUDGET
  "This is an expense request."
  EXPENSE
}

enum UserRole {
  ACCOUNT_ADMIN
  AP_CLERK
  BOOKKEEPER
  CARD_ADMIN
  EMPLOYEE
  EMPLOYEE_WITHOUT_CORP_CARDS
}

"ISOz date"
scalar Date

"Json object"
scalar Json

"64Bit integer"
scalar Long

"ISOz time"
scalar Time

scalar _Any

scalar _FieldSet

input CostCenterIdentifier {
  displayName: String
  id: ID
  type: CostCenterIdentifierType!
}

input CostCenterInput {
  "Name of the cost center."
  name: String
}

input CreateCostCenterInput {
  "clientMutationId"
  clientMutationId: String
  "Name of the cost center."
  name: String!
}

input CreateEmployeeInput {
  "The aggregatorId for the employee."
  aggregatorId: String
  "The costCenterId for the employee."
  costCenterId: String
  "The departmentId for the employee."
  departmentId: String
  "The email for the employee."
  email: String!
  "The employment status for the employee"
  employmentStatus: EmploymentStatus
  "The employment type for the employee."
  employmentType: EmploymentType
  "The first name for the employee."
  firstName: String!
  "The last name for the employee."
  lastName: String!
  "The legalEntityId for the employee."
  legalEntityId: String
  "The locationId for the employee."
  locationId: String
  "The manager employee id for the employee."
  managerEmployeeId: String
  "The remoteId for the employee."
  remoteId: String
  "The ID of the employee''s title."
  titleId: String
  "The user''s settings including the user role for the employee"
  userSetting: UserSetting
}

input CreateLegalEntityInput {
  "clientMutationId"
  clientMutationId: String
  "Name of the legal entity."
  name: String!
}

input DeleteCostCenterInput {
  "clientMutationId"
  clientMutationId: String
  "The ID of the cost center to delete."
  id: ID!
}

input DeleteLegalEntityInput {
  "clientMutationId"
  clientMutationId: String
  "The ID of the legal entity to delete."
  id: ID!
}

input DeleteTitleInput {
  "clientMutationId"
  clientMutationId: String
  "The ID of the title to delete."
  id: ID!
}

"Filters for list employees query. Records returned will match ALL filters."
input EmployeeFilterInput {
  employeeStatusFilter: EmployeeStatusFilter
  identifiers: [EmployeeIdentifier!]
  managerEmployeeIds: [ID!]
  name: String
  titleIds: [ID!]
}

input EmployeeIdentifier {
  customerUserId: ID
  email: String
  id: ID
  remoteId: ID
  type: EmployeeIdentifierType!
}

input EmployeeUpdateInput {
  "The new aggregatorId for the employee."
  aggregatorId: ID
  "The new costCenterId for the employee."
  costCenterId: ID
  "The new departmentId for the employee."
  departmentId: ID
  "The new email for the employee."
  email: String
  "The new employment type for the employee."
  employmentType: EmploymentType
  "The new first name for the employee."
  firstName: String
  "The new last name for the employee."
  lastName: String
  "The new legalEntityId for the employee."
  legalEntityId: ID
  "The new locationId for the employee."
  locationId: ID
  "The new manager employee id for the employee."
  managerEmployeeId: ID
  "The new remoteId for the employee."
  remoteId: ID
  "The new title (display value, not id) for the employee."
  title: String
  "NOTE: Not currently implemented on the backend and may be deprecated entirely."
  userSetting: UserSetting
}

"""
 From APIv1
 https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L13
"""
input FinancialAssetInput {
  "The instrument code (usd, etc.). Currently, only usd is supported."
  instrumentCode: FinancialInstrumentCode = USD
  "The amount in cents"
  quantityCents: Int
}

input FinancialAssetRangeInput {
  "Exclusive, only considers given currency, required to have same currency when minAmount is provided."
  maxAmount: FinancialAssetInput
  "Inclusive, only considers given currency, required to have same currency when maxAmount is provided."
  minAmount: FinancialAssetInput
}

input ImportEmployeeInput {
  clientMutationId: String
  connectionId: ID!
  rule: ImportRule!
  setting: UserSetting!
}

input ImportRule {
  employmentTypes: [EmploymentType!]
  ids: [ID!]
  type: ImportRuleType!
}

input LegalEntityIdentifier {
  displayName: String
  id: ID
  type: LegalEntityIdentifierType!
}

input LegalEntityInput {
  "Name of the legal entity."
  name: String
}

"""
Pagination parameters for enumerating items in a connection.
Only {first, after} OR {last, before} pairs can be set.
e.g. If {first, before} is set, that will cause a validation error.
The cursors are optional. Without a specified cursor, it is assumed to start at
the first item (for `first`) or last item (for `last`) of the collection.
"""
input PaginationInput {
  "The cursor to start the page at (exclusive)."
  after: String
  "The cursor to end the page at (exclusive)."
  before: String
  "The number of items to return in a page after the `after` cursor."
  first: Int
  "The number of items to return in a page prior to the `before` cursor."
  last: Int
}

input SuspendUsersInput {
  clientMutationId: String
  userIds: [ID!]!
}

input TimeIntervalInput {
  "Exclusive end at."
  endAt: Time
  "Inclusive start at."
  startAt: Time
}

input UpdateCostCenterInput {
  "clientMutationId"
  clientMutationId: String
  "All fields are optional. Only those provided will be updated."
  costCenter: CostCenterInput!
  "The ID of the cost center to update."
  id: ID!
}

input UpdateEmployeeInput {
  "clientMutationId"
  clientMutationId: String
  "The input for the request object. All fields are optional. Only those provided will be updated."
  employee: EmployeeUpdateInput!
  "The ID of the employee to update."
  id: ID!
}

input UpdateLegalEntityInput {
  "clientMutationId"
  clientMutationId: String
  "The ID of the legal entity to update."
  id: ID!
  "All fields are optional. Only those provided will be updated."
  legalEntity: LegalEntityInput!
}

input UserSetting {
  "Monthly limit for the employee in cents."
  monthlyLimitAmount: FinancialAssetInput
  "Role that employees will be invited as"
  role: UserRole
}
	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
sm_cl102635f001e0h7134zw51cl	sv_cl02z9e17001w0e1884qstooi	"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`''argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @extends on OBJECT | INTERFACE

directive @external on FIELD_DEFINITION

directive @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"""
The interface for paginating through collections of elements.
Every collection of entities not returned by a mutation result should
paginate through a connection. That is, `types` with a field that is
an `array` should be exceedingly rare.
We want all collections of things to be paginated.
"""
interface Connection {
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  """
  The total count of items matching the filter criteria specified for this connection.
  This value may be approximate. And this value may not be provided at all. Not all connections
  can be counted easily.
  """
  totalCount: Int
}

union InsightsScenarioEventDetails = InsightsFundraisingEventDetails | InsightsGenericEventDetails | InsightsHiringEventDetails

union _Entity = Account | User

" ---[ Extensions ]---------------------"
type Account @extends @key(fields : "id") {
  id: ID! @external
}

type CreateInsightsScenarioEventResponse {
  "Created scenario event"
  event: InsightsScenarioEvent!
}

type CreateInsightsScenarioEventsResponse {
  "Created events"
  events: [InsightsScenarioEvent!]!
}

type CreateInsightsScenarioResponse {
  "Created scenario"
  scenario: InsightsScenario!
}

type DeleteInsightsScenarioEventResponse {
  "The result of the ScenarioEvent event deletion - success/failure"
  success: Boolean!
}

type DeleteInsightsScenarioEventsResponse {
  "The result of the ScenarioEvent event deletions - success/failure"
  success: Boolean!
}

type DeleteInsightsScenarioResponse {
  "The result of the scenario deletion - success/failure"
  success: Boolean!
}

"Financial Asset wrapper"
type FinancialAsset {
  "The instrument code (usd, etc.). Currently, only usd is supported."
  instrumentCode: FinancialInstrumentCode!
  "The amount in cents"
  quantityCents: Int!
}

"Amount (USD) snapshot for a given time"
type InsightsCashAccountAvailableBalanceSnapshot {
  "Available snapshot value (USD)"
  amountUsdCents: Long!
  "Timestamp of the snapshot value"
  timestamp: Time!
}

"Cash flow aggregate for a given time range"
type InsightsCashFlowAggregateDataPoint {
  "Balance (USD) in the account at the end of the time range (endAt)"
  balanceUsdCents: Long!
  "The cash the business is burning within the time period"
  burnRate: Long!
  "End of the aggregate time range (exclusive)"
  endAt: Time!
  "Amount (USD) that will be brought into the account during the time range"
  moneyInUsdCents: Long!
  "Amount (USD) that will leave the account during the time range"
  moneyOutUsdCents: Long!
  "Start of the aggregate time range (inclusive)"
  startAt: Time!
}

type InsightsFundraisingEventDetails {
  "Fundraising amount in USD cents"
  amountUsdCents: Long!
}

type InsightsGenericEventDetails {
  "Initial amount in USD cents"
  initialAmountUsdCents: Long!
  """
  If recurring_cadence is defined, apply this amount for each recurring_cadence
  instance between the event''s [startDate, endDate) period
  """
  recurringAmountUsdCents: Long
  "If set, the cadence of the recurring cost"
  recurringCadence: InsightsGenericEventRecurringCadence
  "Generic event title"
  title: String!
}

type InsightsHiringEventDetails {
  "Benefits portion of the hiring cost breakdown in USD cents"
  benefitsAmountUsdCents: Long!
  "How many employees are planned to be hired"
  employeeCount: Int!
  "The location the employee will be hired at"
  employeeLocation: String!
  "Employee title"
  employeeTitle: String!
  "Equipment portion of the hiring cost breakdown in USD cents"
  equipmentAmountUsdCents: Long!
  "Miscellaneous portion of the hiring cost breakdown in USD cents"
  miscellaneousAmountUsdCents: Long!
  "Recruiting portion of the hiring cost breakdown in USD cents"
  recruitingAmountUsdCents: Long!
  "Salary portion of the hiring cost breakdown in USD cents"
  salaryAmountUsdCents: Long!
  "Sign-On bonus portion of the hiring cost breakdown in USD cents"
  signOnBonusAmountUsdCents: Long!
}

"A scenario event that can impact runway projections"
type InsightsRunwayInsights {
  "Timeseries of projected cash flow data"
  cashFlowProjections: [InsightsCashFlowAggregateDataPoint!]!
  "A rough estimate of when the account will be out of cash"
  estimatedCashOutDate: Date
  """
  Using the burn rate projection, estimate when the company
  might need to raise fundraising money
  """
  suggestedFundraisingDate: Date
}

"Scenario Planning scenarios for runway projections"
type InsightsScenario {
  "The customer account that owns this scenario"
  account: Account!
  "When the scenario was created"
  createdAt: Time!
  "The user who created the scenario"
  creator: User!
  "List the scenario events"
  events: [InsightsScenarioEvent!]!
  "Scenario ID"
  id: ID!
  "When the scenario was last updated"
  lastUpdatedAt: Time!
  "Scenario name"
  name: String!
  "Fetch scenario runway insights"
  runwayInsights(endDate: Date!, startDate: Date!, timeBucket: InsightsTimeUnit!, timeBucketStrategy: InsightsTimeBucketStrategy!): InsightsRunwayInsights!
}

"InsightsScenarios connection"
type InsightsScenarioConnection implements Connection {
  "The items in the current page of results."
  edges: [InsightsScenarioEdge!]!
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  "The total count of items, across all pages, matching the filter criteria specified for this connection."
  totalCount: Int!
}

"InsightsScenarioConnection edge"
type InsightsScenarioEdge {
  "The opaque cursor of the current edge."
  cursor: String
  "The scenario at this edge."
  node: InsightsScenario!
}

"A scenario event that can impact runway projections"
type InsightsScenarioEvent {
  "When the scenario event was created"
  createdAt: Time!
  "The user who created the scenario"
  creator: User!
  "Event type and its specific details"
  details: InsightsScenarioEventDetails
  "The endDate of the event is EXCLUSIVE and if set to NULL the event never ends"
  endDate: Date
  "ScenarioEvent ID"
  id: ID!
  "If set to true, the event will impact the scenario forecast"
  isEnabled: Boolean!
  "When the scenario event was last updated"
  lastUpdatedAt: Time!
  "Scenario this event is for"
  scenario: InsightsScenario!
  """
  Date range the event is active is for [startDate, endDate)
  The startDate is INCLUSIVE
  """
  startDate: Date!
}

" ---[ Mutations ]----------------------"
type Mutation {
  "Create a new scenario"
  createInsightsScenario(input: CreateInsightsScenarioInput!): CreateInsightsScenarioResponse!
  "Create a new scenario event"
  createInsightsScenarioEvent(input: CreateInsightsScenarioEventInput!): CreateInsightsScenarioEventResponse!
  """
  Create multiple scenario events
  We currently don''t do it in a transactional way, so if an error occurs events will be partially created
  """
  createInsightsScenarioEvents(input: CreateInsightsScenarioEventsInput!): CreateInsightsScenarioEventsResponse!
  "Delete an existing scenario"
  deleteInsightsScenario(input: DeleteInsightsScenarioInput!): DeleteInsightsScenarioResponse!
  "Delete an existing scenario event"
  deleteInsightsScenarioEvent(input: DeleteInsightsScenarioEventInput!): DeleteInsightsScenarioEventResponse!
  """
  Deletes multiple existing scenario events
  We currently don''t do it in a transactional way, so if an error occurs events will be partially deleted
  """
  deleteInsightsScenarioEvents(input: DeleteInsightsScenarioEventsInput!): DeleteInsightsScenarioEventsResponse!
  "Update an existing scenario"
  updateInsightsScenario(input: UpdateInsightsScenarioInput!): UpdateInsightsScenarioResponse!
  "Update an existing scenario event"
  updateInsightsScenarioEvent(input: UpdateInsightsScenarioEventInput!): UpdateInsightsScenarioEventResponse!
  """
  Updates multiple existing scenario events
  We currently don''t do it in a transactional way, so if an error occurs events will be partially updated
  """
  updateInsightsScenarioEvents(input: UpdateInsightsScenarioEventsInput!): UpdateInsightsScenarioEventsResponse!
}

type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

" ---[ Queries ]------------------------"
type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service
  "Available balance snapshots for the account or if specified, a specific deposits account"
  cashAccountAvailableBalanceSnapshots(depositsAccountId: ID, timestamps: [Time!]!): [InsightsCashAccountAvailableBalanceSnapshot!]!
  "Cash flow transaction aggregates timeseries data"
  cashFlowTimeseries(depositsAccountId: ID, endDate: Date!, startDate: Date!, timeBucket: InsightsTimeUnit!, timeBucketStrategy: InsightsTimeBucketStrategy!): [InsightsCashFlowAggregateDataPoint!]!
  "Get a scenario by id"
  insightsScenario(id: ID): InsightsScenario!
  "List Scenarios"
  insightsScenarios(page: PaginationInput): InsightsScenarioConnection!
  "Fetch runway insights"
  runwayInsights(endDate: Date!, startDate: Date!, timeBucket: InsightsTimeUnit!, timeBucketStrategy: InsightsTimeBucketStrategy!): InsightsRunwayInsights!
}

type UpdateInsightsScenarioEventResponse {
  "Updated event"
  event: InsightsScenarioEvent!
}

type UpdateInsightsScenarioEventsResponse {
  "Updated events"
  events: [InsightsScenarioEvent!]!
}

type UpdateInsightsScenarioResponse {
  "Updated scenario"
  scenario: InsightsScenario!
}

" User is defined externally"
type User @extends @key(fields : "id") {
  id: ID! @external
}

type _Service {
  sdl: String!
}

"The type of the Expense."
enum ExpenseType {
  "A bill pay expense."
  BILLPAY
  "A card expense."
  CARD
  "A reimbursement expense."
  REIMBURSEMENT
}

"""
 From APIv1
 https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L7
 https://github.com/brexhq/credit_card/blob/main/libraries/brex_financial_asset/lib/financial_instrument_constants.ex#L962
"""
enum FinancialInstrumentCode {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHE
  CHF
  CHW
  CLF
  CLP
  CNY
  COP
  COU
  CRC
  CRYPTO_BTC
  CRYPTO_ETH
  CRYPTO_USDC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NASDAQ_DAGXX
  NASDAQ_DGCXX
  NASDAQ_DGVXX
  NASDAQ_DPGXX
  NASDAQ_GGBXX
  NASDAQ_GGDXX
  NASDAQ_GGSXX
  NASDAQ_GSBXX
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  SSP
  STN
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  USN
  UYI
  UYU
  UYW
  UZS
  VES
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XBA
  XBB
  XBC
  XBD
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  XSU
  XTS
  XUA
  XXX
  YER
  ZAR
  ZMW
  ZWL
}

"Used in GenericEventDetails to define the recurring cost schedule"
enum InsightsGenericEventRecurringCadence {
  DAILY
  MONTHLY
  WEEKLY
}

"""
Time bucketting strategy
- START: Buckets start at the startsAt timestamp
- END: Buckets start at the endsAt timestamp
- CALENDAR: Buckets are aligned with the calendar units (e.g. WEEKS) but can include
partial buckets based on the startsAt and endsAt timebuckets
"""
enum InsightsTimeBucketStrategy {
  CALENDAR
  END
  START
}

"Generic time unit"
enum InsightsTimeUnit {
  DAY
  MONTH
  QUARTER
  WEEK
  YEAR
}

enum OrderByDirection {
  ASCENDING
  DESCENDING
}

"The type of the request action."
enum RequestActionType {
  "A memo is requested."
  MEMO
  "A receipt is requested."
  RECEIPT
  "A manager (or other) review is requested."
  REVIEW
}

"The type of the Request."
enum RequestType {
  "This is a budget request."
  BUDGET
  "This is an expense request."
  EXPENSE
}

"ISOz date"
scalar Date

"Json object"
scalar Json

"64Bit integer"
scalar Long

"ISOz time"
scalar Time

scalar _Any

scalar _FieldSet

input CreateInsightsScenarioEventInput {
  clientMutationId: String
  "ScenarioEvent creation inputs"
  event: InsightsScenarioEventCreationInput!
  "Idempotency key"
  idempotencyKey: String!
  "Scenario this event is for"
  scenarioId: String!
}

input CreateInsightsScenarioEventsInput {
  clientMutationId: String
  "Create multiple scenario events"
  inputs: [CreateInsightsScenarioEventInput!]!
}

"   |---[ Query Inputs ]----------------"
input CreateInsightsScenarioInput {
  clientMutationId: String
  "Idempotency key"
  idempotencyKey: String!
  "Scenario creation inputs"
  scenario: InsightsScenarioCreationInput!
}

input DeleteInsightsScenarioEventInput {
  clientMutationId: String
  "ID of ScenarioEvent to delete"
  id: ID!
}

input DeleteInsightsScenarioEventsInput {
  clientMutationId: String
  "Delete multiple scenario events."
  ids: [ID!]!
}

input DeleteInsightsScenarioInput {
  clientMutationId: String
  "ID of scenario to delete"
  id: ID!
}

"""
 From APIv1
 https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L13
"""
input FinancialAssetInput {
  "The instrument code (usd, etc.). Currently, only usd is supported."
  instrumentCode: FinancialInstrumentCode = USD
  "The amount in cents"
  quantityCents: Int
}

input FinancialAssetRangeInput {
  "Exclusive, only considers given currency, required to have same currency when minAmount is provided."
  maxAmount: FinancialAssetInput
  "Inclusive, only considers given currency, required to have same currency when maxAmount is provided."
  minAmount: FinancialAssetInput
}

input InsightsFundraisingEventDetailsCreationInput {
  "Fundraising amount in USD cents"
  amountUsdCents: Long!
}

input InsightsFundraisingEventDetailsUpdateInput {
  "Fundraising amount in USD cents"
  amountUsdCents: Long
}

input InsightsGenericEventDetailsCreationInput {
  "Initial amount in USD cents"
  initialAmountUsdCents: Long!
  """
  If recurring_cadence is defined, apply this amount for each recurring_cadence
  instance between the event''s [startDate, endDate) period
  """
  recurringAmountUsdCents: Long
  "The cadence of the recurring cost"
  recurringCadence: InsightsGenericEventRecurringCadence
  "Generic event title"
  title: String!
}

input InsightsGenericEventDetailsUpdateInput {
  "Initial amount in USD cents"
  initialAmountUsdCents: Long
  """
  If recurring_cadence is defined, apply this amount for each recurring_cadence
  instance between the event''s [startDate, endDate) period
  """
  recurringAmountUsdCents: Long
  "The cadence of the recurring cost"
  recurringCadence: InsightsGenericEventRecurringCadence
  "Generic event title"
  title: String
}

input InsightsHiringEventDetailsCreationInput {
  "Benefits portion of the hiring cost breakdown in USD cents"
  benefitsAmountUsdCents: Long!
  "How many employees are planned to be hired"
  employeeCount: Int!
  "The location the employee will be hired at"
  employeeLocation: String!
  "Employee title"
  employeeTitle: String!
  "Equipment portion of the hiring cost breakdown in USD cents"
  equipmentAmountUsdCents: Long!
  "Miscellaneous portion of the hiring cost breakdown in USD cents"
  miscellaneousAmountUsdCents: Long!
  "Recruiting portion of the hiring cost breakdown in USD cents"
  recruitingAmountUsdCents: Long!
  "Salary portion of the hiring cost breakdown in USD cents"
  salaryAmountUsdCents: Long!
  "Sign-On bonus portion of the hiring cost breakdown in USD cents"
  signOnBonusAmountUsdCents: Long!
}

input InsightsHiringEventDetailsUpdateInput {
  "Benefits portion of the hiring cost breakdown in USD cents"
  benefitsAmountUsdCents: Long
  "How many employees are planned to be hired"
  employeeCount: Int
  "The location the employee will be hired at"
  employeeLocation: String
  "Employee title"
  employeeTitle: String
  "Equipment portion of the hiring cost breakdown in USD cents"
  equipmentAmountUsdCents: Long
  "Miscellaneous portion of the hiring cost breakdown in USD cents"
  miscellaneousAmountUsdCents: Long
  "Recruiting portion of the hiring cost breakdown in USD cents"
  recruitingAmountUsdCents: Long
  "Salary portion of the hiring cost breakdown in USD cents"
  salaryAmountUsdCents: Long
  "Sign-On bonus portion of the hiring cost breakdown in USD cents"
  signOnBonusAmountUsdCents: Long
}

"""
 ---[ Input Types ]--------------------
   |---[ Creation Input Types ]--------
"""
input InsightsScenarioCreationInput {
  "Scenario name"
  name: String!
}

input InsightsScenarioEventCreationInput {
  "Event type and its specific details"
  details: InsightsScenarioEventDetailsCreationInputUnion!
  "The endDate of the event is EXCLUSIVE and if set to NULL the event never ends"
  endDate: Date
  "If set to true, the event will impact the scenario forecast"
  isEnabled: Boolean!
  """
  Date range the event is active is for [startDate, endDate)
  The startDate is INCLUSIVE
  """
  startDate: Date!
}

"""
Acts as an input union depending on which field is not NULL
One field is required to be set
"""
input InsightsScenarioEventDetailsCreationInputUnion {
  fundraisingEventDetails: InsightsFundraisingEventDetailsCreationInput
  genericEventDetails: InsightsGenericEventDetailsCreationInput
  hiringEventDetails: InsightsHiringEventDetailsCreationInput
}

"""
Acts as an input union depending on which field is not NULL
One field is required to be set
"""
input InsightsScenarioEventDetailsUpdateInputUnion {
  fundraisingEventDetails: InsightsFundraisingEventDetailsUpdateInput
  genericEventDetails: InsightsGenericEventDetailsUpdateInput
  hiringEventDetails: InsightsHiringEventDetailsUpdateInput
}

input InsightsScenarioEventUpdateInput {
  "Event type and its specific details"
  details: InsightsScenarioEventDetailsUpdateInputUnion
  "The endDate of the event is EXCLUSIVE and if set to NULL the event never ends"
  endDate: Date
  "If set to true, the event will impact the scenario forecast"
  isEnabled: Boolean
  """
  Date range the event is active is for [startDate, endDate)
  The startDate is INCLUSIVE
  """
  startDate: Date
}

"   |---[ Update Input Types ]----------"
input InsightsScenarioUpdateInput {
  "Scenario name"
  name: String
}

"""
Pagination parameters for enumerating items in a connection.
Only {first, after} OR {last, before} pairs can be set.
e.g. If {first, before} is set, that will cause a validation error.
The cursors are optional. Without a specified cursor, it is assumed to start at
the first item (for `first`) or last item (for `last`) of the collection.
"""
input PaginationInput {
  "The cursor to start the page at (exclusive)."
  after: String
  "The cursor to end the page at (exclusive)."
  before: String
  "The number of items to return in a page after the `after` cursor."
  first: Int
  "The number of items to return in a page prior to the `before` cursor."
  last: Int
}

input TimeIntervalInput {
  "Exclusive end at."
  endAt: Time
  "Inclusive start at."
  startAt: Time
}

input UpdateInsightsScenarioEventInput {
  clientMutationId: String
  "ScenarioEvent update values"
  event: InsightsScenarioEventUpdateInput!
  "ID of ScenarioEvent to update"
  id: ID!
}

input UpdateInsightsScenarioEventsInput {
  clientMutationId: String
  "Update multiple scenario events"
  updates: [UpdateInsightsScenarioEventInput!]!
}

input UpdateInsightsScenarioInput {
  clientMutationId: String
  "ID of scenario to update"
  id: ID!
  "Scenario update values"
  scenario: InsightsScenarioUpdateInput!
}
	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
sm_cl102d7bn001o0h71mjjubnps	sv_ckwwkmg94000e0e427i4onev8	"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`''argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @extends on OBJECT | INTERFACE

directive @external on FIELD_DEFINITION

directive @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"""
The interface for paginating through collections of elements.
Every collection of entities not returned by a mutation result should
paginate through a connection. That is, `types` with a field that is
an `array` should be exceedingly rare.
We want all collections of things to be paginated.
"""
interface Connection {
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  """
  The total count of items matching the filter criteria specified for this connection.
  This value may be approximate. And this value may not be provided at all. Not all connections
  can be counted easily.
  """
  totalCount: Int
}

"A single node in a policy graph. This interface is implemented by rules, rule groups."
interface PolicyNode {
  """
  The child nodes of this rule ( may be rules or more groups)
  IDs are used so that clients don''t have to make recursive queries.
  """
  childIds: [ID!]
  "The unique ID of the node in this policy document"
  nodeId: ID!
}

union PolicyReason = PolicyDocument

"All possible forms of metadata-based rule-definition"
union PolicyRuleDefinition = PolicyCustomRuleDefinition | PolicyPerDiemRuleDefinition | PolicyReimbursementRuleDefinition | PolicyStandardRuleDefinition | PolicyVendorsForCategoryRuleDefinition

"PolicyRuleGroups either have a predefined type, or a custom name"
union PolicyRuleGroupDescription = CustomRuleGroup | PolicyPredefinedRuleGroup

union _Entity = Policy | RequestAction

"A rule group with a configured name. This can be used for custom categories, and for subcategories."
type CustomRuleGroup {
  name: String
}

"Financial Asset wrapper"
type FinancialAsset {
  "The instrument code (usd, etc.). Currently, only usd is supported."
  instrumentCode: FinancialInstrumentCode!
  "The amount in cents"
  quantityCents: Int!
}

"Mutations"
type Mutation {
  createOrUpdateExpensePolicy(input: CreateOrUpdateExpensePolicyInput!): Policy!
  disablePolicy(id: ID!): Policy!
  enablePolicy(id: ID!): Policy!
}

type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Top level Policy"
type Policy @key(fields : "id") {
  "An optional customer specified description"
  description: String
  "An optional customer specified display name"
  displayName: String
  "The policy''s unique ID"
  id: ID!
  "Specifies the type of request which this policy operates on"
  requestType: RequestType!
  "The actual content of the policy, which can be used to render the policy for a user to read."
  ruleDetails: PolicyDocument
  "The status of this policy (e.g. whether it is disabled)"
  status: PolicyStatus!
}

"A policy connection for policy pagination."
type PolicyConnection implements Connection {
  "The policies in the current page of results."
  edges: [PolicyEdge!]!
  "Page information for additional navigation through this connection."
  pageInfo: PageInfo!
  "The total count of policies matching the filter criteria specified for this connection."
  totalCount: Int
}

"A rule for which we will not generate the description. Instead, we rely on a hardcoded one."
type PolicyCustomRuleDefinition {
  policyDescription: String!
}

type PolicyDocument implements PolicyNode {
  """
  The ''root nodes'' of the Policy Document.
  When used to represent a Policy, there will usually have multiple nodes, e.g. one for each category of rules.
  When used to represent a single Rule, there will usually be just a single root node.
  """
  childIds: [ID!]!
  "The unique ID of the node in this root node."
  nodeId: ID!
  """
  The list of Policy elements which describe a policy (or policy fragment).
  Since each node has an ID and a list of childIds, they form an Adjacency List graph.
  """
  nodes: [PolicyNode!]!
}

"A Policy edge for Policy pagination."
type PolicyEdge {
  "The opaque cursor of the current edge."
  cursor: String
  "The policy at this edge."
  node: Policy
}

"A ''virtual'' group of merchant categories, which combines multiple underlying merchant categories."
type PolicyMerchantCategoryGroup {
  ids: [ID!]
  name: String!
}

"A ''virtual'' group of merchants, which combines multiple underlying merchants with a single name."
type PolicyMerchantGroup {
  ids: [ID!]
  name: String!
}

"A rule which limit''s a user''s per-day spending in specific categories"
type PolicyPerDiemRuleDefinition {
  "If the threshold applies only to a set of merchant categories, they are listed here"
  includedMerchantCategories: [PolicyMerchantCategoryGroup!]!
  "If the threshold applies only to a set of merchants, they are listed here"
  includedMerchants: [PolicyMerchantGroup!]!
  "The rule is triggered if the user''s expenses in a single day exceed this amount"
  limit: FinancialAsset!
}

"A rule group with a set ''type'' which corresponds to preset descriptions in clients"
type PolicyPredefinedRuleGroup {
  "The ''type'' of the rule group. Each type generally corresponds to a single kind of RequestAction."
  type: PolicyRuleGroupType
}

"""
A rule that deals with reimbursement submission.
Example: Reimbursements must be submitted up to 60 days after the purchase.
"""
type PolicyReimbursementRuleDefinition {
  submissionDeadlineDaysAfterPurchase: Int
}

"A PolicyRule describes a Policy Engine Rule, which performs actions when expenses meet particular conditions."
type PolicyRule implements PolicyNode {
  "The actions that can be returned by the rule."
  actionTypes: [RequestActionType!]!
  """
  The child nodes of this rule (may be rules or more groups).
  Note that sub-rules are not implemented yet (dec-2021), even though the API supports them.
  """
  childIds: [ID!]
  "if set, this description will override the metadata-generated rule description in the frontend."
  customDescription: PolicyRuleDescription
  "An object which defines the rule''s conditions"
  definition: PolicyRuleDefinition
  "When specified, this rule only applies to the specific types of expense."
  expenseTypes: [ExpenseType!]!
  """
  When true, this rule should be displayed as a "prohibition" (i.e. you may not spend)
  instead of advisory (i.e. these will be flagged for review)
  """
  isProhibition: Boolean
  "The unique ID of the node in this policy document. May also be the ID of the Rule."
  nodeId: ID!
}

"A hardcoded rule description."
type PolicyRuleDescription {
  "A hardcoded description to explain a rule to the user."
  overrideDescription: String
}

"A PolicyRuleGroup references rules and sub-groups. PolicyRuleGroups are used both for top-level categories, and for subcategories."
type PolicyRuleGroup implements PolicyNode {
  "The child nodes of this group (may be rules or more groups)"
  childIds: [ID!]!
  "The type of group, or null"
  description: PolicyRuleGroupDescription
  """
  The unique ID of the node in this policy document.
  May be the ID of a Rule, or a Policy, or even a generated ID, depending
  on how Groups are implemented.
  """
  nodeId: ID!
}

"A rule which results in an action when all of its conditions are met"
type PolicyStandardRuleDefinition {
  "If the threshold applies only to a set of merchant categories, they are listed here"
  merchantCategories: [PolicyMerchantCategoryGroup!]!
  "Which operation to apply for the list of merchant categories."
  merchantCategoriesCondition: PolicyStandardRuleConditionOperator!
  "If the threshold applies only to a set of merchant, they are listed here"
  merchants: [PolicyMerchantGroup!]!
  "Which operation to apply for the list of merchants."
  merchantsCondition: PolicyStandardRuleConditionOperator!
  "The rule is triggered if an expense amount is over this amount"
  threshold: FinancialAsset
}

"""
A rule which specifies permitted merchants for specific categories.
E.g. Airfare must be booked in TravelBank.
"""
type PolicyVendorsForCategoryRuleDefinition {
  "The rule''s actions are triggered when expenses in the categories are made with merchants not in this list"
  allowedMerchantsForCategory: [PolicyMerchantGroup!]!
  "The category for which we are specifying merchants"
  merchantCategory: PolicyMerchantCategoryGroup
}

"Queries"
type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service
  "List Policies"
  policies(filter: PolicyFilterInput, page: PaginationInput): PolicyConnection
  "Get an policy by id"
  policy(id: ID!): Policy
  "Get the logged in customer account''s root policy for the given request type"
  rootPolicy(requestType: RequestType!): Policy
}

type RequestAction @extends @key(fields : "id") {
  id: ID! @external
  policyReason: PolicyReason
}

type _Service {
  sdl: String!
}

"The type of the Expense."
enum ExpenseType {
  "A bill pay expense."
  BILLPAY
  "A card expense."
  CARD
  "A reimbursement expense."
  REIMBURSEMENT
}

"""
 From APIv1
 https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L7
 https://github.com/brexhq/credit_card/blob/main/libraries/brex_financial_asset/lib/financial_instrument_constants.ex#L962
"""
enum FinancialInstrumentCode {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHE
  CHF
  CHW
  CLF
  CLP
  CNY
  COP
  COU
  CRC
  CRYPTO_BTC
  CRYPTO_ETH
  CRYPTO_USDC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NASDAQ_DAGXX
  NASDAQ_DGCXX
  NASDAQ_DGVXX
  NASDAQ_DPGXX
  NASDAQ_GGBXX
  NASDAQ_GGDXX
  NASDAQ_GGSXX
  NASDAQ_GSBXX
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  SSP
  STN
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  USN
  UYI
  UYU
  UYW
  UZS
  VES
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XBA
  XBB
  XBC
  XBD
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  XSU
  XTS
  XUA
  XXX
  YER
  ZAR
  ZMW
  ZWL
}

"""
Time bucketting strategy
- START: Buckets start at the startsAt timestamp
- END: Buckets start at the endsAt timestamp
- CALENDAR: Buckets are aligned with the calendar units (e.g. WEEKS) but can include
partial buckets based on the startsAt and endsAt timebuckets
"""
enum InsightsTimeBucketStrategy {
  CALENDAR
  END
  START
}

"Generic time unit"
enum InsightsTimeUnit {
  DAY
  MONTH
  QUARTER
  WEEK
  YEAR
}

enum OrderByDirection {
  ASCENDING
  DESCENDING
}

enum PolicyRuleGroupType {
  "A group for rules which define when memos are required"
  MEMOS
  "A group for rules which define when receipts are required"
  RECEIPTS
  "A group for rules prohibit certain kinds of expenses"
  RESTRICTIONS
  "A group for rules which flag expenses for review"
  REVIEW
  "A group to represent a root policy that calls many others"
  ROOT
  "A group for rules which monitor travel expenses"
  TRAVEL
}

"An operation to be used for a list of subjects."
enum PolicyStandardRuleConditionOperator {
  ANY_OF
  NONE_OF
}

enum PolicyStatus {
  CREATED
  DISABLED
}

"The type of the request action."
enum RequestActionType {
  "A memo is requested."
  MEMO
  "A receipt is requested."
  RECEIPT
  "A manager (or other) review is requested."
  REVIEW
}

"The type of the Request."
enum RequestType {
  "This is a budget request."
  BUDGET
  "This is an expense request."
  EXPENSE
}

"ISOz date"
scalar Date

"Json object"
scalar Json

"64Bit integer"
scalar Long

"ISOz time"
scalar Time

scalar _Any

scalar _FieldSet

"Input type for creating or updating an expense policy."
input CreateOrUpdateExpensePolicyInput {
  "Parameters for generating the new policy definition."
  generateExpensePolicyRequest: GenerateExpensePolicyRequest!
  "A policy that should be updated with the new definition. If empty, a new policy will be created."
  policyId: ID
}

"""
 From APIv1
 https://github.com/brexhq/credit_card/blob/main/apps/api/lib/api/web/schema/financial_asset.ex#L13
"""
input FinancialAssetInput {
  "The instrument code (usd, etc.). Currently, only usd is supported."
  instrumentCode: FinancialInstrumentCode = USD
  "The amount in cents"
  quantityCents: Int
}

input FinancialAssetRangeInput {
  "Exclusive, only considers given currency, required to have same currency when minAmount is provided."
  maxAmount: FinancialAssetInput
  "Inclusive, only considers given currency, required to have same currency when maxAmount is provided."
  minAmount: FinancialAssetInput
}

input GenerateExpensePolicyRequest {
  """
  The list of approval chains that should be used. The conditions are evaluated in the order they are given and the
  first one that matches the expense will be used if a review is requested.
  """
  approvalChains: [PolicyApprovalChainInput!]!
  "A name that will allow users to identify this policy."
  displayName: String!
  "A complete representation of a policy given by its metadata."
  ruleGroup: PolicyRuleGroupInput!
}

"""
Pagination parameters for enumerating items in a connection.
Only {first, after} OR {last, before} pairs can be set.
e.g. If {first, before} is set, that will cause a validation error.
The cursors are optional. Without a specified cursor, it is assumed to start at
the first item (for `first`) or last item (for `last`) of the collection.
"""
input PaginationInput {
  "The cursor to start the page at (exclusive)."
  after: String
  "The cursor to end the page at (exclusive)."
  before: String
  "The number of items to return in a page after the `after` cursor."
  first: Int
  "The number of items to return in a page prior to the `before` cursor."
  last: Int
}

"An action set to be returned by a rule."
input PolicyActionSetInput {
  "A set of descriptions to inform users about the actions that are required."
  descriptions: [String!]!
  requireMemo: PolicyRequireExpenseMemoInput
  requireReceipt: PolicyRequireExpenseReceiptInput
  requireReview: PolicyRequireReviewInput
}

"A user (or set of users) that are the target of an action."
input PolicyActionTargetInput {
  customerUserId: ID
  hierarchiesHierarchyLevelId: ID
  managerLevelDifference: Int
}

"An approval chain, including the condition for it to be used."
input PolicyApprovalChainInput {
  """
  A rule to determine whether this approval chain should be used. If null, the approval chain will apply to any
  expense.
  """
  condition: PolicyExpenseRuleMetadataInput
  "The steps in this approval chain."
  steps: [PolicyApprovalStepInput!]!
}

"""
A step in the approval process consisting of reviews that can be requested in parallel. The step is only completed once
ALL reviews are completed.
"""
input PolicyApprovalStepInput {
  "The reviews that must be performed before the next review step."
  reviews: [PolicyReviewInput!]!
}

"A node in the tree structure we use to represent a policy. Only one of the fields can be set."
input PolicyExpensePolicyNodeInput {
  rule: PolicyRuleInput
  ruleGroup: PolicyRuleGroupInput
}

"The base type that contains the specific kinds of rule metadata."
input PolicyExpenseRuleMetadataInput {
  "A description to override our generated explainability text."
  description: PolicyRuleDescriptionInput
  "A list of expense types this rule applies to."
  expenseTypes: [ExpenseType!]
  "Specifies whether a rule is a prohibition for explainability purposes."
  isProhibition: Boolean
  perDiemMetadata: PolicyPerDiemMetadataInput
  reimbursementRuleMetadata: PolicyReimbursementRuleMetadataInput
  "The different metadata types that can be used to describe a rule condition."
  standardRuleMetadata: PolicyStandardRuleMetadataInput
  vendorsInCategoryMetadata: PolicyVendorsForCategoryMetadataInput
}

"Filters available to control which policies get returned."
input PolicyFilterInput {
  "Match IN specific types, match ALL when no filter is provided"
  requestTypes: [RequestType!]
  "Match IN specific statuses, match ALL when no filter is provided"
  statuses: [PolicyStatus!]
}

"""
Representation of any attribute that should be represented as a Name and a set of IDs. Examples are Merchant Groups and
Merchant Category Groups.
"""
input PolicyNameAndIdsInput {
  ids: [ID!]
  name: String!
}

"A rule that caps the total amount that can be spent daily. Currently can only be applied for Meals."
input PolicyPerDiemMetadataInput {
  """
  The list of merchant categories in which this per diem amount can be used. It is not currently used in the rule
  itself, but rather as metadata for display purposes.
  """
  includedMerchantCategories: [PolicyNameAndIdsInput!]
  """
  The list of merchants in which this per diem amount can be used. It is not currently used in the rule itself, but
  rather as metadata for display purposes.
  """
  includedMerchants: [PolicyNameAndIdsInput!]
  "The maximum amount that can be spent daily before this rule is triggered."
  threshold: FinancialAssetInput!
}

"""
A rule that deals with reimbursement submission.
Example: Reimbursements must be submitted up to 60 days after the purchase.
"""
input PolicyReimbursementRuleMetadataInput {
  "The maximum number of days after the purchase for the reimbursement to be submitted."
  submissionDeadlineDaysAfterPurchase: Int
}

"An action meaning a memo must be added to the expense."
input PolicyRequireExpenseMemoInput {
  """
  A dummy field because input objects must have at least one input field.
  https://spec.graphql.org/October2021/#sec-Input-Objects
  """
  _: Boolean
}

"An action meaning a receipt must be added to the expense."
input PolicyRequireExpenseReceiptInput {
  """
  A dummy field because input objects must have at least one input field.
  https://spec.graphql.org/October2021/#sec-Input-Objects
  """
  _: Boolean
}

"An action meaning a review is required. The object has no fields because the reviewers are to be specified in the review chain."
input PolicyRequireReviewInput {
  """
  A dummy field because input objects must have at least one input field.
  https://spec.graphql.org/October2021/#sec-Input-Objects
  """
  _: Boolean
}

"A set of reviewers that can perform a given review. An approval by ANY of them will cause the review to be completed."
input PolicyReviewInput {
  reviewerSet: [PolicyActionTargetInput!]!
}

"A description that overrides our generated explainability text."
input PolicyRuleDescriptionInput {
  description: String!
}

"A logical grouping of rules for explainability and compilation."
input PolicyRuleGroupInput {
  "Other groups or rules nested inside this rule group."
  childNodes: [PolicyExpensePolicyNodeInput!]!
  "If this is a custom group, information to be shown in the UI. Otherwise, this is ignored."
  groupMetadata: PolicyRuleGroupMetadataInput
  " The kind of group. Used by the frontend to display the group correctly. "
  groupType: PolicyRuleGroupType!
}

"Additional metadata for a rule group that can be displayed in the UI."
input PolicyRuleGroupMetadataInput {
  "The text to be shown to users."
  description: String!
}

"Definition of a rule for explainability and compilation."
input PolicyRuleInput {
  "The actions that are returned if the criteria are true."
  actions: [PolicyActionSetInput!]
  "The condition for the rule to match."
  condition: PolicyExpenseRuleMetadataInput!
}

"An inclusion or exclusion condition for any attribute that can be represented by the PolicyNameAndIdsInput type."
input PolicyStandardRuleConditionInput {
  conditionOperator: PolicyStandardRuleConditionOperator!
  subjects: [PolicyNameAndIdsInput!]!
}

"A simple rule with conditions for amount and inclusion or exclusion of both merchants and categories."
input PolicyStandardRuleMetadataInput {
  "A (possibly empty) set of merchant categories to be included or excluded from this rule."
  merchantCategories: PolicyStandardRuleConditionInput
  "A (possibly empty) set of merchants to be included or excluded from this rule."
  merchants: PolicyStandardRuleConditionInput
  "An amount such that expenses OVER this threshold will trigger the rule."
  threshold: FinancialAssetInput!
}

"""
A rule that restricts expenses in a given category to a predetermined set of vendors.
Example: Airfare must be booked through TravelBank.
"""
input PolicyVendorsForCategoryMetadataInput {
  "The merchants that can be used for this category."
  allowedMerchants: [PolicyNameAndIdsInput!]!
  "The category on which spending is restricted."
  merchantCategory: PolicyNameAndIdsInput!
}

input TimeIntervalInput {
  "Exclusive end at."
  endAt: Time
  "Inclusive start at."
  startAt: Time
}
	2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
\.


COPY public.supergraph_records (id, encoded_supergraph_schema, inserted_at, updated_at) FROM stdin;
sgr_cl102d7bo001u0h71a4psxa0f		2010-12-07 20:44:34.12	2010-12-07 20:44:34.12
\.


--
-- Name: deployment_records deployment_records_service_id_schema_version_supergraph_id_key; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.deployment_records
    ADD CONSTRAINT deployment_records_service_id_schema_version_supergraph_id_key UNIQUE (service_id, schema_version, supergraph_id);


--
-- Name: flyway_schema_history flyway_schema_history_pk; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.flyway_schema_history
    ADD CONSTRAINT flyway_schema_history_pk PRIMARY KEY (installed_rank);


--
-- Name: schemas schemas_pkey; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.schemas
    ADD CONSTRAINT schemas_pkey PRIMARY KEY (id);


--
-- Name: service_schema_record_activations service_schema_record_activations_service_id_schema_id_key; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.service_schema_record_activations
    ADD CONSTRAINT service_schema_record_activations_service_id_schema_id_key UNIQUE (service_id, schema_id);


--
-- Name: service_schema_records service_schema_records_pkey; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.service_schema_records
    ADD CONSTRAINT service_schema_records_pkey PRIMARY KEY (id);


--
-- Name: services services_name_key; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.services
    ADD CONSTRAINT services_name_key UNIQUE (name);


--
-- Name: services services_pkey; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.services
    ADD CONSTRAINT services_pkey PRIMARY KEY (id);


--
-- Name: supergraph_records supergraph_records_pkey; Type: CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.supergraph_records
    ADD CONSTRAINT supergraph_records_pkey PRIMARY KEY (id);


--
-- Name: flyway_schema_history_s_idx; Type: INDEX; Schema: public; Owner: graphql_schema_registry
--

CREATE INDEX flyway_schema_history_s_idx ON public.flyway_schema_history USING btree (success);


--
-- Name: deployment_records deployment_records_fk_service; Type: FK CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.deployment_records
    ADD CONSTRAINT deployment_records_fk_service FOREIGN KEY (service_id) REFERENCES public.services(id);


--
-- Name: schemas schemas_fk_service; Type: FK CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.schemas
    ADD CONSTRAINT schemas_fk_service FOREIGN KEY (service_id) REFERENCES public.services(id);


--
-- Name: service_schema_records service_schema_fk_schema; Type: FK CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.service_schema_records
    ADD CONSTRAINT service_schema_fk_schema FOREIGN KEY (schema_id) REFERENCES public.schemas(id);


--
-- Name: service_schema_records service_schema_fk_service; Type: FK CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.service_schema_records
    ADD CONSTRAINT service_schema_fk_service FOREIGN KEY (service_id) REFERENCES public.services(id);


--
-- Name: service_schema_record_activations service_schema_record_activations_fk_schema; Type: FK CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.service_schema_record_activations
    ADD CONSTRAINT service_schema_record_activations_fk_schema FOREIGN KEY (schema_id) REFERENCES public.schemas(id);


--
-- Name: service_schema_record_activations service_schema_record_activations_fk_service; Type: FK CONSTRAINT; Schema: public; Owner: graphql_schema_registry
--

ALTER TABLE ONLY public.service_schema_record_activations
    ADD CONSTRAINT service_schema_record_activations_fk_service FOREIGN KEY (service_id) REFERENCES public.services(id);


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: graphql_schema_registry
--

REVOKE ALL ON SCHEMA public FROM rdsadmin;
REVOKE ALL ON SCHEMA public FROM PUBLIC;
GRANT ALL ON SCHEMA public TO graphql_schema_registry;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

